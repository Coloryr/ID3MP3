


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ;*******************************************************
                       *************************************************
    3 00000000         ;                                                uC/OS-I
                       II
    4 00000000         ;                                          The Real-Time
                        Kernel
    5 00000000         ;
    6 00000000         ;
    7 00000000         ;                           (c) Copyright 2009-2010; Mic
                       rium, Inc.; Weston, FL
    8 00000000         ;                    All rights reserved.  Protected by 
                       international copyright laws.
    9 00000000         ;
   10 00000000         ;                                           ARM Cortex-M
                       3 Port
   11 00000000         ;
   12 00000000         ; File      : OS_CPU_A.ASM
   13 00000000         ; Version   : V3.01.2
   14 00000000         ; By        : JJL
   15 00000000         ;             BAN
   16 00000000         ;
   17 00000000         ; For       : ARMv7M Cortex-M3
   18 00000000         ; Mode      : Thumb2
   19 00000000         ; Toolchain : RealView Development Suite
   20 00000000         ;             RealView Microcontroller Development Kit (
                       MDK)
   21 00000000         ;             ARM Developer Suite (ADS)
   22 00000000         ;             Keil uVision
   23 00000000         ;*******************************************************
                       *************************************************
   24 00000000         ;
   25 00000000         
   26 00000000         ;*******************************************************
                       *************************************************
   27 00000000         ;                                          PUBLIC FUNCTI
                       ONS
   28 00000000         ;*******************************************************
                       *************************************************
   29 00000000         
   30 00000000                 IMPORT           OSRunning   ; External referenc
                                                            es
   31 00000000                 IMPORT           OSPrioCur
   32 00000000                 IMPORT           OSPrioHighRdy
   33 00000000                 IMPORT           OSTCBCurPtr
   34 00000000                 IMPORT           OSTCBHighRdyPtr
   35 00000000                 IMPORT           OSIntExit
   36 00000000                 IMPORT           OSTaskSwHook
   37 00000000                 IMPORT           OS_CPU_ExceptStkBase
   38 00000000         
   39 00000000         
   40 00000000                 EXPORT           OSStartHighRdy ; Functions decl
                                                            ared in this file
   41 00000000                 EXPORT           OSCtxSw
   42 00000000                 EXPORT           OSIntCtxSw
   43 00000000                 EXPORT           PendSV_Handler
   44 00000000         
   45 00000000         ;PAGE
   46 00000000         ;*******************************************************



ARM Macro Assembler    Page 2 


                       *************************************************
   47 00000000         ;                                               EQUATES
   48 00000000         ;*******************************************************
                       *************************************************
   49 00000000         
   50 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; ÖÐ¶Ï¿ØÖÆ¼Ä´æÆ÷
   51 00000000 E000ED22 
                       NVIC_SYSPRI4
                               EQU              0xE000ED22  ; ÏµÍ³ÓÅÏÈ¼¶¼Ä´æÆ÷(
                                                            14)
   52 00000000 0000FFFF 
                       NVIC_PENDSV_PRI
                               EQU              0xFFFF      ; PendSVÖÐ¶ÏºÍÏµÍ³½
                                                            ÚÅÄÖÐ¶Ï            
                                                                            ; P
                                                            endSV priority valu
                                                            e (lowest).
   53 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; ´¥·¢Èí¼þÖÐ¶ÏµÄÖµ.
                                                            
   54 00000000         
   55 00000000         ;*******************************************************
                       *************************************************
   56 00000000         ;                                     CODE GENERATION DI
                       RECTIVES
   57 00000000         ;*******************************************************
                       *************************************************
   58 00000000         
   59 00000000                 PRESERVE8
   60 00000000                 THUMB
   61 00000000         
   62 00000000                 AREA             CODE, CODE, READONLY
   63 00000000         
   64 00000000         
   65 00000000         ;*******************************************************
                       *************************************************
   66 00000000         ;                                         START MULTITAS
                       KING
   67 00000000         ;                                      void OSStartHighR
                       dy(void)
   68 00000000         ;
   69 00000000         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
   70 00000000         ;              the first task to start.
   71 00000000         ;
   72 00000000         ;           2) OSStartHighRdy() MUST:
   73 00000000         ;              a) Setup PendSV exception priority to low
                       est;
   74 00000000         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
   75 00000000         ;              c) Set the main stack to OS_CPU_ExceptStk
                       Base
   76 00000000         ;              d) Trigger PendSV exception;
   77 00000000         ;              e) Enable interrupts (tasks will run with
                        interrupts enabled).
   78 00000000         ;*******************************************************



ARM Macro Assembler    Page 3 


                       *************************************************
   79 00000000         
   80 00000000         OSStartHighRdy
   81 00000000 481D            LDR              R0, =NVIC_SYSPRI4 ; Set the Pen
                                                            dSV exception prior
                                                            ity
   82 00000002 F64F 71FF       LDR              R1, =NVIC_PENDSV_PRI
   83 00000006 7001            STRB             R1, [R0]
   84 00000008         
   85 00000008 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
   86 0000000A F380 8809       MSR              PSP, R0
   87 0000000E         
   88 0000000E 481B            LDR              R0, =OS_CPU_ExceptStkBase ; Ini
                                                            tialize the MSP to 
                                                            the OS_CPU_ExceptSt
                                                            kBase
   89 00000010 6801            LDR              R1, [R0]
   90 00000012 F381 8808       MSR              MSP, R1
   91 00000016         
   92 00000016 481A            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
   93 00000018 F04F 5180       LDR              R1, =NVIC_PENDSVSET
   94 0000001C 6001            STR              R1, [R0]
   95 0000001E         
   96 0000001E B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
   97 00000020         
   98 00000020         OSStartHang
   99 00000020 E7FE            B                OSStartHang ; Should never get 
                                                            here
  100 00000022         
  101 00000022         
  102 00000022         ;*******************************************************
                       *************************************************
  103 00000022         ;                       PERFORM A CONTEXT SWITCH (From t
                       ask level) - OSCtxSw()
  104 00000022         ;
  105 00000022         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  106 00000022         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  107 00000022         ;*******************************************************
                       *************************************************
  108 00000022         
  109 00000022         OSCtxSw
  110 00000022 4817            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  111 00000024 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  112 00000028 6001            STR              R1, [R0]
  113 0000002A 4770            BX               LR
  114 0000002C         
  115 0000002C         



ARM Macro Assembler    Page 4 


  116 0000002C         ;*******************************************************
                       *************************************************
  117 0000002C         ;                   PERFORM A CONTEXT SWITCH (From inter
                       rupt level) - OSIntCtxSw()
  118 0000002C         ;
  119 0000002C         ; Note(s) : 1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  120 0000002C         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  121 0000002C         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  122 0000002C         ;*******************************************************
                       *************************************************
  123 0000002C         
  124 0000002C         OSIntCtxSw
  125 0000002C 4814            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  126 0000002E F04F 5180       LDR              R1, =NVIC_PENDSVSET
  127 00000032 6001            STR              R1, [R0]
  128 00000034 4770            BX               LR
  129 00000036         
  130 00000036         ;PAGE
  131 00000036         ;*******************************************************
                       *************************************************
  132 00000036         ;                                       HANDLE PendSV EX
                       CEPTION
  133 00000036         ;                                   void OS_CPU_PendSVHa
                       ndler(void)
  134 00000036         ;
  135 00000036         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  136 00000036         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  137 00000036         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  138 00000036         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  139 00000036         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  140 00000036         ;              a thread or occurs due to an interrupt or
                        exception.
  141 00000036         ;
  142 00000036         ;           2) Pseudo-code is:
  143 00000036         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  144 00000036         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  145 00000036         ;              c) Save the process SP in its TCB, OSTCBC
                       urPtr->OSTCBStkPtr = SP;
  146 00000036         ;              d) Call OSTaskSwHook();
  147 00000036         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  148 00000036         ;              f) Get current ready thread TCB, OSTCBCur
                       Ptr = OSTCBHighRdyPtr;
  149 00000036         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdyPtr->OSTCBStkPtr;
  150 00000036         ;              h) Restore R4-R11 from new process stack;



ARM Macro Assembler    Page 5 


                       
  151 00000036         ;              i) Perform exception return which will re
                       store remaining context.
  152 00000036         ;
  153 00000036         ;           3) On entry into PendSV handler:
  154 00000036         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  155 00000036         ;                 xPSR, PC, LR, R12, R0-R3
  156 00000036         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  157 00000036         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  158 00000036         ;              d) OSTCBCurPtr      points to the OS_TCB 
                       of the task to suspend
  159 00000036         ;                 OSTCBHighRdyPtr  points to the OS_TCB 
                       of the task to resume
  160 00000036         ;
  161 00000036         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  162 00000036         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  163 00000036         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  164 00000036         ;*******************************************************
                       *************************************************
  165 00000036         
  166 00000036         PendSV_Handler
  167 00000036 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  168 00000038 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  169 0000003C B128            CBZ              R0, PendSVHandler_nosave ; Skip
                                                             register save the 
                                                            first time
  170 0000003E         
  171 0000003E 3820            SUBS             R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  172 00000040 E880 0FF0       STM              R0, {R4-R11}
  173 00000044         
  174 00000044 490F            LDR              R1, =OSTCBCurPtr ; OSTCBCurPtr-
                                                            >OSTCBStkPtr = SP;
  175 00000046 6809            LDR              R1, [R1]
  176 00000048 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  177 0000004A         
  178 0000004A         ; At this point, entire context of process has been save
                       d
  179 0000004A         PendSVHandler_nosave
  180 0000004A B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  181 0000004C 480E            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  182 0000004E 4780            BLX              R0
  183 00000050 F85D EB04       POP              {R14}
  184 00000054         
  185 00000054 480D            LDR              R0, =OSPrioCur ; OSPrioCur   = 



ARM Macro Assembler    Page 6 


                                                            OSPrioHighRdy;
  186 00000056 490E            LDR              R1, =OSPrioHighRdy
  187 00000058 780A            LDRB             R2, [R1]
  188 0000005A 7002            STRB             R2, [R0]
  189 0000005C         
  190 0000005C 4809            LDR              R0, =OSTCBCurPtr ; OSTCBCurPtr 
                                                            = OSTCBHighRdyPtr;
  191 0000005E 490D            LDR              R1, =OSTCBHighRdyPtr
  192 00000060 680A            LDR              R2, [R1]
  193 00000062 6002            STR              R2, [R0]
  194 00000064         
  195 00000064 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            RdyPtr->StkPtr;
  196 00000066 E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  197 0000006A 3020            ADDS             R0, R0, #0x20
  198 0000006C F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  199 00000070 F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  200 00000074 B662            CPSIE            I
  201 00000076 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  202 00000078         
  203 00000078                 END
              E000ED22 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=..\obj\os_cpu_a.d -o..\obj\os_cpu_a.o -I.\RTE\_Template -ID:\Keil_
v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_
DFP\2.3.0\Device\Include --predefine="__UVISION_VERSION SETA 524" --predefine="
_RTE_ SETA 1" --predefine="STM32F10X_HD SETA 1" --list=.\os_cpu_a.lst ..\UCOSII
I\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView\os_cpu_a.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CODE 00000000

Symbol: CODE
   Definitions
      At line 62 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealVi
ew\os_cpu_a.s
   Uses
      None
Comment: CODE unused
OSCtxSw 00000022

Symbol: OSCtxSw
   Definitions
      At line 109 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealV
iew\os_cpu_a.s
   Uses
      At line 41 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealVi
ew\os_cpu_a.s
Comment: OSCtxSw used once
OSIntCtxSw 0000002C

Symbol: OSIntCtxSw
   Definitions
      At line 124 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealV
iew\os_cpu_a.s
   Uses
      At line 42 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealVi
ew\os_cpu_a.s
Comment: OSIntCtxSw used once
OSStartHang 00000020

Symbol: OSStartHang
   Definitions
      At line 98 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealVi
ew\os_cpu_a.s
   Uses
      At line 99 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealVi
ew\os_cpu_a.s
Comment: OSStartHang used once
OSStartHighRdy 00000000

Symbol: OSStartHighRdy
   Definitions
      At line 80 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealVi
ew\os_cpu_a.s
   Uses
      At line 40 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealVi
ew\os_cpu_a.s
Comment: OSStartHighRdy used once
PendSVHandler_nosave 0000004A

Symbol: PendSVHandler_nosave
   Definitions
      At line 179 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealV
iew\os_cpu_a.s
   Uses
      At line 169 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealV
iew\os_cpu_a.s
Comment: PendSVHandler_nosave used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

PendSV_Handler 00000036

Symbol: PendSV_Handler
   Definitions
      At line 166 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealV
iew\os_cpu_a.s
   Uses
      At line 43 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealVi
ew\os_cpu_a.s
Comment: PendSV_Handler used once
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 50 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealVi
ew\os_cpu_a.s
   Uses
      At line 92 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealVi
ew\os_cpu_a.s
      At line 110 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealV
iew\os_cpu_a.s
      At line 125 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealV
iew\os_cpu_a.s

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 53 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealVi
ew\os_cpu_a.s
   Uses
      At line 93 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealVi
ew\os_cpu_a.s
      At line 111 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealV
iew\os_cpu_a.s
      At line 126 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealV
iew\os_cpu_a.s

NVIC_PENDSV_PRI 0000FFFF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 52 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealVi
ew\os_cpu_a.s
   Uses
      At line 82 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealVi
ew\os_cpu_a.s
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI4 E000ED22

Symbol: NVIC_SYSPRI4
   Definitions
      At line 51 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealVi
ew\os_cpu_a.s
   Uses
      At line 81 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealVi
ew\os_cpu_a.s
Comment: NVIC_SYSPRI4 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 35 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealVi
ew\os_cpu_a.s
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 31 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealVi
ew\os_cpu_a.s
   Uses
      At line 185 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealV
iew\os_cpu_a.s
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 32 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealVi
ew\os_cpu_a.s
   Uses
      At line 186 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealV
iew\os_cpu_a.s
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 30 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealVi
ew\os_cpu_a.s
   Uses
      None
Comment: OSRunning unused
OSTCBCurPtr 00000000

Symbol: OSTCBCurPtr
   Definitions
      At line 33 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealVi
ew\os_cpu_a.s
   Uses
      At line 174 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealV
iew\os_cpu_a.s
      At line 190 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealV
iew\os_cpu_a.s

OSTCBHighRdyPtr 00000000

Symbol: OSTCBHighRdyPtr
   Definitions
      At line 34 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealVi
ew\os_cpu_a.s
   Uses
      At line 191 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealV
iew\os_cpu_a.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Comment: OSTCBHighRdyPtr used once
OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 36 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealVi
ew\os_cpu_a.s
   Uses
      At line 181 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealV
iew\os_cpu_a.s
Comment: OSTaskSwHook used once
OS_CPU_ExceptStkBase 00000000

Symbol: OS_CPU_ExceptStkBase
   Definitions
      At line 37 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealVi
ew\os_cpu_a.s
   Uses
      At line 88 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealVi
ew\os_cpu_a.s
Comment: OS_CPU_ExceptStkBase used once
8 symbols
354 symbols in table
