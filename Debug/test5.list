
test5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001237c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002e59c  0801256c  0801256c  0002256c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08040b08  08040b08  000601b0  2**0
                  CONTENTS
  4 .ARM          00000000  08040b08  08040b08  000601b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08040b08  08040b08  000601b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08040b08  08040b08  00050b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08040b0c  08040b0c  00050b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  08040b10  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002348  200001b0  08040cc0  000601b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  200024f8  08040cc0  000624f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000601b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038d47  00000000  00000000  000601d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007e71  00000000  00000000  00098f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002328  00000000  00000000  000a0d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fe0  00000000  00000000  000a30c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026941  00000000  00000000  000a50a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030ea6  00000000  00000000  000cb9e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc9dd  00000000  00000000  000fc887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b9264  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b54  00000000  00000000  001b92b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200001b0 	.word	0x200001b0
 800020c:	00000000 	.word	0x00000000
 8000210:	08012554 	.word	0x08012554

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200001b4 	.word	0x200001b4
 800022c:	08012554 	.word	0x08012554

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <__aeabi_drsub>:
 8000244:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000248:	e002      	b.n	8000250 <__adddf3>
 800024a:	bf00      	nop

0800024c <__aeabi_dsub>:
 800024c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000250 <__adddf3>:
 8000250:	b530      	push	{r4, r5, lr}
 8000252:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000256:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025a:	ea94 0f05 	teq	r4, r5
 800025e:	bf08      	it	eq
 8000260:	ea90 0f02 	teqeq	r0, r2
 8000264:	bf1f      	itttt	ne
 8000266:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000272:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000276:	f000 80e2 	beq.w	800043e <__adddf3+0x1ee>
 800027a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000282:	bfb8      	it	lt
 8000284:	426d      	neglt	r5, r5
 8000286:	dd0c      	ble.n	80002a2 <__adddf3+0x52>
 8000288:	442c      	add	r4, r5
 800028a:	ea80 0202 	eor.w	r2, r0, r2
 800028e:	ea81 0303 	eor.w	r3, r1, r3
 8000292:	ea82 0000 	eor.w	r0, r2, r0
 8000296:	ea83 0101 	eor.w	r1, r3, r1
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	2d36      	cmp	r5, #54	; 0x36
 80002a4:	bf88      	it	hi
 80002a6:	bd30      	pophi	{r4, r5, pc}
 80002a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x70>
 80002ba:	4240      	negs	r0, r0
 80002bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002cc:	d002      	beq.n	80002d4 <__adddf3+0x84>
 80002ce:	4252      	negs	r2, r2
 80002d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d4:	ea94 0f05 	teq	r4, r5
 80002d8:	f000 80a7 	beq.w	800042a <__adddf3+0x1da>
 80002dc:	f1a4 0401 	sub.w	r4, r4, #1
 80002e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e4:	db0d      	blt.n	8000302 <__adddf3+0xb2>
 80002e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ea:	fa22 f205 	lsr.w	r2, r2, r5
 80002ee:	1880      	adds	r0, r0, r2
 80002f0:	f141 0100 	adc.w	r1, r1, #0
 80002f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f8:	1880      	adds	r0, r0, r2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	4159      	adcs	r1, r3
 8000300:	e00e      	b.n	8000320 <__adddf3+0xd0>
 8000302:	f1a5 0520 	sub.w	r5, r5, #32
 8000306:	f10e 0e20 	add.w	lr, lr, #32
 800030a:	2a01      	cmp	r2, #1
 800030c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000310:	bf28      	it	cs
 8000312:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000316:	fa43 f305 	asr.w	r3, r3, r5
 800031a:	18c0      	adds	r0, r0, r3
 800031c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000324:	d507      	bpl.n	8000336 <__adddf3+0xe6>
 8000326:	f04f 0e00 	mov.w	lr, #0
 800032a:	f1dc 0c00 	rsbs	ip, ip, #0
 800032e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000332:	eb6e 0101 	sbc.w	r1, lr, r1
 8000336:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800033a:	d31b      	bcc.n	8000374 <__adddf3+0x124>
 800033c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000340:	d30c      	bcc.n	800035c <__adddf3+0x10c>
 8000342:	0849      	lsrs	r1, r1, #1
 8000344:	ea5f 0030 	movs.w	r0, r0, rrx
 8000348:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800034c:	f104 0401 	add.w	r4, r4, #1
 8000350:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000354:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000358:	f080 809a 	bcs.w	8000490 <__adddf3+0x240>
 800035c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000360:	bf08      	it	eq
 8000362:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000366:	f150 0000 	adcs.w	r0, r0, #0
 800036a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036e:	ea41 0105 	orr.w	r1, r1, r5
 8000372:	bd30      	pop	{r4, r5, pc}
 8000374:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000378:	4140      	adcs	r0, r0
 800037a:	eb41 0101 	adc.w	r1, r1, r1
 800037e:	3c01      	subs	r4, #1
 8000380:	bf28      	it	cs
 8000382:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000386:	d2e9      	bcs.n	800035c <__adddf3+0x10c>
 8000388:	f091 0f00 	teq	r1, #0
 800038c:	bf04      	itt	eq
 800038e:	4601      	moveq	r1, r0
 8000390:	2000      	moveq	r0, #0
 8000392:	fab1 f381 	clz	r3, r1
 8000396:	bf08      	it	eq
 8000398:	3320      	addeq	r3, #32
 800039a:	f1a3 030b 	sub.w	r3, r3, #11
 800039e:	f1b3 0220 	subs.w	r2, r3, #32
 80003a2:	da0c      	bge.n	80003be <__adddf3+0x16e>
 80003a4:	320c      	adds	r2, #12
 80003a6:	dd08      	ble.n	80003ba <__adddf3+0x16a>
 80003a8:	f102 0c14 	add.w	ip, r2, #20
 80003ac:	f1c2 020c 	rsb	r2, r2, #12
 80003b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b4:	fa21 f102 	lsr.w	r1, r1, r2
 80003b8:	e00c      	b.n	80003d4 <__adddf3+0x184>
 80003ba:	f102 0214 	add.w	r2, r2, #20
 80003be:	bfd8      	it	le
 80003c0:	f1c2 0c20 	rsble	ip, r2, #32
 80003c4:	fa01 f102 	lsl.w	r1, r1, r2
 80003c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003cc:	bfdc      	itt	le
 80003ce:	ea41 010c 	orrle.w	r1, r1, ip
 80003d2:	4090      	lslle	r0, r2
 80003d4:	1ae4      	subs	r4, r4, r3
 80003d6:	bfa2      	ittt	ge
 80003d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003dc:	4329      	orrge	r1, r5
 80003de:	bd30      	popge	{r4, r5, pc}
 80003e0:	ea6f 0404 	mvn.w	r4, r4
 80003e4:	3c1f      	subs	r4, #31
 80003e6:	da1c      	bge.n	8000422 <__adddf3+0x1d2>
 80003e8:	340c      	adds	r4, #12
 80003ea:	dc0e      	bgt.n	800040a <__adddf3+0x1ba>
 80003ec:	f104 0414 	add.w	r4, r4, #20
 80003f0:	f1c4 0220 	rsb	r2, r4, #32
 80003f4:	fa20 f004 	lsr.w	r0, r0, r4
 80003f8:	fa01 f302 	lsl.w	r3, r1, r2
 80003fc:	ea40 0003 	orr.w	r0, r0, r3
 8000400:	fa21 f304 	lsr.w	r3, r1, r4
 8000404:	ea45 0103 	orr.w	r1, r5, r3
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	f1c4 040c 	rsb	r4, r4, #12
 800040e:	f1c4 0220 	rsb	r2, r4, #32
 8000412:	fa20 f002 	lsr.w	r0, r0, r2
 8000416:	fa01 f304 	lsl.w	r3, r1, r4
 800041a:	ea40 0003 	orr.w	r0, r0, r3
 800041e:	4629      	mov	r1, r5
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	fa21 f004 	lsr.w	r0, r1, r4
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f094 0f00 	teq	r4, #0
 800042e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000432:	bf06      	itte	eq
 8000434:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000438:	3401      	addeq	r4, #1
 800043a:	3d01      	subne	r5, #1
 800043c:	e74e      	b.n	80002dc <__adddf3+0x8c>
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf18      	it	ne
 8000444:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000448:	d029      	beq.n	800049e <__adddf3+0x24e>
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	d005      	beq.n	8000462 <__adddf3+0x212>
 8000456:	ea54 0c00 	orrs.w	ip, r4, r0
 800045a:	bf04      	itt	eq
 800045c:	4619      	moveq	r1, r3
 800045e:	4610      	moveq	r0, r2
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea91 0f03 	teq	r1, r3
 8000466:	bf1e      	ittt	ne
 8000468:	2100      	movne	r1, #0
 800046a:	2000      	movne	r0, #0
 800046c:	bd30      	popne	{r4, r5, pc}
 800046e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000472:	d105      	bne.n	8000480 <__adddf3+0x230>
 8000474:	0040      	lsls	r0, r0, #1
 8000476:	4149      	adcs	r1, r1
 8000478:	bf28      	it	cs
 800047a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047e:	bd30      	pop	{r4, r5, pc}
 8000480:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000484:	bf3c      	itt	cc
 8000486:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800048a:	bd30      	popcc	{r4, r5, pc}
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000494:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000498:	f04f 0000 	mov.w	r0, #0
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a2:	bf1a      	itte	ne
 80004a4:	4619      	movne	r1, r3
 80004a6:	4610      	movne	r0, r2
 80004a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004ac:	bf1c      	itt	ne
 80004ae:	460b      	movne	r3, r1
 80004b0:	4602      	movne	r2, r0
 80004b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b6:	bf06      	itte	eq
 80004b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004bc:	ea91 0f03 	teqeq	r1, r3
 80004c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	bf00      	nop

080004c8 <__aeabi_ui2d>:
 80004c8:	f090 0f00 	teq	r0, #0
 80004cc:	bf04      	itt	eq
 80004ce:	2100      	moveq	r1, #0
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004dc:	f04f 0500 	mov.w	r5, #0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e750      	b.n	8000388 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_i2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000500:	bf48      	it	mi
 8000502:	4240      	negmi	r0, r0
 8000504:	f04f 0100 	mov.w	r1, #0
 8000508:	e73e      	b.n	8000388 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_f2d>:
 800050c:	0042      	lsls	r2, r0, #1
 800050e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000512:	ea4f 0131 	mov.w	r1, r1, rrx
 8000516:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051a:	bf1f      	itttt	ne
 800051c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000520:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000524:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000528:	4770      	bxne	lr
 800052a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052e:	bf08      	it	eq
 8000530:	4770      	bxeq	lr
 8000532:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000536:	bf04      	itt	eq
 8000538:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000548:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800054c:	e71c      	b.n	8000388 <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_ul2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f04f 0500 	mov.w	r5, #0
 800055e:	e00a      	b.n	8000576 <__aeabi_l2d+0x16>

08000560 <__aeabi_l2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056e:	d502      	bpl.n	8000576 <__aeabi_l2d+0x16>
 8000570:	4240      	negs	r0, r0
 8000572:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000576:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000582:	f43f aed8 	beq.w	8000336 <__adddf3+0xe6>
 8000586:	f04f 0203 	mov.w	r2, #3
 800058a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058e:	bf18      	it	ne
 8000590:	3203      	addne	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059e:	f1c2 0320 	rsb	r3, r2, #32
 80005a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ae:	ea40 000e 	orr.w	r0, r0, lr
 80005b2:	fa21 f102 	lsr.w	r1, r1, r2
 80005b6:	4414      	add	r4, r2
 80005b8:	e6bd      	b.n	8000336 <__adddf3+0xe6>
 80005ba:	bf00      	nop

080005bc <__aeabi_dmul>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ca:	bf1d      	ittte	ne
 80005cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d0:	ea94 0f0c 	teqne	r4, ip
 80005d4:	ea95 0f0c 	teqne	r5, ip
 80005d8:	f000 f8de 	bleq	8000798 <__aeabi_dmul+0x1dc>
 80005dc:	442c      	add	r4, r5
 80005de:	ea81 0603 	eor.w	r6, r1, r3
 80005e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ee:	bf18      	it	ne
 80005f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005fc:	d038      	beq.n	8000670 <__aeabi_dmul+0xb4>
 80005fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8000602:	f04f 0500 	mov.w	r5, #0
 8000606:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000612:	f04f 0600 	mov.w	r6, #0
 8000616:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061a:	f09c 0f00 	teq	ip, #0
 800061e:	bf18      	it	ne
 8000620:	f04e 0e01 	orrne.w	lr, lr, #1
 8000624:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000628:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800062c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000630:	d204      	bcs.n	800063c <__aeabi_dmul+0x80>
 8000632:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000636:	416d      	adcs	r5, r5
 8000638:	eb46 0606 	adc.w	r6, r6, r6
 800063c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000640:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000644:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000648:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800064c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000650:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000654:	bf88      	it	hi
 8000656:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800065a:	d81e      	bhi.n	800069a <__aeabi_dmul+0xde>
 800065c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000660:	bf08      	it	eq
 8000662:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000666:	f150 0000 	adcs.w	r0, r0, #0
 800066a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000674:	ea46 0101 	orr.w	r1, r6, r1
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	ea81 0103 	eor.w	r1, r1, r3
 8000680:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000684:	bfc2      	ittt	gt
 8000686:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068e:	bd70      	popgt	{r4, r5, r6, pc}
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f04f 0e00 	mov.w	lr, #0
 8000698:	3c01      	subs	r4, #1
 800069a:	f300 80ab 	bgt.w	80007f4 <__aeabi_dmul+0x238>
 800069e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006a2:	bfde      	ittt	le
 80006a4:	2000      	movle	r0, #0
 80006a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006aa:	bd70      	pople	{r4, r5, r6, pc}
 80006ac:	f1c4 0400 	rsb	r4, r4, #0
 80006b0:	3c20      	subs	r4, #32
 80006b2:	da35      	bge.n	8000720 <__aeabi_dmul+0x164>
 80006b4:	340c      	adds	r4, #12
 80006b6:	dc1b      	bgt.n	80006f0 <__aeabi_dmul+0x134>
 80006b8:	f104 0414 	add.w	r4, r4, #20
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f305 	lsl.w	r3, r0, r5
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f205 	lsl.w	r2, r1, r5
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	fa21 f604 	lsr.w	r6, r1, r4
 80006e0:	eb42 0106 	adc.w	r1, r2, r6
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f1c4 040c 	rsb	r4, r4, #12
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f304 	lsl.w	r3, r0, r4
 80006fc:	fa20 f005 	lsr.w	r0, r0, r5
 8000700:	fa01 f204 	lsl.w	r2, r1, r4
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	f141 0100 	adc.w	r1, r1, #0
 8000714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000718:	bf08      	it	eq
 800071a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f205 	lsl.w	r2, r0, r5
 8000728:	ea4e 0e02 	orr.w	lr, lr, r2
 800072c:	fa20 f304 	lsr.w	r3, r0, r4
 8000730:	fa01 f205 	lsl.w	r2, r1, r5
 8000734:	ea43 0302 	orr.w	r3, r3, r2
 8000738:	fa21 f004 	lsr.w	r0, r1, r4
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	fa21 f204 	lsr.w	r2, r1, r4
 8000744:	ea20 0002 	bic.w	r0, r0, r2
 8000748:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800074c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000750:	bf08      	it	eq
 8000752:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	f094 0f00 	teq	r4, #0
 800075c:	d10f      	bne.n	800077e <__aeabi_dmul+0x1c2>
 800075e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000762:	0040      	lsls	r0, r0, #1
 8000764:	eb41 0101 	adc.w	r1, r1, r1
 8000768:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800076c:	bf08      	it	eq
 800076e:	3c01      	subeq	r4, #1
 8000770:	d0f7      	beq.n	8000762 <__aeabi_dmul+0x1a6>
 8000772:	ea41 0106 	orr.w	r1, r1, r6
 8000776:	f095 0f00 	teq	r5, #0
 800077a:	bf18      	it	ne
 800077c:	4770      	bxne	lr
 800077e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000782:	0052      	lsls	r2, r2, #1
 8000784:	eb43 0303 	adc.w	r3, r3, r3
 8000788:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3d01      	subeq	r5, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1c6>
 8000792:	ea43 0306 	orr.w	r3, r3, r6
 8000796:	4770      	bx	lr
 8000798:	ea94 0f0c 	teq	r4, ip
 800079c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a0:	bf18      	it	ne
 80007a2:	ea95 0f0c 	teqne	r5, ip
 80007a6:	d00c      	beq.n	80007c2 <__aeabi_dmul+0x206>
 80007a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ac:	bf18      	it	ne
 80007ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b2:	d1d1      	bne.n	8000758 <__aeabi_dmul+0x19c>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c6:	bf06      	itte	eq
 80007c8:	4610      	moveq	r0, r2
 80007ca:	4619      	moveq	r1, r3
 80007cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d0:	d019      	beq.n	8000806 <__aeabi_dmul+0x24a>
 80007d2:	ea94 0f0c 	teq	r4, ip
 80007d6:	d102      	bne.n	80007de <__aeabi_dmul+0x222>
 80007d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007dc:	d113      	bne.n	8000806 <__aeabi_dmul+0x24a>
 80007de:	ea95 0f0c 	teq	r5, ip
 80007e2:	d105      	bne.n	80007f0 <__aeabi_dmul+0x234>
 80007e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e8:	bf1c      	itt	ne
 80007ea:	4610      	movne	r0, r2
 80007ec:	4619      	movne	r1, r3
 80007ee:	d10a      	bne.n	8000806 <__aeabi_dmul+0x24a>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080e:	bd70      	pop	{r4, r5, r6, pc}

08000810 <__aeabi_ddiv>:
 8000810:	b570      	push	{r4, r5, r6, lr}
 8000812:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000816:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800081a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081e:	bf1d      	ittte	ne
 8000820:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000824:	ea94 0f0c 	teqne	r4, ip
 8000828:	ea95 0f0c 	teqne	r5, ip
 800082c:	f000 f8a7 	bleq	800097e <__aeabi_ddiv+0x16e>
 8000830:	eba4 0405 	sub.w	r4, r4, r5
 8000834:	ea81 0e03 	eor.w	lr, r1, r3
 8000838:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800083c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000840:	f000 8088 	beq.w	8000954 <__aeabi_ddiv+0x144>
 8000844:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000848:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800084c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000850:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000854:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000858:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800085c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000860:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000864:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000868:	429d      	cmp	r5, r3
 800086a:	bf08      	it	eq
 800086c:	4296      	cmpeq	r6, r2
 800086e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000872:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000876:	d202      	bcs.n	800087e <__aeabi_ddiv+0x6e>
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	1ab6      	subs	r6, r6, r2
 8000880:	eb65 0503 	sbc.w	r5, r5, r3
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	ebb6 0e02 	subs.w	lr, r6, r2
 80008de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e2:	bf22      	ittt	cs
 80008e4:	1ab6      	subcs	r6, r6, r2
 80008e6:	4675      	movcs	r5, lr
 80008e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f0:	d018      	beq.n	8000924 <__aeabi_ddiv+0x114>
 80008f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000902:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000906:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090e:	d1c0      	bne.n	8000892 <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	d10b      	bne.n	800092e <__aeabi_ddiv+0x11e>
 8000916:	ea41 0100 	orr.w	r1, r1, r0
 800091a:	f04f 0000 	mov.w	r0, #0
 800091e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000922:	e7b6      	b.n	8000892 <__aeabi_ddiv+0x82>
 8000924:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000928:	bf04      	itt	eq
 800092a:	4301      	orreq	r1, r0
 800092c:	2000      	moveq	r0, #0
 800092e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000932:	bf88      	it	hi
 8000934:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000938:	f63f aeaf 	bhi.w	800069a <__aeabi_dmul+0xde>
 800093c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000940:	bf04      	itt	eq
 8000942:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000946:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094a:	f150 0000 	adcs.w	r0, r0, #0
 800094e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000952:	bd70      	pop	{r4, r5, r6, pc}
 8000954:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000958:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800095c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000960:	bfc2      	ittt	gt
 8000962:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000966:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096a:	bd70      	popgt	{r4, r5, r6, pc}
 800096c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000970:	f04f 0e00 	mov.w	lr, #0
 8000974:	3c01      	subs	r4, #1
 8000976:	e690      	b.n	800069a <__aeabi_dmul+0xde>
 8000978:	ea45 0e06 	orr.w	lr, r5, r6
 800097c:	e68d      	b.n	800069a <__aeabi_dmul+0xde>
 800097e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000982:	ea94 0f0c 	teq	r4, ip
 8000986:	bf08      	it	eq
 8000988:	ea95 0f0c 	teqeq	r5, ip
 800098c:	f43f af3b 	beq.w	8000806 <__aeabi_dmul+0x24a>
 8000990:	ea94 0f0c 	teq	r4, ip
 8000994:	d10a      	bne.n	80009ac <__aeabi_ddiv+0x19c>
 8000996:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099a:	f47f af34 	bne.w	8000806 <__aeabi_dmul+0x24a>
 800099e:	ea95 0f0c 	teq	r5, ip
 80009a2:	f47f af25 	bne.w	80007f0 <__aeabi_dmul+0x234>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e72c      	b.n	8000806 <__aeabi_dmul+0x24a>
 80009ac:	ea95 0f0c 	teq	r5, ip
 80009b0:	d106      	bne.n	80009c0 <__aeabi_ddiv+0x1b0>
 80009b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b6:	f43f aefd 	beq.w	80007b4 <__aeabi_dmul+0x1f8>
 80009ba:	4610      	mov	r0, r2
 80009bc:	4619      	mov	r1, r3
 80009be:	e722      	b.n	8000806 <__aeabi_dmul+0x24a>
 80009c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c4:	bf18      	it	ne
 80009c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ca:	f47f aec5 	bne.w	8000758 <__aeabi_dmul+0x19c>
 80009ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d2:	f47f af0d 	bne.w	80007f0 <__aeabi_dmul+0x234>
 80009d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009da:	f47f aeeb 	bne.w	80007b4 <__aeabi_dmul+0x1f8>
 80009de:	e712      	b.n	8000806 <__aeabi_dmul+0x24a>

080009e0 <__aeabi_d2iz>:
 80009e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009e8:	d215      	bcs.n	8000a16 <__aeabi_d2iz+0x36>
 80009ea:	d511      	bpl.n	8000a10 <__aeabi_d2iz+0x30>
 80009ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009f4:	d912      	bls.n	8000a1c <__aeabi_d2iz+0x3c>
 80009f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a06:	fa23 f002 	lsr.w	r0, r3, r2
 8000a0a:	bf18      	it	ne
 8000a0c:	4240      	negne	r0, r0
 8000a0e:	4770      	bx	lr
 8000a10:	f04f 0000 	mov.w	r0, #0
 8000a14:	4770      	bx	lr
 8000a16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a1a:	d105      	bne.n	8000a28 <__aeabi_d2iz+0x48>
 8000a1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a20:	bf08      	it	eq
 8000a22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a26:	4770      	bx	lr
 8000a28:	f04f 0000 	mov.w	r0, #0
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_frsub>:
 8000a30:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a34:	e002      	b.n	8000a3c <__addsf3>
 8000a36:	bf00      	nop

08000a38 <__aeabi_fsub>:
 8000a38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a3c <__addsf3>:
 8000a3c:	0042      	lsls	r2, r0, #1
 8000a3e:	bf1f      	itttt	ne
 8000a40:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a44:	ea92 0f03 	teqne	r2, r3
 8000a48:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a4c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a50:	d06a      	beq.n	8000b28 <__addsf3+0xec>
 8000a52:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a56:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a5a:	bfc1      	itttt	gt
 8000a5c:	18d2      	addgt	r2, r2, r3
 8000a5e:	4041      	eorgt	r1, r0
 8000a60:	4048      	eorgt	r0, r1
 8000a62:	4041      	eorgt	r1, r0
 8000a64:	bfb8      	it	lt
 8000a66:	425b      	neglt	r3, r3
 8000a68:	2b19      	cmp	r3, #25
 8000a6a:	bf88      	it	hi
 8000a6c:	4770      	bxhi	lr
 8000a6e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a7a:	bf18      	it	ne
 8000a7c:	4240      	negne	r0, r0
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a82:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a86:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a8a:	bf18      	it	ne
 8000a8c:	4249      	negne	r1, r1
 8000a8e:	ea92 0f03 	teq	r2, r3
 8000a92:	d03f      	beq.n	8000b14 <__addsf3+0xd8>
 8000a94:	f1a2 0201 	sub.w	r2, r2, #1
 8000a98:	fa41 fc03 	asr.w	ip, r1, r3
 8000a9c:	eb10 000c 	adds.w	r0, r0, ip
 8000aa0:	f1c3 0320 	rsb	r3, r3, #32
 8000aa4:	fa01 f103 	lsl.w	r1, r1, r3
 8000aa8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aac:	d502      	bpl.n	8000ab4 <__addsf3+0x78>
 8000aae:	4249      	negs	r1, r1
 8000ab0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ab4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ab8:	d313      	bcc.n	8000ae2 <__addsf3+0xa6>
 8000aba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000abe:	d306      	bcc.n	8000ace <__addsf3+0x92>
 8000ac0:	0840      	lsrs	r0, r0, #1
 8000ac2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ac6:	f102 0201 	add.w	r2, r2, #1
 8000aca:	2afe      	cmp	r2, #254	; 0xfe
 8000acc:	d251      	bcs.n	8000b72 <__addsf3+0x136>
 8000ace:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ad2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ad6:	bf08      	it	eq
 8000ad8:	f020 0001 	biceq.w	r0, r0, #1
 8000adc:	ea40 0003 	orr.w	r0, r0, r3
 8000ae0:	4770      	bx	lr
 8000ae2:	0049      	lsls	r1, r1, #1
 8000ae4:	eb40 0000 	adc.w	r0, r0, r0
 8000ae8:	3a01      	subs	r2, #1
 8000aea:	bf28      	it	cs
 8000aec:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000af0:	d2ed      	bcs.n	8000ace <__addsf3+0x92>
 8000af2:	fab0 fc80 	clz	ip, r0
 8000af6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000afa:	ebb2 020c 	subs.w	r2, r2, ip
 8000afe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b02:	bfaa      	itet	ge
 8000b04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b08:	4252      	neglt	r2, r2
 8000b0a:	4318      	orrge	r0, r3
 8000b0c:	bfbc      	itt	lt
 8000b0e:	40d0      	lsrlt	r0, r2
 8000b10:	4318      	orrlt	r0, r3
 8000b12:	4770      	bx	lr
 8000b14:	f092 0f00 	teq	r2, #0
 8000b18:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b1c:	bf06      	itte	eq
 8000b1e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b22:	3201      	addeq	r2, #1
 8000b24:	3b01      	subne	r3, #1
 8000b26:	e7b5      	b.n	8000a94 <__addsf3+0x58>
 8000b28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b30:	bf18      	it	ne
 8000b32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b36:	d021      	beq.n	8000b7c <__addsf3+0x140>
 8000b38:	ea92 0f03 	teq	r2, r3
 8000b3c:	d004      	beq.n	8000b48 <__addsf3+0x10c>
 8000b3e:	f092 0f00 	teq	r2, #0
 8000b42:	bf08      	it	eq
 8000b44:	4608      	moveq	r0, r1
 8000b46:	4770      	bx	lr
 8000b48:	ea90 0f01 	teq	r0, r1
 8000b4c:	bf1c      	itt	ne
 8000b4e:	2000      	movne	r0, #0
 8000b50:	4770      	bxne	lr
 8000b52:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b56:	d104      	bne.n	8000b62 <__addsf3+0x126>
 8000b58:	0040      	lsls	r0, r0, #1
 8000b5a:	bf28      	it	cs
 8000b5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b66:	bf3c      	itt	cc
 8000b68:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b6c:	4770      	bxcc	lr
 8000b6e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b72:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7a:	4770      	bx	lr
 8000b7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b80:	bf16      	itet	ne
 8000b82:	4608      	movne	r0, r1
 8000b84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b88:	4601      	movne	r1, r0
 8000b8a:	0242      	lsls	r2, r0, #9
 8000b8c:	bf06      	itte	eq
 8000b8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b92:	ea90 0f01 	teqeq	r0, r1
 8000b96:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_ui2f>:
 8000b9c:	f04f 0300 	mov.w	r3, #0
 8000ba0:	e004      	b.n	8000bac <__aeabi_i2f+0x8>
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_i2f>:
 8000ba4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ba8:	bf48      	it	mi
 8000baa:	4240      	negmi	r0, r0
 8000bac:	ea5f 0c00 	movs.w	ip, r0
 8000bb0:	bf08      	it	eq
 8000bb2:	4770      	bxeq	lr
 8000bb4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bb8:	4601      	mov	r1, r0
 8000bba:	f04f 0000 	mov.w	r0, #0
 8000bbe:	e01c      	b.n	8000bfa <__aeabi_l2f+0x2a>

08000bc0 <__aeabi_ul2f>:
 8000bc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000bc4:	bf08      	it	eq
 8000bc6:	4770      	bxeq	lr
 8000bc8:	f04f 0300 	mov.w	r3, #0
 8000bcc:	e00a      	b.n	8000be4 <__aeabi_l2f+0x14>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_l2f>:
 8000bd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000bd4:	bf08      	it	eq
 8000bd6:	4770      	bxeq	lr
 8000bd8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__aeabi_l2f+0x14>
 8000bde:	4240      	negs	r0, r0
 8000be0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be4:	ea5f 0c01 	movs.w	ip, r1
 8000be8:	bf02      	ittt	eq
 8000bea:	4684      	moveq	ip, r0
 8000bec:	4601      	moveq	r1, r0
 8000bee:	2000      	moveq	r0, #0
 8000bf0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bf4:	bf08      	it	eq
 8000bf6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bfe:	fabc f28c 	clz	r2, ip
 8000c02:	3a08      	subs	r2, #8
 8000c04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c08:	db10      	blt.n	8000c2c <__aeabi_l2f+0x5c>
 8000c0a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c0e:	4463      	add	r3, ip
 8000c10:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c14:	f1c2 0220 	rsb	r2, r2, #32
 8000c18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c20:	eb43 0002 	adc.w	r0, r3, r2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f102 0220 	add.w	r2, r2, #32
 8000c30:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c34:	f1c2 0220 	rsb	r2, r2, #32
 8000c38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c3c:	fa21 f202 	lsr.w	r2, r1, r2
 8000c40:	eb43 0002 	adc.w	r0, r3, r2
 8000c44:	bf08      	it	eq
 8000c46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c4a:	4770      	bx	lr

08000c4c <__aeabi_fmul>:
 8000c4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c54:	bf1e      	ittt	ne
 8000c56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c5a:	ea92 0f0c 	teqne	r2, ip
 8000c5e:	ea93 0f0c 	teqne	r3, ip
 8000c62:	d06f      	beq.n	8000d44 <__aeabi_fmul+0xf8>
 8000c64:	441a      	add	r2, r3
 8000c66:	ea80 0c01 	eor.w	ip, r0, r1
 8000c6a:	0240      	lsls	r0, r0, #9
 8000c6c:	bf18      	it	ne
 8000c6e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c72:	d01e      	beq.n	8000cb2 <__aeabi_fmul+0x66>
 8000c74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c78:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c7c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c80:	fba0 3101 	umull	r3, r1, r0, r1
 8000c84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c88:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c8c:	bf3e      	ittt	cc
 8000c8e:	0049      	lslcc	r1, r1, #1
 8000c90:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c94:	005b      	lslcc	r3, r3, #1
 8000c96:	ea40 0001 	orr.w	r0, r0, r1
 8000c9a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c9e:	2afd      	cmp	r2, #253	; 0xfd
 8000ca0:	d81d      	bhi.n	8000cde <__aeabi_fmul+0x92>
 8000ca2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ca6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000caa:	bf08      	it	eq
 8000cac:	f020 0001 	biceq.w	r0, r0, #1
 8000cb0:	4770      	bx	lr
 8000cb2:	f090 0f00 	teq	r0, #0
 8000cb6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cba:	bf08      	it	eq
 8000cbc:	0249      	lsleq	r1, r1, #9
 8000cbe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cc2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cc6:	3a7f      	subs	r2, #127	; 0x7f
 8000cc8:	bfc2      	ittt	gt
 8000cca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cd2:	4770      	bxgt	lr
 8000cd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	3a01      	subs	r2, #1
 8000cde:	dc5d      	bgt.n	8000d9c <__aeabi_fmul+0x150>
 8000ce0:	f112 0f19 	cmn.w	r2, #25
 8000ce4:	bfdc      	itt	le
 8000ce6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cea:	4770      	bxle	lr
 8000cec:	f1c2 0200 	rsb	r2, r2, #0
 8000cf0:	0041      	lsls	r1, r0, #1
 8000cf2:	fa21 f102 	lsr.w	r1, r1, r2
 8000cf6:	f1c2 0220 	rsb	r2, r2, #32
 8000cfa:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d02:	f140 0000 	adc.w	r0, r0, #0
 8000d06:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d0a:	bf08      	it	eq
 8000d0c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d10:	4770      	bx	lr
 8000d12:	f092 0f00 	teq	r2, #0
 8000d16:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d1a:	bf02      	ittt	eq
 8000d1c:	0040      	lsleq	r0, r0, #1
 8000d1e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d22:	3a01      	subeq	r2, #1
 8000d24:	d0f9      	beq.n	8000d1a <__aeabi_fmul+0xce>
 8000d26:	ea40 000c 	orr.w	r0, r0, ip
 8000d2a:	f093 0f00 	teq	r3, #0
 8000d2e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d32:	bf02      	ittt	eq
 8000d34:	0049      	lsleq	r1, r1, #1
 8000d36:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d3a:	3b01      	subeq	r3, #1
 8000d3c:	d0f9      	beq.n	8000d32 <__aeabi_fmul+0xe6>
 8000d3e:	ea41 010c 	orr.w	r1, r1, ip
 8000d42:	e78f      	b.n	8000c64 <__aeabi_fmul+0x18>
 8000d44:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d48:	ea92 0f0c 	teq	r2, ip
 8000d4c:	bf18      	it	ne
 8000d4e:	ea93 0f0c 	teqne	r3, ip
 8000d52:	d00a      	beq.n	8000d6a <__aeabi_fmul+0x11e>
 8000d54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d58:	bf18      	it	ne
 8000d5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d5e:	d1d8      	bne.n	8000d12 <__aeabi_fmul+0xc6>
 8000d60:	ea80 0001 	eor.w	r0, r0, r1
 8000d64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d68:	4770      	bx	lr
 8000d6a:	f090 0f00 	teq	r0, #0
 8000d6e:	bf17      	itett	ne
 8000d70:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d74:	4608      	moveq	r0, r1
 8000d76:	f091 0f00 	teqne	r1, #0
 8000d7a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d7e:	d014      	beq.n	8000daa <__aeabi_fmul+0x15e>
 8000d80:	ea92 0f0c 	teq	r2, ip
 8000d84:	d101      	bne.n	8000d8a <__aeabi_fmul+0x13e>
 8000d86:	0242      	lsls	r2, r0, #9
 8000d88:	d10f      	bne.n	8000daa <__aeabi_fmul+0x15e>
 8000d8a:	ea93 0f0c 	teq	r3, ip
 8000d8e:	d103      	bne.n	8000d98 <__aeabi_fmul+0x14c>
 8000d90:	024b      	lsls	r3, r1, #9
 8000d92:	bf18      	it	ne
 8000d94:	4608      	movne	r0, r1
 8000d96:	d108      	bne.n	8000daa <__aeabi_fmul+0x15e>
 8000d98:	ea80 0001 	eor.w	r0, r0, r1
 8000d9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000da0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da8:	4770      	bx	lr
 8000daa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fdiv>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d069      	beq.n	8000ea0 <__aeabi_fdiv+0xec>
 8000dcc:	eba2 0203 	sub.w	r2, r2, r3
 8000dd0:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd4:	0249      	lsls	r1, r1, #9
 8000dd6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dda:	d037      	beq.n	8000e4c <__aeabi_fdiv+0x98>
 8000ddc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000de0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000de4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000de8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dec:	428b      	cmp	r3, r1
 8000dee:	bf38      	it	cc
 8000df0:	005b      	lslcc	r3, r3, #1
 8000df2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000df6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	bf24      	itt	cs
 8000dfe:	1a5b      	subcs	r3, r3, r1
 8000e00:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e04:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e08:	bf24      	itt	cs
 8000e0a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e0e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e12:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e16:	bf24      	itt	cs
 8000e18:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e20:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e24:	bf24      	itt	cs
 8000e26:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e2a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e2e:	011b      	lsls	r3, r3, #4
 8000e30:	bf18      	it	ne
 8000e32:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e36:	d1e0      	bne.n	8000dfa <__aeabi_fdiv+0x46>
 8000e38:	2afd      	cmp	r2, #253	; 0xfd
 8000e3a:	f63f af50 	bhi.w	8000cde <__aeabi_fmul+0x92>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e44:	bf08      	it	eq
 8000e46:	f020 0001 	biceq.w	r0, r0, #1
 8000e4a:	4770      	bx	lr
 8000e4c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e50:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e54:	327f      	adds	r2, #127	; 0x7f
 8000e56:	bfc2      	ittt	gt
 8000e58:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e5c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e60:	4770      	bxgt	lr
 8000e62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e66:	f04f 0300 	mov.w	r3, #0
 8000e6a:	3a01      	subs	r2, #1
 8000e6c:	e737      	b.n	8000cde <__aeabi_fmul+0x92>
 8000e6e:	f092 0f00 	teq	r2, #0
 8000e72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e76:	bf02      	ittt	eq
 8000e78:	0040      	lsleq	r0, r0, #1
 8000e7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e7e:	3a01      	subeq	r2, #1
 8000e80:	d0f9      	beq.n	8000e76 <__aeabi_fdiv+0xc2>
 8000e82:	ea40 000c 	orr.w	r0, r0, ip
 8000e86:	f093 0f00 	teq	r3, #0
 8000e8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	bf02      	ittt	eq
 8000e90:	0049      	lsleq	r1, r1, #1
 8000e92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e96:	3b01      	subeq	r3, #1
 8000e98:	d0f9      	beq.n	8000e8e <__aeabi_fdiv+0xda>
 8000e9a:	ea41 010c 	orr.w	r1, r1, ip
 8000e9e:	e795      	b.n	8000dcc <__aeabi_fdiv+0x18>
 8000ea0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ea4:	ea92 0f0c 	teq	r2, ip
 8000ea8:	d108      	bne.n	8000ebc <__aeabi_fdiv+0x108>
 8000eaa:	0242      	lsls	r2, r0, #9
 8000eac:	f47f af7d 	bne.w	8000daa <__aeabi_fmul+0x15e>
 8000eb0:	ea93 0f0c 	teq	r3, ip
 8000eb4:	f47f af70 	bne.w	8000d98 <__aeabi_fmul+0x14c>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e776      	b.n	8000daa <__aeabi_fmul+0x15e>
 8000ebc:	ea93 0f0c 	teq	r3, ip
 8000ec0:	d104      	bne.n	8000ecc <__aeabi_fdiv+0x118>
 8000ec2:	024b      	lsls	r3, r1, #9
 8000ec4:	f43f af4c 	beq.w	8000d60 <__aeabi_fmul+0x114>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e76e      	b.n	8000daa <__aeabi_fmul+0x15e>
 8000ecc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ed0:	bf18      	it	ne
 8000ed2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ed6:	d1ca      	bne.n	8000e6e <__aeabi_fdiv+0xba>
 8000ed8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000edc:	f47f af5c 	bne.w	8000d98 <__aeabi_fmul+0x14c>
 8000ee0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ee4:	f47f af3c 	bne.w	8000d60 <__aeabi_fmul+0x114>
 8000ee8:	e75f      	b.n	8000daa <__aeabi_fmul+0x15e>
 8000eea:	bf00      	nop

08000eec <__gesf2>:
 8000eec:	f04f 3cff 	mov.w	ip, #4294967295
 8000ef0:	e006      	b.n	8000f00 <__cmpsf2+0x4>
 8000ef2:	bf00      	nop

08000ef4 <__lesf2>:
 8000ef4:	f04f 0c01 	mov.w	ip, #1
 8000ef8:	e002      	b.n	8000f00 <__cmpsf2+0x4>
 8000efa:	bf00      	nop

08000efc <__cmpsf2>:
 8000efc:	f04f 0c01 	mov.w	ip, #1
 8000f00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f10:	bf18      	it	ne
 8000f12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f16:	d011      	beq.n	8000f3c <__cmpsf2+0x40>
 8000f18:	b001      	add	sp, #4
 8000f1a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f1e:	bf18      	it	ne
 8000f20:	ea90 0f01 	teqne	r0, r1
 8000f24:	bf58      	it	pl
 8000f26:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f2a:	bf88      	it	hi
 8000f2c:	17c8      	asrhi	r0, r1, #31
 8000f2e:	bf38      	it	cc
 8000f30:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f34:	bf18      	it	ne
 8000f36:	f040 0001 	orrne.w	r0, r0, #1
 8000f3a:	4770      	bx	lr
 8000f3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f40:	d102      	bne.n	8000f48 <__cmpsf2+0x4c>
 8000f42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f46:	d105      	bne.n	8000f54 <__cmpsf2+0x58>
 8000f48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f4c:	d1e4      	bne.n	8000f18 <__cmpsf2+0x1c>
 8000f4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f52:	d0e1      	beq.n	8000f18 <__cmpsf2+0x1c>
 8000f54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <__aeabi_cfrcmple>:
 8000f5c:	4684      	mov	ip, r0
 8000f5e:	4608      	mov	r0, r1
 8000f60:	4661      	mov	r1, ip
 8000f62:	e7ff      	b.n	8000f64 <__aeabi_cfcmpeq>

08000f64 <__aeabi_cfcmpeq>:
 8000f64:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f66:	f7ff ffc9 	bl	8000efc <__cmpsf2>
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	bf48      	it	mi
 8000f6e:	f110 0f00 	cmnmi.w	r0, #0
 8000f72:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f74 <__aeabi_fcmpeq>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff fff4 	bl	8000f64 <__aeabi_cfcmpeq>
 8000f7c:	bf0c      	ite	eq
 8000f7e:	2001      	moveq	r0, #1
 8000f80:	2000      	movne	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <__aeabi_fcmplt>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff ffea 	bl	8000f64 <__aeabi_cfcmpeq>
 8000f90:	bf34      	ite	cc
 8000f92:	2001      	movcc	r0, #1
 8000f94:	2000      	movcs	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_fcmple>:
 8000f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa0:	f7ff ffe0 	bl	8000f64 <__aeabi_cfcmpeq>
 8000fa4:	bf94      	ite	ls
 8000fa6:	2001      	movls	r0, #1
 8000fa8:	2000      	movhi	r0, #0
 8000faa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fae:	bf00      	nop

08000fb0 <__aeabi_fcmpge>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff ffd2 	bl	8000f5c <__aeabi_cfrcmple>
 8000fb8:	bf94      	ite	ls
 8000fba:	2001      	movls	r0, #1
 8000fbc:	2000      	movhi	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_fcmpgt>:
 8000fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc8:	f7ff ffc8 	bl	8000f5c <__aeabi_cfrcmple>
 8000fcc:	bf34      	ite	cc
 8000fce:	2001      	movcc	r0, #1
 8000fd0:	2000      	movcs	r0, #0
 8000fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_f2uiz>:
 8000fd8:	0042      	lsls	r2, r0, #1
 8000fda:	d20e      	bcs.n	8000ffa <__aeabi_f2uiz+0x22>
 8000fdc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fe0:	d30b      	bcc.n	8000ffa <__aeabi_f2uiz+0x22>
 8000fe2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fe6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fea:	d409      	bmi.n	8001000 <__aeabi_f2uiz+0x28>
 8000fec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ff0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ff4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff8:	4770      	bx	lr
 8000ffa:	f04f 0000 	mov.w	r0, #0
 8000ffe:	4770      	bx	lr
 8001000:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001004:	d101      	bne.n	800100a <__aeabi_f2uiz+0x32>
 8001006:	0242      	lsls	r2, r0, #9
 8001008:	d102      	bne.n	8001010 <__aeabi_f2uiz+0x38>
 800100a:	f04f 30ff 	mov.w	r0, #4294967295
 800100e:	4770      	bx	lr
 8001010:	f04f 0000 	mov.w	r0, #0
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	609a      	str	r2, [r3, #8]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr

08001036 <LL_ADC_REG_StopConversionExtTrig>:
  * @rmtoll CR2      EXTSEL         LL_ADC_REG_StopConversionExtTrig
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversionExtTrig(ADC_TypeDef *ADCx)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR2, ADC_CR2_EXTTRIG);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	609a      	str	r2, [r3, #8]
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001060:	b29b      	uxth	r3, r3
}
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <read_ADC>:
#include "adc.h"

uint16_t read_ADC()
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
    LL_ADC_REG_StartConversionSWStart(ADC1);
 8001070:	4807      	ldr	r0, [pc, #28]	; (8001090 <read_ADC+0x24>)
 8001072:	f7ff ffd1 	bl	8001018 <LL_ADC_REG_StartConversionSWStart>
    LL_mDelay(1);
 8001076:	2001      	movs	r0, #1
 8001078:	f008 ffee 	bl	800a058 <LL_mDelay>
    LL_ADC_REG_StopConversionExtTrig(ADC1);
 800107c:	4804      	ldr	r0, [pc, #16]	; (8001090 <read_ADC+0x24>)
 800107e:	f7ff ffda 	bl	8001036 <LL_ADC_REG_StopConversionExtTrig>
    return LL_ADC_REG_ReadConversionData12(ADC1);
 8001082:	4803      	ldr	r0, [pc, #12]	; (8001090 <read_ADC+0x24>)
 8001084:	f7ff ffe6 	bl	8001054 <LL_ADC_REG_ReadConversionData12>
 8001088:	4603      	mov	r3, r0
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40012400 	.word	0x40012400

08001094 <data>:
//保存在EEPROM里面的地址区间基址,占用14个字节(RANGE:SAVE_ADDR_BASE~SAVE_ADDR_BASE+13)
#define SAVE_ADDR_BASE (1024 * 23) * 1024 + 20 //触摸保存的位置
#define save_bit_local (1024 * 25) * 1024	   //默认是23的地址

void data(uint8_t *data)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	data[1] = info.curindex;
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <data+0x5c>)
 800109e:	88da      	ldrh	r2, [r3, #6]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3301      	adds	r3, #1
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	701a      	strb	r2, [r3, #0]
	data[2] = vsset.mvol;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3302      	adds	r3, #2
 80010ac:	4a11      	ldr	r2, [pc, #68]	; (80010f4 <data+0x60>)
 80010ae:	7812      	ldrb	r2, [r2, #0]
 80010b0:	701a      	strb	r2, [r3, #0]
	data[3] = vsset.bflimit;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3303      	adds	r3, #3
 80010b6:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <data+0x60>)
 80010b8:	7852      	ldrb	r2, [r2, #1]
 80010ba:	701a      	strb	r2, [r3, #0]
	data[4] = vsset.bass;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3304      	adds	r3, #4
 80010c0:	4a0c      	ldr	r2, [pc, #48]	; (80010f4 <data+0x60>)
 80010c2:	7892      	ldrb	r2, [r2, #2]
 80010c4:	701a      	strb	r2, [r3, #0]
	data[5] = vsset.tflimit;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3305      	adds	r3, #5
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <data+0x60>)
 80010cc:	78d2      	ldrb	r2, [r2, #3]
 80010ce:	701a      	strb	r2, [r3, #0]
	data[6] = vsset.treble;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3306      	adds	r3, #6
 80010d4:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <data+0x60>)
 80010d6:	7912      	ldrb	r2, [r2, #4]
 80010d8:	701a      	strb	r2, [r3, #0]
	data[7] = vsset.effect;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3307      	adds	r3, #7
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <data+0x60>)
 80010e0:	7952      	ldrb	r2, [r2, #5]
 80010e2:	701a      	strb	r2, [r3, #0]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20001fdc 	.word	0x20001fdc
 80010f4:	20000140 	.word	0x20000140

080010f8 <read_data>:
void read_data(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
	uint8_t buff[8];
	SPI_Flash_Read(buff, save_bit_local, 8);
 80010fe:	463b      	mov	r3, r7
 8001100:	2208      	movs	r2, #8
 8001102:	f04f 71c8 	mov.w	r1, #26214400	; 0x1900000
 8001106:	4618      	mov	r0, r3
 8001108:	f000 f98c 	bl	8001424 <SPI_Flash_Read>
	info.curindex = buff[1];
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	b29a      	uxth	r2, r3
 8001110:	4b22      	ldr	r3, [pc, #136]	; (800119c <read_data+0xa4>)
 8001112:	80da      	strh	r2, [r3, #6]
	if (info.curindex > info.totmp3num || buff[2] > 200 || buff[3] > 15 || buff[4] > 15 || buff[5] > 15 || buff[6] > 15 || buff[7] > 3)
 8001114:	4b21      	ldr	r3, [pc, #132]	; (800119c <read_data+0xa4>)
 8001116:	88da      	ldrh	r2, [r3, #6]
 8001118:	4b20      	ldr	r3, [pc, #128]	; (800119c <read_data+0xa4>)
 800111a:	889b      	ldrh	r3, [r3, #4]
 800111c:	429a      	cmp	r2, r3
 800111e:	d811      	bhi.n	8001144 <read_data+0x4c>
 8001120:	78bb      	ldrb	r3, [r7, #2]
 8001122:	2bc8      	cmp	r3, #200	; 0xc8
 8001124:	d80e      	bhi.n	8001144 <read_data+0x4c>
 8001126:	78fb      	ldrb	r3, [r7, #3]
 8001128:	2b0f      	cmp	r3, #15
 800112a:	d80b      	bhi.n	8001144 <read_data+0x4c>
 800112c:	793b      	ldrb	r3, [r7, #4]
 800112e:	2b0f      	cmp	r3, #15
 8001130:	d808      	bhi.n	8001144 <read_data+0x4c>
 8001132:	797b      	ldrb	r3, [r7, #5]
 8001134:	2b0f      	cmp	r3, #15
 8001136:	d805      	bhi.n	8001144 <read_data+0x4c>
 8001138:	79bb      	ldrb	r3, [r7, #6]
 800113a:	2b0f      	cmp	r3, #15
 800113c:	d802      	bhi.n	8001144 <read_data+0x4c>
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b03      	cmp	r3, #3
 8001142:	d90e      	bls.n	8001162 <read_data+0x6a>
	{
		info.curindex = 0;
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <read_data+0xa4>)
 8001146:	2200      	movs	r2, #0
 8001148:	80da      	strh	r2, [r3, #6]
		data(buff);
 800114a:	463b      	mov	r3, r7
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ffa1 	bl	8001094 <data>
		SPI_Flash_Write(buff, save_bit_local, 8);
 8001152:	463b      	mov	r3, r7
 8001154:	2208      	movs	r2, #8
 8001156:	f04f 71c8 	mov.w	r1, #26214400	; 0x1900000
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fa1a 	bl	8001594 <SPI_Flash_Write>
 8001160:	e015      	b.n	800118e <read_data+0x96>
	}
	else
	{
		info.curindex = buff[1];
 8001162:	787b      	ldrb	r3, [r7, #1]
 8001164:	b29a      	uxth	r2, r3
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <read_data+0xa4>)
 8001168:	80da      	strh	r2, [r3, #6]
		vsset.mvol = buff[2];
 800116a:	78ba      	ldrb	r2, [r7, #2]
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <read_data+0xa8>)
 800116e:	701a      	strb	r2, [r3, #0]
		vsset.bflimit = buff[3];
 8001170:	78fa      	ldrb	r2, [r7, #3]
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <read_data+0xa8>)
 8001174:	705a      	strb	r2, [r3, #1]
		vsset.bass = buff[4];
 8001176:	793a      	ldrb	r2, [r7, #4]
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <read_data+0xa8>)
 800117a:	709a      	strb	r2, [r3, #2]
		vsset.tflimit = buff[5];
 800117c:	797a      	ldrb	r2, [r7, #5]
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <read_data+0xa8>)
 8001180:	70da      	strb	r2, [r3, #3]
		vsset.treble = buff[6];
 8001182:	79ba      	ldrb	r2, [r7, #6]
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <read_data+0xa8>)
 8001186:	711a      	strb	r2, [r3, #4]
		vsset.effect = buff[7];
 8001188:	79fa      	ldrb	r2, [r7, #7]
 800118a:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <read_data+0xa8>)
 800118c:	715a      	strb	r2, [r3, #5]
	}
	VS_Set_All();
 800118e:	f005 ff05 	bl	8006f9c <VS_Set_All>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20001fdc 	.word	0x20001fdc
 80011a0:	20000140 	.word	0x20000140

080011a4 <write_data>:

void write_data(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
	uint8_t buff[8];
	data(buff);
 80011aa:	463b      	mov	r3, r7
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff71 	bl	8001094 <data>
	SPI_Flash_Write(buff, save_bit_local, 8);
 80011b2:	463b      	mov	r3, r7
 80011b4:	2208      	movs	r2, #8
 80011b6:	f04f 71c8 	mov.w	r1, #26214400	; 0x1900000
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f9ea 	bl	8001594 <SPI_Flash_Write>
	data_save_bit = 0;
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <write_data+0x2c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200001cc 	.word	0x200001cc

080011d4 <exfuns_init>:
///////////////////////////////////////////////////////////////////////////////////////
//为exfuns申请内存
//返回值:0,成功
//1,失败
uint8_t exfuns_init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	fs[0] = (FATFS *)malloc(sizeof(FATFS)); //为磁盘0工作区申请内存
 80011d8:	f44f 700d 	mov.w	r0, #564	; 0x234
 80011dc:	f010 f9da 	bl	8011594 <malloc>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b1d      	ldr	r3, [pc, #116]	; (800125c <exfuns_init+0x88>)
 80011e6:	601a      	str	r2, [r3, #0]
	fs[1] = (FATFS *)malloc(sizeof(FATFS)); //为磁盘1工作区申请内存
 80011e8:	f44f 700d 	mov.w	r0, #564	; 0x234
 80011ec:	f010 f9d2 	bl	8011594 <malloc>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <exfuns_init+0x88>)
 80011f6:	605a      	str	r2, [r3, #4]
	file = (FIL *)malloc(sizeof(FIL));	  //为file申请内存
 80011f8:	f44f 700b 	mov.w	r0, #556	; 0x22c
 80011fc:	f010 f9ca 	bl	8011594 <malloc>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	4b16      	ldr	r3, [pc, #88]	; (8001260 <exfuns_init+0x8c>)
 8001206:	601a      	str	r2, [r3, #0]
	ftemp = (FIL *)malloc(sizeof(FIL));	 //为ftemp申请内存
 8001208:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800120c:	f010 f9c2 	bl	8011594 <malloc>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <exfuns_init+0x90>)
 8001216:	601a      	str	r2, [r3, #0]
	fatbuf = (uint8_t *)malloc(512);			  //为fatbuf申请内存
 8001218:	f44f 7000 	mov.w	r0, #512	; 0x200
 800121c:	f010 f9ba 	bl	8011594 <malloc>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	4b10      	ldr	r3, [pc, #64]	; (8001268 <exfuns_init+0x94>)
 8001226:	601a      	str	r2, [r3, #0]
	if (fs[0] && fs[1] && file && ftemp && fatbuf)
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <exfuns_init+0x88>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d011      	beq.n	8001254 <exfuns_init+0x80>
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <exfuns_init+0x88>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00d      	beq.n	8001254 <exfuns_init+0x80>
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <exfuns_init+0x8c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d009      	beq.n	8001254 <exfuns_init+0x80>
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <exfuns_init+0x90>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d005      	beq.n	8001254 <exfuns_init+0x80>
 8001248:	4b07      	ldr	r3, [pc, #28]	; (8001268 <exfuns_init+0x94>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <exfuns_init+0x80>
		return 0; //申请有一个失败,即失败.
 8001250:	2300      	movs	r3, #0
 8001252:	e000      	b.n	8001256 <exfuns_init+0x82>
	else
		return 1;
 8001254:	2301      	movs	r3, #1
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20001be0 	.word	0x20001be0
 8001260:	20001bec 	.word	0x20001bec
 8001264:	20001bdc 	.word	0x20001bdc
 8001268:	20001e3c 	.word	0x20001e3c

0800126c <char_upper>:

//将小写字母转为大写字母,如果是数字,则保持不变.
uint8_t char_upper(uint8_t c)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
	if (c < 'A')
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b40      	cmp	r3, #64	; 0x40
 800127a:	d801      	bhi.n	8001280 <char_upper+0x14>
		return c; //数字,保持不变.
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	e007      	b.n	8001290 <char_upper+0x24>
	if (c >= 'a')
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	2b60      	cmp	r3, #96	; 0x60
 8001284:	d903      	bls.n	800128e <char_upper+0x22>
		return c - 0x20; //变为大写.
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	3b20      	subs	r3, #32
 800128a:	b2db      	uxtb	r3, r3
 800128c:	e000      	b.n	8001290 <char_upper+0x24>
	else
		return c; //大写,保持不变
 800128e:	79fb      	ldrb	r3, [r7, #7]
}
 8001290:	4618      	mov	r0, r3
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
	...

0800129c <f_typetell>:
//报告文件的类型
//fname:文件名
//返回值:0XFF,表示无法识别的文件类型编号.
//		 其他,高四位表示所属大类,低四位表示所属小类.
uint8_t f_typetell(uint8_t *fname)
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	uint8_t tbuf[5];
	uint8_t *attr = '\0'; //后缀名
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
	uint8_t i = 0, j;
 80012a8:	2300      	movs	r3, #0
 80012aa:	74fb      	strb	r3, [r7, #19]
	while (i < 250)
 80012ac:	e009      	b.n	80012c2 <f_typetell+0x26>
	{
		i++;
 80012ae:	7cfb      	ldrb	r3, [r7, #19]
 80012b0:	3301      	adds	r3, #1
 80012b2:	74fb      	strb	r3, [r7, #19]
		if (*fname == '\0')
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d006      	beq.n	80012ca <f_typetell+0x2e>
			break; //偏移到了最后了.
		fname++;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3301      	adds	r3, #1
 80012c0:	607b      	str	r3, [r7, #4]
	while (i < 250)
 80012c2:	7cfb      	ldrb	r3, [r7, #19]
 80012c4:	2bf9      	cmp	r3, #249	; 0xf9
 80012c6:	d9f2      	bls.n	80012ae <f_typetell+0x12>
 80012c8:	e000      	b.n	80012cc <f_typetell+0x30>
			break; //偏移到了最后了.
 80012ca:	bf00      	nop
	}
	if (i == 250)
 80012cc:	7cfb      	ldrb	r3, [r7, #19]
 80012ce:	2bfa      	cmp	r3, #250	; 0xfa
 80012d0:	d101      	bne.n	80012d6 <f_typetell+0x3a>
		return 0XFF;		//错误的字符串.
 80012d2:	23ff      	movs	r3, #255	; 0xff
 80012d4:	e075      	b.n	80013c2 <f_typetell+0x126>
	for (i = 0; i < 5; i++) //得到后缀名
 80012d6:	2300      	movs	r3, #0
 80012d8:	74fb      	strb	r3, [r7, #19]
 80012da:	e00f      	b.n	80012fc <f_typetell+0x60>
	{
		fname--;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	607b      	str	r3, [r7, #4]
		if (*fname == '.')
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b2e      	cmp	r3, #46	; 0x2e
 80012e8:	d105      	bne.n	80012f6 <f_typetell+0x5a>
		{
			fname++;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3301      	adds	r3, #1
 80012ee:	607b      	str	r3, [r7, #4]
			attr = fname;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	617b      	str	r3, [r7, #20]
			break;
 80012f4:	e005      	b.n	8001302 <f_typetell+0x66>
	for (i = 0; i < 5; i++) //得到后缀名
 80012f6:	7cfb      	ldrb	r3, [r7, #19]
 80012f8:	3301      	adds	r3, #1
 80012fa:	74fb      	strb	r3, [r7, #19]
 80012fc:	7cfb      	ldrb	r3, [r7, #19]
 80012fe:	2b04      	cmp	r3, #4
 8001300:	d9ec      	bls.n	80012dc <f_typetell+0x40>
		}
	}
	strcpy((char *)tbuf, (const char *)attr); //copy
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	6979      	ldr	r1, [r7, #20]
 8001308:	4618      	mov	r0, r3
 800130a:	f010 fb49 	bl	80119a0 <strcpy>
	for (i = 0; i < 4; i++)
 800130e:	2300      	movs	r3, #0
 8001310:	74fb      	strb	r3, [r7, #19]
 8001312:	e013      	b.n	800133c <f_typetell+0xa0>
		tbuf[i] = char_upper(tbuf[i]); //全部变为大写
 8001314:	7cfb      	ldrb	r3, [r7, #19]
 8001316:	f107 0218 	add.w	r2, r7, #24
 800131a:	4413      	add	r3, r2
 800131c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001320:	7cfc      	ldrb	r4, [r7, #19]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ffa2 	bl	800126c <char_upper>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	f107 0318 	add.w	r3, r7, #24
 8001330:	4423      	add	r3, r4
 8001332:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (i = 0; i < 4; i++)
 8001336:	7cfb      	ldrb	r3, [r7, #19]
 8001338:	3301      	adds	r3, #1
 800133a:	74fb      	strb	r3, [r7, #19]
 800133c:	7cfb      	ldrb	r3, [r7, #19]
 800133e:	2b03      	cmp	r3, #3
 8001340:	d9e8      	bls.n	8001314 <f_typetell+0x78>
	for (i = 0; i < 6; i++)
 8001342:	2300      	movs	r3, #0
 8001344:	74fb      	strb	r3, [r7, #19]
 8001346:	e038      	b.n	80013ba <f_typetell+0x11e>
	{
		for (j = 0; j < 13; j++)
 8001348:	2300      	movs	r3, #0
 800134a:	74bb      	strb	r3, [r7, #18]
 800134c:	e02d      	b.n	80013aa <f_typetell+0x10e>
		{
			if (*FILE_TYPE_TBL[i][j] == 0)
 800134e:	7cfa      	ldrb	r2, [r7, #19]
 8001350:	7cb9      	ldrb	r1, [r7, #18]
 8001352:	481e      	ldr	r0, [pc, #120]	; (80013cc <f_typetell+0x130>)
 8001354:	4613      	mov	r3, r2
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4413      	add	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	440b      	add	r3, r1
 8001360:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d023      	beq.n	80013b2 <f_typetell+0x116>
				break;																//此组已经没有可对比的成员了.
			if (strcmp((const char *)FILE_TYPE_TBL[i][j], (const char *)tbuf) == 0) //找到了
 800136a:	7cfa      	ldrb	r2, [r7, #19]
 800136c:	7cb9      	ldrb	r1, [r7, #18]
 800136e:	4817      	ldr	r0, [pc, #92]	; (80013cc <f_typetell+0x130>)
 8001370:	4613      	mov	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	440b      	add	r3, r1
 800137c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001380:	f107 020c 	add.w	r2, r7, #12
 8001384:	4611      	mov	r1, r2
 8001386:	4618      	mov	r0, r3
 8001388:	f7fe ff52 	bl	8000230 <strcmp>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d108      	bne.n	80013a4 <f_typetell+0x108>
			{
				return (i << 4) | j;
 8001392:	7cfb      	ldrb	r3, [r7, #19]
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	b25a      	sxtb	r2, r3
 8001398:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800139c:	4313      	orrs	r3, r2
 800139e:	b25b      	sxtb	r3, r3
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	e00e      	b.n	80013c2 <f_typetell+0x126>
		for (j = 0; j < 13; j++)
 80013a4:	7cbb      	ldrb	r3, [r7, #18]
 80013a6:	3301      	adds	r3, #1
 80013a8:	74bb      	strb	r3, [r7, #18]
 80013aa:	7cbb      	ldrb	r3, [r7, #18]
 80013ac:	2b0c      	cmp	r3, #12
 80013ae:	d9ce      	bls.n	800134e <f_typetell+0xb2>
 80013b0:	e000      	b.n	80013b4 <f_typetell+0x118>
				break;																//此组已经没有可对比的成员了.
 80013b2:	bf00      	nop
	for (i = 0; i < 6; i++)
 80013b4:	7cfb      	ldrb	r3, [r7, #19]
 80013b6:	3301      	adds	r3, #1
 80013b8:	74fb      	strb	r3, [r7, #19]
 80013ba:	7cfb      	ldrb	r3, [r7, #19]
 80013bc:	2b05      	cmp	r3, #5
 80013be:	d9c3      	bls.n	8001348 <f_typetell+0xac>
			}
		}
	}
	return 0XFF; //没找到
 80013c0:	23ff      	movs	r3, #255	; 0xff
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	371c      	adds	r7, #28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd90      	pop	{r4, r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000000 	.word	0x20000000

080013d0 <SPI_Flash_ReadSR>:
//TB,BP2,BP1,BP0:FLASH区域写保护设置
//WEL:写使能锁定
//BUSY:忙标记位(1,忙;0,空闲)
//默认:0x00
uint8_t SPI_Flash_ReadSR(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
    uint8_t byte = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	71fb      	strb	r3, [r7, #7]
    SPI_FLASH_CS = 0;                       //使能器件
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <SPI_Flash_ReadSR+0x30>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
    SPI1_ReadWriteByte(W25X_ReadStatusReg); //发送读取状态寄存器命令
 80013e0:	2005      	movs	r0, #5
 80013e2:	f005 f993 	bl	800670c <SPI1_ReadWriteByte>
    byte = SPI1_ReadWriteByte(0Xff);        //读取一个字节
 80013e6:	20ff      	movs	r0, #255	; 0xff
 80013e8:	f005 f990 	bl	800670c <SPI1_ReadWriteByte>
 80013ec:	4603      	mov	r3, r0
 80013ee:	71fb      	strb	r3, [r7, #7]
    SPI_FLASH_CS = 1;                       //取消片选
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <SPI_Flash_ReadSR+0x30>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	601a      	str	r2, [r3, #0]
    return byte;
 80013f6:	79fb      	ldrb	r3, [r7, #7]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	422201bc 	.word	0x422201bc

08001404 <SPI_FLASH_Write_Enable>:
    SPI_FLASH_CS = 1;                        //取消片选
}
//SPI_FLASH写使能
//将WEL置位
void SPI_FLASH_Write_Enable(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
    SPI_FLASH_CS = 0;                     //使能器件
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <SPI_FLASH_Write_Enable+0x1c>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
    SPI1_ReadWriteByte(W25X_WriteEnable); //发送写使能
 800140e:	2006      	movs	r0, #6
 8001410:	f005 f97c 	bl	800670c <SPI1_ReadWriteByte>
    SPI_FLASH_CS = 1;                     //取消片选
 8001414:	4b02      	ldr	r3, [pc, #8]	; (8001420 <SPI_FLASH_Write_Enable+0x1c>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	422201bc 	.word	0x422201bc

08001424 <SPI_Flash_Read>:
//在指定地址开始读取指定长度的数据
//pBuffer:数据存储区
//ReadAddr:开始读取的地址(24bit)
//NumByteToRead:要读取的字节数(最大65535)
void SPI_Flash_Read(uint8_t *pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
{
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	4613      	mov	r3, r2
 8001430:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    vPortEnterCritical();                             //进入临界区
 8001432:	f00f fcb3 	bl	8010d9c <vPortEnterCritical>
    SPI_FLASH_CS = 0;                                //使能器件
 8001436:	4b19      	ldr	r3, [pc, #100]	; (800149c <SPI_Flash_Read+0x78>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
    SPI1_ReadWriteByte(W25X_ReadData);               //发送读取命令
 800143c:	2003      	movs	r0, #3
 800143e:	f005 f965 	bl	800670c <SPI1_ReadWriteByte>
    SPI1_ReadWriteByte((uint8_t)((ReadAddr) >> 16)); //发送24bit地址
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	0c1b      	lsrs	r3, r3, #16
 8001446:	b2db      	uxtb	r3, r3
 8001448:	4618      	mov	r0, r3
 800144a:	f005 f95f 	bl	800670c <SPI1_ReadWriteByte>
    SPI1_ReadWriteByte((uint8_t)((ReadAddr) >> 8));
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	b2db      	uxtb	r3, r3
 8001454:	4618      	mov	r0, r3
 8001456:	f005 f959 	bl	800670c <SPI1_ReadWriteByte>
    SPI1_ReadWriteByte((uint8_t)ReadAddr);
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f005 f954 	bl	800670c <SPI1_ReadWriteByte>
    for (i = 0; i < NumByteToRead; i++)
 8001464:	2300      	movs	r3, #0
 8001466:	82fb      	strh	r3, [r7, #22]
 8001468:	e00a      	b.n	8001480 <SPI_Flash_Read+0x5c>
    {
        pBuffer[i] = SPI1_ReadWriteByte(0XFF); //循环读数
 800146a:	8afb      	ldrh	r3, [r7, #22]
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	18d4      	adds	r4, r2, r3
 8001470:	20ff      	movs	r0, #255	; 0xff
 8001472:	f005 f94b 	bl	800670c <SPI1_ReadWriteByte>
 8001476:	4603      	mov	r3, r0
 8001478:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < NumByteToRead; i++)
 800147a:	8afb      	ldrh	r3, [r7, #22]
 800147c:	3301      	adds	r3, #1
 800147e:	82fb      	strh	r3, [r7, #22]
 8001480:	8afa      	ldrh	r2, [r7, #22]
 8001482:	88fb      	ldrh	r3, [r7, #6]
 8001484:	429a      	cmp	r2, r3
 8001486:	d3f0      	bcc.n	800146a <SPI_Flash_Read+0x46>
    }
    SPI_FLASH_CS = 1; //取消片选
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <SPI_Flash_Read+0x78>)
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]
    vPortExitCritical();
 800148e:	f00f fcb5 	bl	8010dfc <vPortExitCritical>
}
 8001492:	bf00      	nop
 8001494:	371c      	adds	r7, #28
 8001496:	46bd      	mov	sp, r7
 8001498:	bd90      	pop	{r4, r7, pc}
 800149a:	bf00      	nop
 800149c:	422201bc 	.word	0x422201bc

080014a0 <SPI_Flash_Write_Page>:
//在指定地址开始写入最大256字节的数据
//pBuffer:数据存储区
//WriteAddr:开始写入的地址(24bit)
//NumByteToWrite:要写入的字节数(最大256),该数不应该超过该页的剩余字节数!!!
void SPI_Flash_Write_Page(uint8_t *pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	4613      	mov	r3, r2
 80014ac:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    vPortEnterCritical();                              //进入临界区
 80014ae:	f00f fc75 	bl	8010d9c <vPortEnterCritical>
    SPI_FLASH_Write_Enable();                         //SET WEL
 80014b2:	f7ff ffa7 	bl	8001404 <SPI_FLASH_Write_Enable>
    SPI_FLASH_CS = 0;                                 //使能器件
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <SPI_Flash_Write_Page+0x7c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
    SPI1_ReadWriteByte(W25X_PageProgram);             //发送写页命令
 80014bc:	2002      	movs	r0, #2
 80014be:	f005 f925 	bl	800670c <SPI1_ReadWriteByte>
    SPI1_ReadWriteByte((uint8_t)((WriteAddr) >> 16)); //发送24bit地址
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	0c1b      	lsrs	r3, r3, #16
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	f005 f91f 	bl	800670c <SPI1_ReadWriteByte>
    SPI1_ReadWriteByte((uint8_t)((WriteAddr) >> 8));
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	4618      	mov	r0, r3
 80014d6:	f005 f919 	bl	800670c <SPI1_ReadWriteByte>
    SPI1_ReadWriteByte((uint8_t)WriteAddr);
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f005 f914 	bl	800670c <SPI1_ReadWriteByte>
    for (i = 0; i < NumByteToWrite; i++)
 80014e4:	2300      	movs	r3, #0
 80014e6:	82fb      	strh	r3, [r7, #22]
 80014e8:	e009      	b.n	80014fe <SPI_Flash_Write_Page+0x5e>
        SPI1_ReadWriteByte(pBuffer[i]); //循环写数
 80014ea:	8afb      	ldrh	r3, [r7, #22]
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	4413      	add	r3, r2
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f005 f90a 	bl	800670c <SPI1_ReadWriteByte>
    for (i = 0; i < NumByteToWrite; i++)
 80014f8:	8afb      	ldrh	r3, [r7, #22]
 80014fa:	3301      	adds	r3, #1
 80014fc:	82fb      	strh	r3, [r7, #22]
 80014fe:	8afa      	ldrh	r2, [r7, #22]
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	429a      	cmp	r2, r3
 8001504:	d3f1      	bcc.n	80014ea <SPI_Flash_Write_Page+0x4a>
    SPI_FLASH_CS = 1;                   //取消片选
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <SPI_Flash_Write_Page+0x7c>)
 8001508:	2201      	movs	r2, #1
 800150a:	601a      	str	r2, [r3, #0]
    SPI_Flash_Wait_Busy();              //等待写入结束
 800150c:	f000 f904 	bl	8001718 <SPI_Flash_Wait_Busy>
    vPortExitCritical();
 8001510:	f00f fc74 	bl	8010dfc <vPortExitCritical>
}
 8001514:	bf00      	nop
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	422201bc 	.word	0x422201bc

08001520 <SPI_Flash_Write_NoCheck>:
//pBuffer:数据存储区
//WriteAddr:开始写入的地址(24bit)
//NumByteToWrite:要写入的字节数(最大65535)
//CHECK OK
void SPI_Flash_Write_NoCheck(uint8_t *pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	4613      	mov	r3, r2
 800152c:	80fb      	strh	r3, [r7, #6]
    uint16_t pageremain;
    pageremain = 256 - WriteAddr % 256; //单页剩余的字节数
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	b29b      	uxth	r3, r3
 8001532:	b2db      	uxtb	r3, r3
 8001534:	b29b      	uxth	r3, r3
 8001536:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800153a:	82fb      	strh	r3, [r7, #22]
    if (NumByteToWrite <= pageremain)
 800153c:	88fa      	ldrh	r2, [r7, #6]
 800153e:	8afb      	ldrh	r3, [r7, #22]
 8001540:	429a      	cmp	r2, r3
 8001542:	d801      	bhi.n	8001548 <SPI_Flash_Write_NoCheck+0x28>
        pageremain = NumByteToWrite; //不大于256个字节
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	82fb      	strh	r3, [r7, #22]
    while (1)
    {
        SPI_Flash_Write_Page(pBuffer, WriteAddr, pageremain);
 8001548:	8afb      	ldrh	r3, [r7, #22]
 800154a:	461a      	mov	r2, r3
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f7ff ffa6 	bl	80014a0 <SPI_Flash_Write_Page>
        if (NumByteToWrite == pageremain)
 8001554:	88fa      	ldrh	r2, [r7, #6]
 8001556:	8afb      	ldrh	r3, [r7, #22]
 8001558:	429a      	cmp	r2, r3
 800155a:	d016      	beq.n	800158a <SPI_Flash_Write_NoCheck+0x6a>
            break; //写入结束了
        else       //NumByteToWrite>pageremain
        {
            pBuffer += pageremain;
 800155c:	8afb      	ldrh	r3, [r7, #22]
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	4413      	add	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]
            WriteAddr += pageremain;
 8001564:	8afb      	ldrh	r3, [r7, #22]
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	4413      	add	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]

            NumByteToWrite -= pageremain; //减去已经写入了的字节数
 800156c:	88fa      	ldrh	r2, [r7, #6]
 800156e:	8afb      	ldrh	r3, [r7, #22]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	80fb      	strh	r3, [r7, #6]
            if (NumByteToWrite > 256)
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800157a:	d903      	bls.n	8001584 <SPI_Flash_Write_NoCheck+0x64>
                pageremain = 256; //一次可以写入256个字节
 800157c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001580:	82fb      	strh	r3, [r7, #22]
 8001582:	e7e1      	b.n	8001548 <SPI_Flash_Write_NoCheck+0x28>
            else
                pageremain = NumByteToWrite; //不够256个字节了
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	82fb      	strh	r3, [r7, #22]
        SPI_Flash_Write_Page(pBuffer, WriteAddr, pageremain);
 8001588:	e7de      	b.n	8001548 <SPI_Flash_Write_NoCheck+0x28>
            break; //写入结束了
 800158a:	bf00      	nop
        }
    };
}
 800158c:	bf00      	nop
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <SPI_Flash_Write>:
//该函数带擦除操作!
//pBuffer:数据存储区
//WriteAddr:开始写入的地址(24bit)
//NumByteToWrite:要写入的字节数(最大65535)
void SPI_Flash_Write(uint8_t *pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	4613      	mov	r3, r2
 80015a0:	80fb      	strh	r3, [r7, #6]
    uint32_t secpos;
    uint16_t secoff;
    uint16_t secremain;
    uint16_t i;
    uint8_t *SPI_FLASH_BUF;
    SPI_FLASH_BUF = malloc(4096); //使用内存管理
 80015a2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80015a6:	f00f fff5 	bl	8011594 <malloc>
 80015aa:	4603      	mov	r3, r0
 80015ac:	613b      	str	r3, [r7, #16]
    if (SPI_FLASH_BUF == NULL)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d07e      	beq.n	80016b2 <SPI_Flash_Write+0x11e>
        return;                //申请失败
    secpos = WriteAddr / 4096; //扇区地址 0~511 for w25x16
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	0b1b      	lsrs	r3, r3, #12
 80015b8:	61fb      	str	r3, [r7, #28]
    secoff = WriteAddr % 4096; //在扇区内的偏移
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c2:	837b      	strh	r3, [r7, #26]
    secremain = 4096 - secoff; //扇区剩余空间大小
 80015c4:	8b7b      	ldrh	r3, [r7, #26]
 80015c6:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80015ca:	833b      	strh	r3, [r7, #24]
    if (NumByteToWrite <= secremain)
 80015cc:	88fa      	ldrh	r2, [r7, #6]
 80015ce:	8b3b      	ldrh	r3, [r7, #24]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d801      	bhi.n	80015d8 <SPI_Flash_Write+0x44>
        secremain = NumByteToWrite; //不大于4096个字节
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	833b      	strh	r3, [r7, #24]
    while (1)
    {
        SPI_Flash_Read(SPI_FLASH_BUF, secpos * 4096, 4096); //读出整个扇区的内容
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	031b      	lsls	r3, r3, #12
 80015dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015e0:	4619      	mov	r1, r3
 80015e2:	6938      	ldr	r0, [r7, #16]
 80015e4:	f7ff ff1e 	bl	8001424 <SPI_Flash_Read>
        for (i = 0; i < secremain; i++)                     //校验数据
 80015e8:	2300      	movs	r3, #0
 80015ea:	82fb      	strh	r3, [r7, #22]
 80015ec:	e00b      	b.n	8001606 <SPI_Flash_Write+0x72>
        {
            if (SPI_FLASH_BUF[secoff + i] != 0XFF)
 80015ee:	8b7a      	ldrh	r2, [r7, #26]
 80015f0:	8afb      	ldrh	r3, [r7, #22]
 80015f2:	4413      	add	r3, r2
 80015f4:	461a      	mov	r2, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4413      	add	r3, r2
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2bff      	cmp	r3, #255	; 0xff
 80015fe:	d107      	bne.n	8001610 <SPI_Flash_Write+0x7c>
        for (i = 0; i < secremain; i++)                     //校验数据
 8001600:	8afb      	ldrh	r3, [r7, #22]
 8001602:	3301      	adds	r3, #1
 8001604:	82fb      	strh	r3, [r7, #22]
 8001606:	8afa      	ldrh	r2, [r7, #22]
 8001608:	8b3b      	ldrh	r3, [r7, #24]
 800160a:	429a      	cmp	r2, r3
 800160c:	d3ef      	bcc.n	80015ee <SPI_Flash_Write+0x5a>
 800160e:	e000      	b.n	8001612 <SPI_Flash_Write+0x7e>
                break; //需要擦除
 8001610:	bf00      	nop
        }
        if (i < secremain) //需要擦除
 8001612:	8afa      	ldrh	r2, [r7, #22]
 8001614:	8b3b      	ldrh	r3, [r7, #24]
 8001616:	429a      	cmp	r2, r3
 8001618:	d220      	bcs.n	800165c <SPI_Flash_Write+0xc8>
        {
            SPI_Flash_Erase_Sector(secpos); //擦除这个扇区
 800161a:	69f8      	ldr	r0, [r7, #28]
 800161c:	f000 f84e 	bl	80016bc <SPI_Flash_Erase_Sector>
            for (i = 0; i < secremain; i++) //复制
 8001620:	2300      	movs	r3, #0
 8001622:	82fb      	strh	r3, [r7, #22]
 8001624:	e00d      	b.n	8001642 <SPI_Flash_Write+0xae>
            {
                SPI_FLASH_BUF[i + secoff] = pBuffer[i];
 8001626:	8afb      	ldrh	r3, [r7, #22]
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	441a      	add	r2, r3
 800162c:	8af9      	ldrh	r1, [r7, #22]
 800162e:	8b7b      	ldrh	r3, [r7, #26]
 8001630:	440b      	add	r3, r1
 8001632:	4619      	mov	r1, r3
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	440b      	add	r3, r1
 8001638:	7812      	ldrb	r2, [r2, #0]
 800163a:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < secremain; i++) //复制
 800163c:	8afb      	ldrh	r3, [r7, #22]
 800163e:	3301      	adds	r3, #1
 8001640:	82fb      	strh	r3, [r7, #22]
 8001642:	8afa      	ldrh	r2, [r7, #22]
 8001644:	8b3b      	ldrh	r3, [r7, #24]
 8001646:	429a      	cmp	r2, r3
 8001648:	d3ed      	bcc.n	8001626 <SPI_Flash_Write+0x92>
            }
            SPI_Flash_Write_NoCheck(SPI_FLASH_BUF, secpos * 4096, 4096); //写入整个扇区
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	031b      	lsls	r3, r3, #12
 800164e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001652:	4619      	mov	r1, r3
 8001654:	6938      	ldr	r0, [r7, #16]
 8001656:	f7ff ff63 	bl	8001520 <SPI_Flash_Write_NoCheck>
 800165a:	e005      	b.n	8001668 <SPI_Flash_Write+0xd4>
        }
        else
            SPI_Flash_Write_NoCheck(pBuffer, WriteAddr, secremain); //写已经擦除了的,直接写入扇区剩余区间.
 800165c:	8b3b      	ldrh	r3, [r7, #24]
 800165e:	461a      	mov	r2, r3
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f7ff ff5c 	bl	8001520 <SPI_Flash_Write_NoCheck>
        if (NumByteToWrite == secremain)
 8001668:	88fa      	ldrh	r2, [r7, #6]
 800166a:	8b3b      	ldrh	r3, [r7, #24]
 800166c:	429a      	cmp	r2, r3
 800166e:	d01b      	beq.n	80016a8 <SPI_Flash_Write+0x114>
            break; //写入结束了
        else       //写入未结束
        {
            secpos++;   //扇区地址增1
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	3301      	adds	r3, #1
 8001674:	61fb      	str	r3, [r7, #28]
            secoff = 0; //偏移位置为0
 8001676:	2300      	movs	r3, #0
 8001678:	837b      	strh	r3, [r7, #26]

            pBuffer += secremain;        //指针偏移
 800167a:	8b3b      	ldrh	r3, [r7, #24]
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	4413      	add	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
            WriteAddr += secremain;      //写地址偏移
 8001682:	8b3b      	ldrh	r3, [r7, #24]
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	4413      	add	r3, r2
 8001688:	60bb      	str	r3, [r7, #8]
            NumByteToWrite -= secremain; //字节数递减
 800168a:	88fa      	ldrh	r2, [r7, #6]
 800168c:	8b3b      	ldrh	r3, [r7, #24]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	80fb      	strh	r3, [r7, #6]
            if (NumByteToWrite > 4096)
 8001692:	88fb      	ldrh	r3, [r7, #6]
 8001694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001698:	d903      	bls.n	80016a2 <SPI_Flash_Write+0x10e>
                secremain = 4096; //下一个扇区还是写不完
 800169a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169e:	833b      	strh	r3, [r7, #24]
 80016a0:	e79a      	b.n	80015d8 <SPI_Flash_Write+0x44>
            else
                secremain = NumByteToWrite; //下一个扇区可以写完了
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	833b      	strh	r3, [r7, #24]
        SPI_Flash_Read(SPI_FLASH_BUF, secpos * 4096, 4096); //读出整个扇区的内容
 80016a6:	e797      	b.n	80015d8 <SPI_Flash_Write+0x44>
            break; //写入结束了
 80016a8:	bf00      	nop
        }
    };
    free(SPI_FLASH_BUF); //释放内存
 80016aa:	6938      	ldr	r0, [r7, #16]
 80016ac:	f00f ff7a 	bl	80115a4 <free>
 80016b0:	e000      	b.n	80016b4 <SPI_Flash_Write+0x120>
        return;                //申请失败
 80016b2:	bf00      	nop
}
 80016b4:	3720      	adds	r7, #32
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <SPI_Flash_Erase_Sector>:
}
//擦除一个扇区
//Dst_Addr:扇区地址 0~2047 for W25Q64
//擦除一个山区的最少时间:150ms
void SPI_Flash_Erase_Sector(uint32_t Dst_Addr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
    Dst_Addr *= 4096;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	031b      	lsls	r3, r3, #12
 80016c8:	607b      	str	r3, [r7, #4]
    SPI_FLASH_Write_Enable(); //SET WEL
 80016ca:	f7ff fe9b 	bl	8001404 <SPI_FLASH_Write_Enable>
    SPI_Flash_Wait_Busy();
 80016ce:	f000 f823 	bl	8001718 <SPI_Flash_Wait_Busy>
    SPI_FLASH_CS = 0;                                //使能器件
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <SPI_Flash_Erase_Sector+0x58>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
    SPI1_ReadWriteByte(W25X_SectorErase);            //发送扇区擦除指令
 80016d8:	2020      	movs	r0, #32
 80016da:	f005 f817 	bl	800670c <SPI1_ReadWriteByte>
    SPI1_ReadWriteByte((uint8_t)((Dst_Addr) >> 16)); //发送24bit地址
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	0c1b      	lsrs	r3, r3, #16
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	4618      	mov	r0, r3
 80016e6:	f005 f811 	bl	800670c <SPI1_ReadWriteByte>
    SPI1_ReadWriteByte((uint8_t)((Dst_Addr) >> 8));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	4618      	mov	r0, r3
 80016f2:	f005 f80b 	bl	800670c <SPI1_ReadWriteByte>
    SPI1_ReadWriteByte((uint8_t)Dst_Addr);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f005 f806 	bl	800670c <SPI1_ReadWriteByte>
    SPI_FLASH_CS = 1;      //取消片选
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <SPI_Flash_Erase_Sector+0x58>)
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]
    SPI_Flash_Wait_Busy(); //等待擦除完成
 8001706:	f000 f807 	bl	8001718 <SPI_Flash_Wait_Busy>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	422201bc 	.word	0x422201bc

08001718 <SPI_Flash_Wait_Busy>:
//等待空闲
void SPI_Flash_Wait_Busy(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
    while ((SPI_Flash_ReadSR() & 0x01) == 0x01)
 800171c:	bf00      	nop
 800171e:	f7ff fe57 	bl	80013d0 <SPI_Flash_ReadSR>
 8001722:	4603      	mov	r3, r0
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b01      	cmp	r3, #1
 800172a:	d0f8      	beq.n	800171e <SPI_Flash_Wait_Busy+0x6>
        ; // 等待BUSY位清空
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <Get_HzMat>:
//code 字符指针开始
//从字库中查找出字模
//code 字符串的开始地址,GBK码
//mat  数据存放地址 size*2 bytes大小
void Get_HzMat(unsigned char *code, unsigned char *mat, uint8_t size)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	4613      	mov	r3, r2
 8001740:	71fb      	strb	r3, [r7, #7]
	unsigned char qh, ql;
	unsigned char i;
	unsigned long foffset;
	qh = *code;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	75fb      	strb	r3, [r7, #23]
	ql = *(++code);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	3301      	adds	r3, #1
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	77fb      	strb	r3, [r7, #31]
	if (qh < 0x81 || ql < 0x40 || ql == 0xff || qh == 0xff) //非 常用汉字
 8001754:	7dfb      	ldrb	r3, [r7, #23]
 8001756:	2b80      	cmp	r3, #128	; 0x80
 8001758:	d908      	bls.n	800176c <Get_HzMat+0x38>
 800175a:	7ffb      	ldrb	r3, [r7, #31]
 800175c:	2b3f      	cmp	r3, #63	; 0x3f
 800175e:	d905      	bls.n	800176c <Get_HzMat+0x38>
 8001760:	7ffb      	ldrb	r3, [r7, #31]
 8001762:	2bff      	cmp	r3, #255	; 0xff
 8001764:	d002      	beq.n	800176c <Get_HzMat+0x38>
 8001766:	7dfb      	ldrb	r3, [r7, #23]
 8001768:	2bff      	cmp	r3, #255	; 0xff
 800176a:	d13d      	bne.n	80017e8 <Get_HzMat+0xb4>
	{
		if (size == 12 || size == 16)
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	2b0c      	cmp	r3, #12
 8001770:	d002      	beq.n	8001778 <Get_HzMat+0x44>
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	2b10      	cmp	r3, #16
 8001776:	d110      	bne.n	800179a <Get_HzMat+0x66>
		{
			for (i = 0; i < (size * 2); i++)
 8001778:	2300      	movs	r3, #0
 800177a:	77bb      	strb	r3, [r7, #30]
 800177c:	e007      	b.n	800178e <Get_HzMat+0x5a>
				*mat++ = 0x00; //填充满格
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	60ba      	str	r2, [r7, #8]
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < (size * 2); i++)
 8001788:	7fbb      	ldrb	r3, [r7, #30]
 800178a:	3301      	adds	r3, #1
 800178c:	77bb      	strb	r3, [r7, #30]
 800178e:	7fba      	ldrb	r2, [r7, #30]
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	429a      	cmp	r2, r3
 8001796:	dbf2      	blt.n	800177e <Get_HzMat+0x4a>
			return;			   //结束访问
 8001798:	e091      	b.n	80018be <Get_HzMat+0x18a>
		}
		else if (size == 24)
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2b18      	cmp	r3, #24
 800179e:	d112      	bne.n	80017c6 <Get_HzMat+0x92>
		{
			for (i = 0; i < (size * 3); i++)
 80017a0:	2300      	movs	r3, #0
 80017a2:	77bb      	strb	r3, [r7, #30]
 80017a4:	e007      	b.n	80017b6 <Get_HzMat+0x82>
				*mat++ = 0x00; //填充满格
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	60ba      	str	r2, [r7, #8]
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < (size * 3); i++)
 80017b0:	7fbb      	ldrb	r3, [r7, #30]
 80017b2:	3301      	adds	r3, #1
 80017b4:	77bb      	strb	r3, [r7, #30]
 80017b6:	7fb9      	ldrb	r1, [r7, #30]
 80017b8:	79fa      	ldrb	r2, [r7, #7]
 80017ba:	4613      	mov	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	4299      	cmp	r1, r3
 80017c2:	dbf0      	blt.n	80017a6 <Get_HzMat+0x72>
			return;			   //结束访问
 80017c4:	e07b      	b.n	80018be <Get_HzMat+0x18a>
		}
		else
		{
			for (i = 0; i < (size * 4); i++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	77bb      	strb	r3, [r7, #30]
 80017ca:	e007      	b.n	80017dc <Get_HzMat+0xa8>
				*mat++ = 0x00; //填充满格
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	60ba      	str	r2, [r7, #8]
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < (size * 4); i++)
 80017d6:	7fbb      	ldrb	r3, [r7, #30]
 80017d8:	3301      	adds	r3, #1
 80017da:	77bb      	strb	r3, [r7, #30]
 80017dc:	7fba      	ldrb	r2, [r7, #30]
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	429a      	cmp	r2, r3
 80017e4:	dbf2      	blt.n	80017cc <Get_HzMat+0x98>
			return;			   //结束访问
 80017e6:	e06a      	b.n	80018be <Get_HzMat+0x18a>
		}
	}
	if (ql < 0x7f)
 80017e8:	7ffb      	ldrb	r3, [r7, #31]
 80017ea:	2b7e      	cmp	r3, #126	; 0x7e
 80017ec:	d803      	bhi.n	80017f6 <Get_HzMat+0xc2>
		ql -= 0x40; //注意!
 80017ee:	7ffb      	ldrb	r3, [r7, #31]
 80017f0:	3b40      	subs	r3, #64	; 0x40
 80017f2:	77fb      	strb	r3, [r7, #31]
 80017f4:	e002      	b.n	80017fc <Get_HzMat+0xc8>
	else
		ql -= 0x41;
 80017f6:	7ffb      	ldrb	r3, [r7, #31]
 80017f8:	3b41      	subs	r3, #65	; 0x41
 80017fa:	77fb      	strb	r3, [r7, #31]
	qh -= 0x81;
 80017fc:	7dfb      	ldrb	r3, [r7, #23]
 80017fe:	337f      	adds	r3, #127	; 0x7f
 8001800:	75fb      	strb	r3, [r7, #23]

	if (size == 12 || size == 16)
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	2b0c      	cmp	r3, #12
 8001806:	d002      	beq.n	800180e <Get_HzMat+0xda>
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	2b10      	cmp	r3, #16
 800180c:	d10b      	bne.n	8001826 <Get_HzMat+0xf2>
	{
		foffset = ((unsigned long)190 * qh + ql) * (size * 2); //得到字库中的字节偏移量
 800180e:	7dfb      	ldrb	r3, [r7, #23]
 8001810:	22be      	movs	r2, #190	; 0xbe
 8001812:	fb02 f203 	mul.w	r2, r2, r3
 8001816:	7ffb      	ldrb	r3, [r7, #31]
 8001818:	4413      	add	r3, r2
 800181a:	79fa      	ldrb	r2, [r7, #7]
 800181c:	fb02 f303 	mul.w	r3, r2, r3
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	e01b      	b.n	800185e <Get_HzMat+0x12a>
	}
	else if (size == 24)
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	2b18      	cmp	r3, #24
 800182a:	d10d      	bne.n	8001848 <Get_HzMat+0x114>
	{
		foffset = ((unsigned long)190 * qh + ql) * (size * 3); //得到字库中的字节偏移量
 800182c:	7dfb      	ldrb	r3, [r7, #23]
 800182e:	22be      	movs	r2, #190	; 0xbe
 8001830:	fb02 f203 	mul.w	r2, r2, r3
 8001834:	7ffb      	ldrb	r3, [r7, #31]
 8001836:	4413      	add	r3, r2
 8001838:	79fa      	ldrb	r2, [r7, #7]
 800183a:	fb02 f203 	mul.w	r2, r2, r3
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
 8001846:	e00a      	b.n	800185e <Get_HzMat+0x12a>
	}
	else
	{
		foffset = ((unsigned long)190 * qh + ql) * (size * 4); //得到字库中的字节偏移量
 8001848:	7dfb      	ldrb	r3, [r7, #23]
 800184a:	22be      	movs	r2, #190	; 0xbe
 800184c:	fb02 f203 	mul.w	r2, r2, r3
 8001850:	7ffb      	ldrb	r3, [r7, #31]
 8001852:	4413      	add	r3, r2
 8001854:	79fa      	ldrb	r2, [r7, #7]
 8001856:	fb02 f303 	mul.w	r3, r2, r3
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	61bb      	str	r3, [r7, #24]
	}

	if (size == 16)
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2b10      	cmp	r3, #16
 8001862:	d109      	bne.n	8001878 <Get_HzMat+0x144>
	{
		SPI_Flash_Read(mat, foffset + ftinfo.f16addr, 32);
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <Get_HzMat+0x190>)
 8001866:	695a      	ldr	r2, [r3, #20]
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	4413      	add	r3, r2
 800186c:	2220      	movs	r2, #32
 800186e:	4619      	mov	r1, r3
 8001870:	68b8      	ldr	r0, [r7, #8]
 8001872:	f7ff fdd7 	bl	8001424 <SPI_Flash_Read>
 8001876:	e022      	b.n	80018be <Get_HzMat+0x18a>
	}
	else if (size == 12)
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	2b0c      	cmp	r3, #12
 800187c:	d109      	bne.n	8001892 <Get_HzMat+0x15e>
	{
		SPI_Flash_Read(mat, foffset + ftinfo.f12addr, 24);
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <Get_HzMat+0x190>)
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	4413      	add	r3, r2
 8001886:	2218      	movs	r2, #24
 8001888:	4619      	mov	r1, r3
 800188a:	68b8      	ldr	r0, [r7, #8]
 800188c:	f7ff fdca 	bl	8001424 <SPI_Flash_Read>
 8001890:	e015      	b.n	80018be <Get_HzMat+0x18a>
	}
	else if (size == 24)
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	2b18      	cmp	r3, #24
 8001896:	d109      	bne.n	80018ac <Get_HzMat+0x178>
	{
		SPI_Flash_Read(mat, foffset + ftinfo.f24addr, 72);
 8001898:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <Get_HzMat+0x190>)
 800189a:	69da      	ldr	r2, [r3, #28]
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	4413      	add	r3, r2
 80018a0:	2248      	movs	r2, #72	; 0x48
 80018a2:	4619      	mov	r1, r3
 80018a4:	68b8      	ldr	r0, [r7, #8]
 80018a6:	f7ff fdbd 	bl	8001424 <SPI_Flash_Read>
 80018aa:	e008      	b.n	80018be <Get_HzMat+0x18a>
	}
	else
	{
		SPI_Flash_Read(mat, foffset + ftinfo.f32addr, 128);
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <Get_HzMat+0x190>)
 80018ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	4413      	add	r3, r2
 80018b4:	2280      	movs	r2, #128	; 0x80
 80018b6:	4619      	mov	r1, r3
 80018b8:	68b8      	ldr	r0, [r7, #8]
 80018ba:	f7ff fdb3 	bl	8001424 <SPI_Flash_Read>
	}
}
 80018be:	3720      	adds	r7, #32
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20001e40 	.word	0x20001e40

080018c8 <Show_Font>:
//x,y :汉字的坐标
//font:汉字GBK码
//size:字体大小
//mode:0,正常显示,1,叠加显示
void Show_Font(uint16_t x, uint16_t y, uint8_t *font, uint8_t size, uint8_t mode)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b0a6      	sub	sp, #152	; 0x98
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60ba      	str	r2, [r7, #8]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4603      	mov	r3, r0
 80018d4:	81fb      	strh	r3, [r7, #14]
 80018d6:	460b      	mov	r3, r1
 80018d8:	81bb      	strh	r3, [r7, #12]
 80018da:	4613      	mov	r3, r2
 80018dc:	71fb      	strb	r3, [r7, #7]
	uint8_t temp, t, t1, size1;
	uint16_t y0 = y;
 80018de:	89bb      	ldrh	r3, [r7, #12]
 80018e0:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	uint8_t dzk[128];
	uint16_t tempcolor;
	if (size != 12 && size != 16 && size != 24 && size != 32)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	2b0c      	cmp	r3, #12
 80018e8:	d009      	beq.n	80018fe <Show_Font+0x36>
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	2b10      	cmp	r3, #16
 80018ee:	d006      	beq.n	80018fe <Show_Font+0x36>
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	2b18      	cmp	r3, #24
 80018f4:	d003      	beq.n	80018fe <Show_Font+0x36>
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2b20      	cmp	r3, #32
 80018fa:	f040 80dc 	bne.w	8001ab6 <Show_Font+0x1ee>
		return;					//不支持的size
	Get_HzMat(font, dzk, size); //得到相应大小的点阵数据
 80018fe:	79fa      	ldrb	r2, [r7, #7]
 8001900:	f107 0310 	add.w	r3, r7, #16
 8001904:	4619      	mov	r1, r3
 8001906:	68b8      	ldr	r0, [r7, #8]
 8001908:	f7ff ff14 	bl	8001734 <Get_HzMat>
	if (mode == 0)				//正常显示
 800190c:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d171      	bne.n	80019f8 <Show_Font+0x130>
	{
		if (size == 12 || size == 16)
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	2b0c      	cmp	r3, #12
 8001918:	d002      	beq.n	8001920 <Show_Font+0x58>
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	2b10      	cmp	r3, #16
 800191e:	d104      	bne.n	800192a <Show_Font+0x62>
		{
			size1 = size * 2;
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 8001928:	e00d      	b.n	8001946 <Show_Font+0x7e>
		}
		else if (size == 24)
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	2b18      	cmp	r3, #24
 800192e:	d106      	bne.n	800193e <Show_Font+0x76>
		{
			size1 = size * 3;
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	461a      	mov	r2, r3
 8001934:	0052      	lsls	r2, r2, #1
 8001936:	4413      	add	r3, r2
 8001938:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 800193c:	e003      	b.n	8001946 <Show_Font+0x7e>
		}
		else
		{
			size1 = size * 4;
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
		}
		for (t = 0; t < size1; t++)
 8001946:	2300      	movs	r3, #0
 8001948:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800194c:	e04d      	b.n	80019ea <Show_Font+0x122>
		{
			temp = dzk[t]; //得到12数据
 800194e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001952:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001956:	4413      	add	r3, r2
 8001958:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 800195c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			for (t1 = 0; t1 < 8; t1++)
 8001960:	2300      	movs	r3, #0
 8001962:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8001966:	e037      	b.n	80019d8 <Show_Font+0x110>
			{
				if (temp & 0x80)
 8001968:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 800196c:	2b00      	cmp	r3, #0
 800196e:	da06      	bge.n	800197e <Show_Font+0xb6>
					LCD_DrawPoint(x, y);
 8001970:	89ba      	ldrh	r2, [r7, #12]
 8001972:	89fb      	ldrh	r3, [r7, #14]
 8001974:	4611      	mov	r1, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f002 feb2 	bl	80046e0 <LCD_DrawPoint>
 800197c:	e011      	b.n	80019a2 <Show_Font+0xda>
				else
				{
					tempcolor = POINT_COLOR;
 800197e:	4b50      	ldr	r3, [pc, #320]	; (8001ac0 <Show_Font+0x1f8>)
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
					POINT_COLOR = BACK_COLOR;
 8001986:	4b4f      	ldr	r3, [pc, #316]	; (8001ac4 <Show_Font+0x1fc>)
 8001988:	881a      	ldrh	r2, [r3, #0]
 800198a:	4b4d      	ldr	r3, [pc, #308]	; (8001ac0 <Show_Font+0x1f8>)
 800198c:	801a      	strh	r2, [r3, #0]
					LCD_DrawPoint(x, y);
 800198e:	89ba      	ldrh	r2, [r7, #12]
 8001990:	89fb      	ldrh	r3, [r7, #14]
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f002 fea3 	bl	80046e0 <LCD_DrawPoint>
					POINT_COLOR = tempcolor; //还原
 800199a:	4a49      	ldr	r2, [pc, #292]	; (8001ac0 <Show_Font+0x1f8>)
 800199c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80019a0:	8013      	strh	r3, [r2, #0]
				}
				temp <<= 1;
 80019a2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				y++;
 80019ac:	89bb      	ldrh	r3, [r7, #12]
 80019ae:	3301      	adds	r3, #1
 80019b0:	81bb      	strh	r3, [r7, #12]
				if ((y - y0) == size)
 80019b2:	89ba      	ldrh	r2, [r7, #12]
 80019b4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80019b8:	1ad2      	subs	r2, r2, r3
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d106      	bne.n	80019ce <Show_Font+0x106>
				{
					y = y0;
 80019c0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80019c4:	81bb      	strh	r3, [r7, #12]
					x++;
 80019c6:	89fb      	ldrh	r3, [r7, #14]
 80019c8:	3301      	adds	r3, #1
 80019ca:	81fb      	strh	r3, [r7, #14]
					break;
 80019cc:	e008      	b.n	80019e0 <Show_Font+0x118>
			for (t1 = 0; t1 < 8; t1++)
 80019ce:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80019d2:	3301      	adds	r3, #1
 80019d4:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 80019d8:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80019dc:	2b07      	cmp	r3, #7
 80019de:	d9c3      	bls.n	8001968 <Show_Font+0xa0>
		for (t = 0; t < size1; t++)
 80019e0:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80019e4:	3301      	adds	r3, #1
 80019e6:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80019ea:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 80019ee:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d3ab      	bcc.n	800194e <Show_Font+0x86>
 80019f6:	e05f      	b.n	8001ab8 <Show_Font+0x1f0>
			}
		}
	}
	else //叠加显示
	{
		if (size == 12 || size == 16)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	2b0c      	cmp	r3, #12
 80019fc:	d002      	beq.n	8001a04 <Show_Font+0x13c>
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	2b10      	cmp	r3, #16
 8001a02:	d104      	bne.n	8001a0e <Show_Font+0x146>
		{
			size1 = size * 2;
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 8001a0c:	e00d      	b.n	8001a2a <Show_Font+0x162>
		}
		else if (size == 24)
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	2b18      	cmp	r3, #24
 8001a12:	d106      	bne.n	8001a22 <Show_Font+0x15a>
		{
			size1 = size * 3;
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	461a      	mov	r2, r3
 8001a18:	0052      	lsls	r2, r2, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 8001a20:	e003      	b.n	8001a2a <Show_Font+0x162>
		}
		else
		{
			size1 = size * 4;
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
		}
		for (t = 0; t < size1; t++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8001a30:	e03a      	b.n	8001aa8 <Show_Font+0x1e0>
		{
			temp = dzk[t]; //得到12数据
 8001a32:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001a36:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001a3a:	4413      	add	r3, r2
 8001a3c:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 8001a40:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			for (t1 = 0; t1 < 8; t1++)
 8001a44:	2300      	movs	r3, #0
 8001a46:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8001a4a:	e024      	b.n	8001a96 <Show_Font+0x1ce>
			{
				if (temp & 0x80)
 8001a4c:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	da05      	bge.n	8001a60 <Show_Font+0x198>
					LCD_DrawPoint(x, y);
 8001a54:	89ba      	ldrh	r2, [r7, #12]
 8001a56:	89fb      	ldrh	r3, [r7, #14]
 8001a58:	4611      	mov	r1, r2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 fe40 	bl	80046e0 <LCD_DrawPoint>
				temp <<= 1;
 8001a60:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				y++;
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	81bb      	strh	r3, [r7, #12]
				if ((y - y0) == size)
 8001a70:	89ba      	ldrh	r2, [r7, #12]
 8001a72:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8001a76:	1ad2      	subs	r2, r2, r3
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d106      	bne.n	8001a8c <Show_Font+0x1c4>
				{
					y = y0;
 8001a7e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8001a82:	81bb      	strh	r3, [r7, #12]
					x++;
 8001a84:	89fb      	ldrh	r3, [r7, #14]
 8001a86:	3301      	adds	r3, #1
 8001a88:	81fb      	strh	r3, [r7, #14]
					break;
 8001a8a:	e008      	b.n	8001a9e <Show_Font+0x1d6>
			for (t1 = 0; t1 < 8; t1++)
 8001a8c:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001a90:	3301      	adds	r3, #1
 8001a92:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8001a96:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001a9a:	2b07      	cmp	r3, #7
 8001a9c:	d9d6      	bls.n	8001a4c <Show_Font+0x184>
		for (t = 0; t < size1; t++)
 8001a9e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8001aa8:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8001aac:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d3be      	bcc.n	8001a32 <Show_Font+0x16a>
 8001ab4:	e000      	b.n	8001ab8 <Show_Font+0x1f0>
		return;					//不支持的size
 8001ab6:	bf00      	nop
				}
			}
		}
	}
}
 8001ab8:	3798      	adds	r7, #152	; 0x98
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	200001d8 	.word	0x200001d8
 8001ac4:	2000013e 	.word	0x2000013e

08001ac8 <Show_Str>:
//width,height:区域
//str  :字符串
//size :字体大小
//mode:0,非叠加方式;1,叠加方式
void Show_Str(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t *str, uint8_t size, uint8_t mode)
{
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b087      	sub	sp, #28
 8001acc:	af02      	add	r7, sp, #8
 8001ace:	4604      	mov	r4, r0
 8001ad0:	4608      	mov	r0, r1
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4623      	mov	r3, r4
 8001ad8:	80fb      	strh	r3, [r7, #6]
 8001ada:	4603      	mov	r3, r0
 8001adc:	80bb      	strh	r3, [r7, #4]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	807b      	strh	r3, [r7, #2]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	803b      	strh	r3, [r7, #0]
	uint16_t x0 = x;
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	81bb      	strh	r3, [r7, #12]
	uint16_t y0 = y;
 8001aea:	88bb      	ldrh	r3, [r7, #4]
 8001aec:	817b      	strh	r3, [r7, #10]
	uint8_t bHz = 0;  //字符或者中文
 8001aee:	2300      	movs	r3, #0
 8001af0:	73fb      	strb	r3, [r7, #15]
	while (*str != 0) //数据未结束
 8001af2:	e07d      	b.n	8001bf0 <Show_Str+0x128>
	{
		if (!bHz)
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d14a      	bne.n	8001b90 <Show_Str+0xc8>
		{
			if (*str > 0x80)
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b80      	cmp	r3, #128	; 0x80
 8001b00:	d902      	bls.n	8001b08 <Show_Str+0x40>
				bHz = 1;						 //中文
 8001b02:	2301      	movs	r3, #1
 8001b04:	73fb      	strb	r3, [r7, #15]
 8001b06:	e073      	b.n	8001bf0 <Show_Str+0x128>
			else								 //字符
			{									 //字符暂时不管
				if (x > (x0 + width - size / 2)) //换行
 8001b08:	88fa      	ldrh	r2, [r7, #6]
 8001b0a:	89b9      	ldrh	r1, [r7, #12]
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	440b      	add	r3, r1
 8001b10:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001b14:	0849      	lsrs	r1, r1, #1
 8001b16:	b2c9      	uxtb	r1, r1
 8001b18:	1a5b      	subs	r3, r3, r1
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	dd07      	ble.n	8001b2e <Show_Str+0x66>
				{
					y += size;
 8001b1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	88bb      	ldrh	r3, [r7, #4]
 8001b26:	4413      	add	r3, r2
 8001b28:	80bb      	strh	r3, [r7, #4]
					x = x0;
 8001b2a:	89bb      	ldrh	r3, [r7, #12]
 8001b2c:	80fb      	strh	r3, [r7, #6]
				}
				if (y > (y0 + height - size))
 8001b2e:	88ba      	ldrh	r2, [r7, #4]
 8001b30:	8979      	ldrh	r1, [r7, #10]
 8001b32:	883b      	ldrh	r3, [r7, #0]
 8001b34:	4419      	add	r1, r3
 8001b36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b3a:	1acb      	subs	r3, r1, r3
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	dc5d      	bgt.n	8001bfc <Show_Str+0x134>
					break;		//越界返回
				if (*str == 13) //换行符号
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b0d      	cmp	r3, #13
 8001b46:	d10b      	bne.n	8001b60 <Show_Str+0x98>
				{
					y += size;
 8001b48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	88bb      	ldrh	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	80bb      	strh	r3, [r7, #4]
					x = x0;
 8001b54:	89bb      	ldrh	r3, [r7, #12]
 8001b56:	80fb      	strh	r3, [r7, #6]
					str++;
 8001b58:	6a3b      	ldr	r3, [r7, #32]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	623b      	str	r3, [r7, #32]
 8001b5e:	e00b      	b.n	8001b78 <Show_Str+0xb0>
				}
				else
					LCD_ShowChar(x, y, *str, size, mode); //有效部分写入
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	781a      	ldrb	r2, [r3, #0]
 8001b64:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8001b68:	88b9      	ldrh	r1, [r7, #4]
 8001b6a:	88f8      	ldrh	r0, [r7, #6]
 8001b6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	4623      	mov	r3, r4
 8001b74:	f002 fe6e 	bl	8004854 <LCD_ShowChar>
				str++;
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	623b      	str	r3, [r7, #32]
				x += size / 2; //字符,为全字的一半
 8001b7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b82:	085b      	lsrs	r3, r3, #1
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	88fb      	ldrh	r3, [r7, #6]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	80fb      	strh	r3, [r7, #6]
 8001b8e:	e02f      	b.n	8001bf0 <Show_Str+0x128>
			}
		}
		else //中文
		{
			bHz = 0;					 //有汉字库
 8001b90:	2300      	movs	r3, #0
 8001b92:	73fb      	strb	r3, [r7, #15]
			if (x > (x0 + width - size)) //换行
 8001b94:	88fa      	ldrh	r2, [r7, #6]
 8001b96:	89b9      	ldrh	r1, [r7, #12]
 8001b98:	887b      	ldrh	r3, [r7, #2]
 8001b9a:	4419      	add	r1, r3
 8001b9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ba0:	1acb      	subs	r3, r1, r3
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	dd07      	ble.n	8001bb6 <Show_Str+0xee>
			{
				y += size;
 8001ba6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	88bb      	ldrh	r3, [r7, #4]
 8001bae:	4413      	add	r3, r2
 8001bb0:	80bb      	strh	r3, [r7, #4]
				x = x0;
 8001bb2:	89bb      	ldrh	r3, [r7, #12]
 8001bb4:	80fb      	strh	r3, [r7, #6]
			}
			if (y > (y0 + height - size))
 8001bb6:	88ba      	ldrh	r2, [r7, #4]
 8001bb8:	8979      	ldrh	r1, [r7, #10]
 8001bba:	883b      	ldrh	r3, [r7, #0]
 8001bbc:	4419      	add	r1, r3
 8001bbe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001bc2:	1acb      	subs	r3, r1, r3
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	dc1b      	bgt.n	8001c00 <Show_Str+0x138>
				break;						  //越界返回
			Show_Font(x, y, str, size, mode); //显示这个汉字,空心显示
 8001bc8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001bcc:	88b9      	ldrh	r1, [r7, #4]
 8001bce:	88f8      	ldrh	r0, [r7, #6]
 8001bd0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	6a3a      	ldr	r2, [r7, #32]
 8001bda:	f7ff fe75 	bl	80018c8 <Show_Font>
			str += 2;
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	3302      	adds	r3, #2
 8001be2:	623b      	str	r3, [r7, #32]
			x += size; //下一个汉字偏移
 8001be4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	88fb      	ldrh	r3, [r7, #6]
 8001bec:	4413      	add	r3, r2
 8001bee:	80fb      	strh	r3, [r7, #6]
	while (*str != 0) //数据未结束
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f47f af7d 	bne.w	8001af4 <Show_Str+0x2c>
		}
	}
}
 8001bfa:	e002      	b.n	8001c02 <Show_Str+0x13a>
					break;		//越界返回
 8001bfc:	bf00      	nop
 8001bfe:	e000      	b.n	8001c02 <Show_Str+0x13a>
				break;						  //越界返回
 8001c00:	bf00      	nop
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd90      	pop	{r4, r7, pc}

08001c0a <LL_ADC_REG_SetSequencerRanks>:
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b089      	sub	sp, #36	; 0x24
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	60f8      	str	r0, [r7, #12]
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	332c      	adds	r3, #44	; 0x2c
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c22:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001c26:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	fa92 f2a2 	rbit	r2, r2
 8001c2e:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	fab2 f282 	clz	r2, r2
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	40d3      	lsrs	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f003 031f 	and.w	r3, r3, #31
 8001c4a:	211f      	movs	r1, #31
 8001c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	401a      	ands	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f003 011f 	and.w	r1, r3, #31
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f003 031f 	and.w	r3, r3, #31
 8001c60:	fa01 f303 	lsl.w	r3, r1, r3
 8001c64:	431a      	orrs	r2, r3
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	601a      	str	r2, [r3, #0]
}
 8001c6a:	bf00      	nop
 8001c6c:	3724      	adds	r7, #36	; 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <LL_ADC_SetChannelSamplingTime>:
{
 8001c74:	b480      	push	{r7}
 8001c76:	b08d      	sub	sp, #52	; 0x34
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	330c      	adds	r3, #12
 8001c84:	4619      	mov	r1, r3
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	fa92 f2a2 	rbit	r2, r2
 8001c98:	617a      	str	r2, [r7, #20]
  return result;
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	fab2 f282 	clz	r2, r2
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	40d3      	lsrs	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(*preg,
 8001caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001cb4:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001cb8:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	6a39      	ldr	r1, [r7, #32]
 8001cbc:	fa91 f1a1 	rbit	r1, r1
 8001cc0:	61f9      	str	r1, [r7, #28]
  return result;
 8001cc2:	69f9      	ldr	r1, [r7, #28]
 8001cc4:	fab1 f181 	clz	r1, r1
 8001cc8:	b2c9      	uxtb	r1, r1
 8001cca:	40cb      	lsrs	r3, r1
 8001ccc:	2107      	movs	r1, #7
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001cdc:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001ce0:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ce4:	fa91 f1a1 	rbit	r1, r1
 8001ce8:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8001cea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cec:	fab1 f181 	clz	r1, r1
 8001cf0:	b2c9      	uxtb	r1, r1
 8001cf2:	40cb      	lsrs	r3, r1
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfe:	601a      	str	r2, [r3, #0]
}
 8001d00:	bf00      	nop
 8001d02:	3734      	adds	r7, #52	; 0x34
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <LL_ADC_Enable>:
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f043 0201 	orr.w	r2, r3, #1
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_StartCalibration>:
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f043 0204 	orr.w	r2, r3, #4
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr

08001d46 <LL_ADC_IsCalibrationOnGoing>:
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	bf0c      	ite	eq
 8001d5a:	2301      	moveq	r3, #1
 8001d5c:	2300      	movne	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
	...

08001d6c <LL_RCC_HSE_EnableCSS>:
  * @brief  Enable the Clock Security System.
  * @rmtoll CR           CSSON         LL_RCC_HSE_EnableCSS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableCSS(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <LL_RCC_HSE_EnableCSS+0x18>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a03      	ldr	r2, [pc, #12]	; (8001d84 <LL_RCC_HSE_EnableCSS+0x18>)
 8001d76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d7a:	6013      	str	r3, [r2, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	40021000 	.word	0x40021000

08001d88 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001d8c:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <LL_RCC_HSE_EnableBypass+0x18>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a03      	ldr	r2, [pc, #12]	; (8001da0 <LL_RCC_HSE_EnableBypass+0x18>)
 8001d92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d96:	6013      	str	r3, [r2, #0]
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	40021000 	.word	0x40021000

08001da4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001da8:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <LL_RCC_HSE_Enable+0x18>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a03      	ldr	r2, [pc, #12]	; (8001dbc <LL_RCC_HSE_Enable+0x18>)
 8001dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db2:	6013      	str	r3, [r2, #0]
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	40021000 	.word	0x40021000

08001dc0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <LL_RCC_HSE_IsReady+0x20>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001dd0:	bf0c      	ite	eq
 8001dd2:	2301      	moveq	r3, #1
 8001dd4:	2300      	movne	r3, #0
 8001dd6:	b2db      	uxtb	r3, r3
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	40021000 	.word	0x40021000

08001de4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <LL_RCC_SetSysClkSource+0x24>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f023 0203 	bic.w	r2, r3, #3
 8001df4:	4904      	ldr	r1, [pc, #16]	; (8001e08 <LL_RCC_SetSysClkSource+0x24>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000

08001e0c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001e10:	4b03      	ldr	r3, [pc, #12]	; (8001e20 <LL_RCC_GetSysClkSource+0x14>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 030c 	and.w	r3, r3, #12
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr
 8001e20:	40021000 	.word	0x40021000

08001e24 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <LL_RCC_SetAHBPrescaler+0x24>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e34:	4904      	ldr	r1, [pc, #16]	; (8001e48 <LL_RCC_SetAHBPrescaler+0x24>)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000

08001e4c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e5c:	4904      	ldr	r1, [pc, #16]	; (8001e70 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000

08001e74 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e84:	4904      	ldr	r1, [pc, #16]	; (8001e98 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000

08001e9c <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <LL_RCC_SetADCClockSource+0x24>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001eac:	4904      	ldr	r1, [pc, #16]	; (8001ec0 <LL_RCC_SetADCClockSource+0x24>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000

08001ec4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001ec8:	4b04      	ldr	r3, [pc, #16]	; (8001edc <LL_RCC_PLL_Enable+0x18>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a03      	ldr	r2, [pc, #12]	; (8001edc <LL_RCC_PLL_Enable+0x18>)
 8001ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ed2:	6013      	str	r3, [r2, #0]
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr
 8001edc:	40021000 	.word	0x40021000

08001ee0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <LL_RCC_PLL_IsReady+0x20>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ef0:	bf0c      	ite	eq
 8001ef2:	2301      	moveq	r3, #1
 8001ef4:	2300      	movne	r3, #0
 8001ef6:	b2db      	uxtb	r3, r3
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	40021000 	.word	0x40021000

08001f04 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8001f0e:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	430b      	orrs	r3, r1
 8001f20:	4903      	ldr	r1, [pc, #12]	; (8001f30 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	40021000 	.word	0x40021000

08001f34 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f3e:	695a      	ldr	r2, [r3, #20]
 8001f40:	4907      	ldr	r1, [pc, #28]	; (8001f60 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f4a:	695a      	ldr	r2, [r3, #20]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f52:	68fb      	ldr	r3, [r7, #12]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40021000 	.word	0x40021000

08001f64 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f6e:	699a      	ldr	r2, [r3, #24]
 8001f70:	4907      	ldr	r1, [pc, #28]	; (8001f90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f7a:	699a      	ldr	r2, [r3, #24]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f82:	68fb      	ldr	r3, [r7, #12]
}
 8001f84:	bf00      	nop
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000

08001f94 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <LL_FLASH_SetLatency+0x24>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f023 0207 	bic.w	r2, r3, #7
 8001fa4:	4904      	ldr	r1, [pc, #16]	; (8001fb8 <LL_FLASH_SetLatency+0x24>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	600b      	str	r3, [r1, #0]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40022000 	.word	0x40022000

08001fbc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001fc0:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <LL_FLASH_GetLatency+0x14>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	40022000 	.word	0x40022000

08001fd4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	601a      	str	r2, [r3, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr

08001ff2 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	0a1b      	lsrs	r3, r3, #8
 8002000:	b29a      	uxth	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	611a      	str	r2, [r3, #16]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002016:	f005 f801 	bl	800701c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800201a:	f000 f849 	bl	80020b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800201e:	f000 f971 	bl	8002304 <MX_GPIO_Init>
  MX_CRC_Init();
 8002022:	f000 f8f3 	bl	800220c <MX_CRC_Init>
  MX_SDIO_SD_Init();
 8002026:	f000 f8f9 	bl	800221c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800202a:	f008 f847 	bl	800a0bc <MX_FATFS_Init>
  MX_FSMC_Init();
 800202e:	f000 f9cb 	bl	80023c8 <MX_FSMC_Init>
  MX_SPI1_Init();
 8002032:	f000 f913 	bl	800225c <MX_SPI1_Init>
  MX_ADC1_Init();
 8002036:	f000 f887 	bl	8002148 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  LL_SPI_Enable(SPI1);
 800203a:	4817      	ldr	r0, [pc, #92]	; (8002098 <main+0x88>)
 800203c:	f7ff ffca 	bl	8001fd4 <LL_SPI_Enable>
  LL_ADC_Enable(ADC1);
 8002040:	4816      	ldr	r0, [pc, #88]	; (800209c <main+0x8c>)
 8002042:	f7ff fe62 	bl	8001d0a <LL_ADC_Enable>
  LL_ADC_StartCalibration(ADC1);
 8002046:	4815      	ldr	r0, [pc, #84]	; (800209c <main+0x8c>)
 8002048:	f7ff fe6e 	bl	8001d28 <LL_ADC_StartCalibration>
  while (LL_ADC_IsCalibrationOnGoing(ADC1))
 800204c:	bf00      	nop
 800204e:	4813      	ldr	r0, [pc, #76]	; (800209c <main+0x8c>)
 8002050:	f7ff fe79 	bl	8001d46 <LL_ADC_IsCalibrationOnGoing>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f9      	bne.n	800204e <main+0x3e>
    ;
  while (exfuns_init()) //为fatfs相关变量申请内存
 800205a:	e00a      	b.n	8002072 <main+0x62>
  {
    LCD_ShowString(30, 20, 320, 16, 16, "Fatfs -> ERROR!");
 800205c:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <main+0x90>)
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	2310      	movs	r3, #16
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	2310      	movs	r3, #16
 8002066:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800206a:	2114      	movs	r1, #20
 800206c:	201e      	movs	r0, #30
 800206e:	f002 fd65 	bl	8004b3c <LCD_ShowString>
  while (exfuns_init()) //为fatfs相关变量申请内存
 8002072:	f7ff f8af 	bl	80011d4 <exfuns_init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1ef      	bne.n	800205c <main+0x4c>
  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800207c:	f00c f86c 	bl	800e158 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002080:	4a08      	ldr	r2, [pc, #32]	; (80020a4 <main+0x94>)
 8002082:	2100      	movs	r1, #0
 8002084:	4808      	ldr	r0, [pc, #32]	; (80020a8 <main+0x98>)
 8002086:	f00c f8cd 	bl	800e224 <osThreadNew>
 800208a:	4603      	mov	r3, r0
 800208c:	4a07      	ldr	r2, [pc, #28]	; (80020ac <main+0x9c>)
 800208e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002090:	f00c f894 	bl	800e1bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002094:	e7fe      	b.n	8002094 <main+0x84>
 8002096:	bf00      	nop
 8002098:	40013000 	.word	0x40013000
 800209c:	40012400 	.word	0x40012400
 80020a0:	080125f4 	.word	0x080125f4
 80020a4:	080127dc 	.word	0x080127dc
 80020a8:	08002491 	.word	0x08002491
 80020ac:	20001e6c 	.word	0x20001e6c

080020b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80020b4:	2002      	movs	r0, #2
 80020b6:	f7ff ff6d 	bl	8001f94 <LL_FLASH_SetLatency>
  while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 80020ba:	bf00      	nop
 80020bc:	f7ff ff7e 	bl	8001fbc <LL_FLASH_GetLatency>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d1fa      	bne.n	80020bc <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_EnableBypass();
 80020c6:	f7ff fe5f 	bl	8001d88 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 80020ca:	f7ff fe6b 	bl	8001da4 <LL_RCC_HSE_Enable>

  /* Wait till HSE is ready */
  while (LL_RCC_HSE_IsReady() != 1)
 80020ce:	bf00      	nop
 80020d0:	f7ff fe76 	bl	8001dc0 <LL_RCC_HSE_IsReady>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d1fa      	bne.n	80020d0 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_HSE_EnableCSS();
 80020da:	f7ff fe47 	bl	8001d6c <LL_RCC_HSE_EnableCSS>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 80020de:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 80020e2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80020e6:	f7ff ff0d 	bl	8001f04 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80020ea:	f7ff feeb 	bl	8001ec4 <LL_RCC_PLL_Enable>

  /* Wait till PLL is ready */
  while (LL_RCC_PLL_IsReady() != 1)
 80020ee:	bf00      	nop
 80020f0:	f7ff fef6 	bl	8001ee0 <LL_RCC_PLL_IsReady>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d1fa      	bne.n	80020f0 <SystemClock_Config+0x40>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80020fa:	2000      	movs	r0, #0
 80020fc:	f7ff fe92 	bl	8001e24 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8002100:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002104:	f7ff fea2 	bl	8001e4c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002108:	2000      	movs	r0, #0
 800210a:	f7ff feb3 	bl	8001e74 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800210e:	2002      	movs	r0, #2
 8002110:	f7ff fe68 	bl	8001de4 <LL_RCC_SetSysClkSource>

  /* Wait till System clock is ready */
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002114:	bf00      	nop
 8002116:	f7ff fe79 	bl	8001e0c <LL_RCC_GetSysClkSource>
 800211a:	4603      	mov	r3, r0
 800211c:	2b08      	cmp	r3, #8
 800211e:	d1fa      	bne.n	8002116 <SystemClock_Config+0x66>
  {
  }
  LL_SetSystemCoreClock(72000000);
 8002120:	4808      	ldr	r0, [pc, #32]	; (8002144 <SystemClock_Config+0x94>)
 8002122:	f007 ffbd 	bl	800a0a0 <LL_SetSystemCoreClock>

  /* Update the time base */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002126:	200f      	movs	r0, #15
 8002128:	f000 face 	bl	80026c8 <HAL_InitTick>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002132:	f000 f9e3 	bl	80024fc <Error_Handler>
  }
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 8002136:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800213a:	f7ff feaf 	bl	8001e9c <LL_RCC_SetADCClockSource>
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	044aa200 	.word	0x044aa200

08002148 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08e      	sub	sp, #56	; 0x38
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800214e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8002158:	2300      	movs	r3, #0
 800215a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800215c:	f107 0318 	add.w	r3, r7, #24
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	1d3b      	adds	r3, r7, #4
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	60da      	str	r2, [r3, #12]
 8002178:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 800217a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800217e:	f7ff fef1 	bl	8001f64 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002182:	2004      	movs	r0, #4
 8002184:	f7ff feee 	bl	8001f64 <LL_APB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA4   ------> ADC1_IN4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8002188:	f241 0310 	movw	r3, #4112	; 0x1010
 800218c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800218e:	2300      	movs	r3, #0
 8002190:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	4619      	mov	r1, r3
 8002196:	481a      	ldr	r0, [pc, #104]	; (8002200 <MX_ADC1_Init+0xb8>)
 8002198:	f007 f91c 	bl	80093d4 <LL_GPIO_Init>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800219c:	2300      	movs	r3, #0
 800219e:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80021a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021a8:	4619      	mov	r1, r3
 80021aa:	4816      	ldr	r0, [pc, #88]	; (8002204 <MX_ADC1_Init+0xbc>)
 80021ac:	f006 ff16 	bl	8008fdc <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80021b0:	2300      	movs	r3, #0
 80021b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80021b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021b8:	4619      	mov	r1, r3
 80021ba:	4812      	ldr	r0, [pc, #72]	; (8002204 <MX_ADC1_Init+0xbc>)
 80021bc:	f006 fec6 	bl	8008f4c <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80021c0:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80021c4:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80021d2:	2300      	movs	r3, #0
 80021d4:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80021d6:	f107 0318 	add.w	r3, r7, #24
 80021da:	4619      	mov	r1, r3
 80021dc:	4809      	ldr	r0, [pc, #36]	; (8002204 <MX_ADC1_Init+0xbc>)
 80021de:	f006 ff24 	bl	800902a <LL_ADC_REG_Init>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 80021e2:	4a09      	ldr	r2, [pc, #36]	; (8002208 <MX_ADC1_Init+0xc0>)
 80021e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021e8:	4806      	ldr	r0, [pc, #24]	; (8002204 <MX_ADC1_Init+0xbc>)
 80021ea:	f7ff fd0e 	bl	8001c0a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80021ee:	2200      	movs	r2, #0
 80021f0:	4905      	ldr	r1, [pc, #20]	; (8002208 <MX_ADC1_Init+0xc0>)
 80021f2:	4804      	ldr	r0, [pc, #16]	; (8002204 <MX_ADC1_Init+0xbc>)
 80021f4:	f7ff fd3e 	bl	8001c74 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80021f8:	bf00      	nop
 80021fa:	3738      	adds	r7, #56	; 0x38
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40010800 	.word	0x40010800
 8002204:	40012400 	.word	0x40012400
 8002208:	02c00004 	.word	0x02c00004

0800220c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
void MX_CRC_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8002210:	2040      	movs	r0, #64	; 0x40
 8002212:	f7ff fe8f 	bl	8001f34 <LL_AHB1_GRP1_EnableClock>

  /* USER CODE END CRC_Init 1 */
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
void MX_SDIO_SD_Init(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <MX_SDIO_SD_Init+0x38>)
 8002222:	4a0d      	ldr	r2, [pc, #52]	; (8002258 <MX_SDIO_SD_Init+0x3c>)
 8002224:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002226:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <MX_SDIO_SD_Init+0x38>)
 8002228:	2200      	movs	r2, #0
 800222a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <MX_SDIO_SD_Init+0x38>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002232:	4b08      	ldr	r3, [pc, #32]	; (8002254 <MX_SDIO_SD_Init+0x38>)
 8002234:	2200      	movs	r2, #0
 8002236:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <MX_SDIO_SD_Init+0x38>)
 800223a:	2200      	movs	r2, #0
 800223c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800223e:	4b05      	ldr	r3, [pc, #20]	; (8002254 <MX_SDIO_SD_Init+0x38>)
 8002240:	2200      	movs	r2, #0
 8002242:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <MX_SDIO_SD_Init+0x38>)
 8002246:	2200      	movs	r2, #0
 8002248:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20001ec0 	.word	0x20001ec0
 8002258:	40018000 	.word	0x40018000

0800225c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b090      	sub	sp, #64	; 0x40
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002262:	f107 0318 	add.w	r3, r7, #24
 8002266:	2228      	movs	r2, #40	; 0x28
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f00f f9b0 	bl	80115d0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	1d3b      	adds	r3, r7, #4
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
 800227c:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 800227e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002282:	f7ff fe6f 	bl	8001f64 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002286:	2004      	movs	r0, #4
 8002288:	f7ff fe6c 	bl	8001f64 <LL_APB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5 | LL_GPIO_PIN_7;
 800228c:	f24a 03a0 	movw	r3, #41120	; 0xa0a0
 8002290:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002292:	2309      	movs	r3, #9
 8002294:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002296:	2303      	movs	r3, #3
 8002298:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229e:	1d3b      	adds	r3, r7, #4
 80022a0:	4619      	mov	r1, r3
 80022a2:	4816      	ldr	r0, [pc, #88]	; (80022fc <MX_SPI1_Init+0xa0>)
 80022a4:	f007 f896 	bl	80093d4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80022a8:	f244 0340 	movw	r3, #16448	; 0x4040
 80022ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80022ae:	2304      	movs	r3, #4
 80022b0:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	4619      	mov	r1, r3
 80022b6:	4811      	ldr	r0, [pc, #68]	; (80022fc <MX_SPI1_Init+0xa0>)
 80022b8:	f007 f88c 	bl	80093d4 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80022bc:	2300      	movs	r3, #0
 80022be:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80022c0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80022c4:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80022c6:	2300      	movs	r3, #0
 80022c8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80022ca:	2302      	movs	r3, #2
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80022ce:	2301      	movs	r3, #1
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80022d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80022d8:	2308      	movs	r3, #8
 80022da:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80022dc:	2300      	movs	r3, #0
 80022de:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80022e0:	2300      	movs	r3, #0
 80022e2:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80022e4:	230a      	movs	r3, #10
 80022e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80022e8:	f107 0318 	add.w	r3, r7, #24
 80022ec:	4619      	mov	r1, r3
 80022ee:	4804      	ldr	r0, [pc, #16]	; (8002300 <MX_SPI1_Init+0xa4>)
 80022f0:	f007 fe5f 	bl	8009fb2 <LL_SPI_Init>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 80022f4:	bf00      	nop
 80022f6:	3740      	adds	r7, #64	; 0x40
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40010800 	.word	0x40010800
 8002300:	40013000 	.word	0x40013000

08002304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230a:	1d3b      	adds	r3, r7, #4
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8002318:	2010      	movs	r0, #16
 800231a:	f7ff fe23 	bl	8001f64 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800231e:	2004      	movs	r0, #4
 8002320:	f7ff fe20 	bl	8001f64 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOE);
 8002324:	2040      	movs	r0, #64	; 0x40
 8002326:	f7ff fe1d 	bl	8001f64 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 800232a:	2020      	movs	r0, #32
 800232c:	f7ff fe1a 	bl	8001f64 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_15);
 8002330:	4921      	ldr	r1, [pc, #132]	; (80023b8 <MX_GPIO_Init+0xb4>)
 8002332:	4822      	ldr	r0, [pc, #136]	; (80023bc <MX_GPIO_Init+0xb8>)
 8002334:	f7ff fe5d 	bl	8001ff2 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 | LL_GPIO_PIN_3);
 8002338:	f640 710f 	movw	r1, #3855	; 0xf0f
 800233c:	4820      	ldr	r0, [pc, #128]	; (80023c0 <MX_GPIO_Init+0xbc>)
 800233e:	f7ff fe58 	bl	8001ff2 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8002342:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <MX_GPIO_Init+0xb4>)
 8002344:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002346:	2301      	movs	r3, #1
 8002348:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800234a:	2303      	movs	r3, #3
 800234c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002352:	2301      	movs	r3, #1
 8002354:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	4619      	mov	r1, r3
 800235a:	4818      	ldr	r0, [pc, #96]	; (80023bc <MX_GPIO_Init+0xb8>)
 800235c:	f007 f83a 	bl	80093d4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 | LL_GPIO_PIN_3;
 8002360:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002364:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002366:	2308      	movs	r3, #8
 8002368:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800236a:	2301      	movs	r3, #1
 800236c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800236e:	1d3b      	adds	r3, r7, #4
 8002370:	4619      	mov	r1, r3
 8002372:	4812      	ldr	r0, [pc, #72]	; (80023bc <MX_GPIO_Init+0xb8>)
 8002374:	f007 f82e 	bl	80093d4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 | LL_GPIO_PIN_3;
 8002378:	f640 730f 	movw	r3, #3855	; 0xf0f
 800237c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800237e:	2301      	movs	r3, #1
 8002380:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002382:	2303      	movs	r3, #3
 8002384:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800238a:	2301      	movs	r3, #1
 800238c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	4619      	mov	r1, r3
 8002392:	480b      	ldr	r0, [pc, #44]	; (80023c0 <MX_GPIO_Init+0xbc>)
 8002394:	f007 f81e 	bl	80093d4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8002398:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <MX_GPIO_Init+0xc0>)
 800239a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800239c:	2308      	movs	r3, #8
 800239e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	4619      	mov	r1, r3
 80023a8:	4805      	ldr	r0, [pc, #20]	; (80023c0 <MX_GPIO_Init+0xbc>)
 80023aa:	f007 f813 	bl	80093d4 <LL_GPIO_Init>
}
 80023ae:	bf00      	nop
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	04800080 	.word	0x04800080
 80023bc:	40011000 	.word	0x40011000
 80023c0:	40010800 	.word	0x40010800
 80023c4:	04010001 	.word	0x04010001

080023c8 <MX_FSMC_Init>:

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80023ce:	1d3b      	adds	r3, r7, #4
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
 80023dc:	615a      	str	r2, [r3, #20]
 80023de:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80023e0:	4b28      	ldr	r3, [pc, #160]	; (8002484 <MX_FSMC_Init+0xbc>)
 80023e2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80023e6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80023e8:	4b26      	ldr	r3, [pc, #152]	; (8002484 <MX_FSMC_Init+0xbc>)
 80023ea:	4a27      	ldr	r2, [pc, #156]	; (8002488 <MX_FSMC_Init+0xc0>)
 80023ec:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80023ee:	4b25      	ldr	r3, [pc, #148]	; (8002484 <MX_FSMC_Init+0xbc>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80023f4:	4b23      	ldr	r3, [pc, #140]	; (8002484 <MX_FSMC_Init+0xbc>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80023fa:	4b22      	ldr	r3, [pc, #136]	; (8002484 <MX_FSMC_Init+0xbc>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002400:	4b20      	ldr	r3, [pc, #128]	; (8002484 <MX_FSMC_Init+0xbc>)
 8002402:	2210      	movs	r2, #16
 8002404:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002406:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <MX_FSMC_Init+0xbc>)
 8002408:	2200      	movs	r2, #0
 800240a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800240c:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <MX_FSMC_Init+0xbc>)
 800240e:	2200      	movs	r2, #0
 8002410:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002412:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <MX_FSMC_Init+0xbc>)
 8002414:	2200      	movs	r2, #0
 8002416:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002418:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <MX_FSMC_Init+0xbc>)
 800241a:	2200      	movs	r2, #0
 800241c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800241e:	4b19      	ldr	r3, [pc, #100]	; (8002484 <MX_FSMC_Init+0xbc>)
 8002420:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002424:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002426:	4b17      	ldr	r3, [pc, #92]	; (8002484 <MX_FSMC_Init+0xbc>)
 8002428:	2200      	movs	r2, #0
 800242a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800242c:	4b15      	ldr	r3, [pc, #84]	; (8002484 <MX_FSMC_Init+0xbc>)
 800242e:	2200      	movs	r2, #0
 8002430:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002432:	4b14      	ldr	r3, [pc, #80]	; (8002484 <MX_FSMC_Init+0xbc>)
 8002434:	2200      	movs	r2, #0
 8002436:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <MX_FSMC_Init+0xbc>)
 800243a:	2200      	movs	r2, #0
 800243c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 1;
 800243e:	2301      	movs	r3, #1
 8002440:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002442:	230f      	movs	r3, #15
 8002444:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 16;
 8002446:	2310      	movs	r3, #16
 8002448:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800244e:	2310      	movs	r3, #16
 8002450:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002452:	2311      	movs	r3, #17
 8002454:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800245a:	1d3b      	adds	r3, r7, #4
 800245c:	2200      	movs	r2, #0
 800245e:	4619      	mov	r1, r3
 8002460:	4808      	ldr	r0, [pc, #32]	; (8002484 <MX_FSMC_Init+0xbc>)
 8002462:	f006 fa92 	bl	800898a <HAL_SRAM_Init>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_FSMC_Init+0xa8>
  {
    Error_Handler();
 800246c:	f000 f846 	bl	80024fc <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <MX_FSMC_Init+0xc4>)
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	4a05      	ldr	r2, [pc, #20]	; (800248c <MX_FSMC_Init+0xc4>)
 8002476:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800247a:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800247c:	bf00      	nop
 800247e:	3720      	adds	r7, #32
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20001e74 	.word	0x20001e74
 8002488:	a0000104 	.word	0xa0000104
 800248c:	40010000 	.word	0x40010000

08002490 <StartDefaultTask>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */

void StartDefaultTask(void *argument)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  mp3TaskHandle = osThreadNew(mp3_play, NULL, &mp3Task_attributes);
 8002498:	4a09      	ldr	r2, [pc, #36]	; (80024c0 <StartDefaultTask+0x30>)
 800249a:	2100      	movs	r1, #0
 800249c:	4809      	ldr	r0, [pc, #36]	; (80024c4 <StartDefaultTask+0x34>)
 800249e:	f00b fec1 	bl	800e224 <osThreadNew>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4a08      	ldr	r2, [pc, #32]	; (80024c8 <StartDefaultTask+0x38>)
 80024a6:	6013      	str	r3, [r2, #0]
  showTaskHandle = osThreadNew(show_mp3_pic, NULL, &showTask_attributes);
 80024a8:	4a08      	ldr	r2, [pc, #32]	; (80024cc <StartDefaultTask+0x3c>)
 80024aa:	2100      	movs	r1, #0
 80024ac:	4808      	ldr	r0, [pc, #32]	; (80024d0 <StartDefaultTask+0x40>)
 80024ae:	f00b feb9 	bl	800e224 <osThreadNew>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4a07      	ldr	r2, [pc, #28]	; (80024d4 <StartDefaultTask+0x44>)
 80024b6:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 80024b8:	2001      	movs	r0, #1
 80024ba:	f00b ff5d 	bl	800e378 <osDelay>
 80024be:	e7fb      	b.n	80024b8 <StartDefaultTask+0x28>
 80024c0:	08012800 	.word	0x08012800
 80024c4:	08005a51 	.word	0x08005a51
 80024c8:	20001ebc 	.word	0x20001ebc
 80024cc:	08012824 	.word	0x08012824
 80024d0:	08005e79 	.word	0x08005e79
 80024d4:	20001e70 	.word	0x20001e70

080024d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d101      	bne.n	80024ee <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80024ea:	f004 fdad 	bl	8007048 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40012c00 	.word	0x40012c00

080024fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002500:	b672      	cpsid	i
}
 8002502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002504:	e7fe      	b.n	8002504 <Error_Handler+0x8>
	...

08002508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800250e:	4b18      	ldr	r3, [pc, #96]	; (8002570 <HAL_MspInit+0x68>)
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	4a17      	ldr	r2, [pc, #92]	; (8002570 <HAL_MspInit+0x68>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	6193      	str	r3, [r2, #24]
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <HAL_MspInit+0x68>)
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002526:	4b12      	ldr	r3, [pc, #72]	; (8002570 <HAL_MspInit+0x68>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	4a11      	ldr	r2, [pc, #68]	; (8002570 <HAL_MspInit+0x68>)
 800252c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002530:	61d3      	str	r3, [r2, #28]
 8002532:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <HAL_MspInit+0x68>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800253e:	2200      	movs	r2, #0
 8002540:	210f      	movs	r1, #15
 8002542:	f06f 0001 	mvn.w	r0, #1
 8002546:	f004 fe74 	bl	8007232 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800254a:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <HAL_MspInit+0x6c>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	4a04      	ldr	r2, [pc, #16]	; (8002574 <HAL_MspInit+0x6c>)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002566:	bf00      	nop
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000
 8002574:	40010000 	.word	0x40010000

08002578 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08a      	sub	sp, #40	; 0x28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f107 0318 	add.w	r3, r7, #24
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a22      	ldr	r2, [pc, #136]	; (800261c <HAL_SD_MspInit+0xa4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d13c      	bne.n	8002612 <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002598:	4b21      	ldr	r3, [pc, #132]	; (8002620 <HAL_SD_MspInit+0xa8>)
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	4a20      	ldr	r2, [pc, #128]	; (8002620 <HAL_SD_MspInit+0xa8>)
 800259e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025a2:	6153      	str	r3, [r2, #20]
 80025a4:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <HAL_SD_MspInit+0xa8>)
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025b0:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <HAL_SD_MspInit+0xa8>)
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	4a1a      	ldr	r2, [pc, #104]	; (8002620 <HAL_SD_MspInit+0xa8>)
 80025b6:	f043 0310 	orr.w	r3, r3, #16
 80025ba:	6193      	str	r3, [r2, #24]
 80025bc:	4b18      	ldr	r3, [pc, #96]	; (8002620 <HAL_SD_MspInit+0xa8>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025c8:	4b15      	ldr	r3, [pc, #84]	; (8002620 <HAL_SD_MspInit+0xa8>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	4a14      	ldr	r2, [pc, #80]	; (8002620 <HAL_SD_MspInit+0xa8>)
 80025ce:	f043 0320 	orr.w	r3, r3, #32
 80025d2:	6193      	str	r3, [r2, #24]
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <HAL_SD_MspInit+0xa8>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f003 0320 	and.w	r3, r3, #32
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80025e0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80025e4:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e6:	2302      	movs	r3, #2
 80025e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025ea:	2303      	movs	r3, #3
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ee:	f107 0318 	add.w	r3, r7, #24
 80025f2:	4619      	mov	r1, r3
 80025f4:	480b      	ldr	r0, [pc, #44]	; (8002624 <HAL_SD_MspInit+0xac>)
 80025f6:	f004 fe47 	bl	8007288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025fa:	2304      	movs	r3, #4
 80025fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fe:	2302      	movs	r3, #2
 8002600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002602:	2303      	movs	r3, #3
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002606:	f107 0318 	add.w	r3, r7, #24
 800260a:	4619      	mov	r1, r3
 800260c:	4806      	ldr	r0, [pc, #24]	; (8002628 <HAL_SD_MspInit+0xb0>)
 800260e:	f004 fe3b 	bl	8007288 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002612:	bf00      	nop
 8002614:	3728      	adds	r7, #40	; 0x28
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40018000 	.word	0x40018000
 8002620:	40021000 	.word	0x40021000
 8002624:	40011000 	.word	0x40011000
 8002628:	40011400 	.word	0x40011400

0800262c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002632:	f107 0308 	add.w	r3, r7, #8
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	605a      	str	r2, [r3, #4]
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8002640:	4b18      	ldr	r3, [pc, #96]	; (80026a4 <HAL_FSMC_MspInit+0x78>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d129      	bne.n	800269c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8002648:	4b16      	ldr	r3, [pc, #88]	; (80026a4 <HAL_FSMC_MspInit+0x78>)
 800264a:	2201      	movs	r2, #1
 800264c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800264e:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <HAL_FSMC_MspInit+0x7c>)
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	4a15      	ldr	r2, [pc, #84]	; (80026a8 <HAL_FSMC_MspInit+0x7c>)
 8002654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002658:	6153      	str	r3, [r2, #20]
 800265a:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <HAL_FSMC_MspInit+0x7c>)
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002662:	607b      	str	r3, [r7, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002666:	f64f 7380 	movw	r3, #65408	; 0xff80
 800266a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266c:	2302      	movs	r3, #2
 800266e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002670:	2303      	movs	r3, #3
 8002672:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002674:	f107 0308 	add.w	r3, r7, #8
 8002678:	4619      	mov	r1, r3
 800267a:	480c      	ldr	r0, [pc, #48]	; (80026ac <HAL_FSMC_MspInit+0x80>)
 800267c:	f004 fe04 	bl	8007288 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002680:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8002684:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002686:	2302      	movs	r3, #2
 8002688:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800268a:	2303      	movs	r3, #3
 800268c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800268e:	f107 0308 	add.w	r3, r7, #8
 8002692:	4619      	mov	r1, r3
 8002694:	4806      	ldr	r0, [pc, #24]	; (80026b0 <HAL_FSMC_MspInit+0x84>)
 8002696:	f004 fdf7 	bl	8007288 <HAL_GPIO_Init>
 800269a:	e000      	b.n	800269e <HAL_FSMC_MspInit+0x72>
    return;
 800269c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	200001d0 	.word	0x200001d0
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40011800 	.word	0x40011800
 80026b0:	40011400 	.word	0x40011400

080026b4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80026bc:	f7ff ffb6 	bl	800262c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80026c0:	bf00      	nop
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08c      	sub	sp, #48	; 0x30
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80026d8:	2200      	movs	r2, #0
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	2019      	movs	r0, #25
 80026de:	f004 fda8 	bl	8007232 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80026e2:	2019      	movs	r0, #25
 80026e4:	f004 fdc1 	bl	800726a <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80026e8:	4b1e      	ldr	r3, [pc, #120]	; (8002764 <HAL_InitTick+0x9c>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	4a1d      	ldr	r2, [pc, #116]	; (8002764 <HAL_InitTick+0x9c>)
 80026ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026f2:	6193      	str	r3, [r2, #24]
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <HAL_InitTick+0x9c>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002700:	f107 0210 	add.w	r2, r7, #16
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	4611      	mov	r1, r2
 800270a:	4618      	mov	r0, r3
 800270c:	f004 ff86 	bl	800761c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002710:	f004 ff70 	bl	80075f4 <HAL_RCC_GetPCLK2Freq>
 8002714:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002718:	4a13      	ldr	r2, [pc, #76]	; (8002768 <HAL_InitTick+0xa0>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	0c9b      	lsrs	r3, r3, #18
 8002720:	3b01      	subs	r3, #1
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <HAL_InitTick+0xa4>)
 8002726:	4a12      	ldr	r2, [pc, #72]	; (8002770 <HAL_InitTick+0xa8>)
 8002728:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <HAL_InitTick+0xa4>)
 800272c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002730:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002732:	4a0e      	ldr	r2, [pc, #56]	; (800276c <HAL_InitTick+0xa4>)
 8002734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002736:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <HAL_InitTick+0xa4>)
 800273a:	2200      	movs	r2, #0
 800273c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_InitTick+0xa4>)
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002744:	4809      	ldr	r0, [pc, #36]	; (800276c <HAL_InitTick+0xa4>)
 8002746:	f006 f96d 	bl	8008a24 <HAL_TIM_Base_Init>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d104      	bne.n	800275a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002750:	4806      	ldr	r0, [pc, #24]	; (800276c <HAL_InitTick+0xa4>)
 8002752:	f006 f9bf 	bl	8008ad4 <HAL_TIM_Base_Start_IT>
 8002756:	4603      	mov	r3, r0
 8002758:	e000      	b.n	800275c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
}
 800275c:	4618      	mov	r0, r3
 800275e:	3730      	adds	r7, #48	; 0x30
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40021000 	.word	0x40021000
 8002768:	431bde83 	.word	0x431bde83
 800276c:	20001f44 	.word	0x20001f44
 8002770:	40012c00 	.word	0x40012c00

08002774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002778:	e7fe      	b.n	8002778 <NMI_Handler+0x4>

0800277a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800277e:	e7fe      	b.n	800277e <HardFault_Handler+0x4>

08002780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002784:	e7fe      	b.n	8002784 <MemManage_Handler+0x4>

08002786 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002786:	b480      	push	{r7}
 8002788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800278a:	e7fe      	b.n	800278a <BusFault_Handler+0x4>

0800278c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002790:	e7fe      	b.n	8002790 <UsageFault_Handler+0x4>

08002792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr
	...

080027a0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027a4:	4802      	ldr	r0, [pc, #8]	; (80027b0 <TIM1_UP_IRQHandler+0x10>)
 80027a6:	f006 f9f5 	bl	8008b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20001f44 	.word	0x20001f44

080027b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
	return 1;
 80027b8:	2301      	movs	r3, #1
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr

080027c2 <_kill>:

int _kill(int pid, int sig)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027cc:	f00e fdbe 	bl	801134c <__errno>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2216      	movs	r2, #22
 80027d4:	601a      	str	r2, [r3, #0]
	return -1;
 80027d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <_exit>:

void _exit (int status)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027ea:	f04f 31ff 	mov.w	r1, #4294967295
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff ffe7 	bl	80027c2 <_kill>
	while (1) {}		/* Make sure we hang here */
 80027f4:	e7fe      	b.n	80027f4 <_exit+0x12>

080027f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b086      	sub	sp, #24
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	60f8      	str	r0, [r7, #12]
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	e00a      	b.n	800281e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002808:	f3af 8000 	nop.w
 800280c:	4601      	mov	r1, r0
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	60ba      	str	r2, [r7, #8]
 8002814:	b2ca      	uxtb	r2, r1
 8002816:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	3301      	adds	r3, #1
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	429a      	cmp	r2, r3
 8002824:	dbf0      	blt.n	8002808 <_read+0x12>
	}

return len;
 8002826:	687b      	ldr	r3, [r7, #4]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	e009      	b.n	8002856 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	60ba      	str	r2, [r7, #8]
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	3301      	adds	r3, #1
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	429a      	cmp	r2, r3
 800285c:	dbf1      	blt.n	8002842 <_write+0x12>
	}
	return len;
 800285e:	687b      	ldr	r3, [r7, #4]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <_close>:

int _close(int file)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
	return -1;
 8002870:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800288e:	605a      	str	r2, [r3, #4]
	return 0;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <_isatty>:

int _isatty(int file)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
	return 1;
 80028a4:	2301      	movs	r3, #1
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
	return 0;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028d0:	4a14      	ldr	r2, [pc, #80]	; (8002924 <_sbrk+0x5c>)
 80028d2:	4b15      	ldr	r3, [pc, #84]	; (8002928 <_sbrk+0x60>)
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028dc:	4b13      	ldr	r3, [pc, #76]	; (800292c <_sbrk+0x64>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d102      	bne.n	80028ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028e4:	4b11      	ldr	r3, [pc, #68]	; (800292c <_sbrk+0x64>)
 80028e6:	4a12      	ldr	r2, [pc, #72]	; (8002930 <_sbrk+0x68>)
 80028e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ea:	4b10      	ldr	r3, [pc, #64]	; (800292c <_sbrk+0x64>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d207      	bcs.n	8002908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028f8:	f00e fd28 	bl	801134c <__errno>
 80028fc:	4603      	mov	r3, r0
 80028fe:	220c      	movs	r2, #12
 8002900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002902:	f04f 33ff 	mov.w	r3, #4294967295
 8002906:	e009      	b.n	800291c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002908:	4b08      	ldr	r3, [pc, #32]	; (800292c <_sbrk+0x64>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800290e:	4b07      	ldr	r3, [pc, #28]	; (800292c <_sbrk+0x64>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	4a05      	ldr	r2, [pc, #20]	; (800292c <_sbrk+0x64>)
 8002918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800291a:	68fb      	ldr	r3, [r7, #12]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20010000 	.word	0x20010000
 8002928:	00000800 	.word	0x00000800
 800292c:	200001d4 	.word	0x200001d4
 8002930:	200024f8 	.word	0x200024f8

08002934 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <ai_draw_init>:
	return (dst2 >> 16) | dst2;
}
//初始化智能画点
//内部调用
void ai_draw_init(void)
{
 8002940:	b5b0      	push	{r4, r5, r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
	float temp, temp1;
	temp = (float)picinfo.S_Width / picinfo.ImgWidth;
 8002946:	4b55      	ldr	r3, [pc, #340]	; (8002a9c <ai_draw_init+0x15c>)
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe f926 	bl	8000b9c <__aeabi_ui2f>
 8002950:	4604      	mov	r4, r0
 8002952:	4b52      	ldr	r3, [pc, #328]	; (8002a9c <ai_draw_init+0x15c>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe f920 	bl	8000b9c <__aeabi_ui2f>
 800295c:	4603      	mov	r3, r0
 800295e:	4619      	mov	r1, r3
 8002960:	4620      	mov	r0, r4
 8002962:	f7fe fa27 	bl	8000db4 <__aeabi_fdiv>
 8002966:	4603      	mov	r3, r0
 8002968:	603b      	str	r3, [r7, #0]
	temp1 = (float)picinfo.S_Height / picinfo.ImgHeight;
 800296a:	4b4c      	ldr	r3, [pc, #304]	; (8002a9c <ai_draw_init+0x15c>)
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe f914 	bl	8000b9c <__aeabi_ui2f>
 8002974:	4604      	mov	r4, r0
 8002976:	4b49      	ldr	r3, [pc, #292]	; (8002a9c <ai_draw_init+0x15c>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe f90e 	bl	8000b9c <__aeabi_ui2f>
 8002980:	4603      	mov	r3, r0
 8002982:	4619      	mov	r1, r3
 8002984:	4620      	mov	r0, r4
 8002986:	f7fe fa15 	bl	8000db4 <__aeabi_fdiv>
 800298a:	4603      	mov	r3, r0
 800298c:	607b      	str	r3, [r7, #4]
	if (temp < temp1)
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	6838      	ldr	r0, [r7, #0]
 8002992:	f7fe faf9 	bl	8000f88 <__aeabi_fcmplt>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <ai_draw_init+0x60>
		temp1 = temp; //取较小的那个
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	607b      	str	r3, [r7, #4]
	if (temp1 > 1)
 80029a0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7fe fb0d 	bl	8000fc4 <__aeabi_fcmpgt>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <ai_draw_init+0x76>
		temp1 = 1;
 80029b0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80029b4:	607b      	str	r3, [r7, #4]
	//使图片处于所给区域的中间
	picinfo.S_XOFF += (picinfo.S_Width - temp1 * picinfo.ImgWidth) / 2;
 80029b6:	4b39      	ldr	r3, [pc, #228]	; (8002a9c <ai_draw_init+0x15c>)
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe f8ee 	bl	8000b9c <__aeabi_ui2f>
 80029c0:	4604      	mov	r4, r0
 80029c2:	4b36      	ldr	r3, [pc, #216]	; (8002a9c <ai_draw_init+0x15c>)
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe f8e8 	bl	8000b9c <__aeabi_ui2f>
 80029cc:	4605      	mov	r5, r0
 80029ce:	4b33      	ldr	r3, [pc, #204]	; (8002a9c <ai_draw_init+0x15c>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe f8e2 	bl	8000b9c <__aeabi_ui2f>
 80029d8:	4603      	mov	r3, r0
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fe f935 	bl	8000c4c <__aeabi_fmul>
 80029e2:	4603      	mov	r3, r0
 80029e4:	4619      	mov	r1, r3
 80029e6:	4628      	mov	r0, r5
 80029e8:	f7fe f826 	bl	8000a38 <__aeabi_fsub>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe f9de 	bl	8000db4 <__aeabi_fdiv>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4619      	mov	r1, r3
 80029fc:	4620      	mov	r0, r4
 80029fe:	f7fe f81d 	bl	8000a3c <__addsf3>
 8002a02:	4603      	mov	r3, r0
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe fae7 	bl	8000fd8 <__aeabi_f2uiz>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4a23      	ldr	r2, [pc, #140]	; (8002a9c <ai_draw_init+0x15c>)
 8002a0e:	6193      	str	r3, [r2, #24]
	picinfo.S_YOFF += (picinfo.S_Height - temp1 * picinfo.ImgHeight) / 2;
 8002a10:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <ai_draw_init+0x15c>)
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fe f8c1 	bl	8000b9c <__aeabi_ui2f>
 8002a1a:	4604      	mov	r4, r0
 8002a1c:	4b1f      	ldr	r3, [pc, #124]	; (8002a9c <ai_draw_init+0x15c>)
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fe f8bb 	bl	8000b9c <__aeabi_ui2f>
 8002a26:	4605      	mov	r5, r0
 8002a28:	4b1c      	ldr	r3, [pc, #112]	; (8002a9c <ai_draw_init+0x15c>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fe f8b5 	bl	8000b9c <__aeabi_ui2f>
 8002a32:	4603      	mov	r3, r0
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe f908 	bl	8000c4c <__aeabi_fmul>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4628      	mov	r0, r5
 8002a42:	f7fd fff9 	bl	8000a38 <__aeabi_fsub>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fe f9b1 	bl	8000db4 <__aeabi_fdiv>
 8002a52:	4603      	mov	r3, r0
 8002a54:	4619      	mov	r1, r3
 8002a56:	4620      	mov	r0, r4
 8002a58:	f7fd fff0 	bl	8000a3c <__addsf3>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe faba 	bl	8000fd8 <__aeabi_f2uiz>
 8002a64:	4603      	mov	r3, r0
 8002a66:	4a0d      	ldr	r2, [pc, #52]	; (8002a9c <ai_draw_init+0x15c>)
 8002a68:	61d3      	str	r3, [r2, #28]
	temp1 *= 8192; //扩大8192倍
 8002a6a:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fe f8ec 	bl	8000c4c <__aeabi_fmul>
 8002a74:	4603      	mov	r3, r0
 8002a76:	607b      	str	r3, [r7, #4]
	picinfo.Div_Fac = temp1;
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7fe faad 	bl	8000fd8 <__aeabi_f2uiz>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4a06      	ldr	r2, [pc, #24]	; (8002a9c <ai_draw_init+0x15c>)
 8002a82:	60d3      	str	r3, [r2, #12]
	picinfo.staticx = 0xffff;
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <ai_draw_init+0x15c>)
 8002a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a8a:	621a      	str	r2, [r3, #32]
	picinfo.staticy = 0xffff; //放到一个不可能的值上面
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <ai_draw_init+0x15c>)
 8002a8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a92:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a9c:	20001f8c 	.word	0x20001f8c

08002aa0 <is_element_ok>:
//判断这个像素是否可以显示
//(x,y) :像素原始坐标
//chg   :功能变量.
//返回值:0,不需要显示.1,需要显示
uint8_t is_element_ok(uint16_t x, uint16_t y, uint8_t chg)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	80fb      	strh	r3, [r7, #6]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	80bb      	strh	r3, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	70fb      	strb	r3, [r7, #3]
	if (x != picinfo.staticx || y != picinfo.staticy)
 8002ab2:	88fa      	ldrh	r2, [r7, #6]
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <is_element_ok+0x48>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d104      	bne.n	8002ac6 <is_element_ok+0x26>
 8002abc:	88ba      	ldrh	r2, [r7, #4]
 8002abe:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <is_element_ok+0x48>)
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d00a      	beq.n	8002adc <is_element_ok+0x3c>
	{
		if (chg == 1)
 8002ac6:	78fb      	ldrb	r3, [r7, #3]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d105      	bne.n	8002ad8 <is_element_ok+0x38>
		{
			picinfo.staticx = x;
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	4a06      	ldr	r2, [pc, #24]	; (8002ae8 <is_element_ok+0x48>)
 8002ad0:	6213      	str	r3, [r2, #32]
			picinfo.staticy = y;
 8002ad2:	88bb      	ldrh	r3, [r7, #4]
 8002ad4:	4a04      	ldr	r2, [pc, #16]	; (8002ae8 <is_element_ok+0x48>)
 8002ad6:	6253      	str	r3, [r2, #36]	; 0x24
		}
		return 1;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <is_element_ok+0x3e>
	}
	else
		return 0;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr
 8002ae8:	20001f8c 	.word	0x20001f8c

08002aec <alloc_pool>:

static void *alloc_pool(		  /* Pointer to allocated memory block (NULL:no memory available) */
						JDEC *jd, /* Pointer to the decompressor object */
						UINT nd	  /* Number of bytes to allocate */
)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
	char *rp = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]

	nd = (nd + 3) & ~3; /* Align block size to the word boundary */
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	3303      	adds	r3, #3
 8002afe:	f023 0303 	bic.w	r3, r3, #3
 8002b02:	603b      	str	r3, [r7, #0]

	if (jd->sz_pool >= nd)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d80d      	bhi.n	8002b2a <alloc_pool+0x3e>
	{
		jd->sz_pool -= nd;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	1ad2      	subs	r2, r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	671a      	str	r2, [r3, #112]	; 0x70
		rp = (char *)jd->pool;		  /* Get start of available memory pool */
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b1e:	60fb      	str	r3, [r7, #12]
		jd->pool = (void *)(rp + nd); /* Allocate requierd bytes */
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	441a      	add	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	66da      	str	r2, [r3, #108]	; 0x6c
	}

	return (void *)rp; /* Return allocated memory block (NULL:no memory to allocate) */
 8002b2a:	68fb      	ldr	r3, [r7, #12]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
	...

08002b38 <create_qt_tbl>:
static UINT create_qt_tbl(					/* 0:OK, !0:Failed */
						  JDEC *jd,			/* Pointer to the decompressor object */
						  const BYTE *data, /* Pointer to the quantizer tables */
						  UINT ndata		/* Size of input data */
)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE d, z;
	LONG *pb;

	while (ndata)
 8002b44:	e048      	b.n	8002bd8 <create_qt_tbl+0xa0>
	{ /* Process all tables in the segment */
		if (ndata < 65)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b40      	cmp	r3, #64	; 0x40
 8002b4a:	d801      	bhi.n	8002b50 <create_qt_tbl+0x18>
			return JDR_FMT1; /* Err: table size is unaligned */
 8002b4c:	2306      	movs	r3, #6
 8002b4e:	e047      	b.n	8002be0 <create_qt_tbl+0xa8>
		ndata -= 65;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3b41      	subs	r3, #65	; 0x41
 8002b54:	607b      	str	r3, [r7, #4]
		d = *data++; /* Get table property */
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	60ba      	str	r2, [r7, #8]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	76fb      	strb	r3, [r7, #27]
		if (d & 0xF0)
 8002b60:	7efb      	ldrb	r3, [r7, #27]
 8002b62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <create_qt_tbl+0x36>
			return JDR_FMT1;					/* Err: not 8-bit resolution */
 8002b6a:	2306      	movs	r3, #6
 8002b6c:	e038      	b.n	8002be0 <create_qt_tbl+0xa8>
		i = d & 3;								/* Get table ID */
 8002b6e:	7efb      	ldrb	r3, [r7, #27]
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	61fb      	str	r3, [r7, #28]
		pb = alloc_pool(jd, 64 * sizeof(LONG)); /* Allocate a memory block for the table */
 8002b76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f7ff ffb6 	bl	8002aec <alloc_pool>
 8002b80:	6178      	str	r0, [r7, #20]
		if (!pb)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <create_qt_tbl+0x54>
			return JDR_MEM1; /* Err: not enough memory */
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e029      	b.n	8002be0 <create_qt_tbl+0xa8>
		jd->qttbl[i] = pb;	 /* Register the table */
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3314      	adds	r3, #20
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	605a      	str	r2, [r3, #4]
		for (i = 0; i < 64; i++)
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
 8002b9e:	e018      	b.n	8002bd2 <create_qt_tbl+0x9a>
		{											  /* Load the table */
			z = ZIG(i);								  /* Zigzag-order to raster-order conversion */
 8002ba0:	4a11      	ldr	r2, [pc, #68]	; (8002be8 <create_qt_tbl+0xb0>)
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	74fb      	strb	r3, [r7, #19]
			pb[z] = (LONG)((DWORD)*data++ * IPSF(z)); /* Apply scale factor of Arai algorithm to the de-quantizers */
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	60ba      	str	r2, [r7, #8]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	7cfb      	ldrb	r3, [r7, #19]
 8002bb6:	4a0d      	ldr	r2, [pc, #52]	; (8002bec <create_qt_tbl+0xb4>)
 8002bb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bbc:	fb03 f101 	mul.w	r1, r3, r1
 8002bc0:	7cfb      	ldrb	r3, [r7, #19]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	460a      	mov	r2, r1
 8002bca:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 64; i++)
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	2b3f      	cmp	r3, #63	; 0x3f
 8002bd6:	d9e3      	bls.n	8002ba0 <create_qt_tbl+0x68>
	while (ndata)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1b3      	bne.n	8002b46 <create_qt_tbl+0xe>
		}
	}

	return JDR_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3720      	adds	r7, #32
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	08012850 	.word	0x08012850
 8002bec:	08012890 	.word	0x08012890

08002bf0 <create_huffman_tbl>:
static UINT create_huffman_tbl(					 /* 0:OK, !0:Failed */
							   JDEC *jd,		 /* Pointer to the decompressor object */
							   const BYTE *data, /* Pointer to the packed huffman tables */
							   UINT ndata		 /* Size of input data */
)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08e      	sub	sp, #56	; 0x38
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
	UINT i, j, b, np, cls, num;
	BYTE d, *pb, *pd;
	WORD hc, *ph;

	while (ndata)
 8002bfc:	e0c5      	b.n	8002d8a <create_huffman_tbl+0x19a>
	{ /* Process all tables in the segment */
		if (ndata < 17)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b10      	cmp	r3, #16
 8002c02:	d801      	bhi.n	8002c08 <create_huffman_tbl+0x18>
			return JDR_FMT1; /* Err: wrong data size */
 8002c04:	2306      	movs	r3, #6
 8002c06:	e0c5      	b.n	8002d94 <create_huffman_tbl+0x1a4>
		ndata -= 17;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3b11      	subs	r3, #17
 8002c0c:	607b      	str	r3, [r7, #4]
		d = *data++; /* Get table number and class */
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	60ba      	str	r2, [r7, #8]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		cls = (d >> 4);
 8002c1a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002c1e:	091b      	lsrs	r3, r3, #4
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	61fb      	str	r3, [r7, #28]
		num = d & 0x0F; /* class = dc(0)/ac(1), table number = 0/1 */
 8002c24:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	61bb      	str	r3, [r7, #24]
		if (d & 0xEE)
 8002c2e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002c32:	f003 03ee 	and.w	r3, r3, #238	; 0xee
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <create_huffman_tbl+0x4e>
			return JDR_FMT1;	 /* Err: invalid class/number */
 8002c3a:	2306      	movs	r3, #6
 8002c3c:	e0aa      	b.n	8002d94 <create_huffman_tbl+0x1a4>
		pb = alloc_pool(jd, 16); /* Allocate a memory block for the bit distribution table */
 8002c3e:	2110      	movs	r1, #16
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f7ff ff53 	bl	8002aec <alloc_pool>
 8002c46:	6178      	str	r0, [r7, #20]
		if (!pb)
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <create_huffman_tbl+0x62>
			return JDR_MEM1; /* Err: not enough memory */
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e0a0      	b.n	8002d94 <create_huffman_tbl+0x1a4>
		jd->huffbits[num][cls] = pb;
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	0059      	lsls	r1, r3, #1
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	440b      	add	r3, r1
 8002c5c:	3308      	adds	r3, #8
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	605a      	str	r2, [r3, #4]
		for (np = i = 0; i < 16; i++)
 8002c66:	2300      	movs	r3, #0
 8002c68:	637b      	str	r3, [r7, #52]	; 0x34
 8002c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c6e:	e011      	b.n	8002c94 <create_huffman_tbl+0xa4>
		{ /* Load number of patterns for 1 to 16-bit code */
			pb[i] = b = *data++;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	60ba      	str	r2, [r7, #8]
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c7e:	4413      	add	r3, r2
 8002c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]
			np += b; /* Get sum of code words for each code */
 8002c86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8a:	4413      	add	r3, r2
 8002c8c:	62bb      	str	r3, [r7, #40]	; 0x28
		for (np = i = 0; i < 16; i++)
 8002c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c90:	3301      	adds	r3, #1
 8002c92:	637b      	str	r3, [r7, #52]	; 0x34
 8002c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c96:	2b0f      	cmp	r3, #15
 8002c98:	d9ea      	bls.n	8002c70 <create_huffman_tbl+0x80>
		}

		ph = alloc_pool(jd, np * sizeof(WORD)); /* Allocate a memory block for the code word table */
 8002c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f7ff ff23 	bl	8002aec <alloc_pool>
 8002ca6:	6138      	str	r0, [r7, #16]
		if (!ph)
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <create_huffman_tbl+0xc2>
			return JDR_MEM1; /* Err: not enough memory */
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e070      	b.n	8002d94 <create_huffman_tbl+0x1a4>
		jd->huffcode[num][cls] = ph;
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	0059      	lsls	r1, r3, #1
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	440b      	add	r3, r1
 8002cbc:	330c      	adds	r3, #12
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	605a      	str	r2, [r3, #4]
		hc = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	847b      	strh	r3, [r7, #34]	; 0x22
		for (j = i = 0; i < 16; i++)
 8002cca:	2300      	movs	r3, #0
 8002ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8002cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd0:	633b      	str	r3, [r7, #48]	; 0x30
 8002cd2:	e01a      	b.n	8002d0a <create_huffman_tbl+0x11a>
		{ /* Re-build huffman code word table */
			b = pb[i];
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd8:	4413      	add	r3, r2
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
			while (b--)
 8002cde:	e009      	b.n	8002cf4 <create_huffman_tbl+0x104>
				ph[j++] = hc++;
 8002ce0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002ce2:	1c53      	adds	r3, r2, #1
 8002ce4:	847b      	strh	r3, [r7, #34]	; 0x22
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce8:	1c59      	adds	r1, r3, #1
 8002cea:	6339      	str	r1, [r7, #48]	; 0x30
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	6939      	ldr	r1, [r7, #16]
 8002cf0:	440b      	add	r3, r1
 8002cf2:	801a      	strh	r2, [r3, #0]
			while (b--)
 8002cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf6:	1e5a      	subs	r2, r3, #1
 8002cf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <create_huffman_tbl+0xf0>
			hc <<= 1;
 8002cfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	847b      	strh	r3, [r7, #34]	; 0x22
		for (j = i = 0; i < 16; i++)
 8002d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d06:	3301      	adds	r3, #1
 8002d08:	637b      	str	r3, [r7, #52]	; 0x34
 8002d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0c:	2b0f      	cmp	r3, #15
 8002d0e:	d9e1      	bls.n	8002cd4 <create_huffman_tbl+0xe4>
		}

		if (ndata < np)
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d201      	bcs.n	8002d1c <create_huffman_tbl+0x12c>
			return JDR_FMT1; /* Err: wrong data size */
 8002d18:	2306      	movs	r3, #6
 8002d1a:	e03b      	b.n	8002d94 <create_huffman_tbl+0x1a4>
		ndata -= np;
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	607b      	str	r3, [r7, #4]
		pd = alloc_pool(jd, np); /* Allocate a memory block for the decoded data */
 8002d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f7ff fee0 	bl	8002aec <alloc_pool>
 8002d2c:	6278      	str	r0, [r7, #36]	; 0x24
		if (!pd)
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <create_huffman_tbl+0x148>
			return JDR_MEM1; /* Err: not enough memory */
 8002d34:	2303      	movs	r3, #3
 8002d36:	e02d      	b.n	8002d94 <create_huffman_tbl+0x1a4>
		jd->huffdata[num][cls] = pd;
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	0059      	lsls	r1, r3, #1
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	440b      	add	r3, r1
 8002d42:	3310      	adds	r3, #16
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4a:	605a      	str	r2, [r3, #4]
		for (i = 0; i < np; i++)
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d50:	e017      	b.n	8002d82 <create_huffman_tbl+0x192>
		{ /* Load decoded data corresponds to each code ward */
			d = *data++;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	60ba      	str	r2, [r7, #8]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			if (!cls && d > 11)
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d105      	bne.n	8002d70 <create_huffman_tbl+0x180>
 8002d64:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002d68:	2b0b      	cmp	r3, #11
 8002d6a:	d901      	bls.n	8002d70 <create_huffman_tbl+0x180>
				return JDR_FMT1;
 8002d6c:	2306      	movs	r3, #6
 8002d6e:	e011      	b.n	8002d94 <create_huffman_tbl+0x1a4>
			*pd++ = d;
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	627a      	str	r2, [r7, #36]	; 0x24
 8002d76:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002d7a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < np; i++)
 8002d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7e:	3301      	adds	r3, #1
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
 8002d82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d3e3      	bcc.n	8002d52 <create_huffman_tbl+0x162>
	while (ndata)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f47f af36 	bne.w	8002bfe <create_huffman_tbl+0xe>
		}
	}

	return JDR_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3738      	adds	r7, #56	; 0x38
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <bitext>:

static INT bitext(			/* >=0: extracted data, <0: error code */
				  JDEC *jd, /* Pointer to the decompressor object */
				  UINT nbit /* Number of bits to extract (1 to 11) */
)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b088      	sub	sp, #32
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
	BYTE msk, s, *dp;
	UINT dc, v, f;

	msk = jd->dmsk;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	7b1b      	ldrb	r3, [r3, #12]
 8002daa:	77fb      	strb	r3, [r7, #31]
	dc = jd->dctr;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	617b      	str	r3, [r7, #20]
	dp = jd->dptr; /* Bit mask, number of data available, read ptr */
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	61bb      	str	r3, [r7, #24]
	s = *dp;
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	77bb      	strb	r3, [r7, #30]
	v = f = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	613b      	str	r3, [r7, #16]
	do
	{
		if (!msk)
 8002dc6:	7ffb      	ldrb	r3, [r7, #31]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d136      	bne.n	8002e3a <bitext+0x9e>
		{ /* Next byte? */
			if (!dc)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d110      	bne.n	8002df4 <bitext+0x58>
			{					/* No input data is available, re-fill input buffer */
				dp = jd->inbuf; /* Top of input buffer */
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	61bb      	str	r3, [r7, #24]
				dc = jd->infunc(jd, dp, JD_SZBUF);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ddc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002de0:	69b9      	ldr	r1, [r7, #24]
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	4798      	blx	r3
 8002de6:	6178      	str	r0, [r7, #20]
				if (!dc)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d105      	bne.n	8002dfa <bitext+0x5e>
					return 0 - (INT)JDR_INP; /* Err: read error or wrong stream termination */
 8002dee:	f06f 0301 	mvn.w	r3, #1
 8002df2:	e041      	b.n	8002e78 <bitext+0xdc>
			}
			else
			{
				dp++; /* Next data ptr */
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	3301      	adds	r3, #1
 8002df8:	61bb      	str	r3, [r7, #24]
			}
			dc--; /* Decrement number of available bytes */
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	617b      	str	r3, [r7, #20]
			if (f)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00e      	beq.n	8002e24 <bitext+0x88>
			{		   /* In flag sequence? */
				f = 0; /* Exit flag sequence */
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
				if (*dp != 0)
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <bitext+0x7c>
					return 0 - (INT)JDR_FMT1; /* Err: unexpected flag is detected (may be collapted data) */
 8002e12:	f06f 0305 	mvn.w	r3, #5
 8002e16:	e02f      	b.n	8002e78 <bitext+0xdc>
				*dp = s = 0xFF;				  /* The flag is a data 0xFF */
 8002e18:	23ff      	movs	r3, #255	; 0xff
 8002e1a:	77bb      	strb	r3, [r7, #30]
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	7fba      	ldrb	r2, [r7, #30]
 8002e20:	701a      	strb	r2, [r3, #0]
 8002e22:	e008      	b.n	8002e36 <bitext+0x9a>
			}
			else
			{
				s = *dp; /* Get next data byte */
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	77bb      	strb	r3, [r7, #30]
				if (s == 0xFF)
 8002e2a:	7fbb      	ldrb	r3, [r7, #30]
 8002e2c:	2bff      	cmp	r3, #255	; 0xff
 8002e2e:	d102      	bne.n	8002e36 <bitext+0x9a>
				{ /* Is start of flag sequence? */
					f = 1;
 8002e30:	2301      	movs	r3, #1
 8002e32:	60fb      	str	r3, [r7, #12]
					continue; /* Enter flag sequence */
 8002e34:	e013      	b.n	8002e5e <bitext+0xc2>
				}
			}
			msk = 0x80; /* Read from MSB */
 8002e36:	2380      	movs	r3, #128	; 0x80
 8002e38:	77fb      	strb	r3, [r7, #31]
		}
		v <<= 1; /* Get a bit */
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	613b      	str	r3, [r7, #16]
		if (s & msk)
 8002e40:	7fba      	ldrb	r2, [r7, #30]
 8002e42:	7ffb      	ldrb	r3, [r7, #31]
 8002e44:	4013      	ands	r3, r2
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <bitext+0xb6>
			v++;
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	613b      	str	r3, [r7, #16]
		msk >>= 1;
 8002e52:	7ffb      	ldrb	r3, [r7, #31]
 8002e54:	085b      	lsrs	r3, r3, #1
 8002e56:	77fb      	strb	r3, [r7, #31]
		nbit--;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	603b      	str	r3, [r7, #0]
	} while (nbit);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1b0      	bne.n	8002dc6 <bitext+0x2a>
	jd->dmsk = msk;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	7ffa      	ldrb	r2, [r7, #31]
 8002e68:	731a      	strb	r2, [r3, #12]
	jd->dctr = dc;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	601a      	str	r2, [r3, #0]
	jd->dptr = dp;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	605a      	str	r2, [r3, #4]

	return (INT)v;
 8002e76:	693b      	ldr	r3, [r7, #16]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3720      	adds	r7, #32
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <huffext>:
				   JDEC *jd,		  /* Pointer to the decompressor object */
				   const BYTE *hbits, /* Pointer to the bit distribution table */
				   const WORD *hcode, /* Pointer to the code word table */
				   const BYTE *hdata  /* Pointer to the data table */
)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08c      	sub	sp, #48	; 0x30
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	603b      	str	r3, [r7, #0]
	BYTE msk, s, *dp;
	UINT dc, v, f, bl, nd;

	msk = jd->dmsk;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	7b1b      	ldrb	r3, [r3, #12]
 8002e92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dc = jd->dctr;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
	dp = jd->dptr; /* Bit mask, number of data available, read ptr */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
	s = *dp;
 8002ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	v = f = 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	623b      	str	r3, [r7, #32]
	bl = 16; /* Max code length */
 8002eb2:	2310      	movs	r3, #16
 8002eb4:	61bb      	str	r3, [r7, #24]
	do
	{
		if (!msk)
 8002eb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d13b      	bne.n	8002f36 <huffext+0xb6>
		{ /* Next byte? */
			if (!dc)
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d110      	bne.n	8002ee6 <huffext+0x66>
			{					/* No input data is available, re-fill input buffer */
				dp = jd->inbuf; /* Top of input buffer */
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	62bb      	str	r3, [r7, #40]	; 0x28
				dc = jd->infunc(jd, dp, JD_SZBUF);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ece:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ed2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	4798      	blx	r3
 8002ed8:	6278      	str	r0, [r7, #36]	; 0x24
				if (!dc)
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d105      	bne.n	8002eec <huffext+0x6c>
					return 0 - (INT)JDR_INP; /* Err: read error or wrong stream termination */
 8002ee0:	f06f 0301 	mvn.w	r3, #1
 8002ee4:	e066      	b.n	8002fb4 <huffext+0x134>
			}
			else
			{
				dp++; /* Next data ptr */
 8002ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee8:	3301      	adds	r3, #1
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
			}
			dc--; /* Decrement number of available bytes */
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
			if (f)
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d010      	beq.n	8002f1a <huffext+0x9a>
			{		   /* In flag sequence? */
				f = 0; /* Exit flag sequence */
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61fb      	str	r3, [r7, #28]
				if (*dp != 0)
 8002efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <huffext+0x8a>
					return 0 - (INT)JDR_FMT1; /* Err: unexpected flag is detected (may be collapted data) */
 8002f04:	f06f 0305 	mvn.w	r3, #5
 8002f08:	e054      	b.n	8002fb4 <huffext+0x134>
				*dp = s = 0xFF;				  /* The flag is a data 0xFF */
 8002f0a:	23ff      	movs	r3, #255	; 0xff
 8002f0c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f12:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002f16:	701a      	strb	r2, [r3, #0]
 8002f18:	e00a      	b.n	8002f30 <huffext+0xb0>
			}
			else
			{
				s = *dp; /* Get next data byte */
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				if (s == 0xFF)
 8002f22:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002f26:	2bff      	cmp	r3, #255	; 0xff
 8002f28:	d102      	bne.n	8002f30 <huffext+0xb0>
				{ /* Is start of flag sequence? */
					f = 1;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	61fb      	str	r3, [r7, #28]
					continue; /* Enter flag sequence, get trailing byte */
 8002f2e:	e03c      	b.n	8002faa <huffext+0x12a>
				}
			}
			msk = 0x80; /* Read from MSB */
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		v <<= 1; /* Get a bit */
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	623b      	str	r3, [r7, #32]
		if (s & msk)
 8002f3c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002f40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f44:	4013      	ands	r3, r2
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d002      	beq.n	8002f52 <huffext+0xd2>
			v++;
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	623b      	str	r3, [r7, #32]
		msk >>= 1;
 8002f52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f56:	085b      	lsrs	r3, r3, #1
 8002f58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		for (nd = *hbits++; nd; nd--)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	60ba      	str	r2, [r7, #8]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	e01a      	b.n	8002f9e <huffext+0x11e>
		{ /* Search the code word in this bit length */
			if (v == *hcode++)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	1c9a      	adds	r2, r3, #2
 8002f6c:	607a      	str	r2, [r7, #4]
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d10c      	bne.n	8002f92 <huffext+0x112>
			{ /* Matched? */
				jd->dmsk = msk;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002f7e:	731a      	strb	r2, [r3, #12]
				jd->dctr = dc;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f84:	601a      	str	r2, [r3, #0]
				jd->dptr = dp;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f8a:	605a      	str	r2, [r3, #4]
				return *hdata; /* Return the decoded data */
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	e010      	b.n	8002fb4 <huffext+0x134>
			}
			hdata++;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	3301      	adds	r3, #1
 8002f96:	603b      	str	r3, [r7, #0]
		for (nd = *hbits++; nd; nd--)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1e1      	bne.n	8002f68 <huffext+0xe8>
		}
		bl--;
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	61bb      	str	r3, [r7, #24]
	} while (bl);
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d182      	bne.n	8002eb6 <huffext+0x36>

	return 0 - (INT)JDR_FMT1; /* Err: code not found (may be collapted data) */
 8002fb0:	f06f 0305 	mvn.w	r3, #5
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3730      	adds	r7, #48	; 0x30
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <block_idct>:

static void block_idct(
	LONG *src, /* Input block data (de-quantized and pre-scaled for Arai Algorithm) */
	BYTE *dst  /* Pointer to the destination to store the block as byte array */
)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b095      	sub	sp, #84	; 0x54
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
	const LONG M13 = (LONG)(1.41421 * 4096), M2 = (LONG)(1.08239 * 4096), M4 = (LONG)(2.61313 * 4096), M5 = (LONG)(1.84776 * 4096);
 8002fc6:	f44f 53b5 	mov.w	r3, #5792	; 0x16a0
 8002fca:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fcc:	f241 1351 	movw	r3, #4433	; 0x1151
 8002fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8002fd2:	f642 13cf 	movw	r3, #10703	; 0x29cf
 8002fd6:	643b      	str	r3, [r7, #64]	; 0x40
 8002fd8:	f641 5390 	movw	r3, #7568	; 0x1d90
 8002fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
	LONG v0, v1, v2, v3, v4, v5, v6, v7;
	LONG t10, t11, t12, t13;
	UINT i;

	/* Process columns */
	for (i = 0; i < 8; i++)
 8002fde:	2300      	movs	r3, #0
 8002fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fe2:	e0b6      	b.n	8003152 <block_idct+0x196>
	{
		v0 = src[8 * 0]; /* Get even elements */
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	63bb      	str	r3, [r7, #56]	; 0x38
		v1 = src[8 * 2];
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = src[8 * 4];
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ff6:	633b      	str	r3, [r7, #48]	; 0x30
		v3 = src[8 * 6];
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ffe:	62fb      	str	r3, [r7, #44]	; 0x2c

		t10 = v0 + v2; /* Process the even elements */
 8003000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	4413      	add	r3, r2
 8003006:	62bb      	str	r3, [r7, #40]	; 0x28
		t12 = v0 - v2;
 8003008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800300a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	627b      	str	r3, [r7, #36]	; 0x24
		t11 = (v1 - v3) * M13 >> 12;
 8003010:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003018:	fb02 f303 	mul.w	r3, r2, r3
 800301c:	131b      	asrs	r3, r3, #12
 800301e:	623b      	str	r3, [r7, #32]
		v3 += v1;
 8003020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003024:	4413      	add	r3, r2
 8003026:	62fb      	str	r3, [r7, #44]	; 0x2c
		t11 -= v3;
 8003028:	6a3a      	ldr	r2, [r7, #32]
 800302a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	623b      	str	r3, [r7, #32]
		v0 = t10 + v3;
 8003030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003034:	4413      	add	r3, r2
 8003036:	63bb      	str	r3, [r7, #56]	; 0x38
		v3 = t10 - v3;
 8003038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800303a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	62fb      	str	r3, [r7, #44]	; 0x2c
		v1 = t11 + t12;
 8003040:	6a3a      	ldr	r2, [r7, #32]
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	4413      	add	r3, r2
 8003046:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = t12 - t11;
 8003048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	633b      	str	r3, [r7, #48]	; 0x30

		v4 = src[8 * 7]; /* Get odd elements */
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003056:	61fb      	str	r3, [r7, #28]
		v5 = src[8 * 1];
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	61bb      	str	r3, [r7, #24]
		v6 = src[8 * 5];
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003064:	617b      	str	r3, [r7, #20]
		v7 = src[8 * 3];
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800306a:	613b      	str	r3, [r7, #16]

		t10 = v5 - v4; /* Process the odd elements */
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	62bb      	str	r3, [r7, #40]	; 0x28
		t11 = v5 + v4;
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	4413      	add	r3, r2
 800307a:	623b      	str	r3, [r7, #32]
		t12 = v6 - v7;
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
		v7 += v6;
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	4413      	add	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
		v5 = (t11 - v7) * M13 >> 12;
 800308c:	6a3a      	ldr	r2, [r7, #32]
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003094:	fb02 f303 	mul.w	r3, r2, r3
 8003098:	131b      	asrs	r3, r3, #12
 800309a:	61bb      	str	r3, [r7, #24]
		v7 += t11;
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	4413      	add	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
		t13 = (t10 + t12) * M5 >> 12;
 80030a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	4413      	add	r3, r2
 80030aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030ac:	fb02 f303 	mul.w	r3, r2, r3
 80030b0:	131b      	asrs	r3, r3, #12
 80030b2:	60fb      	str	r3, [r7, #12]
		v4 = t13 - (t10 * M2 >> 12);
 80030b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030b8:	fb02 f303 	mul.w	r3, r2, r3
 80030bc:	131b      	asrs	r3, r3, #12
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	61fb      	str	r3, [r7, #28]
		v6 = t13 - (t12 * M4 >> 12) - v7;
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030c8:	fb02 f303 	mul.w	r3, r2, r3
 80030cc:	131b      	asrs	r3, r3, #12
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	1ad2      	subs	r2, r2, r3
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	617b      	str	r3, [r7, #20]
		v5 -= v6;
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	61bb      	str	r3, [r7, #24]
		v4 -= v5;
 80030e0:	69fa      	ldr	r2, [r7, #28]
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	61fb      	str	r3, [r7, #28]

		src[8 * 0] = v0 + v7; /* Write-back transformed values */
 80030e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	441a      	add	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	601a      	str	r2, [r3, #0]
		src[8 * 7] = v0 - v7;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	33e0      	adds	r3, #224	; 0xe0
 80030f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	1a8a      	subs	r2, r1, r2
 80030fc:	601a      	str	r2, [r3, #0]
		src[8 * 1] = v1 + v6;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3320      	adds	r3, #32
 8003102:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	440a      	add	r2, r1
 8003108:	601a      	str	r2, [r3, #0]
		src[8 * 6] = v1 - v6;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	33c0      	adds	r3, #192	; 0xc0
 800310e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	1a8a      	subs	r2, r1, r2
 8003114:	601a      	str	r2, [r3, #0]
		src[8 * 2] = v2 + v5;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3340      	adds	r3, #64	; 0x40
 800311a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	440a      	add	r2, r1
 8003120:	601a      	str	r2, [r3, #0]
		src[8 * 5] = v2 - v5;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	33a0      	adds	r3, #160	; 0xa0
 8003126:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	1a8a      	subs	r2, r1, r2
 800312c:	601a      	str	r2, [r3, #0]
		src[8 * 3] = v3 + v4;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3360      	adds	r3, #96	; 0x60
 8003132:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003134:	69fa      	ldr	r2, [r7, #28]
 8003136:	440a      	add	r2, r1
 8003138:	601a      	str	r2, [r3, #0]
		src[8 * 4] = v3 - v4;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3380      	adds	r3, #128	; 0x80
 800313e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003140:	69fa      	ldr	r2, [r7, #28]
 8003142:	1a8a      	subs	r2, r1, r2
 8003144:	601a      	str	r2, [r3, #0]

		src++; /* Next column */
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3304      	adds	r3, #4
 800314a:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++)
 800314c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800314e:	3301      	adds	r3, #1
 8003150:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003154:	2b07      	cmp	r3, #7
 8003156:	f67f af45 	bls.w	8002fe4 <block_idct+0x28>
	}

	/* Process rows */
	src -= 8;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3b20      	subs	r3, #32
 800315e:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++)
 8003160:	2300      	movs	r3, #0
 8003162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003164:	e0df      	b.n	8003326 <block_idct+0x36a>
	{
		v0 = src[0] + (128L << 8); /* Get even elements (remove DC offset (-128) here) */
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800316e:	63bb      	str	r3, [r7, #56]	; 0x38
		v1 = src[2];
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = src[4];
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	633b      	str	r3, [r7, #48]	; 0x30
		v3 = src[6];
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	62fb      	str	r3, [r7, #44]	; 0x2c

		t10 = v0 + v2; /* Process the even elements */
 8003182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003186:	4413      	add	r3, r2
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28
		t12 = v0 - v2;
 800318a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800318c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	627b      	str	r3, [r7, #36]	; 0x24
		t11 = (v1 - v3) * M13 >> 12;
 8003192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	131b      	asrs	r3, r3, #12
 80031a0:	623b      	str	r3, [r7, #32]
		v3 += v1;
 80031a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a6:	4413      	add	r3, r2
 80031a8:	62fb      	str	r3, [r7, #44]	; 0x2c
		t11 -= v3;
 80031aa:	6a3a      	ldr	r2, [r7, #32]
 80031ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	623b      	str	r3, [r7, #32]
		v0 = t10 + v3;
 80031b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b6:	4413      	add	r3, r2
 80031b8:	63bb      	str	r3, [r7, #56]	; 0x38
		v3 = t10 - v3;
 80031ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	62fb      	str	r3, [r7, #44]	; 0x2c
		v1 = t11 + t12;
 80031c2:	6a3a      	ldr	r2, [r7, #32]
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	4413      	add	r3, r2
 80031c8:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = t12 - t11;
 80031ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	633b      	str	r3, [r7, #48]	; 0x30

		v4 = src[7]; /* Get odd elements */
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	61fb      	str	r3, [r7, #28]
		v5 = src[1];
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	61bb      	str	r3, [r7, #24]
		v6 = src[5];
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	617b      	str	r3, [r7, #20]
		v7 = src[3];
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	613b      	str	r3, [r7, #16]

		t10 = v5 - v4; /* Process the odd elements */
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	62bb      	str	r3, [r7, #40]	; 0x28
		t11 = v5 + v4;
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	4413      	add	r3, r2
 80031f8:	623b      	str	r3, [r7, #32]
		t12 = v6 - v7;
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
		v7 += v6;
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	4413      	add	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
		v5 = (t11 - v7) * M13 >> 12;
 800320a:	6a3a      	ldr	r2, [r7, #32]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003212:	fb02 f303 	mul.w	r3, r2, r3
 8003216:	131b      	asrs	r3, r3, #12
 8003218:	61bb      	str	r3, [r7, #24]
		v7 += t11;
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	4413      	add	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
		t13 = (t10 + t12) * M5 >> 12;
 8003222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	4413      	add	r3, r2
 8003228:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800322a:	fb02 f303 	mul.w	r3, r2, r3
 800322e:	131b      	asrs	r3, r3, #12
 8003230:	60fb      	str	r3, [r7, #12]
		v4 = t13 - (t10 * M2 >> 12);
 8003232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003234:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003236:	fb02 f303 	mul.w	r3, r2, r3
 800323a:	131b      	asrs	r3, r3, #12
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	61fb      	str	r3, [r7, #28]
		v6 = t13 - (t12 * M4 >> 12) - v7;
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003246:	fb02 f303 	mul.w	r3, r2, r3
 800324a:	131b      	asrs	r3, r3, #12
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	1ad2      	subs	r2, r2, r3
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	617b      	str	r3, [r7, #20]
		v5 -= v6;
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	61bb      	str	r3, [r7, #24]
		v4 -= v5;
 800325e:	69fa      	ldr	r2, [r7, #28]
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	61fb      	str	r3, [r7, #28]

		dst[0] = BYTECLIP((v0 + v7) >> 8); /* Descale the transformed values 8 bits and output */
 8003266:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	4413      	add	r3, r2
 800326c:	121b      	asrs	r3, r3, #8
 800326e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003272:	4a32      	ldr	r2, [pc, #200]	; (800333c <block_idct+0x380>)
 8003274:	5cd2      	ldrb	r2, [r2, r3]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	701a      	strb	r2, [r3, #0]
		dst[7] = BYTECLIP((v0 - v7) >> 8);
 800327a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	121b      	asrs	r3, r3, #8
 8003282:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	3307      	adds	r3, #7
 800328a:	492c      	ldr	r1, [pc, #176]	; (800333c <block_idct+0x380>)
 800328c:	5c8a      	ldrb	r2, [r1, r2]
 800328e:	701a      	strb	r2, [r3, #0]
		dst[1] = BYTECLIP((v1 + v6) >> 8);
 8003290:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	4413      	add	r3, r2
 8003296:	121b      	asrs	r3, r3, #8
 8003298:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	3301      	adds	r3, #1
 80032a0:	4926      	ldr	r1, [pc, #152]	; (800333c <block_idct+0x380>)
 80032a2:	5c8a      	ldrb	r2, [r1, r2]
 80032a4:	701a      	strb	r2, [r3, #0]
		dst[6] = BYTECLIP((v1 - v6) >> 8);
 80032a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	121b      	asrs	r3, r3, #8
 80032ae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	3306      	adds	r3, #6
 80032b6:	4921      	ldr	r1, [pc, #132]	; (800333c <block_idct+0x380>)
 80032b8:	5c8a      	ldrb	r2, [r1, r2]
 80032ba:	701a      	strb	r2, [r3, #0]
		dst[2] = BYTECLIP((v2 + v5) >> 8);
 80032bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	4413      	add	r3, r2
 80032c2:	121b      	asrs	r3, r3, #8
 80032c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	3302      	adds	r3, #2
 80032cc:	491b      	ldr	r1, [pc, #108]	; (800333c <block_idct+0x380>)
 80032ce:	5c8a      	ldrb	r2, [r1, r2]
 80032d0:	701a      	strb	r2, [r3, #0]
		dst[5] = BYTECLIP((v2 - v5) >> 8);
 80032d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	121b      	asrs	r3, r3, #8
 80032da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	3305      	adds	r3, #5
 80032e2:	4916      	ldr	r1, [pc, #88]	; (800333c <block_idct+0x380>)
 80032e4:	5c8a      	ldrb	r2, [r1, r2]
 80032e6:	701a      	strb	r2, [r3, #0]
		dst[3] = BYTECLIP((v3 + v4) >> 8);
 80032e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	4413      	add	r3, r2
 80032ee:	121b      	asrs	r3, r3, #8
 80032f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	3303      	adds	r3, #3
 80032f8:	4910      	ldr	r1, [pc, #64]	; (800333c <block_idct+0x380>)
 80032fa:	5c8a      	ldrb	r2, [r1, r2]
 80032fc:	701a      	strb	r2, [r3, #0]
		dst[4] = BYTECLIP((v3 - v4) >> 8);
 80032fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	121b      	asrs	r3, r3, #8
 8003306:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	3304      	adds	r3, #4
 800330e:	490b      	ldr	r1, [pc, #44]	; (800333c <block_idct+0x380>)
 8003310:	5c8a      	ldrb	r2, [r1, r2]
 8003312:	701a      	strb	r2, [r3, #0]
		dst += 8;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	3308      	adds	r3, #8
 8003318:	603b      	str	r3, [r7, #0]

		src += 8; /* Next row */
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3320      	adds	r3, #32
 800331e:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++)
 8003320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003322:	3301      	adds	r3, #1
 8003324:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003328:	2b07      	cmp	r3, #7
 800332a:	f67f af1c 	bls.w	8003166 <block_idct+0x1aa>
	}
}
 800332e:	bf00      	nop
 8003330:	bf00      	nop
 8003332:	3754      	adds	r7, #84	; 0x54
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	08012910 	.word	0x08012910

08003340 <mcu_load>:
/*-----------------------------------------------------------------------*/

static JRESULT mcu_load(
	JDEC *jd /* Pointer to the decompressor object */
)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b092      	sub	sp, #72	; 0x48
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
	LONG *tmp = (LONG *)jd->workbuf; /* Block working buffer for de-quantize and IDCT */
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800334c:	633b      	str	r3, [r7, #48]	; 0x30
	BYTE *bp;
	const BYTE *hb, *hd;
	const WORD *hc;
	const LONG *dqf;

	nby = jd->msx * jd->msy; /* Number of Y blocks (1, 2 or 4) */
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	7b9b      	ldrb	r3, [r3, #14]
 8003352:	461a      	mov	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	7bdb      	ldrb	r3, [r3, #15]
 8003358:	fb03 f302 	mul.w	r3, r3, r2
 800335c:	62fb      	str	r3, [r7, #44]	; 0x2c
	nbc = 2;				 /* Number of C blocks (2) */
 800335e:	2302      	movs	r3, #2
 8003360:	62bb      	str	r3, [r7, #40]	; 0x28
	bp = jd->mcubuf;		 /* Pointer to the first block */
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003366:	637b      	str	r3, [r7, #52]	; 0x34

	for (blk = 0; blk < nby + nbc; blk++)
 8003368:	2300      	movs	r3, #0
 800336a:	647b      	str	r3, [r7, #68]	; 0x44
 800336c:	e11e      	b.n	80035ac <mcu_load+0x26c>
	{
		cmp = (blk < nby) ? 0 : blk - nby + 1; /* Component number 0:Y, 1:Cb, 2:Cr */
 800336e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003372:	429a      	cmp	r2, r3
 8003374:	d304      	bcc.n	8003380 <mcu_load+0x40>
 8003376:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	3301      	adds	r3, #1
 800337e:	e000      	b.n	8003382 <mcu_load+0x42>
 8003380:	2300      	movs	r3, #0
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
		id = cmp ? 1 : 0;					   /* Huffman table ID of the component */
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	2b00      	cmp	r3, #0
 8003388:	bf14      	ite	ne
 800338a:	2301      	movne	r3, #1
 800338c:	2300      	moveq	r3, #0
 800338e:	b2db      	uxtb	r3, r3
 8003390:	623b      	str	r3, [r7, #32]

		/* Extract a DC element from input stream */
		hb = jd->huffbits[id][0]; /* Huffman table for the DC element */
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	3304      	adds	r3, #4
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4413      	add	r3, r2
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	61fb      	str	r3, [r7, #28]
		hc = jd->huffcode[id][0];
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	3306      	adds	r3, #6
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4413      	add	r3, r2
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	61bb      	str	r3, [r7, #24]
		hd = jd->huffdata[id][0];
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	3308      	adds	r3, #8
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4413      	add	r3, r2
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	617b      	str	r3, [r7, #20]
		b = huffext(jd, hb, hc, hd); /* Extract a huffman coded data (bit length) */
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	69f9      	ldr	r1, [r7, #28]
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff fd5c 	bl	8002e80 <huffext>
 80033c8:	6138      	str	r0, [r7, #16]
		if (b < 0)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	da04      	bge.n	80033da <mcu_load+0x9a>
			return (JRESULT)(0 - b); /* Err: invalid code or input */
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	425b      	negs	r3, r3
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	e0f0      	b.n	80035bc <mcu_load+0x27c>
		d = jd->dcv[cmp];			 /* DC value of previous block */
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	3308      	adds	r3, #8
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80033e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (b)
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d02b      	beq.n	8003448 <mcu_load+0x108>
		{					   /* If there is any difference from previous block */
			e = bitext(jd, b); /* Extract data bits */
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	4619      	mov	r1, r3
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff fcd1 	bl	8002d9c <bitext>
 80033fa:	63b8      	str	r0, [r7, #56]	; 0x38
			if (e < 0)
 80033fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fe:	2b00      	cmp	r3, #0
 8003400:	da04      	bge.n	800340c <mcu_load+0xcc>
				return (JRESULT)(0 - e); /* Err: input */
 8003402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003404:	b2db      	uxtb	r3, r3
 8003406:	425b      	negs	r3, r3
 8003408:	b2db      	uxtb	r3, r3
 800340a:	e0d7      	b.n	80035bc <mcu_load+0x27c>
			b = 1 << (b - 1);			 /* MSB position */
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	3b01      	subs	r3, #1
 8003410:	2201      	movs	r2, #1
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	613b      	str	r3, [r7, #16]
			if (!(e & b))
 8003418:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	4013      	ands	r3, r2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d105      	bne.n	800342e <mcu_load+0xee>
				e -= (b << 1) - 1;	 /* Restore sign if needed */
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	3b01      	subs	r3, #1
 8003428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	63bb      	str	r3, [r7, #56]	; 0x38
			d += e;					 /* Get current value */
 800342e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003432:	4413      	add	r3, r2
 8003434:	63fb      	str	r3, [r7, #60]	; 0x3c
			jd->dcv[cmp] = (SHORT)d; /* Save current DC value for next block */
 8003436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003438:	b219      	sxth	r1, r3
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	3308      	adds	r3, #8
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	4413      	add	r3, r2
 8003444:	460a      	mov	r2, r1
 8003446:	809a      	strh	r2, [r3, #4]
		}
		dqf = jd->qttbl[jd->qtid[cmp]]; /* De-quantizer table ID for this component */
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	4413      	add	r3, r2
 800344e:	3310      	adds	r3, #16
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	3314      	adds	r3, #20
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	60fb      	str	r3, [r7, #12]
		tmp[0] = d * dqf[0] >> 8;		/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003464:	fb02 f303 	mul.w	r3, r2, r3
 8003468:	121a      	asrs	r2, r3, #8
 800346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346c:	601a      	str	r2, [r3, #0]

		/* Extract following 63 AC elements from input stream */
		for (i = 1; i < 64; i++)
 800346e:	2301      	movs	r3, #1
 8003470:	643b      	str	r3, [r7, #64]	; 0x40
 8003472:	e008      	b.n	8003486 <mcu_load+0x146>
			tmp[i] = 0;			  /* Clear rest of elements */
 8003474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800347a:	4413      	add	r3, r2
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
		for (i = 1; i < 64; i++)
 8003480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003482:	3301      	adds	r3, #1
 8003484:	643b      	str	r3, [r7, #64]	; 0x40
 8003486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003488:	2b3f      	cmp	r3, #63	; 0x3f
 800348a:	d9f3      	bls.n	8003474 <mcu_load+0x134>
		hb = jd->huffbits[id][1]; /* Huffman table for the AC elements */
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4413      	add	r3, r2
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003496:	61fb      	str	r3, [r7, #28]
		hc = jd->huffcode[id][1];
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4413      	add	r3, r2
 80034a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a2:	61bb      	str	r3, [r7, #24]
		hd = jd->huffdata[id][1];
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	4413      	add	r3, r2
 80034ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ae:	617b      	str	r3, [r7, #20]
		i = 1; /* Top of the AC elements */
 80034b0:	2301      	movs	r3, #1
 80034b2:	643b      	str	r3, [r7, #64]	; 0x40
		do
		{
			b = huffext(jd, hb, hc, hd); /* Extract a huffman coded value (zero runs and bit length) */
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	69f9      	ldr	r1, [r7, #28]
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff fce0 	bl	8002e80 <huffext>
 80034c0:	6138      	str	r0, [r7, #16]
			if (b == 0)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d056      	beq.n	8003576 <mcu_load+0x236>
				break; /* EOB? */
			if (b < 0)
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	da04      	bge.n	80034d8 <mcu_load+0x198>
				return (JRESULT)(0 - b); /* Err: invalid code or input error */
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	425b      	negs	r3, r3
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	e071      	b.n	80035bc <mcu_load+0x27c>
			z = (UINT)b >> 4;			 /* Number of leading zero elements */
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	091b      	lsrs	r3, r3, #4
 80034dc:	60bb      	str	r3, [r7, #8]
			if (z)
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <mcu_load+0x1b6>
			{
				i += z; /* Skip zero elements */
 80034e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4413      	add	r3, r2
 80034ea:	643b      	str	r3, [r7, #64]	; 0x40
				if (i >= 64)
 80034ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ee:	2b3f      	cmp	r3, #63	; 0x3f
 80034f0:	d901      	bls.n	80034f6 <mcu_load+0x1b6>
					return JDR_FMT1; /* Too long zero run */
 80034f2:	2306      	movs	r3, #6
 80034f4:	e062      	b.n	80035bc <mcu_load+0x27c>
			}
			if (b &= 0x0F)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d031      	beq.n	8003568 <mcu_load+0x228>
			{					   /* Bit length */
				d = bitext(jd, b); /* Extract data bits */
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4619      	mov	r1, r3
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff fc47 	bl	8002d9c <bitext>
 800350e:	63f8      	str	r0, [r7, #60]	; 0x3c
				if (d < 0)
 8003510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003512:	2b00      	cmp	r3, #0
 8003514:	da04      	bge.n	8003520 <mcu_load+0x1e0>
					return (JRESULT)(0 - d); /* Err: input device */
 8003516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003518:	b2db      	uxtb	r3, r3
 800351a:	425b      	negs	r3, r3
 800351c:	b2db      	uxtb	r3, r3
 800351e:	e04d      	b.n	80035bc <mcu_load+0x27c>
				b = 1 << (b - 1);			 /* MSB position */
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	3b01      	subs	r3, #1
 8003524:	2201      	movs	r2, #1
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	613b      	str	r3, [r7, #16]
				if (!(d & b))
 800352c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4013      	ands	r3, r2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d105      	bne.n	8003542 <mcu_load+0x202>
					d -= (b << 1) - 1;	  /* Restore negative value if needed */
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	3b01      	subs	r3, #1
 800353c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	63fb      	str	r3, [r7, #60]	; 0x3c
				z = ZIG(i);				  /* Zigzag-order to raster-order converted index */
 8003542:	4a20      	ldr	r2, [pc, #128]	; (80035c4 <mcu_load+0x284>)
 8003544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003546:	4413      	add	r3, r2
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	60bb      	str	r3, [r7, #8]
				tmp[z] = d * dqf[z] >> 8; /* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4413      	add	r3, r2
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003558:	fb02 f203 	mul.w	r2, r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003562:	440b      	add	r3, r1
 8003564:	1212      	asrs	r2, r2, #8
 8003566:	601a      	str	r2, [r3, #0]
			}
		} while (++i < 64); /* Next AC element */
 8003568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800356a:	3301      	adds	r3, #1
 800356c:	643b      	str	r3, [r7, #64]	; 0x40
 800356e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003570:	2b3f      	cmp	r3, #63	; 0x3f
 8003572:	d99f      	bls.n	80034b4 <mcu_load+0x174>
 8003574:	e000      	b.n	8003578 <mcu_load+0x238>
				break; /* EOB? */
 8003576:	bf00      	nop

		if (JD_USE_SCALE && jd->scale == 3)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	7b5b      	ldrb	r3, [r3, #13]
 800357c:	2b03      	cmp	r3, #3
 800357e:	d10b      	bne.n	8003598 <mcu_load+0x258>
			*bp = (*tmp / 256) + 128; /* If scale ratio is 1/8, IDCT can be ommited and only DC element is used */
 8003580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	da00      	bge.n	800358a <mcu_load+0x24a>
 8003588:	33ff      	adds	r3, #255	; 0xff
 800358a:	121b      	asrs	r3, r3, #8
 800358c:	b2db      	uxtb	r3, r3
 800358e:	3b80      	subs	r3, #128	; 0x80
 8003590:	b2da      	uxtb	r2, r3
 8003592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003594:	701a      	strb	r2, [r3, #0]
 8003596:	e003      	b.n	80035a0 <mcu_load+0x260>
		else
			block_idct(tmp, bp); /* Apply IDCT and store the block to the MCU buffer */
 8003598:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800359a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800359c:	f7ff fd0e 	bl	8002fbc <block_idct>

		bp += 64; /* Next block */
 80035a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a2:	3340      	adds	r3, #64	; 0x40
 80035a4:	637b      	str	r3, [r7, #52]	; 0x34
	for (blk = 0; blk < nby + nbc; blk++)
 80035a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035a8:	3301      	adds	r3, #1
 80035aa:	647b      	str	r3, [r7, #68]	; 0x44
 80035ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b0:	4413      	add	r3, r2
 80035b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035b4:	429a      	cmp	r2, r3
 80035b6:	f4ff aeda 	bcc.w	800336e <mcu_load+0x2e>
	}

	return JDR_OK; /* All blocks have been loaded successfully */
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3748      	adds	r7, #72	; 0x48
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	08012850 	.word	0x08012850

080035c8 <mcu_output>:
	JDEC *jd,								  /* Pointer to the decompressor object */
	UINT (*outfunc)(JDEC *, void *, JRECT *), /* RGB output function */
	UINT x,									  /* MCU position in the image (left of the MCU) */
	UINT y									  /* MCU position in the image (top of the MCU) */
)
{
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b0a5      	sub	sp, #148	; 0x94
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	603b      	str	r3, [r7, #0]
	const INT CVACC = (sizeof(INT) > 2) ? 1024 : 128;
 80035d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035da:	647b      	str	r3, [r7, #68]	; 0x44
	UINT ix, iy, mx, my, rx, ry;
	INT yy, cb, cr;
	BYTE *py, *pc, *rgb24;
	JRECT rect;

	mx = jd->msx * 8;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	7b9b      	ldrb	r3, [r3, #14]
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	643b      	str	r3, [r7, #64]	; 0x40
	my = jd->msy * 8;								 /* MCU size (pixel) */
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	7bdb      	ldrb	r3, [r3, #15]
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	rx = (x + mx <= jd->width) ? mx : jd->width - x; /* Output rectangular size (it may be clipped at right/bottom end) */
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035f0:	441a      	add	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d904      	bls.n	8003604 <mcu_output+0x3c>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	69da      	ldr	r2, [r3, #28]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	e000      	b.n	8003606 <mcu_output+0x3e>
 8003604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003606:	63bb      	str	r3, [r7, #56]	; 0x38
	ry = (y + my <= jd->height) ? my : jd->height - y;
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800360c:	441a      	add	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	429a      	cmp	r2, r3
 8003614:	d904      	bls.n	8003620 <mcu_output+0x58>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a1a      	ldr	r2, [r3, #32]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	e000      	b.n	8003622 <mcu_output+0x5a>
 8003620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003622:	637b      	str	r3, [r7, #52]	; 0x34
	if (JD_USE_SCALE)
	{
		rx >>= jd->scale;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	7b5b      	ldrb	r3, [r3, #13]
 8003628:	461a      	mov	r2, r3
 800362a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362c:	40d3      	lsrs	r3, r2
 800362e:	63bb      	str	r3, [r7, #56]	; 0x38
		ry >>= jd->scale;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	7b5b      	ldrb	r3, [r3, #13]
 8003634:	461a      	mov	r2, r3
 8003636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003638:	40d3      	lsrs	r3, r2
 800363a:	637b      	str	r3, [r7, #52]	; 0x34
		if (!rx || !ry)
 800363c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <mcu_output+0x80>
 8003642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <mcu_output+0x84>
			return JDR_OK; /* Skip this MCU if all pixel is to be rounded off */
 8003648:	2300      	movs	r3, #0
 800364a:	e300      	b.n	8003c4e <mcu_output+0x686>
		x >>= jd->scale;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	7b5b      	ldrb	r3, [r3, #13]
 8003650:	461a      	mov	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	40d3      	lsrs	r3, r2
 8003656:	607b      	str	r3, [r7, #4]
		y >>= jd->scale;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	7b5b      	ldrb	r3, [r3, #13]
 800365c:	461a      	mov	r2, r3
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	40d3      	lsrs	r3, r2
 8003662:	603b      	str	r3, [r7, #0]
	}
	rect.left = x;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	b29b      	uxth	r3, r3
 8003668:	823b      	strh	r3, [r7, #16]
	rect.right = x + rx - 1; /* Rectangular area in the frame buffer */
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	b29a      	uxth	r2, r3
 800366e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003670:	b29b      	uxth	r3, r3
 8003672:	4413      	add	r3, r2
 8003674:	b29b      	uxth	r3, r3
 8003676:	3b01      	subs	r3, #1
 8003678:	b29b      	uxth	r3, r3
 800367a:	827b      	strh	r3, [r7, #18]
	rect.top = y;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	b29b      	uxth	r3, r3
 8003680:	82bb      	strh	r3, [r7, #20]
	rect.bottom = y + ry - 1;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	b29a      	uxth	r2, r3
 8003686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003688:	b29b      	uxth	r3, r3
 800368a:	4413      	add	r3, r2
 800368c:	b29b      	uxth	r3, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	b29b      	uxth	r3, r3
 8003692:	82fb      	strh	r3, [r7, #22]

	if (!JD_USE_SCALE || jd->scale != 3)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	7b5b      	ldrb	r3, [r3, #13]
 8003698:	2b03      	cmp	r3, #3
 800369a:	f000 8183 	beq.w	80039a4 <mcu_output+0x3dc>
	{ /* Not for 1/8 scaling */

		/* Build an RGB MCU from discrete comopnents */
		rgb24 = (BYTE *)jd->workbuf;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036a2:	67fb      	str	r3, [r7, #124]	; 0x7c
		for (iy = 0; iy < my; iy++)
 80036a4:	2300      	movs	r3, #0
 80036a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036aa:	e0dd      	b.n	8003868 <mcu_output+0x2a0>
		{
			pc = jd->mcubuf;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			py = pc + iy * 8;
 80036b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036be:	4413      	add	r3, r2
 80036c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (my == 16)
 80036c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c6:	2b10      	cmp	r3, #16
 80036c8:	d113      	bne.n	80036f2 <mcu_output+0x12a>
			{ /* Double block height? */
				pc += 64 * 4 + (iy >> 1) * 8;
 80036ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036ce:	085b      	lsrs	r3, r3, #1
 80036d0:	3320      	adds	r3, #32
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036d8:	4413      	add	r3, r2
 80036da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				if (iy >= 8)
 80036de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036e2:	2b07      	cmp	r3, #7
 80036e4:	d90f      	bls.n	8003706 <mcu_output+0x13e>
					py += 64;
 80036e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036ea:	3340      	adds	r3, #64	; 0x40
 80036ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036f0:	e009      	b.n	8003706 <mcu_output+0x13e>
			}
			else
			{ /* Single block height */
				pc += mx * 8 + iy * 8;
 80036f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036f8:	4413      	add	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003700:	4413      	add	r3, r2
 8003702:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			}
			for (ix = 0; ix < mx; ix++)
 8003706:	2300      	movs	r3, #0
 8003708:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800370c:	e0a1      	b.n	8003852 <mcu_output+0x28a>
			{
				cb = pc[0] - 128; /* Get Cb/Cr component and restore right level */
 800370e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	3b80      	subs	r3, #128	; 0x80
 8003716:	633b      	str	r3, [r7, #48]	; 0x30
				cr = pc[64] - 128;
 8003718:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800371c:	3340      	adds	r3, #64	; 0x40
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	3b80      	subs	r3, #128	; 0x80
 8003722:	62fb      	str	r3, [r7, #44]	; 0x2c
				if (mx == 16)
 8003724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003726:	2b10      	cmp	r3, #16
 8003728:	d112      	bne.n	8003750 <mcu_output+0x188>
				{ /* Double block width? */
					if (ix == 8)
 800372a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800372e:	2b08      	cmp	r3, #8
 8003730:	d104      	bne.n	800373c <mcu_output+0x174>
						py += 64 - 8; /* Jump to next block if double block heigt */
 8003732:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003736:	3338      	adds	r3, #56	; 0x38
 8003738:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					pc += ix & 1;	  /* Increase chroma pointer every two pixels */
 800373c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003748:	4413      	add	r3, r2
 800374a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800374e:	e004      	b.n	800375a <mcu_output+0x192>
				}
				else
				{		  /* Single block width */
					pc++; /* Increase chroma pointer every pixel */
 8003750:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003754:	3301      	adds	r3, #1
 8003756:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				}
				yy = *py++; /* Get Y component */
 800375a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	62bb      	str	r3, [r7, #40]	; 0x28

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((INT)(1.402 * CVACC) * cr) / CVACC);
 8003768:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800376a:	f7fc febd 	bl	80004e8 <__aeabi_i2d>
 800376e:	a3a4      	add	r3, pc, #656	; (adr r3, 8003a00 <mcu_output+0x438>)
 8003770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003774:	f7fc ff22 	bl	80005bc <__aeabi_dmul>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4610      	mov	r0, r2
 800377e:	4619      	mov	r1, r3
 8003780:	f7fd f92e 	bl	80009e0 <__aeabi_d2iz>
 8003784:	4602      	mov	r2, r0
 8003786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003788:	fb03 f202 	mul.w	r2, r3, r2
 800378c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800378e:	fb92 f2f3 	sdiv	r2, r2, r3
 8003792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003794:	4413      	add	r3, r2
 8003796:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800379a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800379c:	1c59      	adds	r1, r3, #1
 800379e:	67f9      	str	r1, [r7, #124]	; 0x7c
 80037a0:	499f      	ldr	r1, [pc, #636]	; (8003a20 <mcu_output+0x458>)
 80037a2:	5c8a      	ldrb	r2, [r1, r2]
 80037a4:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* G */ BYTECLIP(yy - ((INT)(0.344 * CVACC) * cb + (INT)(0.714 * CVACC) * cr) / CVACC);
 80037a6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80037a8:	f7fc fe9e 	bl	80004e8 <__aeabi_i2d>
 80037ac:	a396      	add	r3, pc, #600	; (adr r3, 8003a08 <mcu_output+0x440>)
 80037ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b2:	f7fc ff03 	bl	80005bc <__aeabi_dmul>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4610      	mov	r0, r2
 80037bc:	4619      	mov	r1, r3
 80037be:	f7fd f90f 	bl	80009e0 <__aeabi_d2iz>
 80037c2:	4602      	mov	r2, r0
 80037c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c6:	fb03 f402 	mul.w	r4, r3, r2
 80037ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80037cc:	f7fc fe8c 	bl	80004e8 <__aeabi_i2d>
 80037d0:	a38f      	add	r3, pc, #572	; (adr r3, 8003a10 <mcu_output+0x448>)
 80037d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d6:	f7fc fef1 	bl	80005bc <__aeabi_dmul>
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	4610      	mov	r0, r2
 80037e0:	4619      	mov	r1, r3
 80037e2:	f7fd f8fd 	bl	80009e0 <__aeabi_d2iz>
 80037e6:	4602      	mov	r2, r0
 80037e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ea:	fb03 f302 	mul.w	r3, r3, r2
 80037ee:	18e2      	adds	r2, r4, r3
 80037f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80037f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80037fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003800:	1c59      	adds	r1, r3, #1
 8003802:	67f9      	str	r1, [r7, #124]	; 0x7c
 8003804:	4986      	ldr	r1, [pc, #536]	; (8003a20 <mcu_output+0x458>)
 8003806:	5c8a      	ldrb	r2, [r1, r2]
 8003808:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* B */ BYTECLIP(yy + ((INT)(1.772 * CVACC) * cb) / CVACC);
 800380a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800380c:	f7fc fe6c 	bl	80004e8 <__aeabi_i2d>
 8003810:	a381      	add	r3, pc, #516	; (adr r3, 8003a18 <mcu_output+0x450>)
 8003812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003816:	f7fc fed1 	bl	80005bc <__aeabi_dmul>
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	4610      	mov	r0, r2
 8003820:	4619      	mov	r1, r3
 8003822:	f7fd f8dd 	bl	80009e0 <__aeabi_d2iz>
 8003826:	4602      	mov	r2, r0
 8003828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382a:	fb03 f202 	mul.w	r2, r3, r2
 800382e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003830:	fb92 f2f3 	sdiv	r2, r2, r3
 8003834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003836:	4413      	add	r3, r2
 8003838:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800383c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800383e:	1c59      	adds	r1, r3, #1
 8003840:	67f9      	str	r1, [r7, #124]	; 0x7c
 8003842:	4977      	ldr	r1, [pc, #476]	; (8003a20 <mcu_output+0x458>)
 8003844:	5c8a      	ldrb	r2, [r1, r2]
 8003846:	701a      	strb	r2, [r3, #0]
			for (ix = 0; ix < mx; ix++)
 8003848:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800384c:	3301      	adds	r3, #1
 800384e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003852:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003858:	429a      	cmp	r2, r3
 800385a:	f4ff af58 	bcc.w	800370e <mcu_output+0x146>
		for (iy = 0; iy < my; iy++)
 800385e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003862:	3301      	adds	r3, #1
 8003864:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003868:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800386c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800386e:	429a      	cmp	r2, r3
 8003870:	f4ff af1c 	bcc.w	80036ac <mcu_output+0xe4>
			}
		}

		/* Descale the MCU rectangular if needed */
		if (JD_USE_SCALE && jd->scale)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	7b5b      	ldrb	r3, [r3, #13]
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 8162 	beq.w	8003b42 <mcu_output+0x57a>
		{
			UINT x, y, r, g, b, s, w, a;
			BYTE *op;

			/* Get averaged RGB value of each square correcponds to a pixel */
			s = jd->scale * 2;	/* Bumber of shifts for averaging */
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	7b5b      	ldrb	r3, [r3, #13]
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
			w = 1 << jd->scale; /* Width of square */
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	7b5b      	ldrb	r3, [r3, #13]
 800388a:	461a      	mov	r2, r3
 800388c:	2301      	movs	r3, #1
 800388e:	4093      	lsls	r3, r2
 8003890:	623b      	str	r3, [r7, #32]
			a = (mx - w) * 3;	/* Bytes to skip for next line in the square */
 8003892:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	1ad2      	subs	r2, r2, r3
 8003898:	4613      	mov	r3, r2
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	4413      	add	r3, r2
 800389e:	61fb      	str	r3, [r7, #28]
			op = (BYTE *)jd->workbuf;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038a4:	667b      	str	r3, [r7, #100]	; 0x64
			for (iy = 0; iy < my; iy += w)
 80038a6:	2300      	movs	r3, #0
 80038a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80038ac:	e074      	b.n	8003998 <mcu_output+0x3d0>
			{
				for (ix = 0; ix < mx; ix += w)
 80038ae:	2300      	movs	r3, #0
 80038b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80038b4:	e065      	b.n	8003982 <mcu_output+0x3ba>
				{
					rgb24 = (BYTE *)jd->workbuf + (iy * mx + ix) * 3;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80038ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038c0:	fb02 f203 	mul.w	r2, r2, r3
 80038c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038c8:	441a      	add	r2, r3
 80038ca:	4613      	mov	r3, r2
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	4413      	add	r3, r2
 80038d0:	440b      	add	r3, r1
 80038d2:	67fb      	str	r3, [r7, #124]	; 0x7c
					r = g = b = 0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80038d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038de:	673b      	str	r3, [r7, #112]	; 0x70
					for (y = 0; y < w; y++)
 80038e0:	2300      	movs	r3, #0
 80038e2:	677b      	str	r3, [r7, #116]	; 0x74
 80038e4:	e028      	b.n	8003938 <mcu_output+0x370>
					{ /* Accumulate RGB value in the square */
						for (x = 0; x < w; x++)
 80038e6:	2300      	movs	r3, #0
 80038e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80038ea:	e01a      	b.n	8003922 <mcu_output+0x35a>
						{
							r += *rgb24++;
 80038ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	461a      	mov	r2, r3
 80038f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038f8:	4413      	add	r3, r2
 80038fa:	673b      	str	r3, [r7, #112]	; 0x70
							g += *rgb24++;
 80038fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003908:	4413      	add	r3, r2
 800390a:	66fb      	str	r3, [r7, #108]	; 0x6c
							b += *rgb24++;
 800390c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	461a      	mov	r2, r3
 8003916:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003918:	4413      	add	r3, r2
 800391a:	66bb      	str	r3, [r7, #104]	; 0x68
						for (x = 0; x < w; x++)
 800391c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800391e:	3301      	adds	r3, #1
 8003920:	67bb      	str	r3, [r7, #120]	; 0x78
 8003922:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	429a      	cmp	r2, r3
 8003928:	d3e0      	bcc.n	80038ec <mcu_output+0x324>
						}
						rgb24 += a;
 800392a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	4413      	add	r3, r2
 8003930:	67fb      	str	r3, [r7, #124]	; 0x7c
					for (y = 0; y < w; y++)
 8003932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003934:	3301      	adds	r3, #1
 8003936:	677b      	str	r3, [r7, #116]	; 0x74
 8003938:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	429a      	cmp	r2, r3
 800393e:	d3d2      	bcc.n	80038e6 <mcu_output+0x31e>
					} /* Put the averaged RGB value as a pixel */
					*op++ = (BYTE)(r >> s);
 8003940:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	fa22 f103 	lsr.w	r1, r2, r3
 8003948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	667a      	str	r2, [r7, #100]	; 0x64
 800394e:	b2ca      	uxtb	r2, r1
 8003950:	701a      	strb	r2, [r3, #0]
					*op++ = (BYTE)(g >> s);
 8003952:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	fa22 f103 	lsr.w	r1, r2, r3
 800395a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	667a      	str	r2, [r7, #100]	; 0x64
 8003960:	b2ca      	uxtb	r2, r1
 8003962:	701a      	strb	r2, [r3, #0]
					*op++ = (BYTE)(b >> s);
 8003964:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	fa22 f103 	lsr.w	r1, r2, r3
 800396c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	667a      	str	r2, [r7, #100]	; 0x64
 8003972:	b2ca      	uxtb	r2, r1
 8003974:	701a      	strb	r2, [r3, #0]
				for (ix = 0; ix < mx; ix += w)
 8003976:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	4413      	add	r3, r2
 800397e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003982:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003988:	429a      	cmp	r2, r3
 800398a:	d394      	bcc.n	80038b6 <mcu_output+0x2ee>
			for (iy = 0; iy < my; iy += w)
 800398c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	4413      	add	r3, r2
 8003994:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003998:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800399c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800399e:	429a      	cmp	r2, r3
 80039a0:	d385      	bcc.n	80038ae <mcu_output+0x2e6>
 80039a2:	e0ce      	b.n	8003b42 <mcu_output+0x57a>
	}
	else
	{ /* For only 1/8 scaling (left-top pixel in each block are the DC value of the block) */

		/* Build a 1/8 descaled RGB MCU from discrete comopnents */
		rgb24 = (BYTE *)jd->workbuf;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039a8:	67fb      	str	r3, [r7, #124]	; 0x7c
		pc = jd->mcubuf + mx * my;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80039ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039b2:	fb01 f303 	mul.w	r3, r1, r3
 80039b6:	4413      	add	r3, r2
 80039b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		cb = pc[0] - 128; /* Get Cb/Cr component and restore right level */
 80039bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	3b80      	subs	r3, #128	; 0x80
 80039c4:	633b      	str	r3, [r7, #48]	; 0x30
		cr = pc[64] - 128;
 80039c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039ca:	3340      	adds	r3, #64	; 0x40
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	3b80      	subs	r3, #128	; 0x80
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (iy = 0; iy < my; iy += 8)
 80039d2:	2300      	movs	r3, #0
 80039d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039d8:	e0ad      	b.n	8003b36 <mcu_output+0x56e>
		{
			py = jd->mcubuf;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (iy == 8)
 80039e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d104      	bne.n	80039f4 <mcu_output+0x42c>
				py += 64 * 2;
 80039ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039ee:	3380      	adds	r3, #128	; 0x80
 80039f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			for (ix = 0; ix < mx; ix += 8)
 80039f4:	2300      	movs	r3, #0
 80039f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80039fa:	e091      	b.n	8003b20 <mcu_output+0x558>
 80039fc:	f3af 8000 	nop.w
 8003a00:	8d4fdf3b 	.word	0x8d4fdf3b
 8003a04:	3ff66e97 	.word	0x3ff66e97
 8003a08:	9374bc6a 	.word	0x9374bc6a
 8003a0c:	3fd60418 	.word	0x3fd60418
 8003a10:	872b020c 	.word	0x872b020c
 8003a14:	3fe6d916 	.word	0x3fe6d916
 8003a18:	ac083127 	.word	0xac083127
 8003a1c:	3ffc5a1c 	.word	0x3ffc5a1c
 8003a20:	08012910 	.word	0x08012910
			{
				yy = *py; /* Get Y component */
 8003a24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	62bb      	str	r3, [r7, #40]	; 0x28
				py += 64;
 8003a2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a30:	3340      	adds	r3, #64	; 0x40
 8003a32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((INT)(1.402 * CVACC) * cr / CVACC));
 8003a36:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003a38:	f7fc fd56 	bl	80004e8 <__aeabi_i2d>
 8003a3c:	a386      	add	r3, pc, #536	; (adr r3, 8003c58 <mcu_output+0x690>)
 8003a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a42:	f7fc fdbb 	bl	80005bc <__aeabi_dmul>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	f7fc ffc7 	bl	80009e0 <__aeabi_d2iz>
 8003a52:	4602      	mov	r2, r0
 8003a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a56:	fb03 f202 	mul.w	r2, r3, r2
 8003a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a5c:	fb92 f2f3 	sdiv	r2, r2, r3
 8003a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a62:	4413      	add	r3, r2
 8003a64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a6a:	1c59      	adds	r1, r3, #1
 8003a6c:	67f9      	str	r1, [r7, #124]	; 0x7c
 8003a6e:	4982      	ldr	r1, [pc, #520]	; (8003c78 <mcu_output+0x6b0>)
 8003a70:	5c8a      	ldrb	r2, [r1, r2]
 8003a72:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* G */ BYTECLIP(yy - ((INT)(0.344 * CVACC) * cb + (INT)(0.714 * CVACC) * cr) / CVACC);
 8003a74:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003a76:	f7fc fd37 	bl	80004e8 <__aeabi_i2d>
 8003a7a:	a379      	add	r3, pc, #484	; (adr r3, 8003c60 <mcu_output+0x698>)
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	f7fc fd9c 	bl	80005bc <__aeabi_dmul>
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	4610      	mov	r0, r2
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	f7fc ffa8 	bl	80009e0 <__aeabi_d2iz>
 8003a90:	4602      	mov	r2, r0
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	fb03 f402 	mul.w	r4, r3, r2
 8003a98:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003a9a:	f7fc fd25 	bl	80004e8 <__aeabi_i2d>
 8003a9e:	a372      	add	r3, pc, #456	; (adr r3, 8003c68 <mcu_output+0x6a0>)
 8003aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa4:	f7fc fd8a 	bl	80005bc <__aeabi_dmul>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4610      	mov	r0, r2
 8003aae:	4619      	mov	r1, r3
 8003ab0:	f7fc ff96 	bl	80009e0 <__aeabi_d2iz>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab8:	fb03 f302 	mul.w	r3, r3, r2
 8003abc:	18e2      	adds	r2, r4, r3
 8003abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ac0:	fb92 f3f3 	sdiv	r3, r2, r3
 8003ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003acc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ace:	1c59      	adds	r1, r3, #1
 8003ad0:	67f9      	str	r1, [r7, #124]	; 0x7c
 8003ad2:	4969      	ldr	r1, [pc, #420]	; (8003c78 <mcu_output+0x6b0>)
 8003ad4:	5c8a      	ldrb	r2, [r1, r2]
 8003ad6:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* B */ BYTECLIP(yy + ((INT)(1.772 * CVACC) * cb / CVACC));
 8003ad8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003ada:	f7fc fd05 	bl	80004e8 <__aeabi_i2d>
 8003ade:	a364      	add	r3, pc, #400	; (adr r3, 8003c70 <mcu_output+0x6a8>)
 8003ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae4:	f7fc fd6a 	bl	80005bc <__aeabi_dmul>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4610      	mov	r0, r2
 8003aee:	4619      	mov	r1, r3
 8003af0:	f7fc ff76 	bl	80009e0 <__aeabi_d2iz>
 8003af4:	4602      	mov	r2, r0
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	fb03 f202 	mul.w	r2, r3, r2
 8003afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003afe:	fb92 f2f3 	sdiv	r2, r2, r3
 8003b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b04:	4413      	add	r3, r2
 8003b06:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b0c:	1c59      	adds	r1, r3, #1
 8003b0e:	67f9      	str	r1, [r7, #124]	; 0x7c
 8003b10:	4959      	ldr	r1, [pc, #356]	; (8003c78 <mcu_output+0x6b0>)
 8003b12:	5c8a      	ldrb	r2, [r1, r2]
 8003b14:	701a      	strb	r2, [r3, #0]
			for (ix = 0; ix < mx; ix += 8)
 8003b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003b20:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b26:	429a      	cmp	r2, r3
 8003b28:	f4ff af7c 	bcc.w	8003a24 <mcu_output+0x45c>
		for (iy = 0; iy < my; iy += 8)
 8003b2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b30:	3308      	adds	r3, #8
 8003b32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b36:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	f4ff af4c 	bcc.w	80039da <mcu_output+0x412>
			}
		}
	}

	/* Squeeze up pixel table if a part of MCU is to be truncated */
	mx >>= jd->scale;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	7b5b      	ldrb	r3, [r3, #13]
 8003b46:	461a      	mov	r2, r3
 8003b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b4a:	40d3      	lsrs	r3, r2
 8003b4c:	643b      	str	r3, [r7, #64]	; 0x40
	if (rx < mx)
 8003b4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d239      	bcs.n	8003bca <mcu_output+0x602>
	{
		BYTE *s, *d;
		UINT x, y;

		s = d = (BYTE *)jd->workbuf;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b5e:	663b      	str	r3, [r7, #96]	; 0x60
		for (y = 0; y < ry; y++)
 8003b60:	2300      	movs	r3, #0
 8003b62:	657b      	str	r3, [r7, #84]	; 0x54
 8003b64:	e02d      	b.n	8003bc2 <mcu_output+0x5fa>
		{
			for (x = 0; x < rx; x++)
 8003b66:	2300      	movs	r3, #0
 8003b68:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b6a:	e01a      	b.n	8003ba2 <mcu_output+0x5da>
			{ /* Copy effective pixels */
				*d++ = *s++;
 8003b6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b6e:	1c53      	adds	r3, r2, #1
 8003b70:	663b      	str	r3, [r7, #96]	; 0x60
 8003b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b74:	1c59      	adds	r1, r3, #1
 8003b76:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003b78:	7812      	ldrb	r2, [r2, #0]
 8003b7a:	701a      	strb	r2, [r3, #0]
				*d++ = *s++;
 8003b7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b7e:	1c53      	adds	r3, r2, #1
 8003b80:	663b      	str	r3, [r7, #96]	; 0x60
 8003b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b84:	1c59      	adds	r1, r3, #1
 8003b86:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003b88:	7812      	ldrb	r2, [r2, #0]
 8003b8a:	701a      	strb	r2, [r3, #0]
				*d++ = *s++;
 8003b8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b8e:	1c53      	adds	r3, r2, #1
 8003b90:	663b      	str	r3, [r7, #96]	; 0x60
 8003b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b94:	1c59      	adds	r1, r3, #1
 8003b96:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003b98:	7812      	ldrb	r2, [r2, #0]
 8003b9a:	701a      	strb	r2, [r3, #0]
			for (x = 0; x < rx; x++)
 8003b9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ba2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d3e0      	bcc.n	8003b6c <mcu_output+0x5a4>
			}
			s += (mx - rx) * 3; /* Skip truncated pixels */
 8003baa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bae:	1ad2      	subs	r2, r2, r3
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	4413      	add	r3, r2
 8003bb6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003bb8:	4413      	add	r3, r2
 8003bba:	663b      	str	r3, [r7, #96]	; 0x60
		for (y = 0; y < ry; y++)
 8003bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	657b      	str	r3, [r7, #84]	; 0x54
 8003bc2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d3cd      	bcc.n	8003b66 <mcu_output+0x59e>
	}

	/* Convert RGB888 to RGB565 if needed */
	if (JD_FORMAT == 1)
	{
		BYTE *s = (BYTE *)jd->workbuf;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bce:	653b      	str	r3, [r7, #80]	; 0x50
		WORD w, *d = (WORD *)s;
 8003bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
		UINT n = rx * ry;
 8003bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bd8:	fb02 f303 	mul.w	r3, r2, r3
 8003bdc:	64bb      	str	r3, [r7, #72]	; 0x48

		do
		{
			w = (*s++ & 0xF8) << 8;	 /* RRRRR----------- */
 8003bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	653a      	str	r2, [r7, #80]	; 0x50
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003bee:	f023 0307 	bic.w	r3, r3, #7
 8003bf2:	837b      	strh	r3, [r7, #26]
			w |= (*s++ & 0xFC) << 3; /* -----GGGGGG----- */
 8003bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	653a      	str	r2, [r7, #80]	; 0x50
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003c02:	b21a      	sxth	r2, r3
 8003c04:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	b21b      	sxth	r3, r3
 8003c0c:	837b      	strh	r3, [r7, #26]
			w |= *s++ >> 3;			 /* -----------BBBBB */
 8003c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	653a      	str	r2, [r7, #80]	; 0x50
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	08db      	lsrs	r3, r3, #3
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	b21a      	sxth	r2, r3
 8003c1c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	b21b      	sxth	r3, r3
 8003c24:	837b      	strh	r3, [r7, #26]
			*d++ = w;
 8003c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c28:	1c9a      	adds	r2, r3, #2
 8003c2a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003c2c:	8b7a      	ldrh	r2, [r7, #26]
 8003c2e:	801a      	strh	r2, [r3, #0]
		} while (--n);
 8003c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c32:	3b01      	subs	r3, #1
 8003c34:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1d0      	bne.n	8003bde <mcu_output+0x616>
	}

	/* Output the RGB rectangular */
	return (JRESULT)outfunc(jd, jd->workbuf, &rect); //ȥ����Ŀ����,��ʡʱ��
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8003c40:	f107 0210 	add.w	r2, r7, #16
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	4798      	blx	r3
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	b2db      	uxtb	r3, r3
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3794      	adds	r7, #148	; 0x94
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd90      	pop	{r4, r7, pc}
 8003c56:	bf00      	nop
 8003c58:	8d4fdf3b 	.word	0x8d4fdf3b
 8003c5c:	3ff66e97 	.word	0x3ff66e97
 8003c60:	9374bc6a 	.word	0x9374bc6a
 8003c64:	3fd60418 	.word	0x3fd60418
 8003c68:	872b020c 	.word	0x872b020c
 8003c6c:	3fe6d916 	.word	0x3fe6d916
 8003c70:	ac083127 	.word	0xac083127
 8003c74:	3ffc5a1c 	.word	0x3ffc5a1c
 8003c78:	08012910 	.word	0x08012910

08003c7c <restart>:

static JRESULT restart(
	JDEC *jd, /* Pointer to the decompressor object */
	WORD rstn /* Expected restert sequense number */
)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	807b      	strh	r3, [r7, #2]
	UINT i, dc;
	WORD d;
	BYTE *dp;

	/* Discard padding bits and get two bytes from the input stream */
	dp = jd->dptr;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	60bb      	str	r3, [r7, #8]
	dc = jd->dctr;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	613b      	str	r3, [r7, #16]
	d = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	81fb      	strh	r3, [r7, #14]
	for (i = 0; i < 2; i++)
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	e024      	b.n	8003ce8 <restart+0x6c>
	{
		if (!dc)
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10f      	bne.n	8003cc4 <restart+0x48>
		{ /* No input data is available, re-fill input buffer */
			dp = jd->inbuf;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	60bb      	str	r3, [r7, #8]
			dc = jd->infunc(jd, dp, JD_SZBUF);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cb2:	68b9      	ldr	r1, [r7, #8]
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	4798      	blx	r3
 8003cb8:	6138      	str	r0, [r7, #16]
			if (!dc)
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d104      	bne.n	8003cca <restart+0x4e>
				return JDR_INP;
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e03d      	b.n	8003d40 <restart+0xc4>
		}
		else
		{
			dp++;
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	60bb      	str	r3, [r7, #8]
		}
		dc--;
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	613b      	str	r3, [r7, #16]
		d = (d << 8) | *dp; /* Get a byte */
 8003cd0:	89fb      	ldrh	r3, [r7, #14]
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	b21a      	sxth	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	b21b      	sxth	r3, r3
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	b21b      	sxth	r3, r3
 8003ce0:	81fb      	strh	r3, [r7, #14]
	for (i = 0; i < 2; i++)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d9d7      	bls.n	8003c9e <restart+0x22>
	}
	jd->dptr = dp;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	605a      	str	r2, [r3, #4]
	jd->dctr = dc;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	601a      	str	r2, [r3, #0]
	jd->dmsk = 0;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	731a      	strb	r2, [r3, #12]

	/* Check the marker */
	if ((d & 0xFFD8) != 0xFFD0 || (d & 7) != (rstn & 7))
 8003d00:	89fa      	ldrh	r2, [r7, #14]
 8003d02:	f64f 73d8 	movw	r3, #65496	; 0xffd8
 8003d06:	4013      	ands	r3, r2
 8003d08:	f64f 72d0 	movw	r2, #65488	; 0xffd0
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d107      	bne.n	8003d20 <restart+0xa4>
 8003d10:	89fa      	ldrh	r2, [r7, #14]
 8003d12:	887b      	ldrh	r3, [r7, #2]
 8003d14:	4053      	eors	r3, r2
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <restart+0xa8>
		return JDR_FMT1; /* Err: expected RSTn marker is not detected (may be collapted data) */
 8003d20:	2306      	movs	r3, #6
 8003d22:	e00d      	b.n	8003d40 <restart+0xc4>

	/* Reset DC offset */
	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	829a      	strh	r2, [r3, #20]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	82da      	strh	r2, [r3, #22]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	831a      	strh	r2, [r3, #24]

	return JDR_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <jd_prepare>:
	UINT (*infunc)(JDEC *, BYTE *, UINT), /* JPEG strem input function */
	void *pool,							  /* Working buffer for the decompression session */
	UINT sz_pool,						  /* Size of working buffer */
	void *dev							  /* I/O device identifier for the session */
)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08c      	sub	sp, #48	; 0x30
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	603b      	str	r3, [r7, #0]
	WORD marker;
	DWORD ofs;
	UINT n, i, j, len;
	JRESULT rc;

	if (!pool)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <jd_prepare+0x18>
		return JDR_PAR;
 8003d5c:	2305      	movs	r3, #5
 8003d5e:	e29a      	b.n	8004296 <jd_prepare+0x54e>

	jd->pool = pool;	   /* Work memroy */
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	66da      	str	r2, [r3, #108]	; 0x6c
	jd->sz_pool = sz_pool; /* Size of given work memory */
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	671a      	str	r2, [r3, #112]	; 0x70
	jd->infunc = infunc;   /* Stream input function */
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	675a      	str	r2, [r3, #116]	; 0x74
	jd->device = dev;	   /* I/O device identifier */
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d76:	679a      	str	r2, [r3, #120]	; 0x78
	jd->nrst = 0;		   /* No restart interval (default) */
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	835a      	strh	r2, [r3, #26]

	for (i = 0; i < 2; i++)
 8003d7e:	2300      	movs	r3, #0
 8003d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d82:	e029      	b.n	8003dd8 <jd_prepare+0x90>
	{ /* Nulls pointers */
		for (j = 0; j < 2; j++)
 8003d84:	2300      	movs	r3, #0
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
 8003d88:	e020      	b.n	8003dcc <jd_prepare+0x84>
		{
			jd->huffbits[i][j] = 0;
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8e:	0059      	lsls	r1, r3, #1
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	440b      	add	r3, r1
 8003d94:	3308      	adds	r3, #8
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	605a      	str	r2, [r3, #4]
			jd->huffcode[i][j] = 0;
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da2:	0059      	lsls	r1, r3, #1
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	440b      	add	r3, r1
 8003da8:	330c      	adds	r3, #12
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	2200      	movs	r2, #0
 8003db0:	605a      	str	r2, [r3, #4]
			jd->huffdata[i][j] = 0;
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db6:	0059      	lsls	r1, r3, #1
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	440b      	add	r3, r1
 8003dbc:	3310      	adds	r3, #16
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	605a      	str	r2, [r3, #4]
		for (j = 0; j < 2; j++)
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	3301      	adds	r3, #1
 8003dca:	627b      	str	r3, [r7, #36]	; 0x24
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d9db      	bls.n	8003d8a <jd_prepare+0x42>
	for (i = 0; i < 2; i++)
 8003dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d9d2      	bls.n	8003d84 <jd_prepare+0x3c>
		}
	}
	for (i = 0; i < 4; i++)
 8003dde:	2300      	movs	r3, #0
 8003de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003de2:	e009      	b.n	8003df8 <jd_prepare+0xb0>
		jd->qttbl[i] = 0;
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de8:	3314      	adds	r3, #20
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	2200      	movs	r2, #0
 8003df0:	605a      	str	r2, [r3, #4]
	for (i = 0; i < 4; i++)
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df4:	3301      	adds	r3, #1
 8003df6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	2b03      	cmp	r3, #3
 8003dfc:	d9f2      	bls.n	8003de4 <jd_prepare+0x9c>

	jd->inbuf = seg = alloc_pool(jd, JD_SZBUF); /* Allocate stream input buffer */
 8003dfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f7fe fe72 	bl	8002aec <alloc_pool>
 8003e08:	61f8      	str	r0, [r7, #28]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	609a      	str	r2, [r3, #8]
	if (!seg)
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <jd_prepare+0xd2>
		return JDR_MEM1;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e23d      	b.n	8004296 <jd_prepare+0x54e>

	if (jd->infunc(jd, seg, 2) != 2)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e1e:	2202      	movs	r2, #2
 8003e20:	69f9      	ldr	r1, [r7, #28]
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	4798      	blx	r3
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d001      	beq.n	8003e30 <jd_prepare+0xe8>
		return JDR_INP; /* Check SOI marker */
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e232      	b.n	8004296 <jd_prepare+0x54e>
	if (LDB_WORD(seg) != 0xFFD8)
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	021b      	lsls	r3, r3, #8
 8003e36:	b21a      	sxth	r2, r3
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	b21b      	sxth	r3, r3
 8003e40:	4313      	orrs	r3, r2
 8003e42:	b21b      	sxth	r3, r3
 8003e44:	f113 0f28 	cmn.w	r3, #40	; 0x28
 8003e48:	d001      	beq.n	8003e4e <jd_prepare+0x106>
		return JDR_FMT1; /* Err: SOI is not detected */
 8003e4a:	2306      	movs	r3, #6
 8003e4c:	e223      	b.n	8004296 <jd_prepare+0x54e>
	ofs = 2;
 8003e4e:	2302      	movs	r3, #2
 8003e50:	62fb      	str	r3, [r7, #44]	; 0x2c

	for (;;)
	{
		/* Get a JPEG marker */
		if (jd->infunc(jd, seg, 4) != 4)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e56:	2204      	movs	r2, #4
 8003e58:	69f9      	ldr	r1, [r7, #28]
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	4798      	blx	r3
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d001      	beq.n	8003e68 <jd_prepare+0x120>
			return JDR_INP;
 8003e64:	2302      	movs	r3, #2
 8003e66:	e216      	b.n	8004296 <jd_prepare+0x54e>
		marker = LDB_WORD(seg);	 /* Marker */
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	b21a      	sxth	r2, r3
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	3301      	adds	r3, #1
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	b21b      	sxth	r3, r3
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	b21b      	sxth	r3, r3
 8003e7c:	837b      	strh	r3, [r7, #26]
		len = LDB_WORD(seg + 2); /* Length field */
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	3302      	adds	r3, #2
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	021b      	lsls	r3, r3, #8
 8003e86:	b21a      	sxth	r2, r3
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	3303      	adds	r3, #3
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	b21b      	sxth	r3, r3
 8003e90:	4313      	orrs	r3, r2
 8003e92:	b21b      	sxth	r3, r3
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	623b      	str	r3, [r7, #32]
		if (len <= 2 || (marker >> 8) != 0xFF)
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d904      	bls.n	8003ea8 <jd_prepare+0x160>
 8003e9e:	8b7b      	ldrh	r3, [r7, #26]
 8003ea0:	0a1b      	lsrs	r3, r3, #8
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	2bff      	cmp	r3, #255	; 0xff
 8003ea6:	d001      	beq.n	8003eac <jd_prepare+0x164>
			return JDR_FMT1;
 8003ea8:	2306      	movs	r3, #6
 8003eaa:	e1f4      	b.n	8004296 <jd_prepare+0x54e>
		len -= 2;		/* Content size excluding length field */
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	3b02      	subs	r3, #2
 8003eb0:	623b      	str	r3, [r7, #32]
		ofs += 4 + len; /* Number of bytes loaded */
 8003eb2:	6a3a      	ldr	r2, [r7, #32]
 8003eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb6:	4413      	add	r3, r2
 8003eb8:	3304      	adds	r3, #4
 8003eba:	62fb      	str	r3, [r7, #44]	; 0x2c

		switch (marker & 0xFF)
 8003ebc:	8b7b      	ldrh	r3, [r7, #26]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	3bc0      	subs	r3, #192	; 0xc0
 8003ec2:	2b1d      	cmp	r3, #29
 8003ec4:	f200 81d6 	bhi.w	8004274 <jd_prepare+0x52c>
 8003ec8:	a201      	add	r2, pc, #4	; (adr r2, 8003ed0 <jd_prepare+0x188>)
 8003eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ece:	bf00      	nop
 8003ed0:	08003f49 	.word	0x08003f49
 8003ed4:	08004271 	.word	0x08004271
 8003ed8:	08004271 	.word	0x08004271
 8003edc:	08004271 	.word	0x08004271
 8003ee0:	08004083 	.word	0x08004083
 8003ee4:	08004271 	.word	0x08004271
 8003ee8:	08004271 	.word	0x08004271
 8003eec:	08004271 	.word	0x08004271
 8003ef0:	08004275 	.word	0x08004275
 8003ef4:	08004271 	.word	0x08004271
 8003ef8:	08004271 	.word	0x08004271
 8003efc:	08004271 	.word	0x08004271
 8003f00:	08004275 	.word	0x08004275
 8003f04:	08004271 	.word	0x08004271
 8003f08:	08004271 	.word	0x08004271
 8003f0c:	08004271 	.word	0x08004271
 8003f10:	08004275 	.word	0x08004275
 8003f14:	08004275 	.word	0x08004275
 8003f18:	08004275 	.word	0x08004275
 8003f1c:	08004275 	.word	0x08004275
 8003f20:	08004275 	.word	0x08004275
 8003f24:	08004275 	.word	0x08004275
 8003f28:	08004275 	.word	0x08004275
 8003f2c:	08004275 	.word	0x08004275
 8003f30:	08004275 	.word	0x08004275
 8003f34:	08004271 	.word	0x08004271
 8003f38:	080040ff 	.word	0x080040ff
 8003f3c:	080040c1 	.word	0x080040c1
 8003f40:	08004275 	.word	0x08004275
 8003f44:	08004043 	.word	0x08004043
		{
		case 0xC0: /* SOF0 (baseline JPEG) */
			/* Load segment data */
			if (len > JD_SZBUF)
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f4e:	d901      	bls.n	8003f54 <jd_prepare+0x20c>
				return JDR_MEM2;
 8003f50:	2304      	movs	r3, #4
 8003f52:	e1a0      	b.n	8004296 <jd_prepare+0x54e>
			if (jd->infunc(jd, seg, len) != len)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f58:	6a3a      	ldr	r2, [r7, #32]
 8003f5a:	69f9      	ldr	r1, [r7, #28]
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	4798      	blx	r3
 8003f60:	4602      	mov	r2, r0
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d001      	beq.n	8003f6c <jd_prepare+0x224>
				return JDR_INP;
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e194      	b.n	8004296 <jd_prepare+0x54e>

			jd->width = LDB_WORD(seg + 3);	/* Image width in unit of pixel */
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	3303      	adds	r3, #3
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	021b      	lsls	r3, r3, #8
 8003f74:	b21a      	sxth	r2, r3
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	b21b      	sxth	r3, r3
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	b21b      	sxth	r3, r3
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	461a      	mov	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	61da      	str	r2, [r3, #28]
			jd->height = LDB_WORD(seg + 1); /* Image height in unit of pixel */
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	021b      	lsls	r3, r3, #8
 8003f92:	b21a      	sxth	r2, r3
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	3302      	adds	r3, #2
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	b21b      	sxth	r3, r3
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	b21b      	sxth	r3, r3
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	621a      	str	r2, [r3, #32]
			if (seg[5] != 3)
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	3305      	adds	r3, #5
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d001      	beq.n	8003fb6 <jd_prepare+0x26e>
				return JDR_FMT3; /* Err: Supports only Y/Cb/Cr format */
 8003fb2:	2308      	movs	r3, #8
 8003fb4:	e16f      	b.n	8004296 <jd_prepare+0x54e>

			/* Check three image components */
			for (i = 0; i < 3; i++)
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fba:	e03e      	b.n	800403a <jd_prepare+0x2f2>
			{
				b = seg[7 + 3 * i]; /* Get sampling factor */
 8003fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3307      	adds	r3, #7
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	4413      	add	r3, r2
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	74fb      	strb	r3, [r7, #19]
				if (!i)
 8003fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d116      	bne.n	8004002 <jd_prepare+0x2ba>
				{											 /* Y component */
					if (b != 0x11 && b != 0x22 && b != 0x21) /* Check sampling factor */
 8003fd4:	7cfb      	ldrb	r3, [r7, #19]
 8003fd6:	2b11      	cmp	r3, #17
 8003fd8:	d007      	beq.n	8003fea <jd_prepare+0x2a2>
 8003fda:	7cfb      	ldrb	r3, [r7, #19]
 8003fdc:	2b22      	cmp	r3, #34	; 0x22
 8003fde:	d004      	beq.n	8003fea <jd_prepare+0x2a2>
 8003fe0:	7cfb      	ldrb	r3, [r7, #19]
 8003fe2:	2b21      	cmp	r3, #33	; 0x21
 8003fe4:	d001      	beq.n	8003fea <jd_prepare+0x2a2>
						return JDR_FMT3;					 /* Err: Supports only 4:4:4, 4:2:0 or 4:2:2 */
 8003fe6:	2308      	movs	r3, #8
 8003fe8:	e155      	b.n	8004296 <jd_prepare+0x54e>
					jd->msx = b >> 4;
 8003fea:	7cfb      	ldrb	r3, [r7, #19]
 8003fec:	091b      	lsrs	r3, r3, #4
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	739a      	strb	r2, [r3, #14]
					jd->msy = b & 15; /* Size of MCU [blocks] */
 8003ff4:	7cfb      	ldrb	r3, [r7, #19]
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	73da      	strb	r2, [r3, #15]
 8004000:	e004      	b.n	800400c <jd_prepare+0x2c4>
				}
				else
				{ /* Cb/Cr component */
					if (b != 0x11)
 8004002:	7cfb      	ldrb	r3, [r7, #19]
 8004004:	2b11      	cmp	r3, #17
 8004006:	d001      	beq.n	800400c <jd_prepare+0x2c4>
						return JDR_FMT3; /* Err: Sampling factor of Cr/Cb must be 1 */
 8004008:	2308      	movs	r3, #8
 800400a:	e144      	b.n	8004296 <jd_prepare+0x54e>
				}
				b = seg[8 + 3 * i]; /* Get dequantizer table ID for this component */
 800400c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800400e:	4613      	mov	r3, r2
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	4413      	add	r3, r2
 8004014:	3308      	adds	r3, #8
 8004016:	69fa      	ldr	r2, [r7, #28]
 8004018:	4413      	add	r3, r2
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	74fb      	strb	r3, [r7, #19]
				if (b > 3)
 800401e:	7cfb      	ldrb	r3, [r7, #19]
 8004020:	2b03      	cmp	r3, #3
 8004022:	d901      	bls.n	8004028 <jd_prepare+0x2e0>
					return JDR_FMT3; /* Err: Invalid ID */
 8004024:	2308      	movs	r3, #8
 8004026:	e136      	b.n	8004296 <jd_prepare+0x54e>
				jd->qtid[i] = b;
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402c:	4413      	add	r3, r2
 800402e:	3310      	adds	r3, #16
 8004030:	7cfa      	ldrb	r2, [r7, #19]
 8004032:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < 3; i++)
 8004034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004036:	3301      	adds	r3, #1
 8004038:	62bb      	str	r3, [r7, #40]	; 0x28
 800403a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403c:	2b02      	cmp	r3, #2
 800403e:	d9bd      	bls.n	8003fbc <jd_prepare+0x274>
			}
			break;
 8004040:	e128      	b.n	8004294 <jd_prepare+0x54c>

		case 0xDD: /* DRI */
			/* Load segment data */
			if (len > JD_SZBUF)
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004048:	d901      	bls.n	800404e <jd_prepare+0x306>
				return JDR_MEM2;
 800404a:	2304      	movs	r3, #4
 800404c:	e123      	b.n	8004296 <jd_prepare+0x54e>
			if (jd->infunc(jd, seg, len) != len)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004052:	6a3a      	ldr	r2, [r7, #32]
 8004054:	69f9      	ldr	r1, [r7, #28]
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	4798      	blx	r3
 800405a:	4602      	mov	r2, r0
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	4293      	cmp	r3, r2
 8004060:	d001      	beq.n	8004066 <jd_prepare+0x31e>
				return JDR_INP;
 8004062:	2302      	movs	r3, #2
 8004064:	e117      	b.n	8004296 <jd_prepare+0x54e>

			/* Get restart interval (MCUs) */
			jd->nrst = LDB_WORD(seg);
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	021b      	lsls	r3, r3, #8
 800406c:	b21a      	sxth	r2, r3
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	3301      	adds	r3, #1
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	b21b      	sxth	r3, r3
 8004076:	4313      	orrs	r3, r2
 8004078:	b21b      	sxth	r3, r3
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	835a      	strh	r2, [r3, #26]
			break;
 8004080:	e108      	b.n	8004294 <jd_prepare+0x54c>

		case 0xC4: /* DHT */
			/* Load segment data */
			if (len > JD_SZBUF)
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004088:	d901      	bls.n	800408e <jd_prepare+0x346>
				return JDR_MEM2;
 800408a:	2304      	movs	r3, #4
 800408c:	e103      	b.n	8004296 <jd_prepare+0x54e>
			if (jd->infunc(jd, seg, len) != len)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004092:	6a3a      	ldr	r2, [r7, #32]
 8004094:	69f9      	ldr	r1, [r7, #28]
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	4798      	blx	r3
 800409a:	4602      	mov	r2, r0
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	4293      	cmp	r3, r2
 80040a0:	d001      	beq.n	80040a6 <jd_prepare+0x35e>
				return JDR_INP;
 80040a2:	2302      	movs	r3, #2
 80040a4:	e0f7      	b.n	8004296 <jd_prepare+0x54e>

			/* Create huffman tables */
			rc = (JRESULT)create_huffman_tbl(jd, seg, len);
 80040a6:	6a3a      	ldr	r2, [r7, #32]
 80040a8:	69f9      	ldr	r1, [r7, #28]
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f7fe fda0 	bl	8002bf0 <create_huffman_tbl>
 80040b0:	4603      	mov	r3, r0
 80040b2:	767b      	strb	r3, [r7, #25]
			if (rc)
 80040b4:	7e7b      	ldrb	r3, [r7, #25]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 80e9 	beq.w	800428e <jd_prepare+0x546>
				return rc;
 80040bc:	7e7b      	ldrb	r3, [r7, #25]
 80040be:	e0ea      	b.n	8004296 <jd_prepare+0x54e>
			break;

		case 0xDB: /* DQT */
			/* Load segment data */
			if (len > JD_SZBUF)
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c6:	d901      	bls.n	80040cc <jd_prepare+0x384>
				return JDR_MEM2;
 80040c8:	2304      	movs	r3, #4
 80040ca:	e0e4      	b.n	8004296 <jd_prepare+0x54e>
			if (jd->infunc(jd, seg, len) != len)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d0:	6a3a      	ldr	r2, [r7, #32]
 80040d2:	69f9      	ldr	r1, [r7, #28]
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	4798      	blx	r3
 80040d8:	4602      	mov	r2, r0
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	4293      	cmp	r3, r2
 80040de:	d001      	beq.n	80040e4 <jd_prepare+0x39c>
				return JDR_INP;
 80040e0:	2302      	movs	r3, #2
 80040e2:	e0d8      	b.n	8004296 <jd_prepare+0x54e>

			/* Create de-quantizer tables */
			rc = (JRESULT)create_qt_tbl(jd, seg, len);
 80040e4:	6a3a      	ldr	r2, [r7, #32]
 80040e6:	69f9      	ldr	r1, [r7, #28]
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f7fe fd25 	bl	8002b38 <create_qt_tbl>
 80040ee:	4603      	mov	r3, r0
 80040f0:	767b      	strb	r3, [r7, #25]
			if (rc)
 80040f2:	7e7b      	ldrb	r3, [r7, #25]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 80cc 	beq.w	8004292 <jd_prepare+0x54a>
				return rc;
 80040fa:	7e7b      	ldrb	r3, [r7, #25]
 80040fc:	e0cb      	b.n	8004296 <jd_prepare+0x54e>
			break;

		case 0xDA: /* SOS */
			/* Load segment data */
			if (len > JD_SZBUF)
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004104:	d901      	bls.n	800410a <jd_prepare+0x3c2>
				return JDR_MEM2;
 8004106:	2304      	movs	r3, #4
 8004108:	e0c5      	b.n	8004296 <jd_prepare+0x54e>
			if (jd->infunc(jd, seg, len) != len)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800410e:	6a3a      	ldr	r2, [r7, #32]
 8004110:	69f9      	ldr	r1, [r7, #28]
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	4798      	blx	r3
 8004116:	4602      	mov	r2, r0
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	4293      	cmp	r3, r2
 800411c:	d001      	beq.n	8004122 <jd_prepare+0x3da>
				return JDR_INP;
 800411e:	2302      	movs	r3, #2
 8004120:	e0b9      	b.n	8004296 <jd_prepare+0x54e>

			if (!jd->width || !jd->height)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <jd_prepare+0x3ea>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <jd_prepare+0x3ee>
				return JDR_FMT1; /* Err: Invalid image size */
 8004132:	2306      	movs	r3, #6
 8004134:	e0af      	b.n	8004296 <jd_prepare+0x54e>

			if (seg[0] != 3)
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b03      	cmp	r3, #3
 800413c:	d001      	beq.n	8004142 <jd_prepare+0x3fa>
				return JDR_FMT3; /* Err: Supports only three color components format */
 800413e:	2308      	movs	r3, #8
 8004140:	e0a9      	b.n	8004296 <jd_prepare+0x54e>

			/* Check if all tables corresponding to each components have been loaded */
			for (i = 0; i < 3; i++)
 8004142:	2300      	movs	r3, #0
 8004144:	62bb      	str	r3, [r7, #40]	; 0x28
 8004146:	e037      	b.n	80041b8 <jd_prepare+0x470>
			{
				b = seg[2 + 2 * i]; /* Get huffman table ID */
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	3301      	adds	r3, #1
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	69fa      	ldr	r2, [r7, #28]
 8004150:	4413      	add	r3, r2
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	74fb      	strb	r3, [r7, #19]
				if (b != 0x00 && b != 0x11)
 8004156:	7cfb      	ldrb	r3, [r7, #19]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d004      	beq.n	8004166 <jd_prepare+0x41e>
 800415c:	7cfb      	ldrb	r3, [r7, #19]
 800415e:	2b11      	cmp	r3, #17
 8004160:	d001      	beq.n	8004166 <jd_prepare+0x41e>
					return JDR_FMT3; /* Err: Different table number for DC/AC element */
 8004162:	2308      	movs	r3, #8
 8004164:	e097      	b.n	8004296 <jd_prepare+0x54e>
				b = i ? 1 : 0;
 8004166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004168:	2b00      	cmp	r3, #0
 800416a:	bf14      	ite	ne
 800416c:	2301      	movne	r3, #1
 800416e:	2300      	moveq	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	74fb      	strb	r3, [r7, #19]
				if (!jd->huffbits[b][0] || !jd->huffbits[b][1]) /* Check huffman table for this component */
 8004174:	7cfb      	ldrb	r3, [r7, #19]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	3304      	adds	r3, #4
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	4413      	add	r3, r2
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d006      	beq.n	8004192 <jd_prepare+0x44a>
 8004184:	7cfb      	ldrb	r3, [r7, #19]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	4413      	add	r3, r2
 800418c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <jd_prepare+0x44e>
					return JDR_FMT1;							/* Err: Huffman table not loaded */
 8004192:	2306      	movs	r3, #6
 8004194:	e07f      	b.n	8004296 <jd_prepare+0x54e>
				if (!jd->qttbl[jd->qtid[i]])
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419a:	4413      	add	r3, r2
 800419c:	3310      	adds	r3, #16
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	3314      	adds	r3, #20
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <jd_prepare+0x46a>
					return JDR_FMT1; /* Err: Dequantizer table not loaded */
 80041ae:	2306      	movs	r3, #6
 80041b0:	e071      	b.n	8004296 <jd_prepare+0x54e>
			for (i = 0; i < 3; i++)
 80041b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b4:	3301      	adds	r3, #1
 80041b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80041b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d9c4      	bls.n	8004148 <jd_prepare+0x400>
			}

			/* Allocate working buffer for MCU and RGB */
			n = jd->msy * jd->msx; /* Number of Y blocks in the MCU */
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	7bdb      	ldrb	r3, [r3, #15]
 80041c2:	461a      	mov	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	7b9b      	ldrb	r3, [r3, #14]
 80041c8:	fb03 f302 	mul.w	r3, r3, r2
 80041cc:	617b      	str	r3, [r7, #20]
			if (!n)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <jd_prepare+0x490>
				return JDR_FMT1;   /* Err: SOF0 has not been loaded */
 80041d4:	2306      	movs	r3, #6
 80041d6:	e05e      	b.n	8004296 <jd_prepare+0x54e>
			len = n * 64 * 2 + 64; /* Allocate buffer for IDCT and RGB output */
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	01db      	lsls	r3, r3, #7
 80041dc:	3340      	adds	r3, #64	; 0x40
 80041de:	623b      	str	r3, [r7, #32]
			if (len < 256)
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	2bff      	cmp	r3, #255	; 0xff
 80041e4:	d802      	bhi.n	80041ec <jd_prepare+0x4a4>
				len = 256;					   /* but at least 256 byte is required for IDCT */
 80041e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041ea:	623b      	str	r3, [r7, #32]
			jd->workbuf = alloc_pool(jd, len); /* and it may occupy a part of following MCU working buffer for RGB output */
 80041ec:	6a39      	ldr	r1, [r7, #32]
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f7fe fc7c 	bl	8002aec <alloc_pool>
 80041f4:	4602      	mov	r2, r0
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	665a      	str	r2, [r3, #100]	; 0x64
			if (!jd->workbuf)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <jd_prepare+0x4be>
				return JDR_MEM1;					   /* Err: not enough memory */
 8004202:	2303      	movs	r3, #3
 8004204:	e047      	b.n	8004296 <jd_prepare+0x54e>
			jd->mcubuf = alloc_pool(jd, (n + 2) * 64); /* Allocate MCU working buffer */
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	3302      	adds	r3, #2
 800420a:	019b      	lsls	r3, r3, #6
 800420c:	4619      	mov	r1, r3
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f7fe fc6c 	bl	8002aec <alloc_pool>
 8004214:	4602      	mov	r2, r0
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	669a      	str	r2, [r3, #104]	; 0x68
			if (!jd->mcubuf)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <jd_prepare+0x4de>
				return JDR_MEM1; /* Err: not enough memory */
 8004222:	2303      	movs	r3, #3
 8004224:	e037      	b.n	8004296 <jd_prepare+0x54e>

			/* Pre-load the JPEG data to extract it from the bit stream */
			jd->dptr = seg;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	605a      	str	r2, [r3, #4]
			jd->dctr = 0;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	601a      	str	r2, [r3, #0]
			jd->dmsk = 0; /* Prepare to read bit stream */
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	731a      	strb	r2, [r3, #12]
			if (ofs %= JD_SZBUF)
 8004238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800423e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004242:	2b00      	cmp	r3, #0
 8004244:	d012      	beq.n	800426c <jd_prepare+0x524>
			{ /* Align read offset to JD_SZBUF */
				jd->dctr = jd->infunc(jd, seg + ofs, JD_SZBUF - (UINT)ofs);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800424a:	69f9      	ldr	r1, [r7, #28]
 800424c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800424e:	4411      	add	r1, r2
 8004250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004252:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	4798      	blx	r3
 800425a:	4602      	mov	r2, r0
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	601a      	str	r2, [r3, #0]
				jd->dptr = seg + ofs - 1;
 8004260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004262:	3b01      	subs	r3, #1
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	441a      	add	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	605a      	str	r2, [r3, #4]
			}

			return JDR_OK; /* Initialization succeeded. Ready to decompress the JPEG image. */
 800426c:	2300      	movs	r3, #0
 800426e:	e012      	b.n	8004296 <jd_prepare+0x54e>
		case 0xCB:			 /* SOF11 */
		case 0xCD:			 /* SOF13 */
		case 0xCE:			 /* SOF14 */
		case 0xCF:			 /* SOF15 */
		case 0xD9:			 /* EOI */
			return JDR_FMT3; /* Unsuppoted JPEG standard (may be progressive JPEG) */
 8004270:	2308      	movs	r3, #8
 8004272:	e010      	b.n	8004296 <jd_prepare+0x54e>

		default: /* Unknown segment (comment, exif or etc..) */
			/* Skip segment data */
			if (jd->infunc(jd, 0, len) != len) /* Null pointer specifies to skip bytes of stream */
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004278:	6a3a      	ldr	r2, [r7, #32]
 800427a:	2100      	movs	r1, #0
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	4798      	blx	r3
 8004280:	4602      	mov	r2, r0
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	4293      	cmp	r3, r2
 8004286:	f43f ade4 	beq.w	8003e52 <jd_prepare+0x10a>
				return JDR_INP;
 800428a:	2302      	movs	r3, #2
 800428c:	e003      	b.n	8004296 <jd_prepare+0x54e>
			break;
 800428e:	bf00      	nop
 8004290:	e5df      	b.n	8003e52 <jd_prepare+0x10a>
			break;
 8004292:	bf00      	nop
		if (jd->infunc(jd, seg, 4) != 4)
 8004294:	e5dd      	b.n	8003e52 <jd_prepare+0x10a>
		}
	}
}
 8004296:	4618      	mov	r0, r3
 8004298:	3730      	adds	r7, #48	; 0x30
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop

080042a0 <jd_decomp>:
JRESULT jd_decomp(
	JDEC *jd,								  /* Initialized decompression object */
	UINT (*outfunc)(JDEC *, void *, JRECT *), /* RGB output function */
	BYTE scale								  /* Output de-scaling factor (0 to 3) */
)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08a      	sub	sp, #40	; 0x28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	4613      	mov	r3, r2
 80042ac:	71fb      	strb	r3, [r7, #7]
	UINT x, y, mx, my;
	WORD rst, rsc;
	JRESULT rc;

	if (scale > (JD_USE_SCALE ? 3 : 0))
 80042ae:	79fb      	ldrb	r3, [r7, #7]
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d901      	bls.n	80042b8 <jd_decomp+0x18>
		return JDR_PAR;
 80042b4:	2305      	movs	r3, #5
 80042b6:	e072      	b.n	800439e <jd_decomp+0xfe>
	jd->scale = scale;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	79fa      	ldrb	r2, [r7, #7]
 80042bc:	735a      	strb	r2, [r3, #13]

	mx = jd->msx * 8;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	7b9b      	ldrb	r3, [r3, #14]
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	617b      	str	r3, [r7, #20]
	my = jd->msy * 8; /* Size of the MCU (pixel) */
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	7bdb      	ldrb	r3, [r3, #15]
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	613b      	str	r3, [r7, #16]

	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0; /* Initialize DC values */
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	829a      	strh	r2, [r3, #20]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	82da      	strh	r2, [r3, #22]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	831a      	strh	r2, [r3, #24]
	rst = rsc = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	83bb      	strh	r3, [r7, #28]
 80042ec:	8bbb      	ldrh	r3, [r7, #28]
 80042ee:	83fb      	strh	r3, [r7, #30]

	rc = JDR_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	76fb      	strb	r3, [r7, #27]
	for (y = 0; y < jd->height; y += my)
 80042f4:	2300      	movs	r3, #0
 80042f6:	623b      	str	r3, [r7, #32]
 80042f8:	e04b      	b.n	8004392 <jd_decomp+0xf2>
	{ /* Vertical loop of MCUs */
		for (x = 0; x < jd->width; x += mx)
 80042fa:	2300      	movs	r3, #0
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
 80042fe:	e03f      	b.n	8004380 <jd_decomp+0xe0>
		{ /* Horizontal loop of MCUs */
			if (jd->nrst && rst++ == jd->nrst)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8b5b      	ldrh	r3, [r3, #26]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d016      	beq.n	8004336 <jd_decomp+0x96>
 8004308:	8bfb      	ldrh	r3, [r7, #30]
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	83fa      	strh	r2, [r7, #30]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	8b52      	ldrh	r2, [r2, #26]
 8004312:	4293      	cmp	r3, r2
 8004314:	d10f      	bne.n	8004336 <jd_decomp+0x96>
			{ /* Process restart interval if enabled */
				rc = restart(jd, rsc++);
 8004316:	8bbb      	ldrh	r3, [r7, #28]
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	83ba      	strh	r2, [r7, #28]
 800431c:	4619      	mov	r1, r3
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f7ff fcac 	bl	8003c7c <restart>
 8004324:	4603      	mov	r3, r0
 8004326:	76fb      	strb	r3, [r7, #27]
				if (rc != JDR_OK)
 8004328:	7efb      	ldrb	r3, [r7, #27]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <jd_decomp+0x92>
					return rc;
 800432e:	7efb      	ldrb	r3, [r7, #27]
 8004330:	e035      	b.n	800439e <jd_decomp+0xfe>
				rst = 1;
 8004332:	2301      	movs	r3, #1
 8004334:	83fb      	strh	r3, [r7, #30]
			}
			rc = mcu_load(jd); /* Load an MCU (decompress huffman coded stream and apply IDCT) */
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f7ff f802 	bl	8003340 <mcu_load>
 800433c:	4603      	mov	r3, r0
 800433e:	76fb      	strb	r3, [r7, #27]
			if (rc != JDR_OK)
 8004340:	7efb      	ldrb	r3, [r7, #27]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <jd_decomp+0xaa>
				return rc;
 8004346:	7efb      	ldrb	r3, [r7, #27]
 8004348:	e029      	b.n	800439e <jd_decomp+0xfe>
			vPortEnterCritical();
 800434a:	f00c fd27 	bl	8010d9c <vPortEnterCritical>
			rc = mcu_output(jd, outfunc, x, y); /* Output the MCU (color space conversion, scaling and output) */
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f7ff f937 	bl	80035c8 <mcu_output>
 800435a:	4603      	mov	r3, r0
 800435c:	76fb      	strb	r3, [r7, #27]
			vPortExitCritical();
 800435e:	f00c fd4d 	bl	8010dfc <vPortExitCritical>
			if (rc != JDR_OK)
 8004362:	7efb      	ldrb	r3, [r7, #27]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <jd_decomp+0xcc>
				return rc;
 8004368:	7efb      	ldrb	r3, [r7, #27]
 800436a:	e018      	b.n	800439e <jd_decomp+0xfe>
			if (write_bit == 0x10)
 800436c:	4b0e      	ldr	r3, [pc, #56]	; (80043a8 <jd_decomp+0x108>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b10      	cmp	r3, #16
 8004372:	d101      	bne.n	8004378 <jd_decomp+0xd8>
			{
				return rc;
 8004374:	7efb      	ldrb	r3, [r7, #27]
 8004376:	e012      	b.n	800439e <jd_decomp+0xfe>
		for (x = 0; x < jd->width; x += mx)
 8004378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	4413      	add	r3, r2
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004386:	429a      	cmp	r2, r3
 8004388:	d3ba      	bcc.n	8004300 <jd_decomp+0x60>
	for (y = 0; y < jd->height; y += my)
 800438a:	6a3a      	ldr	r2, [r7, #32]
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	4413      	add	r3, r2
 8004390:	623b      	str	r3, [r7, #32]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	6a3a      	ldr	r2, [r7, #32]
 8004398:	429a      	cmp	r2, r3
 800439a:	d3ae      	bcc.n	80042fa <jd_decomp+0x5a>
			}
		}
	}

	return rc;
 800439c:	7efb      	ldrb	r3, [r7, #27]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3728      	adds	r7, #40	; 0x28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	20001fc8 	.word	0x20001fc8

080043ac <jpeg_in_func>:
//jd:储存待解码的对象信息的结构体
//buf:输入数据缓冲区 (NULL:执行地址偏移)
//num:需要从输入数据流读出的数据量/地址偏移量
//返回值:读取到的字节数/地址偏移量
UINT jpeg_in_func(JDEC *jd, uint8_t *buf, UINT num)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b088      	sub	sp, #32
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
	UINT rb;				  //读取到的字节数
	FIL *dev = (FIL *)jd->device; //待解码的文件的信息，使用FATFS中的FIL结构类型进行定义
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043bc:	61fb      	str	r3, [r7, #28]
	if (buf) //读取数据有效，开始读取数据
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d013      	beq.n	80043ec <jpeg_in_func+0x40>
	{
		vPortEnterCritical();		//进入临界区
 80043c4:	f00c fcea 	bl	8010d9c <vPortEnterCritical>
		FRESULT res = f_read(dev, buf, num, &rb); //调用FATFS的f_read函数，用于把jpeg文件的数据读取出来
 80043c8:	f107 0314 	add.w	r3, r7, #20
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	68b9      	ldr	r1, [r7, #8]
 80043d0:	69f8      	ldr	r0, [r7, #28]
 80043d2:	f008 fe2c 	bl	800d02e <f_read>
 80043d6:	4603      	mov	r3, r0
 80043d8:	76fb      	strb	r3, [r7, #27]
		if(res != FR_OK)
 80043da:	7efb      	ldrb	r3, [r7, #27]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <jpeg_in_func+0x38>
		{
			return 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	e012      	b.n	800440a <jpeg_in_func+0x5e>
		}
		vPortExitCritical();
 80043e4:	f00c fd0a 	bl	8010dfc <vPortExitCritical>
		return rb; //返回读取到的字节数目
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	e00e      	b.n	800440a <jpeg_in_func+0x5e>
	}
	else
		return (f_lseek(dev, f_tell(dev) + num) == FR_OK) ? num : 0; //重新定位数据点，相当于删除之前的n字节数据
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4413      	add	r3, r2
 80043f6:	4619      	mov	r1, r3
 80043f8:	69f8      	ldr	r0, [r7, #28]
 80043fa:	f009 f8c6 	bl	800d58a <f_lseek>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <jpeg_in_func+0x5c>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	e000      	b.n	800440a <jpeg_in_func+0x5e>
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <jpeg_out_func_fill>:
//jd:储存待解码的对象信息的结构体
//rgbbuf:指向等待输出的RGB位图数据的指针
//rect:等待输出的矩形图像的参数
//返回值:0,输出成功;1,输出失败/结束输出
uint32_t jpeg_out_func_fill(JDEC *jd, void *rgbbuf, JRECT *rect)
{
 8004414:	b5b0      	push	{r4, r5, r7, lr}
 8004416:	b088      	sub	sp, #32
 8004418:	af02      	add	r7, sp, #8
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
	uint16_t *pencolor = (uint16_t *)rgbbuf;
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	617b      	str	r3, [r7, #20]
	uint16_t width = rect->right - rect->left + 1;														 //填充的宽度
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	885a      	ldrh	r2, [r3, #2]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	881b      	ldrh	r3, [r3, #0]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	b29b      	uxth	r3, r3
 8004430:	3301      	adds	r3, #1
 8004432:	827b      	strh	r3, [r7, #18]
	uint16_t height = rect->bottom - rect->top + 1;														 //填充的高度
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	88da      	ldrh	r2, [r3, #6]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	889b      	ldrh	r3, [r3, #4]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	b29b      	uxth	r3, r3
 8004440:	3301      	adds	r3, #1
 8004442:	823b      	strh	r3, [r7, #16]
	pic_phy.fillcolor(rect->left + picinfo.S_XOFF, rect->top + picinfo.S_YOFF, width, height, pencolor); //颜色填充
 8004444:	4b0d      	ldr	r3, [pc, #52]	; (800447c <jpeg_out_func_fill+0x68>)
 8004446:	691c      	ldr	r4, [r3, #16]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	881a      	ldrh	r2, [r3, #0]
 800444c:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <jpeg_out_func_fill+0x6c>)
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	b29b      	uxth	r3, r3
 8004452:	4413      	add	r3, r2
 8004454:	b298      	uxth	r0, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	889a      	ldrh	r2, [r3, #4]
 800445a:	4b09      	ldr	r3, [pc, #36]	; (8004480 <jpeg_out_func_fill+0x6c>)
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	b29b      	uxth	r3, r3
 8004460:	4413      	add	r3, r2
 8004462:	b299      	uxth	r1, r3
 8004464:	8a3d      	ldrh	r5, [r7, #16]
 8004466:	8a7a      	ldrh	r2, [r7, #18]
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	462b      	mov	r3, r5
 800446e:	47a0      	blx	r4
	return 0;																							 //返回0,使得解码工作继续执行
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bdb0      	pop	{r4, r5, r7, pc}
 800447a:	bf00      	nop
 800447c:	20001fb4 	.word	0x20001fb4
 8004480:	20001f8c 	.word	0x20001f8c

08004484 <jpeg_out_func_point>:
//jd:储存待解码的对象信息的结构体
//rgbbuf:指向等待输出的RGB位图数据的指针
//rect:等待输出的矩形图像的参数
//返回值:0,输出成功;1,输出失败/结束输出
uint32_t jpeg_out_func_point(JDEC *jd, void *rgbbuf, JRECT *rect)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08a      	sub	sp, #40	; 0x28
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
	uint16_t i, j;
	uint16_t realx = rect->left, realy = 0;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	847b      	strh	r3, [r7, #34]	; 0x22
 8004496:	2300      	movs	r3, #0
 8004498:	837b      	strh	r3, [r7, #26]
	uint16_t *pencolor = rgbbuf;
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	61fb      	str	r3, [r7, #28]
	uint16_t width = rect->right - rect->left + 1;	//图片的宽度
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	885a      	ldrh	r2, [r3, #2]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	3301      	adds	r3, #1
 80044ac:	833b      	strh	r3, [r7, #24]
	uint16_t height = rect->bottom - rect->top + 1; //图片的高度
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	88da      	ldrh	r2, [r3, #6]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	889b      	ldrh	r3, [r3, #4]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	3301      	adds	r3, #1
 80044bc:	82fb      	strh	r3, [r7, #22]
	for (i = 0; i < height; i++)					//y坐标
 80044be:	2300      	movs	r3, #0
 80044c0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80044c2:	e052      	b.n	800456a <jpeg_out_func_point+0xe6>
	{
		realy = (picinfo.Div_Fac * (rect->top + i)) >> 13; //实际Y坐标
 80044c4:	4b2d      	ldr	r3, [pc, #180]	; (800457c <jpeg_out_func_point+0xf8>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	8892      	ldrh	r2, [r2, #4]
 80044cc:	4611      	mov	r1, r2
 80044ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80044d0:	440a      	add	r2, r1
 80044d2:	fb02 f303 	mul.w	r3, r2, r3
 80044d6:	0b5b      	lsrs	r3, r3, #13
 80044d8:	837b      	strh	r3, [r7, #26]
		//在这里不改变picinfo.staticx和picinfo.staticy的值 ,如果在这里改变,则会造成每块的第一个点不显示!!!
		if (!is_element_ok(realx, realy, 0)) //行值是否满足条件? 寻找满足条件的行
 80044da:	8b79      	ldrh	r1, [r7, #26]
 80044dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80044de:	2200      	movs	r2, #0
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fe fadd 	bl	8002aa0 <is_element_ok>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d105      	bne.n	80044f8 <jpeg_out_func_point+0x74>
		{
			pencolor += width;
 80044ec:	8b3b      	ldrh	r3, [r7, #24]
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	4413      	add	r3, r2
 80044f4:	61fb      	str	r3, [r7, #28]
			continue;
 80044f6:	e035      	b.n	8004564 <jpeg_out_func_point+0xe0>
		}
		for (j = 0; j < width; j++) //x坐标
 80044f8:	2300      	movs	r3, #0
 80044fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80044fc:	e02e      	b.n	800455c <jpeg_out_func_point+0xd8>
		{
			realx = (picinfo.Div_Fac * (rect->left + j)) >> 13; //实际X坐标
 80044fe:	4b1f      	ldr	r3, [pc, #124]	; (800457c <jpeg_out_func_point+0xf8>)
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	8812      	ldrh	r2, [r2, #0]
 8004506:	4611      	mov	r1, r2
 8004508:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800450a:	440a      	add	r2, r1
 800450c:	fb02 f303 	mul.w	r3, r2, r3
 8004510:	0b5b      	lsrs	r3, r3, #13
 8004512:	847b      	strh	r3, [r7, #34]	; 0x22
			//在这里改变picinfo.staticx和picinfo.staticy的值
			if (!is_element_ok(realx, realy, 1)) //列值是否满足条件? 寻找满足条件的列
 8004514:	8b79      	ldrh	r1, [r7, #26]
 8004516:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004518:	2201      	movs	r2, #1
 800451a:	4618      	mov	r0, r3
 800451c:	f7fe fac0 	bl	8002aa0 <is_element_ok>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d103      	bne.n	800452e <jpeg_out_func_point+0xaa>
			{
				pencolor++;
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	3302      	adds	r3, #2
 800452a:	61fb      	str	r3, [r7, #28]
				continue;
 800452c:	e013      	b.n	8004556 <jpeg_out_func_point+0xd2>
			}
			pic_phy.draw_point(realx + picinfo.S_XOFF, realy + picinfo.S_YOFF, *pencolor); //显示图片
 800452e:	4b14      	ldr	r3, [pc, #80]	; (8004580 <jpeg_out_func_point+0xfc>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	4a12      	ldr	r2, [pc, #72]	; (800457c <jpeg_out_func_point+0xf8>)
 8004534:	6992      	ldr	r2, [r2, #24]
 8004536:	b291      	uxth	r1, r2
 8004538:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800453a:	440a      	add	r2, r1
 800453c:	b290      	uxth	r0, r2
 800453e:	4a0f      	ldr	r2, [pc, #60]	; (800457c <jpeg_out_func_point+0xf8>)
 8004540:	69d2      	ldr	r2, [r2, #28]
 8004542:	b291      	uxth	r1, r2
 8004544:	8b7a      	ldrh	r2, [r7, #26]
 8004546:	440a      	add	r2, r1
 8004548:	b291      	uxth	r1, r2
 800454a:	69fa      	ldr	r2, [r7, #28]
 800454c:	8812      	ldrh	r2, [r2, #0]
 800454e:	4798      	blx	r3
			pencolor++;
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	3302      	adds	r3, #2
 8004554:	61fb      	str	r3, [r7, #28]
		for (j = 0; j < width; j++) //x坐标
 8004556:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004558:	3301      	adds	r3, #1
 800455a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800455c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800455e:	8b3b      	ldrh	r3, [r7, #24]
 8004560:	429a      	cmp	r2, r3
 8004562:	d3cc      	bcc.n	80044fe <jpeg_out_func_point+0x7a>
	for (i = 0; i < height; i++)					//y坐标
 8004564:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004566:	3301      	adds	r3, #1
 8004568:	84fb      	strh	r3, [r7, #38]	; 0x26
 800456a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800456c:	8afb      	ldrh	r3, [r7, #22]
 800456e:	429a      	cmp	r2, r3
 8004570:	d3a8      	bcc.n	80044c4 <jpeg_out_func_point+0x40>
		}
	}
	return 0; //返回0,使得解码工作继续执行
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3728      	adds	r7, #40	; 0x28
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	20001f8c 	.word	0x20001f8c
 8004580:	20001fb4 	.word	0x20001fb4

08004584 <KEY_Scan>:
//KEY0_PRES，KEY0按下
//KEY1_PRES，KEY1按下
//WKUP_PRES，WK_UP按下
//注意此函数有响应优先级,KEY0>KEY1>WK_UP!!
uint8_t KEY_Scan(uint8_t mode)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	4603      	mov	r3, r0
 800458c:	71fb      	strb	r3, [r7, #7]
	static uint8_t key_up = 1; //按键按松开标志
	if (mode)
 800458e:	79fb      	ldrb	r3, [r7, #7]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <KEY_Scan+0x16>
		key_up = 1; //支持连按
 8004594:	4b27      	ldr	r3, [pc, #156]	; (8004634 <KEY_Scan+0xb0>)
 8004596:	2201      	movs	r2, #1
 8004598:	701a      	strb	r2, [r3, #0]
	if (key_up && (KEY0 == 0 || KEY1 == 0 || KEY2 == 0 || KEY3 == 0))
 800459a:	4b26      	ldr	r3, [pc, #152]	; (8004634 <KEY_Scan+0xb0>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d02d      	beq.n	80045fe <KEY_Scan+0x7a>
 80045a2:	4b25      	ldr	r3, [pc, #148]	; (8004638 <KEY_Scan+0xb4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00b      	beq.n	80045c2 <KEY_Scan+0x3e>
 80045aa:	4b24      	ldr	r3, [pc, #144]	; (800463c <KEY_Scan+0xb8>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d007      	beq.n	80045c2 <KEY_Scan+0x3e>
 80045b2:	4b23      	ldr	r3, [pc, #140]	; (8004640 <KEY_Scan+0xbc>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <KEY_Scan+0x3e>
 80045ba:	4b22      	ldr	r3, [pc, #136]	; (8004644 <KEY_Scan+0xc0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d11d      	bne.n	80045fe <KEY_Scan+0x7a>
	{
		osDelay(10 / portTICK_RATE_MS);
 80045c2:	200a      	movs	r0, #10
 80045c4:	f009 fed8 	bl	800e378 <osDelay>
		key_up = 0;
 80045c8:	4b1a      	ldr	r3, [pc, #104]	; (8004634 <KEY_Scan+0xb0>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	701a      	strb	r2, [r3, #0]
		if (KEY0 == 0)
 80045ce:	4b1a      	ldr	r3, [pc, #104]	; (8004638 <KEY_Scan+0xb4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <KEY_Scan+0x56>
			return KEY0_PRES;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e027      	b.n	800462a <KEY_Scan+0xa6>
		else if (KEY1 == 0)
 80045da:	4b18      	ldr	r3, [pc, #96]	; (800463c <KEY_Scan+0xb8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <KEY_Scan+0x62>
			return KEY1_PRES;
 80045e2:	2302      	movs	r3, #2
 80045e4:	e021      	b.n	800462a <KEY_Scan+0xa6>
		else if (KEY2 == 0)
 80045e6:	4b16      	ldr	r3, [pc, #88]	; (8004640 <KEY_Scan+0xbc>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <KEY_Scan+0x6e>
			return KEY2_PRES;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e01b      	b.n	800462a <KEY_Scan+0xa6>
		else if (KEY3 == 0)
 80045f2:	4b14      	ldr	r3, [pc, #80]	; (8004644 <KEY_Scan+0xc0>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d115      	bne.n	8004626 <KEY_Scan+0xa2>
			return KEY3_PRES;
 80045fa:	2304      	movs	r3, #4
 80045fc:	e015      	b.n	800462a <KEY_Scan+0xa6>
	}
	else if (KEY0 == 1 && KEY1 == 1 && KEY2 == 1 && KEY3 == 1)
 80045fe:	4b0e      	ldr	r3, [pc, #56]	; (8004638 <KEY_Scan+0xb4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d110      	bne.n	8004628 <KEY_Scan+0xa4>
 8004606:	4b0d      	ldr	r3, [pc, #52]	; (800463c <KEY_Scan+0xb8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d10c      	bne.n	8004628 <KEY_Scan+0xa4>
 800460e:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <KEY_Scan+0xbc>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d108      	bne.n	8004628 <KEY_Scan+0xa4>
 8004616:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <KEY_Scan+0xc0>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d104      	bne.n	8004628 <KEY_Scan+0xa4>
		key_up = 1;
 800461e:	4b05      	ldr	r3, [pc, #20]	; (8004634 <KEY_Scan+0xb0>)
 8004620:	2201      	movs	r2, #1
 8004622:	701a      	strb	r2, [r3, #0]
 8004624:	e000      	b.n	8004628 <KEY_Scan+0xa4>
		if (KEY0 == 0)
 8004626:	bf00      	nop
	return 0; // 无按键按下
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	2000013c 	.word	0x2000013c
 8004638:	42220100 	.word	0x42220100
 800463c:	42220104 	.word	0x42220104
 8004640:	42220108 	.word	0x42220108
 8004644:	4222010c 	.word	0x4222010c

08004648 <LCD_WriteReg>:
}
//写寄存器
//LCD_Reg:寄存器地址
//LCD_RegValue:要写入的数据
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	4603      	mov	r3, r0
 8004650:	460a      	mov	r2, r1
 8004652:	80fb      	strh	r3, [r7, #6]
 8004654:	4613      	mov	r3, r2
 8004656:	80bb      	strh	r3, [r7, #4]
	LCD->LCD_REG = LCD_Reg;		 //写入要写的寄存器序号
 8004658:	4a05      	ldr	r2, [pc, #20]	; (8004670 <LCD_WriteReg+0x28>)
 800465a:	88fb      	ldrh	r3, [r7, #6]
 800465c:	8013      	strh	r3, [r2, #0]
	LCD->LCD_RAM = LCD_RegValue; //写入数据
 800465e:	4a04      	ldr	r2, [pc, #16]	; (8004670 <LCD_WriteReg+0x28>)
 8004660:	88bb      	ldrh	r3, [r7, #4]
 8004662:	8053      	strh	r3, [r2, #2]
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	6001fffe 	.word	0x6001fffe

08004674 <LCD_WriteRAM_Prepare>:
	osDelay(1);
	return LCD_RD_DATA(); //返回读到的值
}
//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
	LCD->LCD_REG = lcddev.wramcmd;
 8004678:	4b03      	ldr	r3, [pc, #12]	; (8004688 <LCD_WriteRAM_Prepare+0x14>)
 800467a:	4a04      	ldr	r2, [pc, #16]	; (800468c <LCD_WriteRAM_Prepare+0x18>)
 800467c:	8912      	ldrh	r2, [r2, #8]
 800467e:	801a      	strh	r2, [r3, #0]
}
 8004680:	bf00      	nop
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr
 8004688:	6001fffe 	.word	0x6001fffe
 800468c:	20001fcc 	.word	0x20001fcc

08004690 <LCD_SetCursor>:
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	460a      	mov	r2, r1
 800469a:	80fb      	strh	r3, [r7, #6]
 800469c:	4613      	mov	r3, r2
 800469e:	80bb      	strh	r3, [r7, #4]
	if (lcddev.dir == 1)
 80046a0:	4b0e      	ldr	r3, [pc, #56]	; (80046dc <LCD_SetCursor+0x4c>)
 80046a2:	799b      	ldrb	r3, [r3, #6]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d106      	bne.n	80046b6 <LCD_SetCursor+0x26>
		Xpos = lcddev.width - 1 - Xpos; //横屏其实就是调转x,y坐标
 80046a8:	4b0c      	ldr	r3, [pc, #48]	; (80046dc <LCD_SetCursor+0x4c>)
 80046aa:	881a      	ldrh	r2, [r3, #0]
 80046ac:	88fb      	ldrh	r3, [r7, #6]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	3b01      	subs	r3, #1
 80046b4:	80fb      	strh	r3, [r7, #6]
	LCD_WriteReg(lcddev.setxcmd, Xpos);
 80046b6:	4b09      	ldr	r3, [pc, #36]	; (80046dc <LCD_SetCursor+0x4c>)
 80046b8:	895b      	ldrh	r3, [r3, #10]
 80046ba:	88fa      	ldrh	r2, [r7, #6]
 80046bc:	4611      	mov	r1, r2
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff ffc2 	bl	8004648 <LCD_WriteReg>
	LCD_WriteReg(lcddev.setycmd, Ypos);
 80046c4:	4b05      	ldr	r3, [pc, #20]	; (80046dc <LCD_SetCursor+0x4c>)
 80046c6:	899b      	ldrh	r3, [r3, #12]
 80046c8:	88ba      	ldrh	r2, [r7, #4]
 80046ca:	4611      	mov	r1, r2
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff ffbb 	bl	8004648 <LCD_WriteReg>
}
 80046d2:	bf00      	nop
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20001fcc 	.word	0x20001fcc

080046e0 <LCD_DrawPoint>:
}
//画点
//x,y:坐标
//POINT_COLOR:此点的颜色
void LCD_DrawPoint(uint16_t x, uint16_t y)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4603      	mov	r3, r0
 80046e8:	460a      	mov	r2, r1
 80046ea:	80fb      	strh	r3, [r7, #6]
 80046ec:	4613      	mov	r3, r2
 80046ee:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x, y);	//设置光标位置
 80046f0:	88ba      	ldrh	r2, [r7, #4]
 80046f2:	88fb      	ldrh	r3, [r7, #6]
 80046f4:	4611      	mov	r1, r2
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff ffca 	bl	8004690 <LCD_SetCursor>
	LCD_WriteRAM_Prepare(); //开始写入GRAM
 80046fc:	f7ff ffba 	bl	8004674 <LCD_WriteRAM_Prepare>
	LCD->LCD_RAM = POINT_COLOR;
 8004700:	4b03      	ldr	r3, [pc, #12]	; (8004710 <LCD_DrawPoint+0x30>)
 8004702:	4a04      	ldr	r2, [pc, #16]	; (8004714 <LCD_DrawPoint+0x34>)
 8004704:	8812      	ldrh	r2, [r2, #0]
 8004706:	805a      	strh	r2, [r3, #2]
}
 8004708:	bf00      	nop
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	6001fffe 	.word	0x6001fffe
 8004714:	200001d8 	.word	0x200001d8

08004718 <LCD_Fast_DrawPoint>:
//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	4603      	mov	r3, r0
 8004720:	80fb      	strh	r3, [r7, #6]
 8004722:	460b      	mov	r3, r1
 8004724:	80bb      	strh	r3, [r7, #4]
 8004726:	4613      	mov	r3, r2
 8004728:	807b      	strh	r3, [r7, #2]
	if (lcddev.dir == 1)
 800472a:	4b12      	ldr	r3, [pc, #72]	; (8004774 <LCD_Fast_DrawPoint+0x5c>)
 800472c:	799b      	ldrb	r3, [r3, #6]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d106      	bne.n	8004740 <LCD_Fast_DrawPoint+0x28>
		x = lcddev.width - 1 - x; //横屏其实就是调转x,y坐标
 8004732:	4b10      	ldr	r3, [pc, #64]	; (8004774 <LCD_Fast_DrawPoint+0x5c>)
 8004734:	881a      	ldrh	r2, [r3, #0]
 8004736:	88fb      	ldrh	r3, [r7, #6]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	b29b      	uxth	r3, r3
 800473c:	3b01      	subs	r3, #1
 800473e:	80fb      	strh	r3, [r7, #6]
	LCD_WriteReg(lcddev.setxcmd, x);
 8004740:	4b0c      	ldr	r3, [pc, #48]	; (8004774 <LCD_Fast_DrawPoint+0x5c>)
 8004742:	895b      	ldrh	r3, [r3, #10]
 8004744:	88fa      	ldrh	r2, [r7, #6]
 8004746:	4611      	mov	r1, r2
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff ff7d 	bl	8004648 <LCD_WriteReg>
	LCD_WriteReg(lcddev.setycmd, y);
 800474e:	4b09      	ldr	r3, [pc, #36]	; (8004774 <LCD_Fast_DrawPoint+0x5c>)
 8004750:	899b      	ldrh	r3, [r3, #12]
 8004752:	88ba      	ldrh	r2, [r7, #4]
 8004754:	4611      	mov	r1, r2
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff ff76 	bl	8004648 <LCD_WriteReg>
	LCD->LCD_REG = lcddev.wramcmd;
 800475c:	4b06      	ldr	r3, [pc, #24]	; (8004778 <LCD_Fast_DrawPoint+0x60>)
 800475e:	4a05      	ldr	r2, [pc, #20]	; (8004774 <LCD_Fast_DrawPoint+0x5c>)
 8004760:	8912      	ldrh	r2, [r2, #8]
 8004762:	801a      	strh	r2, [r3, #0]
	LCD->LCD_RAM = color;
 8004764:	4a04      	ldr	r2, [pc, #16]	; (8004778 <LCD_Fast_DrawPoint+0x60>)
 8004766:	887b      	ldrh	r3, [r7, #2]
 8004768:	8053      	strh	r3, [r2, #2]
}
 800476a:	bf00      	nop
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20001fcc 	.word	0x20001fcc
 8004778:	6001fffe 	.word	0x6001fffe

0800477c <LCD_Clear>:
	LCD_Clear(BLACK);
}
//清屏函数
//color:要清屏的填充色
void LCD_Clear(uint16_t color)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	4603      	mov	r3, r0
 8004784:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 800478a:	4b11      	ldr	r3, [pc, #68]	; (80047d0 <LCD_Clear+0x54>)
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; //得到总点数
 8004790:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <LCD_Clear+0x54>)
 8004792:	885b      	ldrh	r3, [r3, #2]
 8004794:	461a      	mov	r2, r3
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	fb02 f303 	mul.w	r3, r2, r3
 800479c:	60bb      	str	r3, [r7, #8]
	LCD_SetCursor(0x00, 0x0000); //设置光标位置
 800479e:	2100      	movs	r1, #0
 80047a0:	2000      	movs	r0, #0
 80047a2:	f7ff ff75 	bl	8004690 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();		 //开始写入GRAM
 80047a6:	f7ff ff65 	bl	8004674 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 80047aa:	2300      	movs	r3, #0
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	e005      	b.n	80047bc <LCD_Clear+0x40>
	{
		LCD->LCD_RAM = color;
 80047b0:	4a08      	ldr	r2, [pc, #32]	; (80047d4 <LCD_Clear+0x58>)
 80047b2:	88fb      	ldrh	r3, [r7, #6]
 80047b4:	8053      	strh	r3, [r2, #2]
	for (index = 0; index < totalpoint; index++)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	3301      	adds	r3, #1
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d3f5      	bcc.n	80047b0 <LCD_Clear+0x34>
	}
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20001fcc 	.word	0x20001fcc
 80047d4:	6001fffe 	.word	0x6001fffe

080047d8 <LCD_Fill>:
//在指定区域内填充单个颜色
//(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)
//color:要填充的颜色
void LCD_Fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey, uint16_t color)
{
 80047d8:	b590      	push	{r4, r7, lr}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4604      	mov	r4, r0
 80047e0:	4608      	mov	r0, r1
 80047e2:	4611      	mov	r1, r2
 80047e4:	461a      	mov	r2, r3
 80047e6:	4623      	mov	r3, r4
 80047e8:	80fb      	strh	r3, [r7, #6]
 80047ea:	4603      	mov	r3, r0
 80047ec:	80bb      	strh	r3, [r7, #4]
 80047ee:	460b      	mov	r3, r1
 80047f0:	807b      	strh	r3, [r7, #2]
 80047f2:	4613      	mov	r3, r2
 80047f4:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;
	uint16_t xlen = 0;
 80047f6:	2300      	movs	r3, #0
 80047f8:	817b      	strh	r3, [r7, #10]
	xlen = ex - sx + 1;
 80047fa:	887a      	ldrh	r2, [r7, #2]
 80047fc:	88fb      	ldrh	r3, [r7, #6]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	b29b      	uxth	r3, r3
 8004802:	3301      	adds	r3, #1
 8004804:	817b      	strh	r3, [r7, #10]
	for (i = sy; i <= ey; i++)
 8004806:	88bb      	ldrh	r3, [r7, #4]
 8004808:	81fb      	strh	r3, [r7, #14]
 800480a:	e017      	b.n	800483c <LCD_Fill+0x64>
	{
		LCD_SetCursor(sx, i);   //设置光标位置
 800480c:	89fa      	ldrh	r2, [r7, #14]
 800480e:	88fb      	ldrh	r3, [r7, #6]
 8004810:	4611      	mov	r1, r2
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff ff3c 	bl	8004690 <LCD_SetCursor>
		LCD_WriteRAM_Prepare(); //开始写入GRAM
 8004818:	f7ff ff2c 	bl	8004674 <LCD_WriteRAM_Prepare>
		for (j = 0; j < xlen; j++)
 800481c:	2300      	movs	r3, #0
 800481e:	81bb      	strh	r3, [r7, #12]
 8004820:	e005      	b.n	800482e <LCD_Fill+0x56>
			LCD->LCD_RAM = color; //显示颜色
 8004822:	4a0b      	ldr	r2, [pc, #44]	; (8004850 <LCD_Fill+0x78>)
 8004824:	8c3b      	ldrh	r3, [r7, #32]
 8004826:	8053      	strh	r3, [r2, #2]
		for (j = 0; j < xlen; j++)
 8004828:	89bb      	ldrh	r3, [r7, #12]
 800482a:	3301      	adds	r3, #1
 800482c:	81bb      	strh	r3, [r7, #12]
 800482e:	89ba      	ldrh	r2, [r7, #12]
 8004830:	897b      	ldrh	r3, [r7, #10]
 8004832:	429a      	cmp	r2, r3
 8004834:	d3f5      	bcc.n	8004822 <LCD_Fill+0x4a>
	for (i = sy; i <= ey; i++)
 8004836:	89fb      	ldrh	r3, [r7, #14]
 8004838:	3301      	adds	r3, #1
 800483a:	81fb      	strh	r3, [r7, #14]
 800483c:	89fa      	ldrh	r2, [r7, #14]
 800483e:	883b      	ldrh	r3, [r7, #0]
 8004840:	429a      	cmp	r2, r3
 8004842:	d9e3      	bls.n	800480c <LCD_Fill+0x34>
	}
}
 8004844:	bf00      	nop
 8004846:	bf00      	nop
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	bd90      	pop	{r4, r7, pc}
 800484e:	bf00      	nop
 8004850:	6001fffe 	.word	0x6001fffe

08004854 <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24/32
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size, uint8_t mode)
{
 8004854:	b590      	push	{r4, r7, lr}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	4604      	mov	r4, r0
 800485c:	4608      	mov	r0, r1
 800485e:	4611      	mov	r1, r2
 8004860:	461a      	mov	r2, r3
 8004862:	4623      	mov	r3, r4
 8004864:	80fb      	strh	r3, [r7, #6]
 8004866:	4603      	mov	r3, r0
 8004868:	80bb      	strh	r3, [r7, #4]
 800486a:	460b      	mov	r3, r1
 800486c:	70fb      	strb	r3, [r7, #3]
 800486e:	4613      	mov	r3, r2
 8004870:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 8004872:	88bb      	ldrh	r3, [r7, #4]
 8004874:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2); //得到字体一个字符对应点阵集所占的字节数
 8004876:	78bb      	ldrb	r3, [r7, #2]
 8004878:	08db      	lsrs	r3, r3, #3
 800487a:	b2db      	uxtb	r3, r3
 800487c:	461a      	mov	r2, r3
 800487e:	78bb      	ldrb	r3, [r7, #2]
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	bf14      	ite	ne
 800488a:	2301      	movne	r3, #1
 800488c:	2300      	moveq	r3, #0
 800488e:	b2db      	uxtb	r3, r3
 8004890:	4413      	add	r3, r2
 8004892:	b2db      	uxtb	r3, r3
 8004894:	78ba      	ldrb	r2, [r7, #2]
 8004896:	0852      	lsrs	r2, r2, #1
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	fb02 f303 	mul.w	r3, r2, r3
 800489e:	727b      	strb	r3, [r7, #9]
	num = num - ' ';										   //得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 80048a0:	78fb      	ldrb	r3, [r7, #3]
 80048a2:	3b20      	subs	r3, #32
 80048a4:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++)
 80048a6:	2300      	movs	r3, #0
 80048a8:	737b      	strb	r3, [r7, #13]
 80048aa:	e075      	b.n	8004998 <LCD_ShowChar+0x144>
	{
		if (size == 12)
 80048ac:	78bb      	ldrb	r3, [r7, #2]
 80048ae:	2b0c      	cmp	r3, #12
 80048b0:	d10b      	bne.n	80048ca <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; //调用1206字体
 80048b2:	78fa      	ldrb	r2, [r7, #3]
 80048b4:	7b79      	ldrb	r1, [r7, #13]
 80048b6:	483e      	ldr	r0, [pc, #248]	; (80049b0 <LCD_ShowChar+0x15c>)
 80048b8:	4613      	mov	r3, r2
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4403      	add	r3, r0
 80048c2:	440b      	add	r3, r1
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	73fb      	strb	r3, [r7, #15]
 80048c8:	e025      	b.n	8004916 <LCD_ShowChar+0xc2>
		else if (size == 16)
 80048ca:	78bb      	ldrb	r3, [r7, #2]
 80048cc:	2b10      	cmp	r3, #16
 80048ce:	d108      	bne.n	80048e2 <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t]; //调用1608字体
 80048d0:	78fa      	ldrb	r2, [r7, #3]
 80048d2:	7b7b      	ldrb	r3, [r7, #13]
 80048d4:	4937      	ldr	r1, [pc, #220]	; (80049b4 <LCD_ShowChar+0x160>)
 80048d6:	0112      	lsls	r2, r2, #4
 80048d8:	440a      	add	r2, r1
 80048da:	4413      	add	r3, r2
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	73fb      	strb	r3, [r7, #15]
 80048e0:	e019      	b.n	8004916 <LCD_ShowChar+0xc2>
		else if (size == 24)
 80048e2:	78bb      	ldrb	r3, [r7, #2]
 80048e4:	2b18      	cmp	r3, #24
 80048e6:	d10b      	bne.n	8004900 <LCD_ShowChar+0xac>
			temp = asc2_2412[num][t]; //调用2412字体
 80048e8:	78fa      	ldrb	r2, [r7, #3]
 80048ea:	7b79      	ldrb	r1, [r7, #13]
 80048ec:	4832      	ldr	r0, [pc, #200]	; (80049b8 <LCD_ShowChar+0x164>)
 80048ee:	4613      	mov	r3, r2
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	4413      	add	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4403      	add	r3, r0
 80048f8:	440b      	add	r3, r1
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	73fb      	strb	r3, [r7, #15]
 80048fe:	e00a      	b.n	8004916 <LCD_ShowChar+0xc2>
		else if (size == 32)
 8004900:	78bb      	ldrb	r3, [r7, #2]
 8004902:	2b20      	cmp	r3, #32
 8004904:	d14d      	bne.n	80049a2 <LCD_ShowChar+0x14e>
			temp = asc2_3216[num][t]; //调用3216字体
 8004906:	78fa      	ldrb	r2, [r7, #3]
 8004908:	7b7b      	ldrb	r3, [r7, #13]
 800490a:	492c      	ldr	r1, [pc, #176]	; (80049bc <LCD_ShowChar+0x168>)
 800490c:	0192      	lsls	r2, r2, #6
 800490e:	440a      	add	r2, r1
 8004910:	4413      	add	r3, r2
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	73fb      	strb	r3, [r7, #15]
		else
			return; //没有的字库
		for (t1 = 0; t1 < 8; t1++)
 8004916:	2300      	movs	r3, #0
 8004918:	73bb      	strb	r3, [r7, #14]
 800491a:	e035      	b.n	8004988 <LCD_ShowChar+0x134>
		{
			if (temp & 0x80)
 800491c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004920:	2b00      	cmp	r3, #0
 8004922:	da07      	bge.n	8004934 <LCD_ShowChar+0xe0>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8004924:	4b26      	ldr	r3, [pc, #152]	; (80049c0 <LCD_ShowChar+0x16c>)
 8004926:	881a      	ldrh	r2, [r3, #0]
 8004928:	88b9      	ldrh	r1, [r7, #4]
 800492a:	88fb      	ldrh	r3, [r7, #6]
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff fef3 	bl	8004718 <LCD_Fast_DrawPoint>
 8004932:	e00a      	b.n	800494a <LCD_ShowChar+0xf6>
			else if (mode == 0)
 8004934:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d106      	bne.n	800494a <LCD_ShowChar+0xf6>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 800493c:	4b21      	ldr	r3, [pc, #132]	; (80049c4 <LCD_ShowChar+0x170>)
 800493e:	881a      	ldrh	r2, [r3, #0]
 8004940:	88b9      	ldrh	r1, [r7, #4]
 8004942:	88fb      	ldrh	r3, [r7, #6]
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff fee7 	bl	8004718 <LCD_Fast_DrawPoint>
			temp <<= 1;
 800494a:	7bfb      	ldrb	r3, [r7, #15]
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	73fb      	strb	r3, [r7, #15]
			y++;
 8004950:	88bb      	ldrh	r3, [r7, #4]
 8004952:	3301      	adds	r3, #1
 8004954:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 8004956:	4b1c      	ldr	r3, [pc, #112]	; (80049c8 <LCD_ShowChar+0x174>)
 8004958:	885b      	ldrh	r3, [r3, #2]
 800495a:	88ba      	ldrh	r2, [r7, #4]
 800495c:	429a      	cmp	r2, r3
 800495e:	d222      	bcs.n	80049a6 <LCD_ShowChar+0x152>
				return; //超区域了
			if ((y - y0) == size)
 8004960:	88ba      	ldrh	r2, [r7, #4]
 8004962:	897b      	ldrh	r3, [r7, #10]
 8004964:	1ad2      	subs	r2, r2, r3
 8004966:	78bb      	ldrb	r3, [r7, #2]
 8004968:	429a      	cmp	r2, r3
 800496a:	d10a      	bne.n	8004982 <LCD_ShowChar+0x12e>
			{
				y = y0;
 800496c:	897b      	ldrh	r3, [r7, #10]
 800496e:	80bb      	strh	r3, [r7, #4]
				x++;
 8004970:	88fb      	ldrh	r3, [r7, #6]
 8004972:	3301      	adds	r3, #1
 8004974:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 8004976:	4b14      	ldr	r3, [pc, #80]	; (80049c8 <LCD_ShowChar+0x174>)
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	88fa      	ldrh	r2, [r7, #6]
 800497c:	429a      	cmp	r2, r3
 800497e:	d307      	bcc.n	8004990 <LCD_ShowChar+0x13c>
					return; //超区域了
 8004980:	e012      	b.n	80049a8 <LCD_ShowChar+0x154>
		for (t1 = 0; t1 < 8; t1++)
 8004982:	7bbb      	ldrb	r3, [r7, #14]
 8004984:	3301      	adds	r3, #1
 8004986:	73bb      	strb	r3, [r7, #14]
 8004988:	7bbb      	ldrb	r3, [r7, #14]
 800498a:	2b07      	cmp	r3, #7
 800498c:	d9c6      	bls.n	800491c <LCD_ShowChar+0xc8>
 800498e:	e000      	b.n	8004992 <LCD_ShowChar+0x13e>
				break;
 8004990:	bf00      	nop
	for (t = 0; t < csize; t++)
 8004992:	7b7b      	ldrb	r3, [r7, #13]
 8004994:	3301      	adds	r3, #1
 8004996:	737b      	strb	r3, [r7, #13]
 8004998:	7b7a      	ldrb	r2, [r7, #13]
 800499a:	7a7b      	ldrb	r3, [r7, #9]
 800499c:	429a      	cmp	r2, r3
 800499e:	d385      	bcc.n	80048ac <LCD_ShowChar+0x58>
 80049a0:	e002      	b.n	80049a8 <LCD_ShowChar+0x154>
			return; //没有的字库
 80049a2:	bf00      	nop
 80049a4:	e000      	b.n	80049a8 <LCD_ShowChar+0x154>
				return; //超区域了
 80049a6:	bf00      	nop
			}
		}
	}
}
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd90      	pop	{r4, r7, pc}
 80049ae:	bf00      	nop
 80049b0:	08012d10 	.word	0x08012d10
 80049b4:	08013184 	.word	0x08013184
 80049b8:	08013774 	.word	0x08013774
 80049bc:	080144d0 	.word	0x080144d0
 80049c0:	200001d8 	.word	0x200001d8
 80049c4:	2000013e 	.word	0x2000013e
 80049c8:	20001fcc 	.word	0x20001fcc

080049cc <LCD_Pow>:
//m^n函数
//返回值:m^n次方.
uint32_t LCD_Pow(uint8_t m, uint8_t n)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	460a      	mov	r2, r1
 80049d6:	71fb      	strb	r3, [r7, #7]
 80049d8:	4613      	mov	r3, r2
 80049da:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 80049dc:	2301      	movs	r3, #1
 80049de:	60fb      	str	r3, [r7, #12]
	while (n--)
 80049e0:	e004      	b.n	80049ec <LCD_Pow+0x20>
		result *= m;
 80049e2:	79fa      	ldrb	r2, [r7, #7]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	fb02 f303 	mul.w	r3, r2, r3
 80049ea:	60fb      	str	r3, [r7, #12]
	while (n--)
 80049ec:	79bb      	ldrb	r3, [r7, #6]
 80049ee:	1e5a      	subs	r2, r3, #1
 80049f0:	71ba      	strb	r2, [r7, #6]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1f5      	bne.n	80049e2 <LCD_Pow+0x16>
	return result;
 80049f6:	68fb      	ldr	r3, [r7, #12]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr
	...

08004a04 <LCD_ShowxNum>:
//mode:
//[7]:0,不填充;1,填充0.
//[6:1]:保留
//[0]:0,非叠加显示;1,叠加显示.
void LCD_ShowxNum(uint16_t x, uint16_t y, uint32_t num, uint8_t len, uint8_t size, uint8_t mode)
{
 8004a04:	b590      	push	{r4, r7, lr}
 8004a06:	b089      	sub	sp, #36	; 0x24
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	60ba      	str	r2, [r7, #8]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	4603      	mov	r3, r0
 8004a10:	81fb      	strh	r3, [r7, #14]
 8004a12:	460b      	mov	r3, r1
 8004a14:	81bb      	strh	r3, [r7, #12]
 8004a16:	4613      	mov	r3, r2
 8004a18:	71fb      	strb	r3, [r7, #7]
	uint8_t t, temp;
	uint8_t enshow = 0;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	75bb      	strb	r3, [r7, #22]
	for (t = 0; t < len; t++)
 8004a1e:	2300      	movs	r3, #0
 8004a20:	75fb      	strb	r3, [r7, #23]
 8004a22:	e07e      	b.n	8004b22 <LCD_ShowxNum+0x11e>
	{
		temp = (num / LCD_Pow(10, len - t - 1)) % 10;
 8004a24:	79fa      	ldrb	r2, [r7, #7]
 8004a26:	7dfb      	ldrb	r3, [r7, #23]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	4619      	mov	r1, r3
 8004a32:	200a      	movs	r0, #10
 8004a34:	f7ff ffca 	bl	80049cc <LCD_Pow>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a40:	4b3d      	ldr	r3, [pc, #244]	; (8004b38 <LCD_ShowxNum+0x134>)
 8004a42:	fba3 2301 	umull	r2, r3, r3, r1
 8004a46:	08da      	lsrs	r2, r3, #3
 8004a48:	4613      	mov	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	1aca      	subs	r2, r1, r3
 8004a52:	4613      	mov	r3, r2
 8004a54:	757b      	strb	r3, [r7, #21]
		if (enshow == 0 && t < (len - 1))
 8004a56:	7dbb      	ldrb	r3, [r7, #22]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d143      	bne.n	8004ae4 <LCD_ShowxNum+0xe0>
 8004a5c:	7dfa      	ldrb	r2, [r7, #23]
 8004a5e:	79fb      	ldrb	r3, [r7, #7]
 8004a60:	3b01      	subs	r3, #1
 8004a62:	429a      	cmp	r2, r3
 8004a64:	da3e      	bge.n	8004ae4 <LCD_ShowxNum+0xe0>
		{
			if (temp == 0)
 8004a66:	7d7b      	ldrb	r3, [r7, #21]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d139      	bne.n	8004ae0 <LCD_ShowxNum+0xdc>
			{
				if (mode & 0X80)
 8004a6c:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	da1a      	bge.n	8004aaa <LCD_ShowxNum+0xa6>
					LCD_ShowChar(x + (size / 2) * t, y, '0', size, mode & 0X01);
 8004a74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a78:	085b      	lsrs	r3, r3, #1
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	7dfa      	ldrb	r2, [r7, #23]
 8004a80:	b292      	uxth	r2, r2
 8004a82:	fb02 f303 	mul.w	r3, r2, r3
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	89fb      	ldrh	r3, [r7, #14]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	b298      	uxth	r0, r3
 8004a8e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004a9c:	89b9      	ldrh	r1, [r7, #12]
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	2230      	movs	r2, #48	; 0x30
 8004aa4:	f7ff fed6 	bl	8004854 <LCD_ShowChar>
				else
					LCD_ShowChar(x + (size / 2) * t, y, ' ', size, mode & 0X01);
				continue;
 8004aa8:	e038      	b.n	8004b1c <LCD_ShowxNum+0x118>
					LCD_ShowChar(x + (size / 2) * t, y, ' ', size, mode & 0X01);
 8004aaa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004aae:	085b      	lsrs	r3, r3, #1
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	7dfa      	ldrb	r2, [r7, #23]
 8004ab6:	b292      	uxth	r2, r2
 8004ab8:	fb02 f303 	mul.w	r3, r2, r3
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	89fb      	ldrh	r3, [r7, #14]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	b298      	uxth	r0, r3
 8004ac4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004ad2:	89b9      	ldrh	r1, [r7, #12]
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f7ff febb 	bl	8004854 <LCD_ShowChar>
				continue;
 8004ade:	e01d      	b.n	8004b1c <LCD_ShowxNum+0x118>
			}
			else
				enshow = 1;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	75bb      	strb	r3, [r7, #22]
		}
		LCD_ShowChar(x + (size / 2) * t, y, temp + '0', size, mode & 0X01);
 8004ae4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ae8:	085b      	lsrs	r3, r3, #1
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	7dfa      	ldrb	r2, [r7, #23]
 8004af0:	b292      	uxth	r2, r2
 8004af2:	fb02 f303 	mul.w	r3, r2, r3
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	89fb      	ldrh	r3, [r7, #14]
 8004afa:	4413      	add	r3, r2
 8004afc:	b298      	uxth	r0, r3
 8004afe:	7d7b      	ldrb	r3, [r7, #21]
 8004b00:	3330      	adds	r3, #48	; 0x30
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8004b12:	89b9      	ldrh	r1, [r7, #12]
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	4623      	mov	r3, r4
 8004b18:	f7ff fe9c 	bl	8004854 <LCD_ShowChar>
	for (t = 0; t < len; t++)
 8004b1c:	7dfb      	ldrb	r3, [r7, #23]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	75fb      	strb	r3, [r7, #23]
 8004b22:	7dfa      	ldrb	r2, [r7, #23]
 8004b24:	79fb      	ldrb	r3, [r7, #7]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	f4ff af7c 	bcc.w	8004a24 <LCD_ShowxNum+0x20>
	}
}
 8004b2c:	bf00      	nop
 8004b2e:	bf00      	nop
 8004b30:	371c      	adds	r7, #28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd90      	pop	{r4, r7, pc}
 8004b36:	bf00      	nop
 8004b38:	cccccccd 	.word	0xcccccccd

08004b3c <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, uint8_t *p)
{
 8004b3c:	b590      	push	{r4, r7, lr}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	4604      	mov	r4, r0
 8004b44:	4608      	mov	r0, r1
 8004b46:	4611      	mov	r1, r2
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4623      	mov	r3, r4
 8004b4c:	80fb      	strh	r3, [r7, #6]
 8004b4e:	4603      	mov	r3, r0
 8004b50:	80bb      	strh	r3, [r7, #4]
 8004b52:	460b      	mov	r3, r1
 8004b54:	807b      	strh	r3, [r7, #2]
 8004b56:	4613      	mov	r3, r2
 8004b58:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 8004b5a:	88fb      	ldrh	r3, [r7, #6]
 8004b5c:	73fb      	strb	r3, [r7, #15]
	width += x;
 8004b5e:	887a      	ldrh	r2, [r7, #2]
 8004b60:	88fb      	ldrh	r3, [r7, #6]
 8004b62:	4413      	add	r3, r2
 8004b64:	807b      	strh	r3, [r7, #2]
	height += y;
 8004b66:	883a      	ldrh	r2, [r7, #0]
 8004b68:	88bb      	ldrh	r3, [r7, #4]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' ')) //判断是不是非法字符!
 8004b6e:	e024      	b.n	8004bba <LCD_ShowString+0x7e>
	{
		if (x >= width)
 8004b70:	88fa      	ldrh	r2, [r7, #6]
 8004b72:	887b      	ldrh	r3, [r7, #2]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d307      	bcc.n	8004b88 <LCD_ShowString+0x4c>
		{
			x = x0;
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	80fb      	strh	r3, [r7, #6]
			y += size;
 8004b7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	88bb      	ldrh	r3, [r7, #4]
 8004b84:	4413      	add	r3, r2
 8004b86:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 8004b88:	88ba      	ldrh	r2, [r7, #4]
 8004b8a:	883b      	ldrh	r3, [r7, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d21d      	bcs.n	8004bcc <LCD_ShowString+0x90>
			break; //退出
		LCD_ShowChar(x, y, *p, size, 0);
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	781a      	ldrb	r2, [r3, #0]
 8004b94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b98:	88b9      	ldrh	r1, [r7, #4]
 8004b9a:	88f8      	ldrh	r0, [r7, #6]
 8004b9c:	2400      	movs	r4, #0
 8004b9e:	9400      	str	r4, [sp, #0]
 8004ba0:	f7ff fe58 	bl	8004854 <LCD_ShowChar>
		x += size / 2;
 8004ba4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004ba8:	085b      	lsrs	r3, r3, #1
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	88fb      	ldrh	r3, [r7, #6]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	80fb      	strh	r3, [r7, #6]
		p++;
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' ')) //判断是不是非法字符!
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b7e      	cmp	r3, #126	; 0x7e
 8004bc0:	d805      	bhi.n	8004bce <LCD_ShowString+0x92>
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b1f      	cmp	r3, #31
 8004bc8:	d8d2      	bhi.n	8004b70 <LCD_ShowString+0x34>
	}
}
 8004bca:	e000      	b.n	8004bce <LCD_ShowString+0x92>
			break; //退出
 8004bcc:	bf00      	nop
}
 8004bce:	bf00      	nop
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd90      	pop	{r4, r7, pc}
	...

08004bd8 <UNICODEtoGBK>:
#include "cmsis_os.h"

UINT br;	   //读写变量

uint16_t UNICODEtoGBK(uint16_t unicode) //???????
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08a      	sub	sp, #40	; 0x28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	4603      	mov	r3, r0
 8004be0:	80fb      	strh	r3, [r7, #6]
	uint16_t t[2];
	uint16_t c;
	uint32_t i, li, hi;
	uint16_t n;
	uint32_t gbk2uni_offset = 0;
 8004be2:	2300      	movs	r3, #0
 8004be4:	617b      	str	r3, [r7, #20]

	if (unicode < 0x80)
 8004be6:	88fb      	ldrh	r3, [r7, #6]
 8004be8:	2b7f      	cmp	r3, #127	; 0x7f
 8004bea:	d802      	bhi.n	8004bf2 <UNICODEtoGBK+0x1a>
		c = unicode; //ASCII,直接不用转换.
 8004bec:	88fb      	ldrh	r3, [r7, #6]
 8004bee:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004bf0:	e03e      	b.n	8004c70 <UNICODEtoGBK+0x98>
	else
	{
		//UNICODE 2 GBK
		gbk2uni_offset = 0;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]
		/* Unicode to OEMCP */
		hi = ftinfo.ugbksize / 2; //对半开.
 8004bf6:	4b21      	ldr	r3, [pc, #132]	; (8004c7c <UNICODEtoGBK+0xa4>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	085b      	lsrs	r3, r3, #1
 8004bfc:	61fb      	str	r3, [r7, #28]
		hi = hi / 4 - 1;
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	089b      	lsrs	r3, r3, #2
 8004c02:	3b01      	subs	r3, #1
 8004c04:	61fb      	str	r3, [r7, #28]
		li = 0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	623b      	str	r3, [r7, #32]
		for (n = 16; n; n--)
 8004c0a:	2310      	movs	r3, #16
 8004c0c:	837b      	strh	r3, [r7, #26]
 8004c0e:	e023      	b.n	8004c58 <UNICODEtoGBK+0x80>
		{
			i = li + (hi - li) / 2;
 8004c10:	69fa      	ldr	r2, [r7, #28]
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	085b      	lsrs	r3, r3, #1
 8004c18:	6a3a      	ldr	r2, [r7, #32]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]
			SPI_Flash_Read((uint8_t *)&t, ftinfo.ugbkaddr + i * 4 + gbk2uni_offset, 4); //读出4个字节
 8004c1e:	4b17      	ldr	r3, [pc, #92]	; (8004c7c <UNICODEtoGBK+0xa4>)
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	441a      	add	r2, r3
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	18d1      	adds	r1, r2, r3
 8004c2c:	f107 030c 	add.w	r3, r7, #12
 8004c30:	2204      	movs	r2, #4
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fc fbf6 	bl	8001424 <SPI_Flash_Read>
			if (unicode == t[0])
 8004c38:	89bb      	ldrh	r3, [r7, #12]
 8004c3a:	88fa      	ldrh	r2, [r7, #6]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d00f      	beq.n	8004c60 <UNICODEtoGBK+0x88>
				break;
			if (unicode > t[0])
 8004c40:	89bb      	ldrh	r3, [r7, #12]
 8004c42:	88fa      	ldrh	r2, [r7, #6]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d902      	bls.n	8004c4e <UNICODEtoGBK+0x76>
				li = i;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	623b      	str	r3, [r7, #32]
 8004c4c:	e001      	b.n	8004c52 <UNICODEtoGBK+0x7a>
			else
				hi = i;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	61fb      	str	r3, [r7, #28]
		for (n = 16; n; n--)
 8004c52:	8b7b      	ldrh	r3, [r7, #26]
 8004c54:	3b01      	subs	r3, #1
 8004c56:	837b      	strh	r3, [r7, #26]
 8004c58:	8b7b      	ldrh	r3, [r7, #26]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1d8      	bne.n	8004c10 <UNICODEtoGBK+0x38>
 8004c5e:	e000      	b.n	8004c62 <UNICODEtoGBK+0x8a>
				break;
 8004c60:	bf00      	nop
		}
		c = n ? t[1] : 0;
 8004c62:	8b7b      	ldrh	r3, [r7, #26]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <UNICODEtoGBK+0x94>
 8004c68:	89fb      	ldrh	r3, [r7, #14]
 8004c6a:	e000      	b.n	8004c6e <UNICODEtoGBK+0x96>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	84fb      	strh	r3, [r7, #38]	; 0x26
	}
	return c;
 8004c70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3728      	adds	r7, #40	; 0x28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20001e40 	.word	0x20001e40

08004c80 <ID3_UTF8>:

void ID3_UTF8(uint8_t *databuf, uint16_t tag_size, uint16_t i, uint8_t *INFO)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	607b      	str	r3, [r7, #4]
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	817b      	strh	r3, [r7, #10]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	813b      	strh	r3, [r7, #8]
	uint8_t temp;
	uint16_t a = 0;
 8004c92:	2300      	movs	r3, #0
 8004c94:	82bb      	strh	r3, [r7, #20]
	for (temp = 0; temp < tag_size;)
 8004c96:	2300      	movs	r3, #0
 8004c98:	75fb      	strb	r3, [r7, #23]
 8004c9a:	e063      	b.n	8004d64 <ID3_UTF8+0xe4>
	{
		a = (databuf[i + temp] << 8) | databuf[i + temp + 1];
 8004c9c:	893a      	ldrh	r2, [r7, #8]
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	021b      	lsls	r3, r3, #8
 8004cac:	b21a      	sxth	r2, r3
 8004cae:	8939      	ldrh	r1, [r7, #8]
 8004cb0:	7dfb      	ldrb	r3, [r7, #23]
 8004cb2:	440b      	add	r3, r1
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	68f9      	ldr	r1, [r7, #12]
 8004cb8:	440b      	add	r3, r1
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	b21b      	sxth	r3, r3
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	b21b      	sxth	r3, r3
 8004cc2:	82bb      	strh	r3, [r7, #20]
		if (a < 0x80)
 8004cc4:	8abb      	ldrh	r3, [r7, #20]
 8004cc6:	2b7f      	cmp	r3, #127	; 0x7f
 8004cc8:	d809      	bhi.n	8004cde <ID3_UTF8+0x5e>
		{ /* 7-bit */
			info.TIT2[temp++] = (BYTE)a;
 8004cca:	4b2c      	ldr	r3, [pc, #176]	; (8004d7c <ID3_UTF8+0xfc>)
 8004ccc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cce:	7dfb      	ldrb	r3, [r7, #23]
 8004cd0:	1c59      	adds	r1, r3, #1
 8004cd2:	75f9      	strb	r1, [r7, #23]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	8aba      	ldrh	r2, [r7, #20]
 8004cd8:	b2d2      	uxtb	r2, r2
 8004cda:	701a      	strb	r2, [r3, #0]
 8004cdc:	e042      	b.n	8004d64 <ID3_UTF8+0xe4>
		}
		else
		{
			if (a < 0x800)
 8004cde:	8abb      	ldrh	r3, [r7, #20]
 8004ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ce4:	d20e      	bcs.n	8004d04 <ID3_UTF8+0x84>
			{ /* 11-bit */
				INFO[temp++] = (BYTE)(0xC0 | a >> 6);
 8004ce6:	8abb      	ldrh	r3, [r7, #20]
 8004ce8:	099b      	lsrs	r3, r3, #6
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	7dfb      	ldrb	r3, [r7, #23]
 8004cf0:	1c59      	adds	r1, r3, #1
 8004cf2:	75f9      	strb	r1, [r7, #23]
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	440b      	add	r3, r1
 8004cfa:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]
 8004d02:	e01f      	b.n	8004d44 <ID3_UTF8+0xc4>
			}
			else
			{ /* 16-bit */
				INFO[temp++] = (BYTE)(0xE0 | a >> 12);
 8004d04:	8abb      	ldrh	r3, [r7, #20]
 8004d06:	0b1b      	lsrs	r3, r3, #12
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	7dfb      	ldrb	r3, [r7, #23]
 8004d0e:	1c59      	adds	r1, r3, #1
 8004d10:	75f9      	strb	r1, [r7, #23]
 8004d12:	4619      	mov	r1, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	440b      	add	r3, r1
 8004d18:	f062 021f 	orn	r2, r2, #31
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	701a      	strb	r2, [r3, #0]
				INFO[temp++] = (BYTE)(0x80 | (a >> 6 & 0x3F));
 8004d20:	8abb      	ldrh	r3, [r7, #20]
 8004d22:	099b      	lsrs	r3, r3, #6
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	b25b      	sxtb	r3, r3
 8004d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d2c:	b25b      	sxtb	r3, r3
 8004d2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d32:	b25a      	sxtb	r2, r3
 8004d34:	7dfb      	ldrb	r3, [r7, #23]
 8004d36:	1c59      	adds	r1, r3, #1
 8004d38:	75f9      	strb	r1, [r7, #23]
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	440b      	add	r3, r1
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	701a      	strb	r2, [r3, #0]
			}
			INFO[temp++] = (BYTE)(0x80 | (a & 0x3F));
 8004d44:	8abb      	ldrh	r3, [r7, #20]
 8004d46:	b25b      	sxtb	r3, r3
 8004d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d4c:	b25b      	sxtb	r3, r3
 8004d4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d52:	b25a      	sxtb	r2, r3
 8004d54:	7dfb      	ldrb	r3, [r7, #23]
 8004d56:	1c59      	adds	r1, r3, #1
 8004d58:	75f9      	strb	r1, [r7, #23]
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	440b      	add	r3, r1
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	701a      	strb	r2, [r3, #0]
	for (temp = 0; temp < tag_size;)
 8004d64:	7dfb      	ldrb	r3, [r7, #23]
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	897a      	ldrh	r2, [r7, #10]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d896      	bhi.n	8004c9c <ID3_UTF8+0x1c>
		}
	}
}
 8004d6e:	bf00      	nop
 8004d70:	bf00      	nop
 8004d72:	371c      	adds	r7, #28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bc80      	pop	{r7}
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	20001fdc 	.word	0x20001fdc

08004d80 <ID3_UTF16BE>:

void ID3_UTF16BE(uint8_t *databuf, uint16_t tag_size, uint16_t i, uint8_t *INFO)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	607b      	str	r3, [r7, #4]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	817b      	strh	r3, [r7, #10]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	813b      	strh	r3, [r7, #8]
	uint8_t temp2 = 0;
 8004d92:	2300      	movs	r3, #0
 8004d94:	75fb      	strb	r3, [r7, #23]
	uint8_t temp = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	75bb      	strb	r3, [r7, #22]
	uint8_t temp1 = 0;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	757b      	strb	r3, [r7, #21]
	uint16_t a = 0;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	827b      	strh	r3, [r7, #18]
	for (temp = 0; temp < tag_size;)
 8004da2:	2300      	movs	r3, #0
 8004da4:	75bb      	strb	r3, [r7, #22]
 8004da6:	e038      	b.n	8004e1a <ID3_UTF16BE+0x9a>
	{
		a = (databuf[i + temp] << 8) | databuf[i + temp + 1];
 8004da8:	893a      	ldrh	r2, [r7, #8]
 8004daa:	7dbb      	ldrb	r3, [r7, #22]
 8004dac:	4413      	add	r3, r2
 8004dae:	461a      	mov	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4413      	add	r3, r2
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	021b      	lsls	r3, r3, #8
 8004db8:	b21a      	sxth	r2, r3
 8004dba:	8939      	ldrh	r1, [r7, #8]
 8004dbc:	7dbb      	ldrb	r3, [r7, #22]
 8004dbe:	440b      	add	r3, r1
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	68f9      	ldr	r1, [r7, #12]
 8004dc4:	440b      	add	r3, r1
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	b21b      	sxth	r3, r3
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	b21b      	sxth	r3, r3
 8004dce:	827b      	strh	r3, [r7, #18]
		a = UNICODEtoGBK(a);
 8004dd0:	8a7b      	ldrh	r3, [r7, #18]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff ff00 	bl	8004bd8 <UNICODEtoGBK>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	827b      	strh	r3, [r7, #18]
		temp1 = (a >> 8) & 0xff;
 8004ddc:	8a7b      	ldrh	r3, [r7, #18]
 8004dde:	0a1b      	lsrs	r3, r3, #8
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	757b      	strb	r3, [r7, #21]
		if (temp1 != 0x00)
 8004de4:	7d7b      	ldrb	r3, [r7, #21]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d007      	beq.n	8004dfa <ID3_UTF16BE+0x7a>
		{
			INFO[temp2] = temp1;
 8004dea:	7dfb      	ldrb	r3, [r7, #23]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	4413      	add	r3, r2
 8004df0:	7d7a      	ldrb	r2, [r7, #21]
 8004df2:	701a      	strb	r2, [r3, #0]
			temp2++;
 8004df4:	7dfb      	ldrb	r3, [r7, #23]
 8004df6:	3301      	adds	r3, #1
 8004df8:	75fb      	strb	r3, [r7, #23]
		}
		temp1 = a & 0xff;
 8004dfa:	8a7b      	ldrh	r3, [r7, #18]
 8004dfc:	757b      	strb	r3, [r7, #21]
		if (temp1 != 0x00)
 8004dfe:	7d7b      	ldrb	r3, [r7, #21]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d007      	beq.n	8004e14 <ID3_UTF16BE+0x94>
		{
			INFO[temp2] = temp1;
 8004e04:	7dfb      	ldrb	r3, [r7, #23]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	4413      	add	r3, r2
 8004e0a:	7d7a      	ldrb	r2, [r7, #21]
 8004e0c:	701a      	strb	r2, [r3, #0]
			temp2++;
 8004e0e:	7dfb      	ldrb	r3, [r7, #23]
 8004e10:	3301      	adds	r3, #1
 8004e12:	75fb      	strb	r3, [r7, #23]
		}
		temp += 2;
 8004e14:	7dbb      	ldrb	r3, [r7, #22]
 8004e16:	3302      	adds	r3, #2
 8004e18:	75bb      	strb	r3, [r7, #22]
	for (temp = 0; temp < tag_size;)
 8004e1a:	7dbb      	ldrb	r3, [r7, #22]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	897a      	ldrh	r2, [r7, #10]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d8c1      	bhi.n	8004da8 <ID3_UTF16BE+0x28>
	}
}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop
 8004e28:	3718      	adds	r7, #24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <ID3_UTF16LE>:

void ID3_UTF16LE(uint8_t *databuf, uint16_t tag_size, uint16_t i, uint8_t *INFO)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b086      	sub	sp, #24
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	607b      	str	r3, [r7, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	817b      	strh	r3, [r7, #10]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	813b      	strh	r3, [r7, #8]
	uint8_t temp2 = 0;
 8004e40:	2300      	movs	r3, #0
 8004e42:	75fb      	strb	r3, [r7, #23]
	uint8_t temp, temp1;
	uint16_t a;
	for (temp = 0; temp < tag_size;)
 8004e44:	2300      	movs	r3, #0
 8004e46:	75bb      	strb	r3, [r7, #22]
 8004e48:	e038      	b.n	8004ebc <ID3_UTF16LE+0x8e>
	{
		a = (databuf[i + temp + 1] << 8) | databuf[i + temp];
 8004e4a:	893a      	ldrh	r2, [r7, #8]
 8004e4c:	7dbb      	ldrb	r3, [r7, #22]
 8004e4e:	4413      	add	r3, r2
 8004e50:	3301      	adds	r3, #1
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4413      	add	r3, r2
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	021b      	lsls	r3, r3, #8
 8004e5a:	b21a      	sxth	r2, r3
 8004e5c:	8939      	ldrh	r1, [r7, #8]
 8004e5e:	7dbb      	ldrb	r3, [r7, #22]
 8004e60:	440b      	add	r3, r1
 8004e62:	4619      	mov	r1, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	440b      	add	r3, r1
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	b21b      	sxth	r3, r3
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	b21b      	sxth	r3, r3
 8004e70:	82bb      	strh	r3, [r7, #20]
		a = UNICODEtoGBK(a);
 8004e72:	8abb      	ldrh	r3, [r7, #20]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff feaf 	bl	8004bd8 <UNICODEtoGBK>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	82bb      	strh	r3, [r7, #20]
		temp1 = (a >> 8) & 0xff;
 8004e7e:	8abb      	ldrh	r3, [r7, #20]
 8004e80:	0a1b      	lsrs	r3, r3, #8
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	74fb      	strb	r3, [r7, #19]
		if (temp1 != 0x00)
 8004e86:	7cfb      	ldrb	r3, [r7, #19]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d007      	beq.n	8004e9c <ID3_UTF16LE+0x6e>
		{
			INFO[temp2] = temp1;
 8004e8c:	7dfb      	ldrb	r3, [r7, #23]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	4413      	add	r3, r2
 8004e92:	7cfa      	ldrb	r2, [r7, #19]
 8004e94:	701a      	strb	r2, [r3, #0]
			temp2++;
 8004e96:	7dfb      	ldrb	r3, [r7, #23]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	75fb      	strb	r3, [r7, #23]
		}
		temp1 = a & 0xff;
 8004e9c:	8abb      	ldrh	r3, [r7, #20]
 8004e9e:	74fb      	strb	r3, [r7, #19]
		if (temp1 != 0x00)
 8004ea0:	7cfb      	ldrb	r3, [r7, #19]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d007      	beq.n	8004eb6 <ID3_UTF16LE+0x88>
		{
			INFO[temp2] = temp1;
 8004ea6:	7dfb      	ldrb	r3, [r7, #23]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	4413      	add	r3, r2
 8004eac:	7cfa      	ldrb	r2, [r7, #19]
 8004eae:	701a      	strb	r2, [r3, #0]
			temp2++;
 8004eb0:	7dfb      	ldrb	r3, [r7, #23]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	75fb      	strb	r3, [r7, #23]
		}
		temp += 2;
 8004eb6:	7dbb      	ldrb	r3, [r7, #22]
 8004eb8:	3302      	adds	r3, #2
 8004eba:	75bb      	strb	r3, [r7, #22]
	for (temp = 0; temp < tag_size;)
 8004ebc:	7dbb      	ldrb	r3, [r7, #22]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	897a      	ldrh	r2, [r7, #10]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d8c1      	bhi.n	8004e4a <ID3_UTF16LE+0x1c>
	}
}
 8004ec6:	bf00      	nop
 8004ec8:	bf00      	nop
 8004eca:	3718      	adds	r7, #24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <ID3_iso_8859_1>:

void ID3_iso_8859_1(uint8_t *databuf, uint16_t tag_size, uint16_t i, uint8_t *INFO)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	607b      	str	r3, [r7, #4]
 8004eda:	460b      	mov	r3, r1
 8004edc:	817b      	strh	r3, [r7, #10]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	813b      	strh	r3, [r7, #8]
	uint8_t temp, temp1;
	for (temp = 0; temp < tag_size;)
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	75fb      	strb	r3, [r7, #23]
 8004ee6:	e016      	b.n	8004f16 <ID3_iso_8859_1+0x46>
	{
		temp1 = databuf[i + temp];
 8004ee8:	893a      	ldrh	r2, [r7, #8]
 8004eea:	7dfb      	ldrb	r3, [r7, #23]
 8004eec:	4413      	add	r3, r2
 8004eee:	461a      	mov	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	75bb      	strb	r3, [r7, #22]
		if (temp1 != 0x00)
 8004ef8:	7dbb      	ldrb	r3, [r7, #22]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d008      	beq.n	8004f10 <ID3_iso_8859_1+0x40>
			INFO[temp++] = temp1;
 8004efe:	7dfb      	ldrb	r3, [r7, #23]
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	75fa      	strb	r2, [r7, #23]
 8004f04:	461a      	mov	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4413      	add	r3, r2
 8004f0a:	7dba      	ldrb	r2, [r7, #22]
 8004f0c:	701a      	strb	r2, [r3, #0]
 8004f0e:	e002      	b.n	8004f16 <ID3_iso_8859_1+0x46>
		else
			temp++;
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
 8004f12:	3301      	adds	r3, #1
 8004f14:	75fb      	strb	r3, [r7, #23]
	for (temp = 0; temp < tag_size;)
 8004f16:	7dfb      	ldrb	r3, [r7, #23]
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	897a      	ldrh	r2, [r7, #10]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d8e3      	bhi.n	8004ee8 <ID3_iso_8859_1+0x18>
	}
}
 8004f20:	bf00      	nop
 8004f22:	bf00      	nop
 8004f24:	371c      	adds	r7, #28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bc80      	pop	{r7}
 8004f2a:	4770      	bx	lr

08004f2c <mp3id3>:

void mp3id3(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af04      	add	r7, sp, #16
	uint16_t i = 0;
 8004f32:	2300      	movs	r3, #0
 8004f34:	81fb      	strh	r3, [r7, #14]
	uint8_t res = 0;
 8004f36:	2300      	movs	r3, #0
 8004f38:	72fb      	strb	r3, [r7, #11]
	uint8_t *databuf = 0;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	607b      	str	r3, [r7, #4]
	uint8_t img = 1;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	737b      	strb	r3, [r7, #13]
	uint8_t temp;
	uint16_t tag_size;

	databuf = (uint8_t *)malloc(READ_buff_size);
 8004f42:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004f46:	f00c fb25 	bl	8011594 <malloc>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	607b      	str	r3, [r7, #4]

	if (info.TIT2 == NULL)
 8004f4e:	4ba8      	ldr	r3, [pc, #672]	; (80051f0 <mp3id3+0x2c4>)
 8004f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <mp3id3+0x38>
		info.TIT2 = (uint8_t *)malloc(40);
 8004f56:	2028      	movs	r0, #40	; 0x28
 8004f58:	f00c fb1c 	bl	8011594 <malloc>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	461a      	mov	r2, r3
 8004f60:	4ba3      	ldr	r3, [pc, #652]	; (80051f0 <mp3id3+0x2c4>)
 8004f62:	649a      	str	r2, [r3, #72]	; 0x48
	if (info.TPE1 == NULL)
 8004f64:	4ba2      	ldr	r3, [pc, #648]	; (80051f0 <mp3id3+0x2c4>)
 8004f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d106      	bne.n	8004f7a <mp3id3+0x4e>
		info.TPE1 = (uint8_t *)malloc(40);
 8004f6c:	2028      	movs	r0, #40	; 0x28
 8004f6e:	f00c fb11 	bl	8011594 <malloc>
 8004f72:	4603      	mov	r3, r0
 8004f74:	461a      	mov	r2, r3
 8004f76:	4b9e      	ldr	r3, [pc, #632]	; (80051f0 <mp3id3+0x2c4>)
 8004f78:	64da      	str	r2, [r3, #76]	; 0x4c
	if (info.TALB == NULL)
 8004f7a:	4b9d      	ldr	r3, [pc, #628]	; (80051f0 <mp3id3+0x2c4>)
 8004f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <mp3id3+0x64>
		info.TALB = (uint8_t *)malloc(40);
 8004f82:	2028      	movs	r0, #40	; 0x28
 8004f84:	f00c fb06 	bl	8011594 <malloc>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	4b98      	ldr	r3, [pc, #608]	; (80051f0 <mp3id3+0x2c4>)
 8004f8e:	651a      	str	r2, [r3, #80]	; 0x50
	for (temp = 0; temp < 40; temp++)
 8004f90:	2300      	movs	r3, #0
 8004f92:	733b      	strb	r3, [r7, #12]
 8004f94:	e014      	b.n	8004fc0 <mp3id3+0x94>
	{
		info.TIT2[temp] = 0;
 8004f96:	4b96      	ldr	r3, [pc, #600]	; (80051f0 <mp3id3+0x2c4>)
 8004f98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f9a:	7b3b      	ldrb	r3, [r7, #12]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	701a      	strb	r2, [r3, #0]
		info.TPE1[temp] = 0;
 8004fa2:	4b93      	ldr	r3, [pc, #588]	; (80051f0 <mp3id3+0x2c4>)
 8004fa4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fa6:	7b3b      	ldrb	r3, [r7, #12]
 8004fa8:	4413      	add	r3, r2
 8004faa:	2200      	movs	r2, #0
 8004fac:	701a      	strb	r2, [r3, #0]
		info.TALB[temp] = 0;
 8004fae:	4b90      	ldr	r3, [pc, #576]	; (80051f0 <mp3id3+0x2c4>)
 8004fb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fb2:	7b3b      	ldrb	r3, [r7, #12]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	701a      	strb	r2, [r3, #0]
	for (temp = 0; temp < 40; temp++)
 8004fba:	7b3b      	ldrb	r3, [r7, #12]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	733b      	strb	r3, [r7, #12]
 8004fc0:	7b3b      	ldrb	r3, [r7, #12]
 8004fc2:	2b27      	cmp	r3, #39	; 0x27
 8004fc4:	d9e7      	bls.n	8004f96 <mp3id3+0x6a>
	}
	if (databuf == NULL) //内存申请失败.
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d11a      	bne.n	8005002 <mp3id3+0xd6>
		while (1)
		{
			Show_Str(30, 20, 160, 16, "MP3ID3：内存申请失败", 16, 0);
 8004fcc:	2300      	movs	r3, #0
 8004fce:	9302      	str	r3, [sp, #8]
 8004fd0:	2310      	movs	r3, #16
 8004fd2:	9301      	str	r3, [sp, #4]
 8004fd4:	4b87      	ldr	r3, [pc, #540]	; (80051f4 <mp3id3+0x2c8>)
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	2310      	movs	r3, #16
 8004fda:	22a0      	movs	r2, #160	; 0xa0
 8004fdc:	2114      	movs	r1, #20
 8004fde:	201e      	movs	r0, #30
 8004fe0:	f7fc fd72 	bl	8001ac8 <Show_Str>
			osDelay(200 / portTICK_RATE_MS);
 8004fe4:	20c8      	movs	r0, #200	; 0xc8
 8004fe6:	f009 f9c7 	bl	800e378 <osDelay>
			LCD_Fill(30, 20, 160, 16, BLACK); //清除显示
 8004fea:	2300      	movs	r3, #0
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	2310      	movs	r3, #16
 8004ff0:	22a0      	movs	r2, #160	; 0xa0
 8004ff2:	2114      	movs	r1, #20
 8004ff4:	201e      	movs	r0, #30
 8004ff6:	f7ff fbef 	bl	80047d8 <LCD_Fill>
			osDelay(200 / portTICK_RATE_MS);
 8004ffa:	20c8      	movs	r0, #200	; 0xc8
 8004ffc:	f009 f9bc 	bl	800e378 <osDelay>
		{
 8005000:	e7e4      	b.n	8004fcc <mp3id3+0xa0>
		}
	res = f_read(info.fmp3, databuf, 10, (UINT *)&br); //读出mp3id3头
 8005002:	4b7b      	ldr	r3, [pc, #492]	; (80051f0 <mp3id3+0x2c4>)
 8005004:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005006:	4b7c      	ldr	r3, [pc, #496]	; (80051f8 <mp3id3+0x2cc>)
 8005008:	220a      	movs	r2, #10
 800500a:	6879      	ldr	r1, [r7, #4]
 800500c:	f008 f80f 	bl	800d02e <f_read>
 8005010:	4603      	mov	r3, r0
 8005012:	72fb      	strb	r3, [r7, #11]
	if (res != FR_OK)
 8005014:	7afb      	ldrb	r3, [r7, #11]
 8005016:	2b00      	cmp	r3, #0
 8005018:	f040 8366 	bne.w	80056e8 <mp3id3+0x7bc>
		return;
	if (databuf[0] == 0x49 && databuf[1] == 0x44 && databuf[2] == 0x33)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b49      	cmp	r3, #73	; 0x49
 8005022:	f040 835d 	bne.w	80056e0 <mp3id3+0x7b4>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3301      	adds	r3, #1
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b44      	cmp	r3, #68	; 0x44
 800502e:	f040 8357 	bne.w	80056e0 <mp3id3+0x7b4>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	3302      	adds	r3, #2
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b33      	cmp	r3, #51	; 0x33
 800503a:	f040 8351 	bne.w	80056e0 <mp3id3+0x7b4>
	{
		//计算大小
		info.size = databuf[6] << 21 | databuf[7] << 14 | databuf[8] << 7 | databuf[9];
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	3306      	adds	r3, #6
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	055a      	lsls	r2, r3, #21
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3307      	adds	r3, #7
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	039b      	lsls	r3, r3, #14
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3308      	adds	r3, #8
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	01db      	lsls	r3, r3, #7
 8005058:	4313      	orrs	r3, r2
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	3209      	adds	r2, #9
 800505e:	7812      	ldrb	r2, [r2, #0]
 8005060:	4313      	orrs	r3, r2
 8005062:	461a      	mov	r2, r3
 8005064:	4b62      	ldr	r3, [pc, #392]	; (80051f0 <mp3id3+0x2c4>)
 8005066:	62da      	str	r2, [r3, #44]	; 0x2c
		res = f_read(info.fmp3, databuf, READ_buff_size, (UINT *)&br);
 8005068:	4b61      	ldr	r3, [pc, #388]	; (80051f0 <mp3id3+0x2c4>)
 800506a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800506c:	4b62      	ldr	r3, [pc, #392]	; (80051f8 <mp3id3+0x2cc>)
 800506e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	f007 ffdb 	bl	800d02e <f_read>
 8005078:	4603      	mov	r3, r0
 800507a:	72fb      	strb	r3, [r7, #11]
		if (res != FR_OK)
 800507c:	7afb      	ldrb	r3, [r7, #11]
 800507e:	2b00      	cmp	r3, #0
 8005080:	f040 8334 	bne.w	80056ec <mp3id3+0x7c0>
			return;
		i = 0;
 8005084:	2300      	movs	r3, #0
 8005086:	81fb      	strh	r3, [r7, #14]
		while (img) //查找歌名
 8005088:	e0c2      	b.n	8005210 <mp3id3+0x2e4>
		{
			if (databuf[i] == 0x54 && databuf[i + 1] == 0x49 && databuf[i + 2] == 0x54 && databuf[i + 3] == 0x32)
 800508a:	89fb      	ldrh	r3, [r7, #14]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	4413      	add	r3, r2
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b54      	cmp	r3, #84	; 0x54
 8005094:	f040 80b2 	bne.w	80051fc <mp3id3+0x2d0>
 8005098:	89fb      	ldrh	r3, [r7, #14]
 800509a:	3301      	adds	r3, #1
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	4413      	add	r3, r2
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	2b49      	cmp	r3, #73	; 0x49
 80050a4:	f040 80aa 	bne.w	80051fc <mp3id3+0x2d0>
 80050a8:	89fb      	ldrh	r3, [r7, #14]
 80050aa:	3302      	adds	r3, #2
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	4413      	add	r3, r2
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	2b54      	cmp	r3, #84	; 0x54
 80050b4:	f040 80a2 	bne.w	80051fc <mp3id3+0x2d0>
 80050b8:	89fb      	ldrh	r3, [r7, #14]
 80050ba:	3303      	adds	r3, #3
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	4413      	add	r3, r2
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	2b32      	cmp	r3, #50	; 0x32
 80050c4:	f040 809a 	bne.w	80051fc <mp3id3+0x2d0>
			{ //找到位置
				tag_size = databuf[i + 4] << 24 | databuf[i + 5] << 16 | databuf[i + 6] << 8 | databuf[i + 7];
 80050c8:	89fb      	ldrh	r3, [r7, #14]
 80050ca:	3304      	adds	r3, #4
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	4413      	add	r3, r2
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	061b      	lsls	r3, r3, #24
 80050d4:	b21a      	sxth	r2, r3
 80050d6:	89fb      	ldrh	r3, [r7, #14]
 80050d8:	3305      	adds	r3, #5
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	440b      	add	r3, r1
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	041b      	lsls	r3, r3, #16
 80050e2:	b21b      	sxth	r3, r3
 80050e4:	4313      	orrs	r3, r2
 80050e6:	b21a      	sxth	r2, r3
 80050e8:	89fb      	ldrh	r3, [r7, #14]
 80050ea:	3306      	adds	r3, #6
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	440b      	add	r3, r1
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	021b      	lsls	r3, r3, #8
 80050f4:	b21b      	sxth	r3, r3
 80050f6:	4313      	orrs	r3, r2
 80050f8:	b21a      	sxth	r2, r3
 80050fa:	89fb      	ldrh	r3, [r7, #14]
 80050fc:	3307      	adds	r3, #7
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	440b      	add	r3, r1
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	b21b      	sxth	r3, r3
 8005106:	4313      	orrs	r3, r2
 8005108:	b21b      	sxth	r3, r3
 800510a:	807b      	strh	r3, [r7, #2]
				if (databuf[i + 11] == 0xFE && databuf[i + 12] == 0xFF && databuf[i + 10] == 0x01)
 800510c:	89fb      	ldrh	r3, [r7, #14]
 800510e:	330b      	adds	r3, #11
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	4413      	add	r3, r2
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	2bfe      	cmp	r3, #254	; 0xfe
 8005118:	d11b      	bne.n	8005152 <mp3id3+0x226>
 800511a:	89fb      	ldrh	r3, [r7, #14]
 800511c:	330c      	adds	r3, #12
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	4413      	add	r3, r2
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2bff      	cmp	r3, #255	; 0xff
 8005126:	d114      	bne.n	8005152 <mp3id3+0x226>
 8005128:	89fb      	ldrh	r3, [r7, #14]
 800512a:	330a      	adds	r3, #10
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	4413      	add	r3, r2
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d10d      	bne.n	8005152 <mp3id3+0x226>
				{ //UTF-16BE
					i += 13;
 8005136:	89fb      	ldrh	r3, [r7, #14]
 8005138:	330d      	adds	r3, #13
 800513a:	81fb      	strh	r3, [r7, #14]
					tag_size -= 3;
 800513c:	887b      	ldrh	r3, [r7, #2]
 800513e:	3b03      	subs	r3, #3
 8005140:	807b      	strh	r3, [r7, #2]
					ID3_UTF16BE(databuf, tag_size, i, info.TIT2);
 8005142:	4b2b      	ldr	r3, [pc, #172]	; (80051f0 <mp3id3+0x2c4>)
 8005144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005146:	89fa      	ldrh	r2, [r7, #14]
 8005148:	8879      	ldrh	r1, [r7, #2]
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7ff fe18 	bl	8004d80 <ID3_UTF16BE>
 8005150:	e04b      	b.n	80051ea <mp3id3+0x2be>
				}
				else if (databuf[i + 11] == 0xFF && databuf[i + 12] == 0xFE && databuf[i + 10] == 0x01)
 8005152:	89fb      	ldrh	r3, [r7, #14]
 8005154:	330b      	adds	r3, #11
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	4413      	add	r3, r2
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	2bff      	cmp	r3, #255	; 0xff
 800515e:	d11b      	bne.n	8005198 <mp3id3+0x26c>
 8005160:	89fb      	ldrh	r3, [r7, #14]
 8005162:	330c      	adds	r3, #12
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	4413      	add	r3, r2
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2bfe      	cmp	r3, #254	; 0xfe
 800516c:	d114      	bne.n	8005198 <mp3id3+0x26c>
 800516e:	89fb      	ldrh	r3, [r7, #14]
 8005170:	330a      	adds	r3, #10
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	4413      	add	r3, r2
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d10d      	bne.n	8005198 <mp3id3+0x26c>
				{ //UTF-16LE
					i += 13;
 800517c:	89fb      	ldrh	r3, [r7, #14]
 800517e:	330d      	adds	r3, #13
 8005180:	81fb      	strh	r3, [r7, #14]
					tag_size -= 3;
 8005182:	887b      	ldrh	r3, [r7, #2]
 8005184:	3b03      	subs	r3, #3
 8005186:	807b      	strh	r3, [r7, #2]
					ID3_UTF16LE(databuf, tag_size, i, info.TIT2);
 8005188:	4b19      	ldr	r3, [pc, #100]	; (80051f0 <mp3id3+0x2c4>)
 800518a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800518c:	89fa      	ldrh	r2, [r7, #14]
 800518e:	8879      	ldrh	r1, [r7, #2]
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff fe4c 	bl	8004e2e <ID3_UTF16LE>
 8005196:	e028      	b.n	80051ea <mp3id3+0x2be>
				}
				else if (databuf[i + 10] == 0x00) //iso-8859-1
 8005198:	89fb      	ldrh	r3, [r7, #14]
 800519a:	330a      	adds	r3, #10
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	4413      	add	r3, r2
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10d      	bne.n	80051c2 <mp3id3+0x296>
				{
					i += 11;
 80051a6:	89fb      	ldrh	r3, [r7, #14]
 80051a8:	330b      	adds	r3, #11
 80051aa:	81fb      	strh	r3, [r7, #14]
					tag_size -= 1;
 80051ac:	887b      	ldrh	r3, [r7, #2]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	807b      	strh	r3, [r7, #2]
					ID3_iso_8859_1(databuf, tag_size, i, info.TIT2);
 80051b2:	4b0f      	ldr	r3, [pc, #60]	; (80051f0 <mp3id3+0x2c4>)
 80051b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051b6:	89fa      	ldrh	r2, [r7, #14]
 80051b8:	8879      	ldrh	r1, [r7, #2]
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7ff fe88 	bl	8004ed0 <ID3_iso_8859_1>
 80051c0:	e013      	b.n	80051ea <mp3id3+0x2be>
				}
				else if (databuf[i + 10] == 0x03) //UTF-8
 80051c2:	89fb      	ldrh	r3, [r7, #14]
 80051c4:	330a      	adds	r3, #10
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	4413      	add	r3, r2
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	2b03      	cmp	r3, #3
 80051ce:	d10c      	bne.n	80051ea <mp3id3+0x2be>
				{
					i += 11;
 80051d0:	89fb      	ldrh	r3, [r7, #14]
 80051d2:	330b      	adds	r3, #11
 80051d4:	81fb      	strh	r3, [r7, #14]
					tag_size -= 1;
 80051d6:	887b      	ldrh	r3, [r7, #2]
 80051d8:	3b01      	subs	r3, #1
 80051da:	807b      	strh	r3, [r7, #2]
					ID3_UTF8(databuf, tag_size, i, info.TIT2);
 80051dc:	4b04      	ldr	r3, [pc, #16]	; (80051f0 <mp3id3+0x2c4>)
 80051de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e0:	89fa      	ldrh	r2, [r7, #14]
 80051e2:	8879      	ldrh	r1, [r7, #2]
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff fd4b 	bl	8004c80 <ID3_UTF8>
				}
				img = 0;
 80051ea:	2300      	movs	r3, #0
 80051ec:	737b      	strb	r3, [r7, #13]
 80051ee:	e008      	b.n	8005202 <mp3id3+0x2d6>
 80051f0:	20001fdc 	.word	0x20001fdc
 80051f4:	08012604 	.word	0x08012604
 80051f8:	20001be8 	.word	0x20001be8
			}
			else
				i++;
 80051fc:	89fb      	ldrh	r3, [r7, #14]
 80051fe:	3301      	adds	r3, #1
 8005200:	81fb      	strh	r3, [r7, #14]
			if (i >= READ_buff_size - 6) //找不到位置
 8005202:	89fb      	ldrh	r3, [r7, #14]
 8005204:	f640 72f9 	movw	r2, #4089	; 0xff9
 8005208:	4293      	cmp	r3, r2
 800520a:	d901      	bls.n	8005210 <mp3id3+0x2e4>
			{
				img = 0;
 800520c:	2300      	movs	r3, #0
 800520e:	737b      	strb	r3, [r7, #13]
		while (img) //查找歌名
 8005210:	7b7b      	ldrb	r3, [r7, #13]
 8005212:	2b00      	cmp	r3, #0
 8005214:	f47f af39 	bne.w	800508a <mp3id3+0x15e>
			}
		}
		img = 1;
 8005218:	2301      	movs	r3, #1
 800521a:	737b      	strb	r3, [r7, #13]
		i = 0;
 800521c:	2300      	movs	r3, #0
 800521e:	81fb      	strh	r3, [r7, #14]
		while (img) //查找作者
 8005220:	e0bc      	b.n	800539c <mp3id3+0x470>
		{
			if (databuf[i] == 0x54 && databuf[i + 1] == 0x50 && databuf[i + 2] == 0x45 && databuf[i + 3] == 0x31)
 8005222:	89fb      	ldrh	r3, [r7, #14]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	4413      	add	r3, r2
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	2b54      	cmp	r3, #84	; 0x54
 800522c:	f040 80ac 	bne.w	8005388 <mp3id3+0x45c>
 8005230:	89fb      	ldrh	r3, [r7, #14]
 8005232:	3301      	adds	r3, #1
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	4413      	add	r3, r2
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b50      	cmp	r3, #80	; 0x50
 800523c:	f040 80a4 	bne.w	8005388 <mp3id3+0x45c>
 8005240:	89fb      	ldrh	r3, [r7, #14]
 8005242:	3302      	adds	r3, #2
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	4413      	add	r3, r2
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	2b45      	cmp	r3, #69	; 0x45
 800524c:	f040 809c 	bne.w	8005388 <mp3id3+0x45c>
 8005250:	89fb      	ldrh	r3, [r7, #14]
 8005252:	3303      	adds	r3, #3
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	4413      	add	r3, r2
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	2b31      	cmp	r3, #49	; 0x31
 800525c:	f040 8094 	bne.w	8005388 <mp3id3+0x45c>
			{ //找到位置
				tag_size = databuf[i + 4] << 24 | databuf[i + 5] << 16 | databuf[i + 6] << 8 | databuf[i + 7];
 8005260:	89fb      	ldrh	r3, [r7, #14]
 8005262:	3304      	adds	r3, #4
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	4413      	add	r3, r2
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	061b      	lsls	r3, r3, #24
 800526c:	b21a      	sxth	r2, r3
 800526e:	89fb      	ldrh	r3, [r7, #14]
 8005270:	3305      	adds	r3, #5
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	440b      	add	r3, r1
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	041b      	lsls	r3, r3, #16
 800527a:	b21b      	sxth	r3, r3
 800527c:	4313      	orrs	r3, r2
 800527e:	b21a      	sxth	r2, r3
 8005280:	89fb      	ldrh	r3, [r7, #14]
 8005282:	3306      	adds	r3, #6
 8005284:	6879      	ldr	r1, [r7, #4]
 8005286:	440b      	add	r3, r1
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	021b      	lsls	r3, r3, #8
 800528c:	b21b      	sxth	r3, r3
 800528e:	4313      	orrs	r3, r2
 8005290:	b21a      	sxth	r2, r3
 8005292:	89fb      	ldrh	r3, [r7, #14]
 8005294:	3307      	adds	r3, #7
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	440b      	add	r3, r1
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	b21b      	sxth	r3, r3
 800529e:	4313      	orrs	r3, r2
 80052a0:	b21b      	sxth	r3, r3
 80052a2:	807b      	strh	r3, [r7, #2]
				if (databuf[i + 11] == 0xFE && databuf[i + 12] == 0xFF && databuf[i + 10] == 0x01)
 80052a4:	89fb      	ldrh	r3, [r7, #14]
 80052a6:	330b      	adds	r3, #11
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	4413      	add	r3, r2
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	2bfe      	cmp	r3, #254	; 0xfe
 80052b0:	d11b      	bne.n	80052ea <mp3id3+0x3be>
 80052b2:	89fb      	ldrh	r3, [r7, #14]
 80052b4:	330c      	adds	r3, #12
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	4413      	add	r3, r2
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2bff      	cmp	r3, #255	; 0xff
 80052be:	d114      	bne.n	80052ea <mp3id3+0x3be>
 80052c0:	89fb      	ldrh	r3, [r7, #14]
 80052c2:	330a      	adds	r3, #10
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	4413      	add	r3, r2
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d10d      	bne.n	80052ea <mp3id3+0x3be>
				{ //UTF-16BE
					i += 13;
 80052ce:	89fb      	ldrh	r3, [r7, #14]
 80052d0:	330d      	adds	r3, #13
 80052d2:	81fb      	strh	r3, [r7, #14]
					tag_size -= 3;
 80052d4:	887b      	ldrh	r3, [r7, #2]
 80052d6:	3b03      	subs	r3, #3
 80052d8:	807b      	strh	r3, [r7, #2]
					ID3_UTF16BE(databuf, tag_size, i, info.TPE1);
 80052da:	4b98      	ldr	r3, [pc, #608]	; (800553c <mp3id3+0x610>)
 80052dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052de:	89fa      	ldrh	r2, [r7, #14]
 80052e0:	8879      	ldrh	r1, [r7, #2]
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7ff fd4c 	bl	8004d80 <ID3_UTF16BE>
 80052e8:	e04b      	b.n	8005382 <mp3id3+0x456>
				}
				else if (databuf[i + 11] == 0xFF && databuf[i + 12] == 0xFE && databuf[i + 10] == 0x01)
 80052ea:	89fb      	ldrh	r3, [r7, #14]
 80052ec:	330b      	adds	r3, #11
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	4413      	add	r3, r2
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2bff      	cmp	r3, #255	; 0xff
 80052f6:	d11b      	bne.n	8005330 <mp3id3+0x404>
 80052f8:	89fb      	ldrh	r3, [r7, #14]
 80052fa:	330c      	adds	r3, #12
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	4413      	add	r3, r2
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	2bfe      	cmp	r3, #254	; 0xfe
 8005304:	d114      	bne.n	8005330 <mp3id3+0x404>
 8005306:	89fb      	ldrh	r3, [r7, #14]
 8005308:	330a      	adds	r3, #10
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	4413      	add	r3, r2
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d10d      	bne.n	8005330 <mp3id3+0x404>
				{ //UTF-16LE
					i += 13;
 8005314:	89fb      	ldrh	r3, [r7, #14]
 8005316:	330d      	adds	r3, #13
 8005318:	81fb      	strh	r3, [r7, #14]
					tag_size -= 3;
 800531a:	887b      	ldrh	r3, [r7, #2]
 800531c:	3b03      	subs	r3, #3
 800531e:	807b      	strh	r3, [r7, #2]
					ID3_UTF16LE(databuf, tag_size, i, info.TPE1);
 8005320:	4b86      	ldr	r3, [pc, #536]	; (800553c <mp3id3+0x610>)
 8005322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005324:	89fa      	ldrh	r2, [r7, #14]
 8005326:	8879      	ldrh	r1, [r7, #2]
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7ff fd80 	bl	8004e2e <ID3_UTF16LE>
 800532e:	e028      	b.n	8005382 <mp3id3+0x456>
				}
				else if (databuf[i + 10] == 0x00) //iso-8859-1
 8005330:	89fb      	ldrh	r3, [r7, #14]
 8005332:	330a      	adds	r3, #10
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	4413      	add	r3, r2
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10d      	bne.n	800535a <mp3id3+0x42e>
				{
					i += 11;
 800533e:	89fb      	ldrh	r3, [r7, #14]
 8005340:	330b      	adds	r3, #11
 8005342:	81fb      	strh	r3, [r7, #14]
					tag_size -= 1;
 8005344:	887b      	ldrh	r3, [r7, #2]
 8005346:	3b01      	subs	r3, #1
 8005348:	807b      	strh	r3, [r7, #2]
					ID3_iso_8859_1(databuf, tag_size, i, info.TPE1);
 800534a:	4b7c      	ldr	r3, [pc, #496]	; (800553c <mp3id3+0x610>)
 800534c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800534e:	89fa      	ldrh	r2, [r7, #14]
 8005350:	8879      	ldrh	r1, [r7, #2]
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7ff fdbc 	bl	8004ed0 <ID3_iso_8859_1>
 8005358:	e013      	b.n	8005382 <mp3id3+0x456>
				}
				else if (databuf[i + 10] == 0x03) //UTF-8
 800535a:	89fb      	ldrh	r3, [r7, #14]
 800535c:	330a      	adds	r3, #10
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	4413      	add	r3, r2
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b03      	cmp	r3, #3
 8005366:	d10c      	bne.n	8005382 <mp3id3+0x456>
				{
					i += 11;
 8005368:	89fb      	ldrh	r3, [r7, #14]
 800536a:	330b      	adds	r3, #11
 800536c:	81fb      	strh	r3, [r7, #14]
					tag_size -= 1;
 800536e:	887b      	ldrh	r3, [r7, #2]
 8005370:	3b01      	subs	r3, #1
 8005372:	807b      	strh	r3, [r7, #2]
					ID3_UTF8(databuf, tag_size, i, info.TPE1);
 8005374:	4b71      	ldr	r3, [pc, #452]	; (800553c <mp3id3+0x610>)
 8005376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005378:	89fa      	ldrh	r2, [r7, #14]
 800537a:	8879      	ldrh	r1, [r7, #2]
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7ff fc7f 	bl	8004c80 <ID3_UTF8>
				}
				img = 0;
 8005382:	2300      	movs	r3, #0
 8005384:	737b      	strb	r3, [r7, #13]
 8005386:	e002      	b.n	800538e <mp3id3+0x462>
			}
			else
				i++;
 8005388:	89fb      	ldrh	r3, [r7, #14]
 800538a:	3301      	adds	r3, #1
 800538c:	81fb      	strh	r3, [r7, #14]
			if (i >= READ_buff_size - 6) //找不到位置
 800538e:	89fb      	ldrh	r3, [r7, #14]
 8005390:	f640 72f9 	movw	r2, #4089	; 0xff9
 8005394:	4293      	cmp	r3, r2
 8005396:	d901      	bls.n	800539c <mp3id3+0x470>
			{
				img = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	737b      	strb	r3, [r7, #13]
		while (img) //查找作者
 800539c:	7b7b      	ldrb	r3, [r7, #13]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f47f af3f 	bne.w	8005222 <mp3id3+0x2f6>
			}
		}
		img = 1;
 80053a4:	2301      	movs	r3, #1
 80053a6:	737b      	strb	r3, [r7, #13]
		i = 0;
 80053a8:	2300      	movs	r3, #0
 80053aa:	81fb      	strh	r3, [r7, #14]
		while (img) //查找专辑
 80053ac:	e0bc      	b.n	8005528 <mp3id3+0x5fc>
		{
			if (databuf[i] == 0x54 && databuf[i + 1] == 0x41 && databuf[i + 2] == 0x4c && databuf[i + 3] == 0x42)
 80053ae:	89fb      	ldrh	r3, [r7, #14]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	4413      	add	r3, r2
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	2b54      	cmp	r3, #84	; 0x54
 80053b8:	f040 80ac 	bne.w	8005514 <mp3id3+0x5e8>
 80053bc:	89fb      	ldrh	r3, [r7, #14]
 80053be:	3301      	adds	r3, #1
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	4413      	add	r3, r2
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	2b41      	cmp	r3, #65	; 0x41
 80053c8:	f040 80a4 	bne.w	8005514 <mp3id3+0x5e8>
 80053cc:	89fb      	ldrh	r3, [r7, #14]
 80053ce:	3302      	adds	r3, #2
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	4413      	add	r3, r2
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b4c      	cmp	r3, #76	; 0x4c
 80053d8:	f040 809c 	bne.w	8005514 <mp3id3+0x5e8>
 80053dc:	89fb      	ldrh	r3, [r7, #14]
 80053de:	3303      	adds	r3, #3
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	4413      	add	r3, r2
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	2b42      	cmp	r3, #66	; 0x42
 80053e8:	f040 8094 	bne.w	8005514 <mp3id3+0x5e8>
			{ //找到位置
				tag_size = databuf[i + 4] << 24 | databuf[i + 5] << 16 | databuf[i + 6] << 8 | databuf[i + 7];
 80053ec:	89fb      	ldrh	r3, [r7, #14]
 80053ee:	3304      	adds	r3, #4
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	4413      	add	r3, r2
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	061b      	lsls	r3, r3, #24
 80053f8:	b21a      	sxth	r2, r3
 80053fa:	89fb      	ldrh	r3, [r7, #14]
 80053fc:	3305      	adds	r3, #5
 80053fe:	6879      	ldr	r1, [r7, #4]
 8005400:	440b      	add	r3, r1
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	041b      	lsls	r3, r3, #16
 8005406:	b21b      	sxth	r3, r3
 8005408:	4313      	orrs	r3, r2
 800540a:	b21a      	sxth	r2, r3
 800540c:	89fb      	ldrh	r3, [r7, #14]
 800540e:	3306      	adds	r3, #6
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	440b      	add	r3, r1
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	021b      	lsls	r3, r3, #8
 8005418:	b21b      	sxth	r3, r3
 800541a:	4313      	orrs	r3, r2
 800541c:	b21a      	sxth	r2, r3
 800541e:	89fb      	ldrh	r3, [r7, #14]
 8005420:	3307      	adds	r3, #7
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	440b      	add	r3, r1
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	b21b      	sxth	r3, r3
 800542a:	4313      	orrs	r3, r2
 800542c:	b21b      	sxth	r3, r3
 800542e:	807b      	strh	r3, [r7, #2]
				if (databuf[i + 11] == 0xFE && databuf[i + 12] == 0xFF && databuf[i + 10] == 0x01)
 8005430:	89fb      	ldrh	r3, [r7, #14]
 8005432:	330b      	adds	r3, #11
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	4413      	add	r3, r2
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	2bfe      	cmp	r3, #254	; 0xfe
 800543c:	d11b      	bne.n	8005476 <mp3id3+0x54a>
 800543e:	89fb      	ldrh	r3, [r7, #14]
 8005440:	330c      	adds	r3, #12
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	4413      	add	r3, r2
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2bff      	cmp	r3, #255	; 0xff
 800544a:	d114      	bne.n	8005476 <mp3id3+0x54a>
 800544c:	89fb      	ldrh	r3, [r7, #14]
 800544e:	330a      	adds	r3, #10
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	4413      	add	r3, r2
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d10d      	bne.n	8005476 <mp3id3+0x54a>
				{ //UTF-16BE
					i += 13;
 800545a:	89fb      	ldrh	r3, [r7, #14]
 800545c:	330d      	adds	r3, #13
 800545e:	81fb      	strh	r3, [r7, #14]
					tag_size -= 3;
 8005460:	887b      	ldrh	r3, [r7, #2]
 8005462:	3b03      	subs	r3, #3
 8005464:	807b      	strh	r3, [r7, #2]
					ID3_UTF16BE(databuf, tag_size, i, info.TALB);
 8005466:	4b35      	ldr	r3, [pc, #212]	; (800553c <mp3id3+0x610>)
 8005468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800546a:	89fa      	ldrh	r2, [r7, #14]
 800546c:	8879      	ldrh	r1, [r7, #2]
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7ff fc86 	bl	8004d80 <ID3_UTF16BE>
 8005474:	e04b      	b.n	800550e <mp3id3+0x5e2>
				}
				else if (databuf[i + 11] == 0xFF && databuf[i + 12] == 0xFE && databuf[i + 10] == 0x01)
 8005476:	89fb      	ldrh	r3, [r7, #14]
 8005478:	330b      	adds	r3, #11
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	4413      	add	r3, r2
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2bff      	cmp	r3, #255	; 0xff
 8005482:	d11b      	bne.n	80054bc <mp3id3+0x590>
 8005484:	89fb      	ldrh	r3, [r7, #14]
 8005486:	330c      	adds	r3, #12
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	4413      	add	r3, r2
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2bfe      	cmp	r3, #254	; 0xfe
 8005490:	d114      	bne.n	80054bc <mp3id3+0x590>
 8005492:	89fb      	ldrh	r3, [r7, #14]
 8005494:	330a      	adds	r3, #10
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	4413      	add	r3, r2
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d10d      	bne.n	80054bc <mp3id3+0x590>
				{ //UTF-16LE
					i += 13;
 80054a0:	89fb      	ldrh	r3, [r7, #14]
 80054a2:	330d      	adds	r3, #13
 80054a4:	81fb      	strh	r3, [r7, #14]
					tag_size -= 3;
 80054a6:	887b      	ldrh	r3, [r7, #2]
 80054a8:	3b03      	subs	r3, #3
 80054aa:	807b      	strh	r3, [r7, #2]
					ID3_UTF16LE(databuf, tag_size, i, info.TALB);
 80054ac:	4b23      	ldr	r3, [pc, #140]	; (800553c <mp3id3+0x610>)
 80054ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b0:	89fa      	ldrh	r2, [r7, #14]
 80054b2:	8879      	ldrh	r1, [r7, #2]
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7ff fcba 	bl	8004e2e <ID3_UTF16LE>
 80054ba:	e028      	b.n	800550e <mp3id3+0x5e2>
				}
				else if (databuf[i + 10] == 0x00) //iso-8859-1
 80054bc:	89fb      	ldrh	r3, [r7, #14]
 80054be:	330a      	adds	r3, #10
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	4413      	add	r3, r2
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10d      	bne.n	80054e6 <mp3id3+0x5ba>
				{
					i += 11;
 80054ca:	89fb      	ldrh	r3, [r7, #14]
 80054cc:	330b      	adds	r3, #11
 80054ce:	81fb      	strh	r3, [r7, #14]
					tag_size -= 1;
 80054d0:	887b      	ldrh	r3, [r7, #2]
 80054d2:	3b01      	subs	r3, #1
 80054d4:	807b      	strh	r3, [r7, #2]
					ID3_iso_8859_1(databuf, tag_size, i, info.TALB);
 80054d6:	4b19      	ldr	r3, [pc, #100]	; (800553c <mp3id3+0x610>)
 80054d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054da:	89fa      	ldrh	r2, [r7, #14]
 80054dc:	8879      	ldrh	r1, [r7, #2]
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7ff fcf6 	bl	8004ed0 <ID3_iso_8859_1>
 80054e4:	e013      	b.n	800550e <mp3id3+0x5e2>
				}
				else if (databuf[i + 10] == 0x03) //UTF-8
 80054e6:	89fb      	ldrh	r3, [r7, #14]
 80054e8:	330a      	adds	r3, #10
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	4413      	add	r3, r2
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b03      	cmp	r3, #3
 80054f2:	d10c      	bne.n	800550e <mp3id3+0x5e2>
				{
					i += 11;
 80054f4:	89fb      	ldrh	r3, [r7, #14]
 80054f6:	330b      	adds	r3, #11
 80054f8:	81fb      	strh	r3, [r7, #14]
					tag_size -= 1;
 80054fa:	887b      	ldrh	r3, [r7, #2]
 80054fc:	3b01      	subs	r3, #1
 80054fe:	807b      	strh	r3, [r7, #2]
					ID3_UTF8(databuf, tag_size, i, info.TALB);
 8005500:	4b0e      	ldr	r3, [pc, #56]	; (800553c <mp3id3+0x610>)
 8005502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005504:	89fa      	ldrh	r2, [r7, #14]
 8005506:	8879      	ldrh	r1, [r7, #2]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7ff fbb9 	bl	8004c80 <ID3_UTF8>
				}
				img = 0;
 800550e:	2300      	movs	r3, #0
 8005510:	737b      	strb	r3, [r7, #13]
 8005512:	e002      	b.n	800551a <mp3id3+0x5ee>
			}
			else
				i++;
 8005514:	89fb      	ldrh	r3, [r7, #14]
 8005516:	3301      	adds	r3, #1
 8005518:	81fb      	strh	r3, [r7, #14]
			if (i >= READ_buff_size - 6) //找不到位置
 800551a:	89fb      	ldrh	r3, [r7, #14]
 800551c:	f640 72f9 	movw	r2, #4089	; 0xff9
 8005520:	4293      	cmp	r3, r2
 8005522:	d901      	bls.n	8005528 <mp3id3+0x5fc>
			{
				img = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	737b      	strb	r3, [r7, #13]
		while (img) //查找专辑
 8005528:	7b7b      	ldrb	r3, [r7, #13]
 800552a:	2b00      	cmp	r3, #0
 800552c:	f47f af3f 	bne.w	80053ae <mp3id3+0x482>
			}
		}
		img = 1;
 8005530:	2301      	movs	r3, #1
 8005532:	737b      	strb	r3, [r7, #13]
		i = 0;
 8005534:	2300      	movs	r3, #0
 8005536:	81fb      	strh	r3, [r7, #14]
		while (img)
 8005538:	e08b      	b.n	8005652 <mp3id3+0x726>
 800553a:	bf00      	nop
 800553c:	20001fdc 	.word	0x20001fdc
		{
			if (databuf[i] == 0x41 && databuf[i + 1] == 0x50 && databuf[i + 2] == 0x49 && databuf[i + 3] == 0x43)
 8005540:	89fb      	ldrh	r3, [r7, #14]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	4413      	add	r3, r2
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b41      	cmp	r3, #65	; 0x41
 800554a:	d174      	bne.n	8005636 <mp3id3+0x70a>
 800554c:	89fb      	ldrh	r3, [r7, #14]
 800554e:	3301      	adds	r3, #1
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	4413      	add	r3, r2
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b50      	cmp	r3, #80	; 0x50
 8005558:	d16d      	bne.n	8005636 <mp3id3+0x70a>
 800555a:	89fb      	ldrh	r3, [r7, #14]
 800555c:	3302      	adds	r3, #2
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	4413      	add	r3, r2
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b49      	cmp	r3, #73	; 0x49
 8005566:	d166      	bne.n	8005636 <mp3id3+0x70a>
 8005568:	89fb      	ldrh	r3, [r7, #14]
 800556a:	3303      	adds	r3, #3
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	4413      	add	r3, r2
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2b43      	cmp	r3, #67	; 0x43
 8005574:	d15f      	bne.n	8005636 <mp3id3+0x70a>
			{ //找到位置
				info.pic_size = databuf[i + 4] << 24 | databuf[i + 5] << 16 | databuf[i + 6] << 8 | databuf[i + 7];
 8005576:	89fb      	ldrh	r3, [r7, #14]
 8005578:	3304      	adds	r3, #4
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	4413      	add	r3, r2
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	061a      	lsls	r2, r3, #24
 8005582:	89fb      	ldrh	r3, [r7, #14]
 8005584:	3305      	adds	r3, #5
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	440b      	add	r3, r1
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	041b      	lsls	r3, r3, #16
 800558e:	431a      	orrs	r2, r3
 8005590:	89fb      	ldrh	r3, [r7, #14]
 8005592:	3306      	adds	r3, #6
 8005594:	6879      	ldr	r1, [r7, #4]
 8005596:	440b      	add	r3, r1
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	021b      	lsls	r3, r3, #8
 800559c:	4313      	orrs	r3, r2
 800559e:	89fa      	ldrh	r2, [r7, #14]
 80055a0:	3207      	adds	r2, #7
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	440a      	add	r2, r1
 80055a6:	7812      	ldrb	r2, [r2, #0]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	461a      	mov	r2, r3
 80055ac:	4b51      	ldr	r3, [pc, #324]	; (80056f4 <mp3id3+0x7c8>)
 80055ae:	645a      	str	r2, [r3, #68]	; 0x44
				if (databuf[i + 24] == 0xff && databuf[i + 25] == 0xd8 && databuf[i + 26] == 0xff && databuf[i + 27] == 0xe0)
 80055b0:	89fb      	ldrh	r3, [r7, #14]
 80055b2:	3318      	adds	r3, #24
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	4413      	add	r3, r2
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	2bff      	cmp	r3, #255	; 0xff
 80055bc:	d118      	bne.n	80055f0 <mp3id3+0x6c4>
 80055be:	89fb      	ldrh	r3, [r7, #14]
 80055c0:	3319      	adds	r3, #25
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	4413      	add	r3, r2
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2bd8      	cmp	r3, #216	; 0xd8
 80055ca:	d111      	bne.n	80055f0 <mp3id3+0x6c4>
 80055cc:	89fb      	ldrh	r3, [r7, #14]
 80055ce:	331a      	adds	r3, #26
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	4413      	add	r3, r2
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2bff      	cmp	r3, #255	; 0xff
 80055d8:	d10a      	bne.n	80055f0 <mp3id3+0x6c4>
 80055da:	89fb      	ldrh	r3, [r7, #14]
 80055dc:	331b      	adds	r3, #27
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	4413      	add	r3, r2
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2be0      	cmp	r3, #224	; 0xe0
 80055e6:	d103      	bne.n	80055f0 <mp3id3+0x6c4>
				{
					info.pic_type = 0; //JPG
 80055e8:	4b42      	ldr	r3, [pc, #264]	; (80056f4 <mp3id3+0x7c8>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
				}
				if (databuf[i + 24] == 0x89 && databuf[i + 25] == 0x50 && databuf[i + 26] == 0x4e && databuf[i + 27] == 0x47)
 80055f0:	89fb      	ldrh	r3, [r7, #14]
 80055f2:	3318      	adds	r3, #24
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	4413      	add	r3, r2
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	2b89      	cmp	r3, #137	; 0x89
 80055fc:	d118      	bne.n	8005630 <mp3id3+0x704>
 80055fe:	89fb      	ldrh	r3, [r7, #14]
 8005600:	3319      	adds	r3, #25
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	4413      	add	r3, r2
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b50      	cmp	r3, #80	; 0x50
 800560a:	d111      	bne.n	8005630 <mp3id3+0x704>
 800560c:	89fb      	ldrh	r3, [r7, #14]
 800560e:	331a      	adds	r3, #26
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	4413      	add	r3, r2
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b4e      	cmp	r3, #78	; 0x4e
 8005618:	d10a      	bne.n	8005630 <mp3id3+0x704>
 800561a:	89fb      	ldrh	r3, [r7, #14]
 800561c:	331b      	adds	r3, #27
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	4413      	add	r3, r2
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b47      	cmp	r3, #71	; 0x47
 8005626:	d103      	bne.n	8005630 <mp3id3+0x704>
				{
					info.pic_type = 1; //PNG
 8005628:	4b32      	ldr	r3, [pc, #200]	; (80056f4 <mp3id3+0x7c8>)
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
				}
				img = 0;
 8005630:	2300      	movs	r3, #0
 8005632:	737b      	strb	r3, [r7, #13]
 8005634:	e002      	b.n	800563c <mp3id3+0x710>
			}
			else
				i++;
 8005636:	89fb      	ldrh	r3, [r7, #14]
 8005638:	3301      	adds	r3, #1
 800563a:	81fb      	strh	r3, [r7, #14]
			if (i >= READ_buff_size - 4) //找不到位置
 800563c:	89fb      	ldrh	r3, [r7, #14]
 800563e:	f640 72fb 	movw	r2, #4091	; 0xffb
 8005642:	4293      	cmp	r3, r2
 8005644:	d905      	bls.n	8005652 <mp3id3+0x726>
			{
				info.pic_type = 2;
 8005646:	4b2b      	ldr	r3, [pc, #172]	; (80056f4 <mp3id3+0x7c8>)
 8005648:	2202      	movs	r2, #2
 800564a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
				img = 0;
 800564e:	2300      	movs	r3, #0
 8005650:	737b      	strb	r3, [r7, #13]
		while (img)
 8005652:	7b7b      	ldrb	r3, [r7, #13]
 8005654:	2b00      	cmp	r3, #0
 8005656:	f47f af73 	bne.w	8005540 <mp3id3+0x614>
			}
		}
		if (info.pic_type == 0 && info.mode == 0)
 800565a:	4b26      	ldr	r3, [pc, #152]	; (80056f4 <mp3id3+0x7c8>)
 800565c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10f      	bne.n	8005684 <mp3id3+0x758>
 8005664:	4b23      	ldr	r3, [pc, #140]	; (80056f4 <mp3id3+0x7c8>)
 8005666:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10a      	bne.n	8005684 <mp3id3+0x758>
		{
			i += 14 + 20;
 800566e:	89fb      	ldrh	r3, [r7, #14]
 8005670:	3322      	adds	r3, #34	; 0x22
 8005672:	81fb      	strh	r3, [r7, #14]
			info.pic_local = i;
 8005674:	89fb      	ldrh	r3, [r7, #14]
 8005676:	4a1f      	ldr	r2, [pc, #124]	; (80056f4 <mp3id3+0x7c8>)
 8005678:	6413      	str	r3, [r2, #64]	; 0x40
			info.pic_show = 1;
 800567a:	4b1e      	ldr	r3, [pc, #120]	; (80056f4 <mp3id3+0x7c8>)
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8005682:	e025      	b.n	80056d0 <mp3id3+0x7a4>
		}
		else if (info.pic_type == 1 && info.mode == 0)
 8005684:	4b1b      	ldr	r3, [pc, #108]	; (80056f4 <mp3id3+0x7c8>)
 8005686:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800568a:	2b01      	cmp	r3, #1
 800568c:	d10f      	bne.n	80056ae <mp3id3+0x782>
 800568e:	4b19      	ldr	r3, [pc, #100]	; (80056f4 <mp3id3+0x7c8>)
 8005690:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <mp3id3+0x782>
		{
			i += 14 + 20;
 8005698:	89fb      	ldrh	r3, [r7, #14]
 800569a:	3322      	adds	r3, #34	; 0x22
 800569c:	81fb      	strh	r3, [r7, #14]
			info.pic_local = i;
 800569e:	89fb      	ldrh	r3, [r7, #14]
 80056a0:	4a14      	ldr	r2, [pc, #80]	; (80056f4 <mp3id3+0x7c8>)
 80056a2:	6413      	str	r3, [r2, #64]	; 0x40
			info.pic_show = 2;
 80056a4:	4b13      	ldr	r3, [pc, #76]	; (80056f4 <mp3id3+0x7c8>)
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 80056ac:	e010      	b.n	80056d0 <mp3id3+0x7a4>
		}
		else if (info.pic_type == 2 && info.mode == 0)
 80056ae:	4b11      	ldr	r3, [pc, #68]	; (80056f4 <mp3id3+0x7c8>)
 80056b0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d10b      	bne.n	80056d0 <mp3id3+0x7a4>
 80056b8:	4b0e      	ldr	r3, [pc, #56]	; (80056f4 <mp3id3+0x7c8>)
 80056ba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d106      	bne.n	80056d0 <mp3id3+0x7a4>
		{
			info.pic_local = 0;
 80056c2:	4b0c      	ldr	r3, [pc, #48]	; (80056f4 <mp3id3+0x7c8>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	641a      	str	r2, [r3, #64]	; 0x40
			info.pic_show = 3;
 80056c8:	4b0a      	ldr	r3, [pc, #40]	; (80056f4 <mp3id3+0x7c8>)
 80056ca:	2203      	movs	r2, #3
 80056cc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		}
		f_lseek(fmp3_pic, info.pic_local); //跳过头
 80056d0:	4b09      	ldr	r3, [pc, #36]	; (80056f8 <mp3id3+0x7cc>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a07      	ldr	r2, [pc, #28]	; (80056f4 <mp3id3+0x7c8>)
 80056d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80056d8:	4611      	mov	r1, r2
 80056da:	4618      	mov	r0, r3
 80056dc:	f007 ff55 	bl	800d58a <f_lseek>
	}
	free(databuf); //释放内存
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f00b ff5f 	bl	80115a4 <free>
 80056e6:	e002      	b.n	80056ee <mp3id3+0x7c2>
		return;
 80056e8:	bf00      	nop
 80056ea:	e000      	b.n	80056ee <mp3id3+0x7c2>
			return;
 80056ec:	bf00      	nop
}
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20001fdc 	.word	0x20001fdc
 80056f8:	200001dc 	.word	0x200001dc

080056fc <vs_reset>:
#include "../exfuns/exfuns.h"

mp3_info info; //定义变量管理结构体

void vs_reset(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
	VS_Restart_Play();	   //重启播放
 8005700:	f001 faec 	bl	8006cdc <VS_Restart_Play>
	VS_Reset_DecodeTime(); //复位解码时间
 8005704:	f001 fb7d 	bl	8006e02 <VS_Reset_DecodeTime>
}
 8005708:	bf00      	nop
 800570a:	bd80      	pop	{r7, pc}

0800570c <button_check>:

uint8_t button_check(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
	uint8_t temp;
	switch (KEY_Scan(0))
 8005712:	2000      	movs	r0, #0
 8005714:	f7fe ff36 	bl	8004584 <KEY_Scan>
 8005718:	4603      	mov	r3, r0
 800571a:	3b01      	subs	r3, #1
 800571c:	2b03      	cmp	r3, #3
 800571e:	d827      	bhi.n	8005770 <button_check+0x64>
 8005720:	a201      	add	r2, pc, #4	; (adr r2, 8005728 <button_check+0x1c>)
 8005722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005726:	bf00      	nop
 8005728:	08005739 	.word	0x08005739
 800572c:	08005741 	.word	0x08005741
 8005730:	08005749 	.word	0x08005749
 8005734:	08005771 	.word	0x08005771
	{
	case 1:
		temp = 1; //下一曲
 8005738:	2301      	movs	r3, #1
 800573a:	71fb      	strb	r3, [r7, #7]
		return temp;
 800573c:	79fb      	ldrb	r3, [r7, #7]
 800573e:	e018      	b.n	8005772 <button_check+0x66>
	case 2:
		temp = 5; //随机
 8005740:	2305      	movs	r3, #5
 8005742:	71fb      	strb	r3, [r7, #7]
		return temp;
 8005744:	79fb      	ldrb	r3, [r7, #7]
 8005746:	e014      	b.n	8005772 <button_check+0x66>
	case 3:
		if (vsset.mvol >= 200)
 8005748:	4b0c      	ldr	r3, [pc, #48]	; (800577c <button_check+0x70>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2bc7      	cmp	r3, #199	; 0xc7
 800574e:	d903      	bls.n	8005758 <button_check+0x4c>
			vsset.mvol = 100;
 8005750:	4b0a      	ldr	r3, [pc, #40]	; (800577c <button_check+0x70>)
 8005752:	2264      	movs	r2, #100	; 0x64
 8005754:	701a      	strb	r2, [r3, #0]
 8005756:	e005      	b.n	8005764 <button_check+0x58>
		else
			vsset.mvol = vsset.mvol + 10;
 8005758:	4b08      	ldr	r3, [pc, #32]	; (800577c <button_check+0x70>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	330a      	adds	r3, #10
 800575e:	b2da      	uxtb	r2, r3
 8005760:	4b06      	ldr	r3, [pc, #24]	; (800577c <button_check+0x70>)
 8005762:	701a      	strb	r2, [r3, #0]
		VS_Set_Vol(vsset.mvol);
 8005764:	4b05      	ldr	r3, [pc, #20]	; (800577c <button_check+0x70>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	4618      	mov	r0, r3
 800576a:	f001 fb69 	bl	8006e40 <VS_Set_Vol>
		break;
 800576e:	bf00      	nop
//			lcd_bit = 0;
//			TIM_SetCompare3(TIM3, 850);
//		}
		break;
	}
	return 0;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20000140 	.word	0x20000140

08005780 <mp3_get_tnum>:

//得到path路径下,目标文件的总个数
//path:路径
//返回值:总有效文件数
uint16_t mp3_get_tnum(uint8_t *path)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8005786:	af00      	add	r7, sp, #0
 8005788:	1d3b      	adds	r3, r7, #4
 800578a:	6018      	str	r0, [r3, #0]
	uint8_t res;
	uint16_t rval = 0;
 800578c:	2300      	movs	r3, #0
 800578e:	f8a7 3256 	strh.w	r3, [r7, #598]	; 0x256
	DIR tdir;		   //临时目录
	FILINFO tfileinfo; //临时文件信息
	uint8_t *fn;
	res = f_opendir(&tdir, (const TCHAR *)path); //打开目录
 8005792:	1d3b      	adds	r3, r7, #4
 8005794:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005798:	6819      	ldr	r1, [r3, #0]
 800579a:	4610      	mov	r0, r2
 800579c:	f008 f9c4 	bl	800db28 <f_opendir>
 80057a0:	4603      	mov	r3, r0
 80057a2:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
	tfileinfo.lfsize = _MAX_LFN * 2 + 1;		 //长文件名最大长度
 80057a6:	f107 0308 	add.w	r3, r7, #8
 80057aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80057ae:	61da      	str	r2, [r3, #28]
	tfileinfo.lfname = malloc(tfileinfo.lfsize); //为长文件缓存区分配内?
 80057b0:	f107 0308 	add.w	r3, r7, #8
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f00b feec 	bl	8011594 <malloc>
 80057bc:	4603      	mov	r3, r0
 80057be:	461a      	mov	r2, r3
 80057c0:	f107 0308 	add.w	r3, r7, #8
 80057c4:	619a      	str	r2, [r3, #24]
	if (res == FR_OK && tfileinfo.fname != NULL)
 80057c6:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d12b      	bne.n	8005826 <mp3_get_tnum+0xa6>
	{
		while (1) //查询总的有效文件数
		{
			res = f_readdir(&tdir, &tfileinfo); //读取目录下的一个文件
 80057ce:	f107 0208 	add.w	r2, r7, #8
 80057d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057d6:	4611      	mov	r1, r2
 80057d8:	4618      	mov	r0, r3
 80057da:	f008 fa5b 	bl	800dc94 <f_readdir>
 80057de:	4603      	mov	r3, r0
 80057e0:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
			if (res != FR_OK || tfileinfo.fname[0] == 0)
 80057e4:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d11c      	bne.n	8005826 <mp3_get_tnum+0xa6>
 80057ec:	f107 0308 	add.w	r3, r7, #8
 80057f0:	7a5b      	ldrb	r3, [r3, #9]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d017      	beq.n	8005826 <mp3_get_tnum+0xa6>
				break; //错误了/到末尾了,退出
			fn = (uint8_t *)(*tfileinfo.fname ? tfileinfo.fname : tfileinfo.fname);
 80057f6:	f107 0308 	add.w	r3, r7, #8
 80057fa:	3309      	adds	r3, #9
 80057fc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
			res = f_typetell(fn);
 8005800:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 8005804:	f7fb fd4a 	bl	800129c <f_typetell>
 8005808:	4603      	mov	r3, r0
 800580a:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
			if ((res & 0XF0) == 0X40) //取高四位,看看是不是音乐文件
 800580e:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8005812:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005816:	2b40      	cmp	r3, #64	; 0x40
 8005818:	d1d9      	bne.n	80057ce <mp3_get_tnum+0x4e>
			{
				rval++; //有效文件数增加1
 800581a:	f8b7 3256 	ldrh.w	r3, [r7, #598]	; 0x256
 800581e:	3301      	adds	r3, #1
 8005820:	f8a7 3256 	strh.w	r3, [r7, #598]	; 0x256
			res = f_readdir(&tdir, &tfileinfo); //读取目录下的一个文件
 8005824:	e7d3      	b.n	80057ce <mp3_get_tnum+0x4e>
			}
		}
	}
	free(tfileinfo.lfname);
 8005826:	f107 0308 	add.w	r3, r7, #8
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	4618      	mov	r0, r3
 800582e:	f00b feb9 	bl	80115a4 <free>
	return rval;
 8005832:	f8b7 3256 	ldrh.w	r3, [r7, #598]	; 0x256
}
 8005836:	4618      	mov	r0, r3
 8005838:	f507 7716 	add.w	r7, r7, #600	; 0x258
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <mp3_play_ready>:

void mp3_play_ready()
{
 8005840:	b580      	push	{r7, lr}
 8005842:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8005846:	af04      	add	r7, sp, #16
	uint8_t res;
	DIR mp3dir;	 //目录
	uint8_t *fn; //长文件名
	uint16_t temp;

	lcd_bit = 1;
 8005848:	4b77      	ldr	r3, [pc, #476]	; (8005a28 <mp3_play_ready+0x1e8>)
 800584a:	2201      	movs	r2, #1
 800584c:	701a      	strb	r2, [r3, #0]
	info.pic_show = 0;
 800584e:	4b77      	ldr	r3, [pc, #476]	; (8005a2c <mp3_play_ready+0x1ec>)
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

	Show_Str(30, 20, 240, 16, "正在读取文件", 16, 0);
 8005856:	2300      	movs	r3, #0
 8005858:	9302      	str	r3, [sp, #8]
 800585a:	2310      	movs	r3, #16
 800585c:	9301      	str	r3, [sp, #4]
 800585e:	4b74      	ldr	r3, [pc, #464]	; (8005a30 <mp3_play_ready+0x1f0>)
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	2310      	movs	r3, #16
 8005864:	22f0      	movs	r2, #240	; 0xf0
 8005866:	2114      	movs	r1, #20
 8005868:	201e      	movs	r0, #30
 800586a:	f7fc f92d 	bl	8001ac8 <Show_Str>
	while (f_opendir(&mp3dir, "0:/MUSIC")) //打开音乐文件夹
 800586e:	e00b      	b.n	8005888 <mp3_play_ready+0x48>
	{
		Show_Str(30, 20, 240, 16, "文件夹错误!", 16, 0);
 8005870:	2300      	movs	r3, #0
 8005872:	9302      	str	r3, [sp, #8]
 8005874:	2310      	movs	r3, #16
 8005876:	9301      	str	r3, [sp, #4]
 8005878:	4b6e      	ldr	r3, [pc, #440]	; (8005a34 <mp3_play_ready+0x1f4>)
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	2310      	movs	r3, #16
 800587e:	22f0      	movs	r2, #240	; 0xf0
 8005880:	2114      	movs	r1, #20
 8005882:	201e      	movs	r0, #30
 8005884:	f7fc f920 	bl	8001ac8 <Show_Str>
	while (f_opendir(&mp3dir, "0:/MUSIC")) //打开音乐文件夹
 8005888:	463b      	mov	r3, r7
 800588a:	496b      	ldr	r1, [pc, #428]	; (8005a38 <mp3_play_ready+0x1f8>)
 800588c:	4618      	mov	r0, r3
 800588e:	f008 f94b 	bl	800db28 <f_opendir>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1eb      	bne.n	8005870 <mp3_play_ready+0x30>
	}
	info.totmp3num = mp3_get_tnum("0:/MUSIC"); //得到总有效文件数
 8005898:	4867      	ldr	r0, [pc, #412]	; (8005a38 <mp3_play_ready+0x1f8>)
 800589a:	f7ff ff71 	bl	8005780 <mp3_get_tnum>
 800589e:	4603      	mov	r3, r0
 80058a0:	461a      	mov	r2, r3
 80058a2:	4b62      	ldr	r3, [pc, #392]	; (8005a2c <mp3_play_ready+0x1ec>)
 80058a4:	809a      	strh	r2, [r3, #4]
	while (info.totmp3num == 0)			   //音乐文件总数为0
 80058a6:	e00b      	b.n	80058c0 <mp3_play_ready+0x80>
	{
		Show_Str(30, 20, 240, 16, "没有文件!", 16, 0);
 80058a8:	2300      	movs	r3, #0
 80058aa:	9302      	str	r3, [sp, #8]
 80058ac:	2310      	movs	r3, #16
 80058ae:	9301      	str	r3, [sp, #4]
 80058b0:	4b62      	ldr	r3, [pc, #392]	; (8005a3c <mp3_play_ready+0x1fc>)
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	2310      	movs	r3, #16
 80058b6:	22f0      	movs	r2, #240	; 0xf0
 80058b8:	2114      	movs	r1, #20
 80058ba:	201e      	movs	r0, #30
 80058bc:	f7fc f904 	bl	8001ac8 <Show_Str>
	while (info.totmp3num == 0)			   //音乐文件总数为0
 80058c0:	4b5a      	ldr	r3, [pc, #360]	; (8005a2c <mp3_play_ready+0x1ec>)
 80058c2:	889b      	ldrh	r3, [r3, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0ef      	beq.n	80058a8 <mp3_play_ready+0x68>
	}
	info.mp3fileinfo.lfsize = _MAX_LFN * 2 + 1;					 //长文件名最大长度
 80058c8:	4b58      	ldr	r3, [pc, #352]	; (8005a2c <mp3_play_ready+0x1ec>)
 80058ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80058ce:	625a      	str	r2, [r3, #36]	; 0x24
	info.mp3fileinfo.lfname = malloc(info.mp3fileinfo.lfsize); //为长文件缓存区分配内存
 80058d0:	4b56      	ldr	r3, [pc, #344]	; (8005a2c <mp3_play_ready+0x1ec>)
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	4618      	mov	r0, r3
 80058d6:	f00b fe5d 	bl	8011594 <malloc>
 80058da:	4603      	mov	r3, r0
 80058dc:	461a      	mov	r2, r3
 80058de:	4b53      	ldr	r3, [pc, #332]	; (8005a2c <mp3_play_ready+0x1ec>)
 80058e0:	621a      	str	r2, [r3, #32]
	info.pname = malloc(info.mp3fileinfo.lfsize);				 //为带路径的文件名分配内存
 80058e2:	4b52      	ldr	r3, [pc, #328]	; (8005a2c <mp3_play_ready+0x1ec>)
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	4618      	mov	r0, r3
 80058e8:	f00b fe54 	bl	8011594 <malloc>
 80058ec:	4603      	mov	r3, r0
 80058ee:	461a      	mov	r2, r3
 80058f0:	4b4e      	ldr	r3, [pc, #312]	; (8005a2c <mp3_play_ready+0x1ec>)
 80058f2:	601a      	str	r2, [r3, #0]
	info.mp3indextbl = malloc(2 * info.totmp3num);			 //申请2*totmp3num个字节的内存,用于存放音乐文件索引
 80058f4:	4b4d      	ldr	r3, [pc, #308]	; (8005a2c <mp3_play_ready+0x1ec>)
 80058f6:	889b      	ldrh	r3, [r3, #4]
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	4618      	mov	r0, r3
 80058fc:	f00b fe4a 	bl	8011594 <malloc>
 8005900:	4603      	mov	r3, r0
 8005902:	461a      	mov	r2, r3
 8005904:	4b49      	ldr	r3, [pc, #292]	; (8005a2c <mp3_play_ready+0x1ec>)
 8005906:	629a      	str	r2, [r3, #40]	; 0x28
	info.fmp3 = (FIL *)malloc(sizeof(FIL));					 //申请内存
 8005908:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800590c:	f00b fe42 	bl	8011594 <malloc>
 8005910:	4603      	mov	r3, r0
 8005912:	461a      	mov	r2, r3
 8005914:	4b45      	ldr	r3, [pc, #276]	; (8005a2c <mp3_play_ready+0x1ec>)
 8005916:	631a      	str	r2, [r3, #48]	; 0x30
	fmp3_pic = (FIL *)malloc(sizeof(FIL));					 //申请内存
 8005918:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800591c:	f00b fe3a 	bl	8011594 <malloc>
 8005920:	4603      	mov	r3, r0
 8005922:	461a      	mov	r2, r3
 8005924:	4b46      	ldr	r3, [pc, #280]	; (8005a40 <mp3_play_ready+0x200>)
 8005926:	601a      	str	r2, [r3, #0]
	while (info.mp3fileinfo.lfname == NULL || info.pname == NULL ||
 8005928:	e00b      	b.n	8005942 <mp3_play_ready+0x102>
		   info.mp3indextbl == NULL || info.fmp3 == NULL) //内存分配出错
	{
		Show_Str(30, 20, 240, 16, "内存分配失败!", 16, 0);
 800592a:	2300      	movs	r3, #0
 800592c:	9302      	str	r3, [sp, #8]
 800592e:	2310      	movs	r3, #16
 8005930:	9301      	str	r3, [sp, #4]
 8005932:	4b44      	ldr	r3, [pc, #272]	; (8005a44 <mp3_play_ready+0x204>)
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	2310      	movs	r3, #16
 8005938:	22f0      	movs	r2, #240	; 0xf0
 800593a:	2114      	movs	r1, #20
 800593c:	201e      	movs	r0, #30
 800593e:	f7fc f8c3 	bl	8001ac8 <Show_Str>
	while (info.mp3fileinfo.lfname == NULL || info.pname == NULL ||
 8005942:	4b3a      	ldr	r3, [pc, #232]	; (8005a2c <mp3_play_ready+0x1ec>)
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0ef      	beq.n	800592a <mp3_play_ready+0xea>
 800594a:	4b38      	ldr	r3, [pc, #224]	; (8005a2c <mp3_play_ready+0x1ec>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0eb      	beq.n	800592a <mp3_play_ready+0xea>
		   info.mp3indextbl == NULL || info.fmp3 == NULL) //内存分配出错
 8005952:	4b36      	ldr	r3, [pc, #216]	; (8005a2c <mp3_play_ready+0x1ec>)
 8005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	while (info.mp3fileinfo.lfname == NULL || info.pname == NULL ||
 8005956:	2b00      	cmp	r3, #0
 8005958:	d0e7      	beq.n	800592a <mp3_play_ready+0xea>
		   info.mp3indextbl == NULL || info.fmp3 == NULL) //内存分配出错
 800595a:	4b34      	ldr	r3, [pc, #208]	; (8005a2c <mp3_play_ready+0x1ec>)
 800595c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0e3      	beq.n	800592a <mp3_play_ready+0xea>
	}
	//记录索引
	res = f_opendir(&mp3dir, "0:/MUSIC"); //打开目录
 8005962:	463b      	mov	r3, r7
 8005964:	4934      	ldr	r1, [pc, #208]	; (8005a38 <mp3_play_ready+0x1f8>)
 8005966:	4618      	mov	r0, r3
 8005968:	f008 f8de 	bl	800db28 <f_opendir>
 800596c:	4603      	mov	r3, r0
 800596e:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
	if (res == FR_OK)
 8005972:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 8005976:	2b00      	cmp	r3, #0
 8005978:	d13f      	bne.n	80059fa <mp3_play_ready+0x1ba>
	{
		info.curindex = 0; //当前索引为0
 800597a:	4b2c      	ldr	r3, [pc, #176]	; (8005a2c <mp3_play_ready+0x1ec>)
 800597c:	2200      	movs	r2, #0
 800597e:	80da      	strh	r2, [r3, #6]
		while (1)		   //全部查询一遍
		{
			temp = mp3dir.index;						 //记录当前index
 8005980:	463b      	mov	r3, r7
 8005982:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8005986:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
			res = f_readdir(&mp3dir, &info.mp3fileinfo); //读取目录下的一个文件
 800598a:	463b      	mov	r3, r7
 800598c:	492e      	ldr	r1, [pc, #184]	; (8005a48 <mp3_play_ready+0x208>)
 800598e:	4618      	mov	r0, r3
 8005990:	f008 f980 	bl	800dc94 <f_readdir>
 8005994:	4603      	mov	r3, r0
 8005996:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
			if (res != FR_OK || info.mp3fileinfo.fname[0] == 0)
 800599a:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d12b      	bne.n	80059fa <mp3_play_ready+0x1ba>
 80059a2:	4b22      	ldr	r3, [pc, #136]	; (8005a2c <mp3_play_ready+0x1ec>)
 80059a4:	7c5b      	ldrb	r3, [r3, #17]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d027      	beq.n	80059fa <mp3_play_ready+0x1ba>
				break; //错误了/到末尾了,退出
			fn = (uint8_t *)(*info.mp3fileinfo.lfname ? info.mp3fileinfo.lfname : info.mp3fileinfo.fname);
 80059aa:	4b20      	ldr	r3, [pc, #128]	; (8005a2c <mp3_play_ready+0x1ec>)
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <mp3_play_ready+0x17a>
 80059b4:	4b1d      	ldr	r3, [pc, #116]	; (8005a2c <mp3_play_ready+0x1ec>)
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	e000      	b.n	80059bc <mp3_play_ready+0x17c>
 80059ba:	4b24      	ldr	r3, [pc, #144]	; (8005a4c <mp3_play_ready+0x20c>)
 80059bc:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
			res = f_typetell(fn);
 80059c0:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 80059c4:	f7fb fc6a 	bl	800129c <f_typetell>
 80059c8:	4603      	mov	r3, r0
 80059ca:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
			if ((res & 0XF0) == 0X40) //取高四位,看看是不是音乐文件
 80059ce:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 80059d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059d6:	2b40      	cmp	r3, #64	; 0x40
 80059d8:	d1d2      	bne.n	8005980 <mp3_play_ready+0x140>
			{
				info.mp3indextbl[info.curindex] = temp; //记录索引
 80059da:	4b14      	ldr	r3, [pc, #80]	; (8005a2c <mp3_play_ready+0x1ec>)
 80059dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059de:	4b13      	ldr	r3, [pc, #76]	; (8005a2c <mp3_play_ready+0x1ec>)
 80059e0:	88db      	ldrh	r3, [r3, #6]
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	4413      	add	r3, r2
 80059e6:	f8b7 222c 	ldrh.w	r2, [r7, #556]	; 0x22c
 80059ea:	801a      	strh	r2, [r3, #0]
				info.curindex++;
 80059ec:	4b0f      	ldr	r3, [pc, #60]	; (8005a2c <mp3_play_ready+0x1ec>)
 80059ee:	88db      	ldrh	r3, [r3, #6]
 80059f0:	3301      	adds	r3, #1
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	4b0d      	ldr	r3, [pc, #52]	; (8005a2c <mp3_play_ready+0x1ec>)
 80059f6:	80da      	strh	r2, [r3, #6]
			temp = mp3dir.index;						 //记录当前index
 80059f8:	e7c2      	b.n	8005980 <mp3_play_ready+0x140>
			}
		}
	}
	VS_Sine_Test();
 80059fa:	f000 ff73 	bl	80068e4 <VS_Sine_Test>
	vs_reset();
 80059fe:	f7ff fe7d 	bl	80056fc <vs_reset>
	VS_Set_Bass(10, 15, 10, 0);
 8005a02:	2300      	movs	r3, #0
 8005a04:	220a      	movs	r2, #10
 8005a06:	210f      	movs	r1, #15
 8005a08:	200a      	movs	r0, #10
 8005a0a:	f001 fa3c 	bl	8006e86 <VS_Set_Bass>
	read_data();
 8005a0e:	f7fb fb73 	bl	80010f8 <read_data>
	VS_SPI_SpeedHigh(); //高速
 8005a12:	f000 fecd 	bl	80067b0 <VS_SPI_SpeedHigh>
	LCD_Clear(BLACK);
 8005a16:	2000      	movs	r0, #0
 8005a18:	f7fe feb0 	bl	800477c <LCD_Clear>
}
 8005a1c:	bf00      	nop
 8005a1e:	f507 770c 	add.w	r7, r7, #560	; 0x230
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	200001db 	.word	0x200001db
 8005a2c:	20001fdc 	.word	0x20001fdc
 8005a30:	08012620 	.word	0x08012620
 8005a34:	08012634 	.word	0x08012634
 8005a38:	08012648 	.word	0x08012648
 8005a3c:	08012654 	.word	0x08012654
 8005a40:	200001dc 	.word	0x200001dc
 8005a44:	08012664 	.word	0x08012664
 8005a48:	20001fe4 	.word	0x20001fe4
 8005a4c:	20001fed 	.word	0x20001fed

08005a50 <mp3_play>:

//播放音乐
void mp3_play(void *pdata)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8005a56:	af04      	add	r7, sp, #16
 8005a58:	1d3b      	adds	r3, r7, #4
 8005a5a:	6018      	str	r0, [r3, #0]
	uint8_t res;
	DIR mp3dir; //目录
	uint8_t *databuf;
	uint8_t rval = 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	uint16_t i = 0;
 8005a62:	2300      	movs	r3, #0
 8005a64:	f8a7 323c 	strh.w	r3, [r7, #572]	; 0x23c
	static uint8_t pause = 0; //暂停标志

	databuf = (uint8_t *)malloc(MP3_BUFF_SIZE); //开辟4096字节的内存区域
 8005a68:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005a6c:	f00b fd92 	bl	8011594 <malloc>
 8005a70:	4603      	mov	r3, r0
 8005a72:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
	if (databuf == NULL)
 8005a76:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d102      	bne.n	8005a84 <mp3_play+0x34>
		rval = 0XFF;	 //内存申请失败.
 8005a7e:	23ff      	movs	r3, #255	; 0xff
 8005a80:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	vPortEnterCritical(); //进入临界区
 8005a84:	f00b f98a 	bl	8010d9c <vPortEnterCritical>
	mp3_play_ready();
 8005a88:	f7ff feda 	bl	8005840 <mp3_play_ready>
	res = f_opendir(&mp3dir, (const TCHAR *)"0:/MUSIC"); //打开目录
 8005a8c:	f107 030c 	add.w	r3, r7, #12
 8005a90:	49b6      	ldr	r1, [pc, #728]	; (8005d6c <mp3_play+0x31c>)
 8005a92:	4618      	mov	r0, r3
 8005a94:	f008 f848 	bl	800db28 <f_opendir>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	vPortExitCritical();
 8005a9e:	f00b f9ad 	bl	8010dfc <vPortExitCritical>
	while (1) //打开成功
	{
		vPortEnterCritical(); //进入临界区
 8005aa2:	f00b f97b 	bl	8010d9c <vPortEnterCritical>
		LCD_Fill(0, 0, pic_show_size,
 8005aa6:	4bb2      	ldr	r3, [pc, #712]	; (8005d70 <mp3_play+0x320>)
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ab0:	22f0      	movs	r2, #240	; 0xf0
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	f7fe fe8f 	bl	80047d8 <LCD_Fill>
				 16 + pic_show_size, BACK_COLOR);
		dir_sdi(&mp3dir, info.mp3indextbl[info.curindex]); //改变当前目录索引
 8005aba:	4bae      	ldr	r3, [pc, #696]	; (8005d74 <mp3_play+0x324>)
 8005abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005abe:	4bad      	ldr	r3, [pc, #692]	; (8005d74 <mp3_play+0x324>)
 8005ac0:	88db      	ldrh	r3, [r3, #6]
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	4413      	add	r3, r2
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	461a      	mov	r2, r3
 8005aca:	f107 030c 	add.w	r3, r7, #12
 8005ace:	4611      	mov	r1, r2
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f005 fae5 	bl	800b0a0 <dir_sdi>
		res = f_readdir(&mp3dir, &info.mp3fileinfo);	   //读取目录下的一个文件
 8005ad6:	f107 030c 	add.w	r3, r7, #12
 8005ada:	49a7      	ldr	r1, [pc, #668]	; (8005d78 <mp3_play+0x328>)
 8005adc:	4618      	mov	r0, r3
 8005ade:	f008 f8d9 	bl	800dc94 <f_readdir>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
		if (res != FR_OK || info.mp3fileinfo.fname[0] == 0)
 8005ae8:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d103      	bne.n	8005af8 <mp3_play+0xa8>
 8005af0:	4ba0      	ldr	r3, [pc, #640]	; (8005d74 <mp3_play+0x324>)
 8005af2:	7c5b      	ldrb	r3, [r3, #17]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d105      	bne.n	8005b04 <mp3_play+0xb4>
		{
			rval = KEY0_PRES; //错误了/到末尾了,退出
 8005af8:	2301      	movs	r3, #1
 8005afa:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
			vPortExitCritical();
 8005afe:	f00b f97d 	bl	8010dfc <vPortExitCritical>
 8005b02:	e0e4      	b.n	8005cce <mp3_play+0x27e>
		}
		else
		{
			info.fn = (uint8_t *)(*info.mp3fileinfo.lfname ? info.mp3fileinfo.lfname : info.mp3fileinfo.fname);
 8005b04:	4b9b      	ldr	r3, [pc, #620]	; (8005d74 <mp3_play+0x324>)
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <mp3_play+0xc4>
 8005b0e:	4b99      	ldr	r3, [pc, #612]	; (8005d74 <mp3_play+0x324>)
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	e000      	b.n	8005b16 <mp3_play+0xc6>
 8005b14:	4b99      	ldr	r3, [pc, #612]	; (8005d7c <mp3_play+0x32c>)
 8005b16:	4a97      	ldr	r2, [pc, #604]	; (8005d74 <mp3_play+0x324>)
 8005b18:	6353      	str	r3, [r2, #52]	; 0x34
			strcpy((char *)info.pname, "0:/MUSIC/");		   //复制路径(目录)
 8005b1a:	4b96      	ldr	r3, [pc, #600]	; (8005d74 <mp3_play+0x324>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4998      	ldr	r1, [pc, #608]	; (8005d80 <mp3_play+0x330>)
 8005b20:	461a      	mov	r2, r3
 8005b22:	460b      	mov	r3, r1
 8005b24:	cb03      	ldmia	r3!, {r0, r1}
 8005b26:	6010      	str	r0, [r2, #0]
 8005b28:	6051      	str	r1, [r2, #4]
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	8113      	strh	r3, [r2, #8]
			strcat((char *)info.pname, (const char *)info.fn); //将文件名接在后面
 8005b2e:	4b91      	ldr	r3, [pc, #580]	; (8005d74 <mp3_play+0x324>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a90      	ldr	r2, [pc, #576]	; (8005d74 <mp3_play+0x324>)
 8005b34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b36:	4611      	mov	r1, r2
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f00b ff22 	bl	8011982 <strcat>
			info.size = 1;
 8005b3e:	4b8d      	ldr	r3, [pc, #564]	; (8005d74 <mp3_play+0x324>)
 8005b40:	2201      	movs	r2, #1
 8005b42:	62da      	str	r2, [r3, #44]	; 0x2c
			res = f_open(info.fmp3, (const TCHAR *)info.pname, FA_READ);
 8005b44:	4b8b      	ldr	r3, [pc, #556]	; (8005d74 <mp3_play+0x324>)
 8005b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b48:	4a8a      	ldr	r2, [pc, #552]	; (8005d74 <mp3_play+0x324>)
 8005b4a:	6811      	ldr	r1, [r2, #0]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f007 f852 	bl	800cbf8 <f_open>
 8005b54:	4603      	mov	r3, r0
 8005b56:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
			f_open(fmp3_pic, (const TCHAR *)info.pname, FA_READ);
 8005b5a:	4b8a      	ldr	r3, [pc, #552]	; (8005d84 <mp3_play+0x334>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a85      	ldr	r2, [pc, #532]	; (8005d74 <mp3_play+0x324>)
 8005b60:	6811      	ldr	r1, [r2, #0]
 8005b62:	2201      	movs	r2, #1
 8005b64:	4618      	mov	r0, r3
 8005b66:	f007 f847 	bl	800cbf8 <f_open>
			if (res != FR_OK)
 8005b6a:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d01e      	beq.n	8005bb0 <mp3_play+0x160>
			{
				Show_Str(30, 120, 240, 16, "文夹错误!", 16, 0);
 8005b72:	2300      	movs	r3, #0
 8005b74:	9302      	str	r3, [sp, #8]
 8005b76:	2310      	movs	r3, #16
 8005b78:	9301      	str	r3, [sp, #4]
 8005b7a:	4b83      	ldr	r3, [pc, #524]	; (8005d88 <mp3_play+0x338>)
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	2310      	movs	r3, #16
 8005b80:	22f0      	movs	r2, #240	; 0xf0
 8005b82:	2178      	movs	r1, #120	; 0x78
 8005b84:	201e      	movs	r0, #30
 8005b86:	f7fb ff9f 	bl	8001ac8 <Show_Str>
				Show_Str(0, 140, 240, 16, info.fn, 16, 0);
 8005b8a:	4b7a      	ldr	r3, [pc, #488]	; (8005d74 <mp3_play+0x324>)
 8005b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b8e:	2200      	movs	r2, #0
 8005b90:	9202      	str	r2, [sp, #8]
 8005b92:	2210      	movs	r2, #16
 8005b94:	9201      	str	r2, [sp, #4]
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	2310      	movs	r3, #16
 8005b9a:	22f0      	movs	r2, #240	; 0xf0
 8005b9c:	218c      	movs	r1, #140	; 0x8c
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	f7fb ff92 	bl	8001ac8 <Show_Str>
				rval = KEY0_PRES;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
				vPortExitCritical();
 8005baa:	f00b f927 	bl	8010dfc <vPortExitCritical>
 8005bae:	e087      	b.n	8005cc0 <mp3_play+0x270>
			}
			else
			{
				mp3id3();
 8005bb0:	f7ff f9bc 	bl	8004f2c <mp3id3>
				LCD_Fill(0, 0, 240, (240 + 16 * 3) - 1, BLACK);
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	f240 131f 	movw	r3, #287	; 0x11f
 8005bbc:	22f0      	movs	r2, #240	; 0xf0
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	f7fe fe09 	bl	80047d8 <LCD_Fill>
				show_all(1); //显示一次歌名
 8005bc6:	2001      	movs	r0, #1
 8005bc8:	f000 fa6c 	bl	80060a4 <show_all>
				show_all(3); //显示歌曲信息
 8005bcc:	2003      	movs	r0, #3
 8005bce:	f000 fa69 	bl	80060a4 <show_all>
				f_lseek(info.fmp3, info.size);
 8005bd2:	4b68      	ldr	r3, [pc, #416]	; (8005d74 <mp3_play+0x324>)
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd6:	4a67      	ldr	r2, [pc, #412]	; (8005d74 <mp3_play+0x324>)
 8005bd8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005bda:	4611      	mov	r1, r2
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f007 fcd4 	bl	800d58a <f_lseek>
				rval = 0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
				vPortExitCritical();
 8005be8:	f00b f908 	bl	8010dfc <vPortExitCritical>
				while (rval == 0)
 8005bec:	e064      	b.n	8005cb8 <mp3_play+0x268>
				{
					vPortEnterCritical();										  //进入临界区
 8005bee:	f00b f8d5 	bl	8010d9c <vPortEnterCritical>
					res = f_read(info.fmp3, databuf, MP3_BUFF_SIZE, (UINT *)&br); //读出数据流
 8005bf2:	4b60      	ldr	r3, [pc, #384]	; (8005d74 <mp3_play+0x324>)
 8005bf4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005bf6:	4b65      	ldr	r3, [pc, #404]	; (8005d8c <mp3_play+0x33c>)
 8005bf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bfc:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8005c00:	f007 fa15 	bl	800d02e <f_read>
 8005c04:	4603      	mov	r3, r0
 8005c06:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
					vPortExitCritical();
 8005c0a:	f00b f8f7 	bl	8010dfc <vPortExitCritical>
					i = 0;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	f8a7 323c 	strh.w	r3, [r7, #572]	; 0x23c
					do //主播放循环
					{
						if (info.mode == 0)
 8005c14:	4b57      	ldr	r3, [pc, #348]	; (8005d74 <mp3_play+0x324>)
 8005c16:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d117      	bne.n	8005c4e <mp3_play+0x1fe>
						{
							rval = button_check();
 8005c1e:	f7ff fd75 	bl	800570c <button_check>
 8005c22:	4603      	mov	r3, r0
 8005c24:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
							if (rval == 8)
 8005c28:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8005c2c:	2b08      	cmp	r3, #8
 8005c2e:	d10a      	bne.n	8005c46 <mp3_play+0x1f6>
								pause = !pause;
 8005c30:	4b57      	ldr	r3, [pc, #348]	; (8005d90 <mp3_play+0x340>)
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	bf0c      	ite	eq
 8005c38:	2301      	moveq	r3, #1
 8005c3a:	2300      	movne	r3, #0
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	461a      	mov	r2, r3
 8005c40:	4b53      	ldr	r3, [pc, #332]	; (8005d90 <mp3_play+0x340>)
 8005c42:	701a      	strb	r2, [r3, #0]
 8005c44:	e003      	b.n	8005c4e <mp3_play+0x1fe>
							else if (rval != 0)
 8005c46:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d127      	bne.n	8005c9e <mp3_play+0x24e>
								break;
						}
						if ((VS_Send_MusicData(databuf + i) == 0) && (pause == 0)) //给VS10XX发送音频数据
 8005c4e:	f8b7 323c 	ldrh.w	r3, [r7, #572]	; 0x23c
 8005c52:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8005c56:	4413      	add	r3, r2
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f001 f815 	bl	8006c88 <VS_Send_MusicData>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d109      	bne.n	8005c78 <mp3_play+0x228>
 8005c64:	4b4a      	ldr	r3, [pc, #296]	; (8005d90 <mp3_play+0x340>)
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d105      	bne.n	8005c78 <mp3_play+0x228>
							i += 32;
 8005c6c:	f8b7 323c 	ldrh.w	r3, [r7, #572]	; 0x23c
 8005c70:	3320      	adds	r3, #32
 8005c72:	f8a7 323c 	strh.w	r3, [r7, #572]	; 0x23c
 8005c76:	e00c      	b.n	8005c92 <mp3_play+0x242>
						else
						{
							vPortEnterCritical();
 8005c78:	f00b f890 	bl	8010d9c <vPortEnterCritical>
							show_all(3);
 8005c7c:	2003      	movs	r0, #3
 8005c7e:	f000 fa11 	bl	80060a4 <show_all>
							vPortExitCritical();
 8005c82:	f00b f8bb 	bl	8010dfc <vPortExitCritical>
							if (data_save_bit == 1)
 8005c86:	4b43      	ldr	r3, [pc, #268]	; (8005d94 <mp3_play+0x344>)
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d101      	bne.n	8005c92 <mp3_play+0x242>
								write_data();
 8005c8e:	f7fb fa89 	bl	80011a4 <write_data>
						}
					} while (i < MP3_BUFF_SIZE); //循环发送4096个字节
 8005c92:	f8b7 323c 	ldrh.w	r3, [r7, #572]	; 0x23c
 8005c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c9a:	d3bb      	bcc.n	8005c14 <mp3_play+0x1c4>
 8005c9c:	e000      	b.n	8005ca0 <mp3_play+0x250>
								break;
 8005c9e:	bf00      	nop
					if (br != MP3_BUFF_SIZE || res != 0)
 8005ca0:	4b3a      	ldr	r3, [pc, #232]	; (8005d8c <mp3_play+0x33c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca8:	d103      	bne.n	8005cb2 <mp3_play+0x262>
 8005caa:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <mp3_play+0x268>
						rval = KEY0_PRES;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
				while (rval == 0)
 8005cb8:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d096      	beq.n	8005bee <mp3_play+0x19e>
				}
			}
			f_close(info.fmp3);
 8005cc0:	4b2c      	ldr	r3, [pc, #176]	; (8005d74 <mp3_play+0x324>)
 8005cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f007 fc30 	bl	800d52a <f_close>
			vs_reset();
 8005cca:	f7ff fd17 	bl	80056fc <vs_reset>
		}
		if (write_bit == 0x00 && info.mode == 0)
 8005cce:	4b32      	ldr	r3, [pc, #200]	; (8005d98 <mp3_play+0x348>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10c      	bne.n	8005cf0 <mp3_play+0x2a0>
 8005cd6:	4b27      	ldr	r3, [pc, #156]	; (8005d74 <mp3_play+0x324>)
 8005cd8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d107      	bne.n	8005cf0 <mp3_play+0x2a0>
		{
			write_bit = 0x10;
 8005ce0:	4b2d      	ldr	r3, [pc, #180]	; (8005d98 <mp3_play+0x348>)
 8005ce2:	2210      	movs	r2, #16
 8005ce4:	701a      	strb	r2, [r3, #0]
			while (write_bit == 0x20)
 8005ce6:	bf00      	nop
 8005ce8:	4b2b      	ldr	r3, [pc, #172]	; (8005d98 <mp3_play+0x348>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	d0fb      	beq.n	8005ce8 <mp3_play+0x298>
				;
		}
		switch (rval)
 8005cf0:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8005cf4:	2b05      	cmp	r3, #5
 8005cf6:	d051      	beq.n	8005d9c <mp3_play+0x34c>
 8005cf8:	2b05      	cmp	r3, #5
 8005cfa:	dc6d      	bgt.n	8005dd8 <mp3_play+0x388>
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d01c      	beq.n	8005d3a <mp3_play+0x2ea>
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d169      	bne.n	8005dd8 <mp3_play+0x388>
		{
		case KEY1_PRES:
			if (info.curindex)
 8005d04:	4b1b      	ldr	r3, [pc, #108]	; (8005d74 <mp3_play+0x324>)
 8005d06:	88db      	ldrh	r3, [r3, #6]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d006      	beq.n	8005d1a <mp3_play+0x2ca>
				info.curindex--;
 8005d0c:	4b19      	ldr	r3, [pc, #100]	; (8005d74 <mp3_play+0x324>)
 8005d0e:	88db      	ldrh	r3, [r3, #6]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	4b17      	ldr	r3, [pc, #92]	; (8005d74 <mp3_play+0x324>)
 8005d16:	80da      	strh	r2, [r3, #6]
 8005d18:	e005      	b.n	8005d26 <mp3_play+0x2d6>
			else
				info.curindex = info.totmp3num - 1;
 8005d1a:	4b16      	ldr	r3, [pc, #88]	; (8005d74 <mp3_play+0x324>)
 8005d1c:	889b      	ldrh	r3, [r3, #4]
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	4b14      	ldr	r3, [pc, #80]	; (8005d74 <mp3_play+0x324>)
 8005d24:	80da      	strh	r2, [r3, #6]
			LCD_Fill(0, 0, 240, 240 + 17 * 3, BLACK);
 8005d26:	2300      	movs	r3, #0
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	f240 1323 	movw	r3, #291	; 0x123
 8005d2e:	22f0      	movs	r2, #240	; 0xf0
 8005d30:	2100      	movs	r1, #0
 8005d32:	2000      	movs	r0, #0
 8005d34:	f7fe fd50 	bl	80047d8 <LCD_Fill>
			break;
 8005d38:	e060      	b.n	8005dfc <mp3_play+0x3ac>
		case KEY0_PRES:
			info.curindex++;
 8005d3a:	4b0e      	ldr	r3, [pc, #56]	; (8005d74 <mp3_play+0x324>)
 8005d3c:	88db      	ldrh	r3, [r3, #6]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	4b0c      	ldr	r3, [pc, #48]	; (8005d74 <mp3_play+0x324>)
 8005d44:	80da      	strh	r2, [r3, #6]
			if (info.curindex >= info.totmp3num)
 8005d46:	4b0b      	ldr	r3, [pc, #44]	; (8005d74 <mp3_play+0x324>)
 8005d48:	88da      	ldrh	r2, [r3, #6]
 8005d4a:	4b0a      	ldr	r3, [pc, #40]	; (8005d74 <mp3_play+0x324>)
 8005d4c:	889b      	ldrh	r3, [r3, #4]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d302      	bcc.n	8005d58 <mp3_play+0x308>
				info.curindex = 0; //到末尾的时候,自动从头开始
 8005d52:	4b08      	ldr	r3, [pc, #32]	; (8005d74 <mp3_play+0x324>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	80da      	strh	r2, [r3, #6]
			LCD_Fill(0, 0, 240, 240 + 17 * 3, BLACK);
 8005d58:	2300      	movs	r3, #0
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	f240 1323 	movw	r3, #291	; 0x123
 8005d60:	22f0      	movs	r2, #240	; 0xf0
 8005d62:	2100      	movs	r1, #0
 8005d64:	2000      	movs	r0, #0
 8005d66:	f7fe fd37 	bl	80047d8 <LCD_Fill>
			break;
 8005d6a:	e047      	b.n	8005dfc <mp3_play+0x3ac>
 8005d6c:	08012648 	.word	0x08012648
 8005d70:	2000013e 	.word	0x2000013e
 8005d74:	20001fdc 	.word	0x20001fdc
 8005d78:	20001fe4 	.word	0x20001fe4
 8005d7c:	20001fed 	.word	0x20001fed
 8005d80:	08012678 	.word	0x08012678
 8005d84:	200001dc 	.word	0x200001dc
 8005d88:	08012684 	.word	0x08012684
 8005d8c:	20001be8 	.word	0x20001be8
 8005d90:	200001da 	.word	0x200001da
 8005d94:	200001cc 	.word	0x200001cc
 8005d98:	20001fc8 	.word	0x20001fc8
		case 5:
			srand(read_ADC());
 8005d9c:	f7fb f966 	bl	800106c <read_ADC>
 8005da0:	4603      	mov	r3, r0
 8005da2:	4618      	mov	r0, r3
 8005da4:	f00b fcc2 	bl	801172c <srand>
			info.curindex = rand() % (info.totmp3num - 1);
 8005da8:	f00b fcee 	bl	8011788 <rand>
 8005dac:	4602      	mov	r2, r0
 8005dae:	4b15      	ldr	r3, [pc, #84]	; (8005e04 <mp3_play+0x3b4>)
 8005db0:	889b      	ldrh	r3, [r3, #4]
 8005db2:	3b01      	subs	r3, #1
 8005db4:	fb92 f1f3 	sdiv	r1, r2, r3
 8005db8:	fb03 f301 	mul.w	r3, r3, r1
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	4b10      	ldr	r3, [pc, #64]	; (8005e04 <mp3_play+0x3b4>)
 8005dc2:	80da      	strh	r2, [r3, #6]
			LCD_Fill(0, 0, 240, 240 + 17 * 3, BLACK);
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	f240 1323 	movw	r3, #291	; 0x123
 8005dcc:	22f0      	movs	r2, #240	; 0xf0
 8005dce:	2100      	movs	r1, #0
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	f7fe fd01 	bl	80047d8 <LCD_Fill>
			break;
 8005dd6:	e011      	b.n	8005dfc <mp3_play+0x3ac>
		default:
			LCD_Clear(BLACK); //清屏
 8005dd8:	2000      	movs	r0, #0
 8005dda:	f7fe fccf 	bl	800477c <LCD_Clear>
			Show_Str(0, 0, 240, 16, "发生错误，请复位", 16, 0);
 8005dde:	2300      	movs	r3, #0
 8005de0:	9302      	str	r3, [sp, #8]
 8005de2:	2310      	movs	r3, #16
 8005de4:	9301      	str	r3, [sp, #4]
 8005de6:	4b08      	ldr	r3, [pc, #32]	; (8005e08 <mp3_play+0x3b8>)
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	2310      	movs	r3, #16
 8005dec:	22f0      	movs	r2, #240	; 0xf0
 8005dee:	2100      	movs	r1, #0
 8005df0:	2000      	movs	r0, #0
 8005df2:	f7fb fe69 	bl	8001ac8 <Show_Str>
			HardFault_Handler();
 8005df6:	f7fc fcc0 	bl	800277a <HardFault_Handler>
			while (1)
 8005dfa:	e7fe      	b.n	8005dfa <mp3_play+0x3aa>
				;
		}
		write_data();
 8005dfc:	f7fb f9d2 	bl	80011a4 <write_data>
		vPortEnterCritical(); //进入临界区
 8005e00:	e64f      	b.n	8005aa2 <mp3_play+0x52>
 8005e02:	bf00      	nop
 8005e04:	20001fdc 	.word	0x20001fdc
 8005e08:	08012694 	.word	0x08012694

08005e0c <jpeg_mallocall>:
JDEC *jpeg_dev;      //待解码对象结构体指针
uint8_t *jpg_buffer; //定义jpeg解码工作区大小(最少需要3092字节)，作为解压缓冲区，必须4字节对齐

//给占内存大的数组/结构体申请内存
uint8_t jpeg_mallocall(void)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	af00      	add	r7, sp, #0
    jpeg_dev = (JDEC *)malloc(sizeof(JDEC));
 8005e10:	207c      	movs	r0, #124	; 0x7c
 8005e12:	f00b fbbf 	bl	8011594 <malloc>
 8005e16:	4603      	mov	r3, r0
 8005e18:	461a      	mov	r2, r3
 8005e1a:	4b0c      	ldr	r3, [pc, #48]	; (8005e4c <jpeg_mallocall+0x40>)
 8005e1c:	601a      	str	r2, [r3, #0]
    if (jpeg_dev == NULL)
 8005e1e:	4b0b      	ldr	r3, [pc, #44]	; (8005e4c <jpeg_mallocall+0x40>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <jpeg_mallocall+0x1e>
        return PIC_MEM_ERR; //申请内存失败.
 8005e26:	2311      	movs	r3, #17
 8005e28:	e00e      	b.n	8005e48 <jpeg_mallocall+0x3c>
    jpg_buffer = (uint8_t *)malloc(JPEG_WBUF_SIZE);
 8005e2a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005e2e:	f00b fbb1 	bl	8011594 <malloc>
 8005e32:	4603      	mov	r3, r0
 8005e34:	461a      	mov	r2, r3
 8005e36:	4b06      	ldr	r3, [pc, #24]	; (8005e50 <jpeg_mallocall+0x44>)
 8005e38:	601a      	str	r2, [r3, #0]
    if (jpg_buffer == NULL)
 8005e3a:	4b05      	ldr	r3, [pc, #20]	; (8005e50 <jpeg_mallocall+0x44>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <jpeg_mallocall+0x3a>
        return PIC_MEM_ERR; //申请内存失败.
 8005e42:	2311      	movs	r3, #17
 8005e44:	e000      	b.n	8005e48 <jpeg_mallocall+0x3c>
    return 0;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	20002038 	.word	0x20002038
 8005e50:	20002034 	.word	0x20002034

08005e54 <jpeg_freeall>:
//释放内存
void jpeg_freeall(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
    free(jpeg_dev);   //释放jpeg_dev申请到的内存
 8005e58:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <jpeg_freeall+0x1c>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f00b fba1 	bl	80115a4 <free>
    free(jpg_buffer); //释放jpg_buffer申请到的内存
 8005e62:	4b04      	ldr	r3, [pc, #16]	; (8005e74 <jpeg_freeall+0x20>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f00b fb9c 	bl	80115a4 <free>
}
 8005e6c:	bf00      	nop
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	20002038 	.word	0x20002038
 8005e74:	20002034 	.word	0x20002034

08005e78 <show_mp3_pic>:

void show_mp3_pic(void *pdata)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b088      	sub	sp, #32
 8005e7c:	af04      	add	r7, sp, #16
 8005e7e:	6078      	str	r0, [r7, #4]
    UINT(*outfun)
    (JDEC *, void *, JRECT *);
    uint8_t scale; //图像输出比例 0,1/2,1/4,1/8
    while (1)
    {
        if (info.pic_show == 1)
 8005e80:	4b7c      	ldr	r3, [pc, #496]	; (8006074 <show_mp3_pic+0x1fc>)
 8005e82:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	f040 80a0 	bne.w	8005fcc <show_mp3_pic+0x154>
        {
            vPortEnterCritical(); //进入临界区
 8005e8c:	f00a ff86 	bl	8010d9c <vPortEnterCritical>
            //得到显示方框大小
            picinfo.S_Height = pic_show_size;
 8005e90:	4b79      	ldr	r3, [pc, #484]	; (8006078 <show_mp3_pic+0x200>)
 8005e92:	22f0      	movs	r2, #240	; 0xf0
 8005e94:	611a      	str	r2, [r3, #16]
            picinfo.S_Width = pic_show_size;
 8005e96:	4b78      	ldr	r3, [pc, #480]	; (8006078 <show_mp3_pic+0x200>)
 8005e98:	22f0      	movs	r2, #240	; 0xf0
 8005e9a:	615a      	str	r2, [r3, #20]
            //显示的开始坐标点
            picinfo.S_YOFF = pic_show_y;
 8005e9c:	4b76      	ldr	r3, [pc, #472]	; (8006078 <show_mp3_pic+0x200>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	61da      	str	r2, [r3, #28]
            picinfo.S_XOFF = pic_show_x;
 8005ea2:	4b75      	ldr	r3, [pc, #468]	; (8006078 <show_mp3_pic+0x200>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	619a      	str	r2, [r3, #24]

            res = jpeg_mallocall();
 8005ea8:	f7ff ffb0 	bl	8005e0c <jpeg_mallocall>
 8005eac:	4603      	mov	r3, r0
 8005eae:	72bb      	strb	r3, [r7, #10]
            if (res == 0)
 8005eb0:	7abb      	ldrb	r3, [r7, #10]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d17e      	bne.n	8005fb4 <show_mp3_pic+0x13c>
            {
                //得到JPEG/JPG图片的开始信息
                if (res == FR_OK) //打开文件成功
 8005eb6:	7abb      	ldrb	r3, [r7, #10]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d17b      	bne.n	8005fb4 <show_mp3_pic+0x13c>
                {
                    res = jd_prepare(jpeg_dev, jpeg_in_func, jpg_buffer, JPEG_WBUF_SIZE, fmp3_pic); //执行解码的准备工作，调用TjpgDec模块的jd_prepare函数
 8005ebc:	4b6f      	ldr	r3, [pc, #444]	; (800607c <show_mp3_pic+0x204>)
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	4b6f      	ldr	r3, [pc, #444]	; (8006080 <show_mp3_pic+0x208>)
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	4b6f      	ldr	r3, [pc, #444]	; (8006084 <show_mp3_pic+0x20c>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ece:	496e      	ldr	r1, [pc, #440]	; (8006088 <show_mp3_pic+0x210>)
 8005ed0:	f7fd ff3a 	bl	8003d48 <jd_prepare>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	72bb      	strb	r3, [r7, #10]
                    outfun = jpeg_out_func_point;                                                   //默认采用画点的方式显示
 8005ed8:	4b6c      	ldr	r3, [pc, #432]	; (800608c <show_mp3_pic+0x214>)
 8005eda:	60fb      	str	r3, [r7, #12]
                    if (res == JDR_OK)                                                              //准备解码成功
 8005edc:	7abb      	ldrb	r3, [r7, #10]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d168      	bne.n	8005fb4 <show_mp3_pic+0x13c>
                    {
                        for (scale = 0; scale < 4; scale++) //确定输出图像的比例因子
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	72fb      	strb	r3, [r7, #11]
 8005ee6:	e02f      	b.n	8005f48 <show_mp3_pic+0xd0>
                        {
                            if ((jpeg_dev->width >> scale) <= picinfo.S_Width && (jpeg_dev->height >> scale) <= picinfo.S_Height) //在目标区域内
 8005ee8:	4b64      	ldr	r3, [pc, #400]	; (800607c <show_mp3_pic+0x204>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	69da      	ldr	r2, [r3, #28]
 8005eee:	7afb      	ldrb	r3, [r7, #11]
 8005ef0:	40da      	lsrs	r2, r3
 8005ef2:	4b61      	ldr	r3, [pc, #388]	; (8006078 <show_mp3_pic+0x200>)
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d823      	bhi.n	8005f42 <show_mp3_pic+0xca>
 8005efa:	4b60      	ldr	r3, [pc, #384]	; (800607c <show_mp3_pic+0x204>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6a1a      	ldr	r2, [r3, #32]
 8005f00:	7afb      	ldrb	r3, [r7, #11]
 8005f02:	40da      	lsrs	r2, r3
 8005f04:	4b5c      	ldr	r3, [pc, #368]	; (8006078 <show_mp3_pic+0x200>)
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d81a      	bhi.n	8005f42 <show_mp3_pic+0xca>
                            {
                                if (((jpeg_dev->width >> scale) != picinfo.S_Width) && ((jpeg_dev->height >> scale) != picinfo.S_Height && scale))
 8005f0c:	4b5b      	ldr	r3, [pc, #364]	; (800607c <show_mp3_pic+0x204>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	69da      	ldr	r2, [r3, #28]
 8005f12:	7afb      	ldrb	r3, [r7, #11]
 8005f14:	40da      	lsrs	r2, r3
 8005f16:	4b58      	ldr	r3, [pc, #352]	; (8006078 <show_mp3_pic+0x200>)
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d00e      	beq.n	8005f3c <show_mp3_pic+0xc4>
 8005f1e:	4b57      	ldr	r3, [pc, #348]	; (800607c <show_mp3_pic+0x204>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6a1a      	ldr	r2, [r3, #32]
 8005f24:	7afb      	ldrb	r3, [r7, #11]
 8005f26:	40da      	lsrs	r2, r3
 8005f28:	4b53      	ldr	r3, [pc, #332]	; (8006078 <show_mp3_pic+0x200>)
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d005      	beq.n	8005f3c <show_mp3_pic+0xc4>
 8005f30:	7afb      	ldrb	r3, [r7, #11]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <show_mp3_pic+0xc4>
                                    scale = 0; //不能贴边,则不缩放
 8005f36:	2300      	movs	r3, #0
 8005f38:	72fb      	strb	r3, [r7, #11]
                                else
                                    outfun = jpeg_out_func_fill; //在显示尺寸以内,可以采用填充的方式显示
                                break;
 8005f3a:	e008      	b.n	8005f4e <show_mp3_pic+0xd6>
                                    outfun = jpeg_out_func_fill; //在显示尺寸以内,可以采用填充的方式显示
 8005f3c:	4b54      	ldr	r3, [pc, #336]	; (8006090 <show_mp3_pic+0x218>)
 8005f3e:	60fb      	str	r3, [r7, #12]
                                break;
 8005f40:	e005      	b.n	8005f4e <show_mp3_pic+0xd6>
                        for (scale = 0; scale < 4; scale++) //确定输出图像的比例因子
 8005f42:	7afb      	ldrb	r3, [r7, #11]
 8005f44:	3301      	adds	r3, #1
 8005f46:	72fb      	strb	r3, [r7, #11]
 8005f48:	7afb      	ldrb	r3, [r7, #11]
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d9cc      	bls.n	8005ee8 <show_mp3_pic+0x70>
                            }
                        }
                        if (scale == 4) //错误
 8005f4e:	7afb      	ldrb	r3, [r7, #11]
 8005f50:	2b04      	cmp	r3, #4
 8005f52:	d10d      	bne.n	8005f70 <show_mp3_pic+0xf8>
                        {
                            scale = 0;
 8005f54:	2300      	movs	r3, #0
 8005f56:	72fb      	strb	r3, [r7, #11]
                            Show_Str(0, 0, 240, 16, "图片错误", 16, 0);
 8005f58:	2300      	movs	r3, #0
 8005f5a:	9302      	str	r3, [sp, #8]
 8005f5c:	2310      	movs	r3, #16
 8005f5e:	9301      	str	r3, [sp, #4]
 8005f60:	4b4c      	ldr	r3, [pc, #304]	; (8006094 <show_mp3_pic+0x21c>)
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	2310      	movs	r3, #16
 8005f66:	22f0      	movs	r2, #240	; 0xf0
 8005f68:	2100      	movs	r1, #0
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	f7fb fdac 	bl	8001ac8 <Show_Str>
                        }
                        picinfo.ImgHeight = jpeg_dev->height >> scale; //缩放后的图片尺寸
 8005f70:	4b42      	ldr	r3, [pc, #264]	; (800607c <show_mp3_pic+0x204>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6a1a      	ldr	r2, [r3, #32]
 8005f76:	7afb      	ldrb	r3, [r7, #11]
 8005f78:	fa22 f303 	lsr.w	r3, r2, r3
 8005f7c:	4a3e      	ldr	r2, [pc, #248]	; (8006078 <show_mp3_pic+0x200>)
 8005f7e:	6093      	str	r3, [r2, #8]
                        picinfo.ImgWidth = jpeg_dev->width >> scale;   //缩放后的图片尺寸
 8005f80:	4b3e      	ldr	r3, [pc, #248]	; (800607c <show_mp3_pic+0x204>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	69da      	ldr	r2, [r3, #28]
 8005f86:	7afb      	ldrb	r3, [r7, #11]
 8005f88:	fa22 f303 	lsr.w	r3, r2, r3
 8005f8c:	4a3a      	ldr	r2, [pc, #232]	; (8006078 <show_mp3_pic+0x200>)
 8005f8e:	6053      	str	r3, [r2, #4]
                        ai_draw_init();                                //初始化智能画图
 8005f90:	f7fc fcd6 	bl	8002940 <ai_draw_init>
                        write_bit = 0x00;
 8005f94:	4b40      	ldr	r3, [pc, #256]	; (8006098 <show_mp3_pic+0x220>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	701a      	strb	r2, [r3, #0]
                        //执行解码工作，调用TjpgDec模块的jd_decomp函数
                        vPortExitCritical(); //进入临界区
 8005f9a:	f00a ff2f 	bl	8010dfc <vPortExitCritical>
                        res = jd_decomp(jpeg_dev, outfun, scale);
 8005f9e:	4b37      	ldr	r3, [pc, #220]	; (800607c <show_mp3_pic+0x204>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	7afa      	ldrb	r2, [r7, #11]
 8005fa4:	68f9      	ldr	r1, [r7, #12]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fe f97a 	bl	80042a0 <jd_decomp>
 8005fac:	4603      	mov	r3, r0
 8005fae:	72bb      	strb	r3, [r7, #10]
                        vPortEnterCritical(); //进入临界区
 8005fb0:	f00a fef4 	bl	8010d9c <vPortEnterCritical>
                    }
                }
            }
            jpeg_freeall(); //释放内存
 8005fb4:	f7ff ff4e 	bl	8005e54 <jpeg_freeall>
            info.pic_show = 0;
 8005fb8:	4b2e      	ldr	r3, [pc, #184]	; (8006074 <show_mp3_pic+0x1fc>)
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            write_bit = 0x20;
 8005fc0:	4b35      	ldr	r3, [pc, #212]	; (8006098 <show_mp3_pic+0x220>)
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	701a      	strb	r2, [r3, #0]
            vPortExitCritical(); //进入临界区
 8005fc6:	f00a ff19 	bl	8010dfc <vPortExitCritical>
 8005fca:	e759      	b.n	8005e80 <show_mp3_pic+0x8>
        }
        else if (info.pic_show == 2)
 8005fcc:	4b29      	ldr	r3, [pc, #164]	; (8006074 <show_mp3_pic+0x1fc>)
 8005fce:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d123      	bne.n	800601e <show_mp3_pic+0x1a6>
        {
            vPortEnterCritical(); //进入临界区
 8005fd6:	f00a fee1 	bl	8010d9c <vPortEnterCritical>
            LCD_Fill(0, 0, 240, (240 + 16 * 3) - 1, BLACK);
 8005fda:	2300      	movs	r3, #0
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	f240 131f 	movw	r3, #287	; 0x11f
 8005fe2:	22f0      	movs	r2, #240	; 0xf0
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	2000      	movs	r0, #0
 8005fe8:	f7fe fbf6 	bl	80047d8 <LCD_Fill>
            show_all(1); //显示一次歌名
 8005fec:	2001      	movs	r0, #1
 8005fee:	f000 f859 	bl	80060a4 <show_all>
            show_all(3); //显示歌曲信息
 8005ff2:	2003      	movs	r0, #3
 8005ff4:	f000 f856 	bl	80060a4 <show_all>
            Show_Str(0, 0, 240, 16, "PNG格式图片不支持", 16, 0);
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	9302      	str	r3, [sp, #8]
 8005ffc:	2310      	movs	r3, #16
 8005ffe:	9301      	str	r3, [sp, #4]
 8006000:	4b26      	ldr	r3, [pc, #152]	; (800609c <show_mp3_pic+0x224>)
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	2310      	movs	r3, #16
 8006006:	22f0      	movs	r2, #240	; 0xf0
 8006008:	2100      	movs	r1, #0
 800600a:	2000      	movs	r0, #0
 800600c:	f7fb fd5c 	bl	8001ac8 <Show_Str>
            info.pic_show = 0;
 8006010:	4b18      	ldr	r3, [pc, #96]	; (8006074 <show_mp3_pic+0x1fc>)
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            vPortExitCritical(); //进入临界区
 8006018:	f00a fef0 	bl	8010dfc <vPortExitCritical>
 800601c:	e730      	b.n	8005e80 <show_mp3_pic+0x8>
        }
        else if (info.pic_show == 3)
 800601e:	4b15      	ldr	r3, [pc, #84]	; (8006074 <show_mp3_pic+0x1fc>)
 8006020:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006024:	2b03      	cmp	r3, #3
 8006026:	f47f af2b 	bne.w	8005e80 <show_mp3_pic+0x8>
        {
            vPortEnterCritical(); //进入临界区
 800602a:	f00a feb7 	bl	8010d9c <vPortEnterCritical>
            LCD_Fill(0, 0, 240, (240 + 16 * 3) - 1, BLACK);
 800602e:	2300      	movs	r3, #0
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	f240 131f 	movw	r3, #287	; 0x11f
 8006036:	22f0      	movs	r2, #240	; 0xf0
 8006038:	2100      	movs	r1, #0
 800603a:	2000      	movs	r0, #0
 800603c:	f7fe fbcc 	bl	80047d8 <LCD_Fill>
            show_all(1); //显示一次歌名
 8006040:	2001      	movs	r0, #1
 8006042:	f000 f82f 	bl	80060a4 <show_all>
            show_all(3); //显示歌曲信息
 8006046:	2003      	movs	r0, #3
 8006048:	f000 f82c 	bl	80060a4 <show_all>
            Show_Str(0, 0, 240, 16, "没有图片", 16, 0);
 800604c:	2300      	movs	r3, #0
 800604e:	9302      	str	r3, [sp, #8]
 8006050:	2310      	movs	r3, #16
 8006052:	9301      	str	r3, [sp, #4]
 8006054:	4b12      	ldr	r3, [pc, #72]	; (80060a0 <show_mp3_pic+0x228>)
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	2310      	movs	r3, #16
 800605a:	22f0      	movs	r2, #240	; 0xf0
 800605c:	2100      	movs	r1, #0
 800605e:	2000      	movs	r0, #0
 8006060:	f7fb fd32 	bl	8001ac8 <Show_Str>
            info.pic_show = 0;
 8006064:	4b03      	ldr	r3, [pc, #12]	; (8006074 <show_mp3_pic+0x1fc>)
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            vPortExitCritical(); //进入临界区
 800606c:	f00a fec6 	bl	8010dfc <vPortExitCritical>
        if (info.pic_show == 1)
 8006070:	e706      	b.n	8005e80 <show_mp3_pic+0x8>
 8006072:	bf00      	nop
 8006074:	20001fdc 	.word	0x20001fdc
 8006078:	20001f8c 	.word	0x20001f8c
 800607c:	20002038 	.word	0x20002038
 8006080:	20002034 	.word	0x20002034
 8006084:	200001dc 	.word	0x200001dc
 8006088:	080043ad 	.word	0x080043ad
 800608c:	08004485 	.word	0x08004485
 8006090:	08004415 	.word	0x08004415
 8006094:	080126b0 	.word	0x080126b0
 8006098:	20001fc8 	.word	0x20001fc8
 800609c:	080126c0 	.word	0x080126c0
 80060a0:	080126dc 	.word	0x080126dc

080060a4 <show_all>:
        }
    }
}

void show_all(uint8_t mode)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b088      	sub	sp, #32
 80060a8:	af04      	add	r7, sp, #16
 80060aa:	4603      	mov	r3, r0
 80060ac:	71fb      	strb	r3, [r7, #7]
    uint16_t temp = 0;
 80060ae:	2300      	movs	r3, #0
 80060b0:	81fb      	strh	r3, [r7, #14]
    info.time = VS_Get_DecodeTime(); //得到解码时间
 80060b2:	f000 feb2 	bl	8006e1a <VS_Get_DecodeTime>
 80060b6:	4603      	mov	r3, r0
 80060b8:	461a      	mov	r2, r3
 80060ba:	4b7c      	ldr	r3, [pc, #496]	; (80062ac <show_all+0x208>)
 80060bc:	875a      	strh	r2, [r3, #58]	; 0x3a
    if (mode == 1)
 80060be:	79fb      	ldrb	r3, [r7, #7]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d16a      	bne.n	800619a <show_all+0xf6>
    {
        if (info.size != 0)
 80060c4:	4b79      	ldr	r3, [pc, #484]	; (80062ac <show_all+0x208>)
 80060c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d057      	beq.n	800617c <show_all+0xd8>
        {
            if (info.TIT2[0] != 0)
 80060cc:	4b77      	ldr	r3, [pc, #476]	; (80062ac <show_all+0x208>)
 80060ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00c      	beq.n	80060f0 <show_all+0x4c>
                Show_Str(0, 240, 240, 16, info.TIT2, 16, 0); //显示歌曲名字
 80060d6:	4b75      	ldr	r3, [pc, #468]	; (80062ac <show_all+0x208>)
 80060d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060da:	2200      	movs	r2, #0
 80060dc:	9202      	str	r2, [sp, #8]
 80060de:	2210      	movs	r2, #16
 80060e0:	9201      	str	r2, [sp, #4]
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	2310      	movs	r3, #16
 80060e6:	22f0      	movs	r2, #240	; 0xf0
 80060e8:	21f0      	movs	r1, #240	; 0xf0
 80060ea:	2000      	movs	r0, #0
 80060ec:	f7fb fcec 	bl	8001ac8 <Show_Str>
            if (info.TPE1[0] != 0)
 80060f0:	4b6e      	ldr	r3, [pc, #440]	; (80062ac <show_all+0x208>)
 80060f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00d      	beq.n	8006116 <show_all+0x72>
                Show_Str(0, 240 + 17, 240, 16, info.TPE1, 16, 0); //显示歌曲作者
 80060fa:	4b6c      	ldr	r3, [pc, #432]	; (80062ac <show_all+0x208>)
 80060fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060fe:	2200      	movs	r2, #0
 8006100:	9202      	str	r2, [sp, #8]
 8006102:	2210      	movs	r2, #16
 8006104:	9201      	str	r2, [sp, #4]
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	2310      	movs	r3, #16
 800610a:	22f0      	movs	r2, #240	; 0xf0
 800610c:	f240 1101 	movw	r1, #257	; 0x101
 8006110:	2000      	movs	r0, #0
 8006112:	f7fb fcd9 	bl	8001ac8 <Show_Str>
            if (info.TALB[0] != 0)
 8006116:	4b65      	ldr	r3, [pc, #404]	; (80062ac <show_all+0x208>)
 8006118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00d      	beq.n	800613c <show_all+0x98>
                Show_Str(0, 240 + 34, 240, 16, info.TALB, 16, 0); //显示歌曲专辑
 8006120:	4b62      	ldr	r3, [pc, #392]	; (80062ac <show_all+0x208>)
 8006122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006124:	2200      	movs	r2, #0
 8006126:	9202      	str	r2, [sp, #8]
 8006128:	2210      	movs	r2, #16
 800612a:	9201      	str	r2, [sp, #4]
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	2310      	movs	r3, #16
 8006130:	22f0      	movs	r2, #240	; 0xf0
 8006132:	f44f 7189 	mov.w	r1, #274	; 0x112
 8006136:	2000      	movs	r0, #0
 8006138:	f7fb fcc6 	bl	8001ac8 <Show_Str>
            if (info.TIT2[0] == 0 && info.TPE1[0] == 0 && info.TALB[0] == 0)
 800613c:	4b5b      	ldr	r3, [pc, #364]	; (80062ac <show_all+0x208>)
 800613e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	f040 8284 	bne.w	8006650 <show_all+0x5ac>
 8006148:	4b58      	ldr	r3, [pc, #352]	; (80062ac <show_all+0x208>)
 800614a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	f040 827e 	bne.w	8006650 <show_all+0x5ac>
 8006154:	4b55      	ldr	r3, [pc, #340]	; (80062ac <show_all+0x208>)
 8006156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	f040 8278 	bne.w	8006650 <show_all+0x5ac>
                Show_Str(0, 240, 240, 16, info.fn, 16, 0); //显示歌曲名字
 8006160:	4b52      	ldr	r3, [pc, #328]	; (80062ac <show_all+0x208>)
 8006162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006164:	2200      	movs	r2, #0
 8006166:	9202      	str	r2, [sp, #8]
 8006168:	2210      	movs	r2, #16
 800616a:	9201      	str	r2, [sp, #4]
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	2310      	movs	r3, #16
 8006170:	22f0      	movs	r2, #240	; 0xf0
 8006172:	21f0      	movs	r1, #240	; 0xf0
 8006174:	2000      	movs	r0, #0
 8006176:	f7fb fca7 	bl	8001ac8 <Show_Str>
        LCD_ShowString(162, 168, 32, 24, 24, ">");
        LCD_ShowString(162, 200, 32, 24, 24, ">");

        Show_Str(186, 292, 48, 24, "保存", 24, 0);
    }
}
 800617a:	e269      	b.n	8006650 <show_all+0x5ac>
            Show_Str(0, 0, 320, 16, info.fn, 16, 0); //显示歌曲名字
 800617c:	4b4b      	ldr	r3, [pc, #300]	; (80062ac <show_all+0x208>)
 800617e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006180:	2200      	movs	r2, #0
 8006182:	9202      	str	r2, [sp, #8]
 8006184:	2210      	movs	r2, #16
 8006186:	9201      	str	r2, [sp, #4]
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	2310      	movs	r3, #16
 800618c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006190:	2100      	movs	r1, #0
 8006192:	2000      	movs	r0, #0
 8006194:	f7fb fc98 	bl	8001ac8 <Show_Str>
}
 8006198:	e25a      	b.n	8006650 <show_all+0x5ac>
    else if (((info.pic_show == 0 && mode == 0 && lcd_bit == 1) || mode == 3))
 800619a:	4b44      	ldr	r3, [pc, #272]	; (80062ac <show_all+0x208>)
 800619c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d106      	bne.n	80061b2 <show_all+0x10e>
 80061a4:	79fb      	ldrb	r3, [r7, #7]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d103      	bne.n	80061b2 <show_all+0x10e>
 80061aa:	4b41      	ldr	r3, [pc, #260]	; (80062b0 <show_all+0x20c>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d003      	beq.n	80061ba <show_all+0x116>
 80061b2:	79fb      	ldrb	r3, [r7, #7]
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	f040 811f 	bne.w	80063f8 <show_all+0x354>
        if (info.playtime == 0)
 80061ba:	4b3c      	ldr	r3, [pc, #240]	; (80062ac <show_all+0x208>)
 80061bc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d104      	bne.n	80061cc <show_all+0x128>
            info.playtime = info.time;
 80061c2:	4b3a      	ldr	r3, [pc, #232]	; (80062ac <show_all+0x208>)
 80061c4:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80061c6:	4b39      	ldr	r3, [pc, #228]	; (80062ac <show_all+0x208>)
 80061c8:	871a      	strh	r2, [r3, #56]	; 0x38
 80061ca:	e0c4      	b.n	8006356 <show_all+0x2b2>
        else if (((info.time != info.playtime) && (info.time != 0)) || mode == 3) //1s时间到,更新显示数据
 80061cc:	4b37      	ldr	r3, [pc, #220]	; (80062ac <show_all+0x208>)
 80061ce:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80061d0:	4b36      	ldr	r3, [pc, #216]	; (80062ac <show_all+0x208>)
 80061d2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d003      	beq.n	80061e0 <show_all+0x13c>
 80061d8:	4b34      	ldr	r3, [pc, #208]	; (80062ac <show_all+0x208>)
 80061da:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d103      	bne.n	80061e8 <show_all+0x144>
 80061e0:	79fb      	ldrb	r3, [r7, #7]
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	f040 80b7 	bne.w	8006356 <show_all+0x2b2>
            info.playtime = info.time; //更新时间
 80061e8:	4b30      	ldr	r3, [pc, #192]	; (80062ac <show_all+0x208>)
 80061ea:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80061ec:	4b2f      	ldr	r3, [pc, #188]	; (80062ac <show_all+0x208>)
 80061ee:	871a      	strh	r2, [r3, #56]	; 0x38
            temp = VS_Get_HeadInfo();  //获得比特率
 80061f0:	f000 fca4 	bl	8006b3c <VS_Get_HeadInfo>
 80061f4:	4603      	mov	r3, r0
 80061f6:	81fb      	strh	r3, [r7, #14]
            if (temp != info.kbps)
 80061f8:	4b2c      	ldr	r3, [pc, #176]	; (80062ac <show_all+0x208>)
 80061fa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80061fc:	89fa      	ldrh	r2, [r7, #14]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d002      	beq.n	8006208 <show_all+0x164>
                info.kbps = temp; //更新KBPS
 8006202:	4a2a      	ldr	r2, [pc, #168]	; (80062ac <show_all+0x208>)
 8006204:	89fb      	ldrh	r3, [r7, #14]
 8006206:	8793      	strh	r3, [r2, #60]	; 0x3c
            LCD_ShowxNum(0, 289, info.time / 60, 2, 16, 0X80); //分钟
 8006208:	4b28      	ldr	r3, [pc, #160]	; (80062ac <show_all+0x208>)
 800620a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800620c:	4a29      	ldr	r2, [pc, #164]	; (80062b4 <show_all+0x210>)
 800620e:	fba2 2303 	umull	r2, r3, r2, r3
 8006212:	095b      	lsrs	r3, r3, #5
 8006214:	b29b      	uxth	r3, r3
 8006216:	461a      	mov	r2, r3
 8006218:	2380      	movs	r3, #128	; 0x80
 800621a:	9301      	str	r3, [sp, #4]
 800621c:	2310      	movs	r3, #16
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	2302      	movs	r3, #2
 8006222:	f240 1121 	movw	r1, #289	; 0x121
 8006226:	2000      	movs	r0, #0
 8006228:	f7fe fbec 	bl	8004a04 <LCD_ShowxNum>
            LCD_ShowChar(16, 289, ':', 16, 0);
 800622c:	2300      	movs	r3, #0
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	2310      	movs	r3, #16
 8006232:	223a      	movs	r2, #58	; 0x3a
 8006234:	f240 1121 	movw	r1, #289	; 0x121
 8006238:	2010      	movs	r0, #16
 800623a:	f7fe fb0b 	bl	8004854 <LCD_ShowChar>
            LCD_ShowxNum(24, 289, info.time % 60, 2, 16, 0X80); //秒钟
 800623e:	4b1b      	ldr	r3, [pc, #108]	; (80062ac <show_all+0x208>)
 8006240:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8006242:	4b1c      	ldr	r3, [pc, #112]	; (80062b4 <show_all+0x210>)
 8006244:	fba3 1302 	umull	r1, r3, r3, r2
 8006248:	0959      	lsrs	r1, r3, #5
 800624a:	460b      	mov	r3, r1
 800624c:	011b      	lsls	r3, r3, #4
 800624e:	1a5b      	subs	r3, r3, r1
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	b29b      	uxth	r3, r3
 8006256:	461a      	mov	r2, r3
 8006258:	2380      	movs	r3, #128	; 0x80
 800625a:	9301      	str	r3, [sp, #4]
 800625c:	2310      	movs	r3, #16
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	2302      	movs	r3, #2
 8006262:	f240 1121 	movw	r1, #289	; 0x121
 8006266:	2018      	movs	r0, #24
 8006268:	f7fe fbcc 	bl	8004a04 <LCD_ShowxNum>
            LCD_ShowChar(40, 289, '/', 16, 0);
 800626c:	2300      	movs	r3, #0
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	2310      	movs	r3, #16
 8006272:	222f      	movs	r2, #47	; 0x2f
 8006274:	f240 1121 	movw	r1, #289	; 0x121
 8006278:	2028      	movs	r0, #40	; 0x28
 800627a:	f7fe faeb 	bl	8004854 <LCD_ShowChar>
            if (info.kbps)
 800627e:	4b0b      	ldr	r3, [pc, #44]	; (80062ac <show_all+0x208>)
 8006280:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006282:	2b00      	cmp	r3, #0
 8006284:	d01a      	beq.n	80062bc <show_all+0x218>
                info.time = ((info.fmp3->fsize - info.size) / info.kbps) / 125; //得到秒钟数   (文件长度(字节)/(1000/8)/比特率=持续秒钟数
 8006286:	4b09      	ldr	r3, [pc, #36]	; (80062ac <show_all+0x208>)
 8006288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800628e:	4b07      	ldr	r3, [pc, #28]	; (80062ac <show_all+0x208>)
 8006290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	4a05      	ldr	r2, [pc, #20]	; (80062ac <show_all+0x208>)
 8006296:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 8006298:	fbb3 f3f2 	udiv	r3, r3, r2
 800629c:	4a06      	ldr	r2, [pc, #24]	; (80062b8 <show_all+0x214>)
 800629e:	fba2 2303 	umull	r2, r3, r2, r3
 80062a2:	08db      	lsrs	r3, r3, #3
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	4b01      	ldr	r3, [pc, #4]	; (80062ac <show_all+0x208>)
 80062a8:	875a      	strh	r2, [r3, #58]	; 0x3a
 80062aa:	e00a      	b.n	80062c2 <show_all+0x21e>
 80062ac:	20001fdc 	.word	0x20001fdc
 80062b0:	200001db 	.word	0x200001db
 80062b4:	88888889 	.word	0x88888889
 80062b8:	10624dd3 	.word	0x10624dd3
                info.time = 0;                                  //非法位率
 80062bc:	4b48      	ldr	r3, [pc, #288]	; (80063e0 <show_all+0x33c>)
 80062be:	2200      	movs	r2, #0
 80062c0:	875a      	strh	r2, [r3, #58]	; 0x3a
            LCD_ShowxNum(48, 289, info.time / 60, 2, 16, 0X80); //分钟
 80062c2:	4b47      	ldr	r3, [pc, #284]	; (80063e0 <show_all+0x33c>)
 80062c4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80062c6:	4a47      	ldr	r2, [pc, #284]	; (80063e4 <show_all+0x340>)
 80062c8:	fba2 2303 	umull	r2, r3, r2, r3
 80062cc:	095b      	lsrs	r3, r3, #5
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	461a      	mov	r2, r3
 80062d2:	2380      	movs	r3, #128	; 0x80
 80062d4:	9301      	str	r3, [sp, #4]
 80062d6:	2310      	movs	r3, #16
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	2302      	movs	r3, #2
 80062dc:	f240 1121 	movw	r1, #289	; 0x121
 80062e0:	2030      	movs	r0, #48	; 0x30
 80062e2:	f7fe fb8f 	bl	8004a04 <LCD_ShowxNum>
            LCD_ShowChar(64, 289, ':', 16, 0);
 80062e6:	2300      	movs	r3, #0
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	2310      	movs	r3, #16
 80062ec:	223a      	movs	r2, #58	; 0x3a
 80062ee:	f240 1121 	movw	r1, #289	; 0x121
 80062f2:	2040      	movs	r0, #64	; 0x40
 80062f4:	f7fe faae 	bl	8004854 <LCD_ShowChar>
            LCD_ShowxNum(72, 289, info.time % 60, 2, 16, 0X80); //秒钟
 80062f8:	4b39      	ldr	r3, [pc, #228]	; (80063e0 <show_all+0x33c>)
 80062fa:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80062fc:	4b39      	ldr	r3, [pc, #228]	; (80063e4 <show_all+0x340>)
 80062fe:	fba3 1302 	umull	r1, r3, r3, r2
 8006302:	0959      	lsrs	r1, r3, #5
 8006304:	460b      	mov	r3, r1
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	1a5b      	subs	r3, r3, r1
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	b29b      	uxth	r3, r3
 8006310:	461a      	mov	r2, r3
 8006312:	2380      	movs	r3, #128	; 0x80
 8006314:	9301      	str	r3, [sp, #4]
 8006316:	2310      	movs	r3, #16
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	2302      	movs	r3, #2
 800631c:	f240 1121 	movw	r1, #289	; 0x121
 8006320:	2048      	movs	r0, #72	; 0x48
 8006322:	f7fe fb6f 	bl	8004a04 <LCD_ShowxNum>
            LCD_ShowxNum(62, 303, info.kbps, 3, 16, 0X80); //显示位率
 8006326:	4b2e      	ldr	r3, [pc, #184]	; (80063e0 <show_all+0x33c>)
 8006328:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800632a:	461a      	mov	r2, r3
 800632c:	2380      	movs	r3, #128	; 0x80
 800632e:	9301      	str	r3, [sp, #4]
 8006330:	2310      	movs	r3, #16
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	2303      	movs	r3, #3
 8006336:	f240 112f 	movw	r1, #303	; 0x12f
 800633a:	203e      	movs	r0, #62	; 0x3e
 800633c:	f7fe fb62 	bl	8004a04 <LCD_ShowxNum>
            LCD_ShowString(62 + 24, 303, 200, 16, 16, "Kbps");
 8006340:	4b29      	ldr	r3, [pc, #164]	; (80063e8 <show_all+0x344>)
 8006342:	9301      	str	r3, [sp, #4]
 8006344:	2310      	movs	r3, #16
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	2310      	movs	r3, #16
 800634a:	22c8      	movs	r2, #200	; 0xc8
 800634c:	f240 112f 	movw	r1, #303	; 0x12f
 8006350:	2056      	movs	r0, #86	; 0x56
 8006352:	f7fe fbf3 	bl	8004b3c <LCD_ShowString>
        LCD_ShowString(0, 303, 32, 16, 16, "VOL:");
 8006356:	4b25      	ldr	r3, [pc, #148]	; (80063ec <show_all+0x348>)
 8006358:	9301      	str	r3, [sp, #4]
 800635a:	2310      	movs	r3, #16
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	2310      	movs	r3, #16
 8006360:	2220      	movs	r2, #32
 8006362:	f240 112f 	movw	r1, #303	; 0x12f
 8006366:	2000      	movs	r0, #0
 8006368:	f7fe fbe8 	bl	8004b3c <LCD_ShowString>
        LCD_ShowxNum(0 + 32, 303, (vsset.mvol - 100) / 10, 2, 16, 0X80); //显示音量
 800636c:	4b20      	ldr	r3, [pc, #128]	; (80063f0 <show_all+0x34c>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	3b64      	subs	r3, #100	; 0x64
 8006372:	4a20      	ldr	r2, [pc, #128]	; (80063f4 <show_all+0x350>)
 8006374:	fb82 1203 	smull	r1, r2, r2, r3
 8006378:	1092      	asrs	r2, r2, #2
 800637a:	17db      	asrs	r3, r3, #31
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	461a      	mov	r2, r3
 8006380:	2380      	movs	r3, #128	; 0x80
 8006382:	9301      	str	r3, [sp, #4]
 8006384:	2310      	movs	r3, #16
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	2302      	movs	r3, #2
 800638a:	f240 112f 	movw	r1, #303	; 0x12f
 800638e:	2020      	movs	r0, #32
 8006390:	f7fe fb38 	bl	8004a04 <LCD_ShowxNum>
        LCD_ShowxNum(95, 289, info.curindex + 1, 3, 16, 0X80);           //索引
 8006394:	4b12      	ldr	r3, [pc, #72]	; (80063e0 <show_all+0x33c>)
 8006396:	88db      	ldrh	r3, [r3, #6]
 8006398:	3301      	adds	r3, #1
 800639a:	461a      	mov	r2, r3
 800639c:	2380      	movs	r3, #128	; 0x80
 800639e:	9301      	str	r3, [sp, #4]
 80063a0:	2310      	movs	r3, #16
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	2303      	movs	r3, #3
 80063a6:	f240 1121 	movw	r1, #289	; 0x121
 80063aa:	205f      	movs	r0, #95	; 0x5f
 80063ac:	f7fe fb2a 	bl	8004a04 <LCD_ShowxNum>
        LCD_ShowChar(95 + 24, 289, '/', 16, 0);
 80063b0:	2300      	movs	r3, #0
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	2310      	movs	r3, #16
 80063b6:	222f      	movs	r2, #47	; 0x2f
 80063b8:	f240 1121 	movw	r1, #289	; 0x121
 80063bc:	2077      	movs	r0, #119	; 0x77
 80063be:	f7fe fa49 	bl	8004854 <LCD_ShowChar>
        LCD_ShowxNum(95 + 32, 289, info.totmp3num, 3, 16, 0X80); //总曲目
 80063c2:	4b07      	ldr	r3, [pc, #28]	; (80063e0 <show_all+0x33c>)
 80063c4:	889b      	ldrh	r3, [r3, #4]
 80063c6:	461a      	mov	r2, r3
 80063c8:	2380      	movs	r3, #128	; 0x80
 80063ca:	9301      	str	r3, [sp, #4]
 80063cc:	2310      	movs	r3, #16
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	2303      	movs	r3, #3
 80063d2:	f240 1121 	movw	r1, #289	; 0x121
 80063d6:	207f      	movs	r0, #127	; 0x7f
 80063d8:	f7fe fb14 	bl	8004a04 <LCD_ShowxNum>
}
 80063dc:	e138      	b.n	8006650 <show_all+0x5ac>
 80063de:	bf00      	nop
 80063e0:	20001fdc 	.word	0x20001fdc
 80063e4:	88888889 	.word	0x88888889
 80063e8:	080126ec 	.word	0x080126ec
 80063ec:	080126f4 	.word	0x080126f4
 80063f0:	20000140 	.word	0x20000140
 80063f4:	66666667 	.word	0x66666667
    else if (mode == 2)
 80063f8:	79fb      	ldrb	r3, [r7, #7]
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	f040 8128 	bne.w	8006650 <show_all+0x5ac>
        Show_Str(88, 20, 64, 16, "音效设置", 16, 0);
 8006400:	2300      	movs	r3, #0
 8006402:	9302      	str	r3, [sp, #8]
 8006404:	2310      	movs	r3, #16
 8006406:	9301      	str	r3, [sp, #4]
 8006408:	4b93      	ldr	r3, [pc, #588]	; (8006658 <show_all+0x5b4>)
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	2310      	movs	r3, #16
 800640e:	2240      	movs	r2, #64	; 0x40
 8006410:	2114      	movs	r1, #20
 8006412:	2058      	movs	r0, #88	; 0x58
 8006414:	f7fb fb58 	bl	8001ac8 <Show_Str>
        Show_Str(10, 44, 64, 16, "音量大小", 16, 0);
 8006418:	2300      	movs	r3, #0
 800641a:	9302      	str	r3, [sp, #8]
 800641c:	2310      	movs	r3, #16
 800641e:	9301      	str	r3, [sp, #4]
 8006420:	4b8e      	ldr	r3, [pc, #568]	; (800665c <show_all+0x5b8>)
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	2310      	movs	r3, #16
 8006426:	2240      	movs	r2, #64	; 0x40
 8006428:	212c      	movs	r1, #44	; 0x2c
 800642a:	200a      	movs	r0, #10
 800642c:	f7fb fb4c 	bl	8001ac8 <Show_Str>
        Show_Str(10, 76, 64, 16, "低音频率", 16, 0);
 8006430:	2300      	movs	r3, #0
 8006432:	9302      	str	r3, [sp, #8]
 8006434:	2310      	movs	r3, #16
 8006436:	9301      	str	r3, [sp, #4]
 8006438:	4b89      	ldr	r3, [pc, #548]	; (8006660 <show_all+0x5bc>)
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	2310      	movs	r3, #16
 800643e:	2240      	movs	r2, #64	; 0x40
 8006440:	214c      	movs	r1, #76	; 0x4c
 8006442:	200a      	movs	r0, #10
 8006444:	f7fb fb40 	bl	8001ac8 <Show_Str>
        Show_Str(10, 108, 64, 16, "低音增益", 16, 0);
 8006448:	2300      	movs	r3, #0
 800644a:	9302      	str	r3, [sp, #8]
 800644c:	2310      	movs	r3, #16
 800644e:	9301      	str	r3, [sp, #4]
 8006450:	4b84      	ldr	r3, [pc, #528]	; (8006664 <show_all+0x5c0>)
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	2310      	movs	r3, #16
 8006456:	2240      	movs	r2, #64	; 0x40
 8006458:	216c      	movs	r1, #108	; 0x6c
 800645a:	200a      	movs	r0, #10
 800645c:	f7fb fb34 	bl	8001ac8 <Show_Str>
        Show_Str(10, 140, 64, 16, "高音频率", 16, 0);
 8006460:	2300      	movs	r3, #0
 8006462:	9302      	str	r3, [sp, #8]
 8006464:	2310      	movs	r3, #16
 8006466:	9301      	str	r3, [sp, #4]
 8006468:	4b7f      	ldr	r3, [pc, #508]	; (8006668 <show_all+0x5c4>)
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	2310      	movs	r3, #16
 800646e:	2240      	movs	r2, #64	; 0x40
 8006470:	218c      	movs	r1, #140	; 0x8c
 8006472:	200a      	movs	r0, #10
 8006474:	f7fb fb28 	bl	8001ac8 <Show_Str>
        Show_Str(10, 172, 64, 16, "高音增益", 16, 0);
 8006478:	2300      	movs	r3, #0
 800647a:	9302      	str	r3, [sp, #8]
 800647c:	2310      	movs	r3, #16
 800647e:	9301      	str	r3, [sp, #4]
 8006480:	4b7a      	ldr	r3, [pc, #488]	; (800666c <show_all+0x5c8>)
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	2310      	movs	r3, #16
 8006486:	2240      	movs	r2, #64	; 0x40
 8006488:	21ac      	movs	r1, #172	; 0xac
 800648a:	200a      	movs	r0, #10
 800648c:	f7fb fb1c 	bl	8001ac8 <Show_Str>
        Show_Str(10, 204, 64, 16, "空间效果", 16, 0);
 8006490:	2300      	movs	r3, #0
 8006492:	9302      	str	r3, [sp, #8]
 8006494:	2310      	movs	r3, #16
 8006496:	9301      	str	r3, [sp, #4]
 8006498:	4b75      	ldr	r3, [pc, #468]	; (8006670 <show_all+0x5cc>)
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	2310      	movs	r3, #16
 800649e:	2240      	movs	r2, #64	; 0x40
 80064a0:	21cc      	movs	r1, #204	; 0xcc
 80064a2:	200a      	movs	r0, #10
 80064a4:	f7fb fb10 	bl	8001ac8 <Show_Str>
        LCD_ShowString(94, 40, 32, 24, 24, "<");
 80064a8:	4b72      	ldr	r3, [pc, #456]	; (8006674 <show_all+0x5d0>)
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	2318      	movs	r3, #24
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	2318      	movs	r3, #24
 80064b2:	2220      	movs	r2, #32
 80064b4:	2128      	movs	r1, #40	; 0x28
 80064b6:	205e      	movs	r0, #94	; 0x5e
 80064b8:	f7fe fb40 	bl	8004b3c <LCD_ShowString>
        LCD_ShowString(94, 72, 32, 24, 24, "<");
 80064bc:	4b6d      	ldr	r3, [pc, #436]	; (8006674 <show_all+0x5d0>)
 80064be:	9301      	str	r3, [sp, #4]
 80064c0:	2318      	movs	r3, #24
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	2318      	movs	r3, #24
 80064c6:	2220      	movs	r2, #32
 80064c8:	2148      	movs	r1, #72	; 0x48
 80064ca:	205e      	movs	r0, #94	; 0x5e
 80064cc:	f7fe fb36 	bl	8004b3c <LCD_ShowString>
        LCD_ShowString(94, 104, 32, 24, 24, "<");
 80064d0:	4b68      	ldr	r3, [pc, #416]	; (8006674 <show_all+0x5d0>)
 80064d2:	9301      	str	r3, [sp, #4]
 80064d4:	2318      	movs	r3, #24
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	2318      	movs	r3, #24
 80064da:	2220      	movs	r2, #32
 80064dc:	2168      	movs	r1, #104	; 0x68
 80064de:	205e      	movs	r0, #94	; 0x5e
 80064e0:	f7fe fb2c 	bl	8004b3c <LCD_ShowString>
        LCD_ShowString(94, 136, 32, 24, 24, "<");
 80064e4:	4b63      	ldr	r3, [pc, #396]	; (8006674 <show_all+0x5d0>)
 80064e6:	9301      	str	r3, [sp, #4]
 80064e8:	2318      	movs	r3, #24
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	2318      	movs	r3, #24
 80064ee:	2220      	movs	r2, #32
 80064f0:	2188      	movs	r1, #136	; 0x88
 80064f2:	205e      	movs	r0, #94	; 0x5e
 80064f4:	f7fe fb22 	bl	8004b3c <LCD_ShowString>
        LCD_ShowString(94, 168, 32, 24, 24, "<");
 80064f8:	4b5e      	ldr	r3, [pc, #376]	; (8006674 <show_all+0x5d0>)
 80064fa:	9301      	str	r3, [sp, #4]
 80064fc:	2318      	movs	r3, #24
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	2318      	movs	r3, #24
 8006502:	2220      	movs	r2, #32
 8006504:	21a8      	movs	r1, #168	; 0xa8
 8006506:	205e      	movs	r0, #94	; 0x5e
 8006508:	f7fe fb18 	bl	8004b3c <LCD_ShowString>
        LCD_ShowString(94, 200, 32, 24, 24, "<");
 800650c:	4b59      	ldr	r3, [pc, #356]	; (8006674 <show_all+0x5d0>)
 800650e:	9301      	str	r3, [sp, #4]
 8006510:	2318      	movs	r3, #24
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	2318      	movs	r3, #24
 8006516:	2220      	movs	r2, #32
 8006518:	21c8      	movs	r1, #200	; 0xc8
 800651a:	205e      	movs	r0, #94	; 0x5e
 800651c:	f7fe fb0e 	bl	8004b3c <LCD_ShowString>
        LCD_ShowxNum(126, 44, (vsset.mvol - 100) / 10, 2, 16, 0X80);
 8006520:	4b55      	ldr	r3, [pc, #340]	; (8006678 <show_all+0x5d4>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	3b64      	subs	r3, #100	; 0x64
 8006526:	4a55      	ldr	r2, [pc, #340]	; (800667c <show_all+0x5d8>)
 8006528:	fb82 1203 	smull	r1, r2, r2, r3
 800652c:	1092      	asrs	r2, r2, #2
 800652e:	17db      	asrs	r3, r3, #31
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	461a      	mov	r2, r3
 8006534:	2380      	movs	r3, #128	; 0x80
 8006536:	9301      	str	r3, [sp, #4]
 8006538:	2310      	movs	r3, #16
 800653a:	9300      	str	r3, [sp, #0]
 800653c:	2302      	movs	r3, #2
 800653e:	212c      	movs	r1, #44	; 0x2c
 8006540:	207e      	movs	r0, #126	; 0x7e
 8006542:	f7fe fa5f 	bl	8004a04 <LCD_ShowxNum>
        LCD_ShowxNum(126, 76, vsset.bflimit, 2, 16, 0X80);
 8006546:	4b4c      	ldr	r3, [pc, #304]	; (8006678 <show_all+0x5d4>)
 8006548:	785b      	ldrb	r3, [r3, #1]
 800654a:	461a      	mov	r2, r3
 800654c:	2380      	movs	r3, #128	; 0x80
 800654e:	9301      	str	r3, [sp, #4]
 8006550:	2310      	movs	r3, #16
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	2302      	movs	r3, #2
 8006556:	214c      	movs	r1, #76	; 0x4c
 8006558:	207e      	movs	r0, #126	; 0x7e
 800655a:	f7fe fa53 	bl	8004a04 <LCD_ShowxNum>
        LCD_ShowxNum(126, 108, vsset.bass, 2, 16, 0X80);
 800655e:	4b46      	ldr	r3, [pc, #280]	; (8006678 <show_all+0x5d4>)
 8006560:	789b      	ldrb	r3, [r3, #2]
 8006562:	461a      	mov	r2, r3
 8006564:	2380      	movs	r3, #128	; 0x80
 8006566:	9301      	str	r3, [sp, #4]
 8006568:	2310      	movs	r3, #16
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	2302      	movs	r3, #2
 800656e:	216c      	movs	r1, #108	; 0x6c
 8006570:	207e      	movs	r0, #126	; 0x7e
 8006572:	f7fe fa47 	bl	8004a04 <LCD_ShowxNum>
        LCD_ShowxNum(126, 140, vsset.tflimit, 2, 16, 0X80);
 8006576:	4b40      	ldr	r3, [pc, #256]	; (8006678 <show_all+0x5d4>)
 8006578:	78db      	ldrb	r3, [r3, #3]
 800657a:	461a      	mov	r2, r3
 800657c:	2380      	movs	r3, #128	; 0x80
 800657e:	9301      	str	r3, [sp, #4]
 8006580:	2310      	movs	r3, #16
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	2302      	movs	r3, #2
 8006586:	218c      	movs	r1, #140	; 0x8c
 8006588:	207e      	movs	r0, #126	; 0x7e
 800658a:	f7fe fa3b 	bl	8004a04 <LCD_ShowxNum>
        LCD_ShowxNum(126, 172, vsset.treble, 2, 16, 0X80);
 800658e:	4b3a      	ldr	r3, [pc, #232]	; (8006678 <show_all+0x5d4>)
 8006590:	791b      	ldrb	r3, [r3, #4]
 8006592:	461a      	mov	r2, r3
 8006594:	2380      	movs	r3, #128	; 0x80
 8006596:	9301      	str	r3, [sp, #4]
 8006598:	2310      	movs	r3, #16
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	2302      	movs	r3, #2
 800659e:	21ac      	movs	r1, #172	; 0xac
 80065a0:	207e      	movs	r0, #126	; 0x7e
 80065a2:	f7fe fa2f 	bl	8004a04 <LCD_ShowxNum>
        LCD_ShowxNum(130, 204, vsset.effect, 1, 16, 0X80);
 80065a6:	4b34      	ldr	r3, [pc, #208]	; (8006678 <show_all+0x5d4>)
 80065a8:	795b      	ldrb	r3, [r3, #5]
 80065aa:	461a      	mov	r2, r3
 80065ac:	2380      	movs	r3, #128	; 0x80
 80065ae:	9301      	str	r3, [sp, #4]
 80065b0:	2310      	movs	r3, #16
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	2301      	movs	r3, #1
 80065b6:	21cc      	movs	r1, #204	; 0xcc
 80065b8:	2082      	movs	r0, #130	; 0x82
 80065ba:	f7fe fa23 	bl	8004a04 <LCD_ShowxNum>
        LCD_ShowString(162, 40, 32, 24, 24, ">");
 80065be:	4b30      	ldr	r3, [pc, #192]	; (8006680 <show_all+0x5dc>)
 80065c0:	9301      	str	r3, [sp, #4]
 80065c2:	2318      	movs	r3, #24
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	2318      	movs	r3, #24
 80065c8:	2220      	movs	r2, #32
 80065ca:	2128      	movs	r1, #40	; 0x28
 80065cc:	20a2      	movs	r0, #162	; 0xa2
 80065ce:	f7fe fab5 	bl	8004b3c <LCD_ShowString>
        LCD_ShowString(162, 72, 32, 24, 24, ">");
 80065d2:	4b2b      	ldr	r3, [pc, #172]	; (8006680 <show_all+0x5dc>)
 80065d4:	9301      	str	r3, [sp, #4]
 80065d6:	2318      	movs	r3, #24
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	2318      	movs	r3, #24
 80065dc:	2220      	movs	r2, #32
 80065de:	2148      	movs	r1, #72	; 0x48
 80065e0:	20a2      	movs	r0, #162	; 0xa2
 80065e2:	f7fe faab 	bl	8004b3c <LCD_ShowString>
        LCD_ShowString(162, 104, 32, 24, 24, ">");
 80065e6:	4b26      	ldr	r3, [pc, #152]	; (8006680 <show_all+0x5dc>)
 80065e8:	9301      	str	r3, [sp, #4]
 80065ea:	2318      	movs	r3, #24
 80065ec:	9300      	str	r3, [sp, #0]
 80065ee:	2318      	movs	r3, #24
 80065f0:	2220      	movs	r2, #32
 80065f2:	2168      	movs	r1, #104	; 0x68
 80065f4:	20a2      	movs	r0, #162	; 0xa2
 80065f6:	f7fe faa1 	bl	8004b3c <LCD_ShowString>
        LCD_ShowString(162, 136, 32, 24, 24, ">");
 80065fa:	4b21      	ldr	r3, [pc, #132]	; (8006680 <show_all+0x5dc>)
 80065fc:	9301      	str	r3, [sp, #4]
 80065fe:	2318      	movs	r3, #24
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	2318      	movs	r3, #24
 8006604:	2220      	movs	r2, #32
 8006606:	2188      	movs	r1, #136	; 0x88
 8006608:	20a2      	movs	r0, #162	; 0xa2
 800660a:	f7fe fa97 	bl	8004b3c <LCD_ShowString>
        LCD_ShowString(162, 168, 32, 24, 24, ">");
 800660e:	4b1c      	ldr	r3, [pc, #112]	; (8006680 <show_all+0x5dc>)
 8006610:	9301      	str	r3, [sp, #4]
 8006612:	2318      	movs	r3, #24
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	2318      	movs	r3, #24
 8006618:	2220      	movs	r2, #32
 800661a:	21a8      	movs	r1, #168	; 0xa8
 800661c:	20a2      	movs	r0, #162	; 0xa2
 800661e:	f7fe fa8d 	bl	8004b3c <LCD_ShowString>
        LCD_ShowString(162, 200, 32, 24, 24, ">");
 8006622:	4b17      	ldr	r3, [pc, #92]	; (8006680 <show_all+0x5dc>)
 8006624:	9301      	str	r3, [sp, #4]
 8006626:	2318      	movs	r3, #24
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	2318      	movs	r3, #24
 800662c:	2220      	movs	r2, #32
 800662e:	21c8      	movs	r1, #200	; 0xc8
 8006630:	20a2      	movs	r0, #162	; 0xa2
 8006632:	f7fe fa83 	bl	8004b3c <LCD_ShowString>
        Show_Str(186, 292, 48, 24, "保存", 24, 0);
 8006636:	2300      	movs	r3, #0
 8006638:	9302      	str	r3, [sp, #8]
 800663a:	2318      	movs	r3, #24
 800663c:	9301      	str	r3, [sp, #4]
 800663e:	4b11      	ldr	r3, [pc, #68]	; (8006684 <show_all+0x5e0>)
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	2318      	movs	r3, #24
 8006644:	2230      	movs	r2, #48	; 0x30
 8006646:	f44f 7192 	mov.w	r1, #292	; 0x124
 800664a:	20ba      	movs	r0, #186	; 0xba
 800664c:	f7fb fa3c 	bl	8001ac8 <Show_Str>
}
 8006650:	bf00      	nop
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	080126fc 	.word	0x080126fc
 800665c:	0801270c 	.word	0x0801270c
 8006660:	0801271c 	.word	0x0801271c
 8006664:	0801272c 	.word	0x0801272c
 8006668:	0801273c 	.word	0x0801273c
 800666c:	0801274c 	.word	0x0801274c
 8006670:	0801275c 	.word	0x0801275c
 8006674:	0801276c 	.word	0x0801276c
 8006678:	20000140 	.word	0x20000140
 800667c:	66666667 	.word	0x66666667
 8006680:	08012770 	.word	0x08012770
 8006684:	08012774 	.word	0x08012774

08006688 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b01      	cmp	r3, #1
 800669a:	d101      	bne.n	80066a0 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800669c:	2301      	movs	r3, #1
 800669e:	e000      	b.n	80066a2 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bc80      	pop	{r7}
 80066aa:	4770      	bx	lr

080066ac <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f003 0302 	and.w	r3, r3, #2
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d101      	bne.n	80066c4 <LL_SPI_IsActiveFlag_TXE+0x18>
 80066c0:	2301      	movs	r3, #1
 80066c2:	e000      	b.n	80066c6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bc80      	pop	{r7}
 80066ce:	4770      	bx	lr

080066d0 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	330c      	adds	r3, #12
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	b2db      	uxtb	r3, r3
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bc80      	pop	{r7}
 80066e8:	4770      	bx	lr

080066ea <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b085      	sub	sp, #20
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
 80066f2:	460b      	mov	r3, r1
 80066f4:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	330c      	adds	r3, #12
 80066fa:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	78fa      	ldrb	r2, [r7, #3]
 8006700:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8006702:	bf00      	nop
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	bc80      	pop	{r7}
 800670a:	4770      	bx	lr

0800670c <SPI1_ReadWriteByte>:
#include "spi.h"

uint8_t SPI1_ReadWriteByte(uint8_t data)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	4603      	mov	r3, r0
 8006714:	71fb      	strb	r3, [r7, #7]
    uint8_t retry = 0;
 8006716:	2300      	movs	r3, #0
 8006718:	73fb      	strb	r3, [r7, #15]

    /* Check if Tx buffer is empty */
    while (!LL_SPI_IsActiveFlag_TXE(SPI1))
 800671a:	e007      	b.n	800672c <SPI1_ReadWriteByte+0x20>
    {
        retry++;
 800671c:	7bfb      	ldrb	r3, [r7, #15]
 800671e:	3301      	adds	r3, #1
 8006720:	73fb      	strb	r3, [r7, #15]
        if (retry > 200)
 8006722:	7bfb      	ldrb	r3, [r7, #15]
 8006724:	2bc8      	cmp	r3, #200	; 0xc8
 8006726:	d901      	bls.n	800672c <SPI1_ReadWriteByte+0x20>
            return 0;
 8006728:	2300      	movs	r3, #0
 800672a:	e01f      	b.n	800676c <SPI1_ReadWriteByte+0x60>
    while (!LL_SPI_IsActiveFlag_TXE(SPI1))
 800672c:	4811      	ldr	r0, [pc, #68]	; (8006774 <SPI1_ReadWriteByte+0x68>)
 800672e:	f7ff ffbd 	bl	80066ac <LL_SPI_IsActiveFlag_TXE>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0f1      	beq.n	800671c <SPI1_ReadWriteByte+0x10>
    }

    /* Write character in Data register.
	TXE flag is cleared by reading data in DR register */
    LL_SPI_TransmitData8(SPI1, data);
 8006738:	79fb      	ldrb	r3, [r7, #7]
 800673a:	4619      	mov	r1, r3
 800673c:	480d      	ldr	r0, [pc, #52]	; (8006774 <SPI1_ReadWriteByte+0x68>)
 800673e:	f7ff ffd4 	bl	80066ea <LL_SPI_TransmitData8>
    retry = 0;
 8006742:	2300      	movs	r3, #0
 8006744:	73fb      	strb	r3, [r7, #15]

    /* Check if Rx buffer is not empty */
    while (!LL_SPI_IsActiveFlag_RXNE(SPI1))
 8006746:	e007      	b.n	8006758 <SPI1_ReadWriteByte+0x4c>
    {
        retry++;
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	3301      	adds	r3, #1
 800674c:	73fb      	strb	r3, [r7, #15]
        if (retry > 200)
 800674e:	7bfb      	ldrb	r3, [r7, #15]
 8006750:	2bc8      	cmp	r3, #200	; 0xc8
 8006752:	d901      	bls.n	8006758 <SPI1_ReadWriteByte+0x4c>
            return 0;
 8006754:	2300      	movs	r3, #0
 8006756:	e009      	b.n	800676c <SPI1_ReadWriteByte+0x60>
    while (!LL_SPI_IsActiveFlag_RXNE(SPI1))
 8006758:	4806      	ldr	r0, [pc, #24]	; (8006774 <SPI1_ReadWriteByte+0x68>)
 800675a:	f7ff ff95 	bl	8006688 <LL_SPI_IsActiveFlag_RXNE>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d0f1      	beq.n	8006748 <SPI1_ReadWriteByte+0x3c>
    }

    /* received byte from SPI lines. */
    return LL_SPI_ReceiveData8(SPI1);
 8006764:	4803      	ldr	r0, [pc, #12]	; (8006774 <SPI1_ReadWriteByte+0x68>)
 8006766:	f7ff ffb3 	bl	80066d0 <LL_SPI_ReceiveData8>
 800676a:	4603      	mov	r3, r0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	40013000 	.word	0x40013000

08006778 <LL_SPI_SetBaudRatePrescaler>:
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	431a      	orrs	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	601a      	str	r2, [r3, #0]
}
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	bc80      	pop	{r7}
 800679a:	4770      	bx	lr

0800679c <VS_SPI_SpeedLow>:
};

////////////////////////////////////////////////////////////////////////////////
//SD卡初始化的时候,需要低速
void VS_SPI_SpeedLow(void)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	af00      	add	r7, sp, #0
    LL_SPI_SetBaudRatePrescaler(SPI1, LL_SPI_BAUDRATEPRESCALER_DIV32);
 80067a0:	2120      	movs	r1, #32
 80067a2:	4802      	ldr	r0, [pc, #8]	; (80067ac <VS_SPI_SpeedLow+0x10>)
 80067a4:	f7ff ffe8 	bl	8006778 <LL_SPI_SetBaudRatePrescaler>
}
 80067a8:	bf00      	nop
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	40013000 	.word	0x40013000

080067b0 <VS_SPI_SpeedHigh>:
//SD卡正常工作的时候,可以高速了
void VS_SPI_SpeedHigh(void)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	af00      	add	r7, sp, #0
    LL_SPI_SetBaudRatePrescaler(SPI1, LL_SPI_BAUDRATEPRESCALER_DIV4);
 80067b4:	2108      	movs	r1, #8
 80067b6:	4802      	ldr	r0, [pc, #8]	; (80067c0 <VS_SPI_SpeedHigh+0x10>)
 80067b8:	f7ff ffde 	bl	8006778 <LL_SPI_SetBaudRatePrescaler>
}
 80067bc:	bf00      	nop
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	40013000 	.word	0x40013000

080067c4 <VS_SPI_ReadWriteByte>:
uint8_t VS_SPI_ReadWriteByte(uint8_t data)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	4603      	mov	r3, r0
 80067cc:	71fb      	strb	r3, [r7, #7]
    return SPI1_ReadWriteByte(data);
 80067ce:	79fb      	ldrb	r3, [r7, #7]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7ff ff9b 	bl	800670c <SPI1_ReadWriteByte>
 80067d6:	4603      	mov	r3, r0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <VS_Soft_Reset>:
////////////////////////////////////////////////////////////////////////////////
//软复位VS10XX
void VS_Soft_Reset(void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
    uint8_t retry = 0;
 80067e6:	2300      	movs	r3, #0
 80067e8:	71fb      	strb	r3, [r7, #7]
    while (VS_DQ == 0)
 80067ea:	bf00      	nop
 80067ec:	4b20      	ldr	r3, [pc, #128]	; (8006870 <VS_Soft_Reset+0x90>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d0fb      	beq.n	80067ec <VS_Soft_Reset+0xc>
        ;                       //等待软件复位结束
    VS_SPI_ReadWriteByte(0Xff); //启动传输
 80067f4:	20ff      	movs	r0, #255	; 0xff
 80067f6:	f7ff ffe5 	bl	80067c4 <VS_SPI_ReadWriteByte>
    retry = 0;
 80067fa:	2300      	movs	r3, #0
 80067fc:	71fb      	strb	r3, [r7, #7]
    while (VS_RD_Reg(SPI_MODE) != 0x0800) // 软件复位,新模式
 80067fe:	e00c      	b.n	800681a <VS_Soft_Reset+0x3a>
    {
        VS_WR_Cmd(SPI_MODE, 0x0804);   // 软件复位,新模式
 8006800:	f640 0104 	movw	r1, #2052	; 0x804
 8006804:	2000      	movs	r0, #0
 8006806:	f000 f90d 	bl	8006a24 <VS_WR_Cmd>
        osDelay(2 / portTICK_RATE_MS); //等待至少1.35ms
 800680a:	2002      	movs	r0, #2
 800680c:	f007 fdb4 	bl	800e378 <osDelay>
        if (retry++ > 100)
 8006810:	79fb      	ldrb	r3, [r7, #7]
 8006812:	1c5a      	adds	r2, r3, #1
 8006814:	71fa      	strb	r2, [r7, #7]
 8006816:	2b64      	cmp	r3, #100	; 0x64
 8006818:	d807      	bhi.n	800682a <VS_Soft_Reset+0x4a>
    while (VS_RD_Reg(SPI_MODE) != 0x0800) // 软件复位,新模式
 800681a:	2000      	movs	r0, #0
 800681c:	f000 f93a 	bl	8006a94 <VS_RD_Reg>
 8006820:	4603      	mov	r3, r0
 8006822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006826:	d1eb      	bne.n	8006800 <VS_Soft_Reset+0x20>
 8006828:	e000      	b.n	800682c <VS_Soft_Reset+0x4c>
            break;
 800682a:	bf00      	nop
    }
    while (VS_DQ == 0)
 800682c:	bf00      	nop
 800682e:	4b10      	ldr	r3, [pc, #64]	; (8006870 <VS_Soft_Reset+0x90>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d0fb      	beq.n	800682e <VS_Soft_Reset+0x4e>
        ; //等待软件复位结束
    retry = 0;
 8006836:	2300      	movs	r3, #0
 8006838:	71fb      	strb	r3, [r7, #7]
    while (VS_RD_Reg(SPI_CLOCKF) != 0X9800) //设置VS10XX的时钟,3倍频 ,1.5xADD
 800683a:	e009      	b.n	8006850 <VS_Soft_Reset+0x70>
    {
        VS_WR_Cmd(SPI_CLOCKF, 0X9800); //设置VS10XX的时钟,3倍频 ,1.5xADD
 800683c:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 8006840:	2003      	movs	r0, #3
 8006842:	f000 f8ef 	bl	8006a24 <VS_WR_Cmd>
        if (retry++ > 100)
 8006846:	79fb      	ldrb	r3, [r7, #7]
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	71fa      	strb	r2, [r7, #7]
 800684c:	2b64      	cmp	r3, #100	; 0x64
 800684e:	d807      	bhi.n	8006860 <VS_Soft_Reset+0x80>
    while (VS_RD_Reg(SPI_CLOCKF) != 0X9800) //设置VS10XX的时钟,3倍频 ,1.5xADD
 8006850:	2003      	movs	r0, #3
 8006852:	f000 f91f 	bl	8006a94 <VS_RD_Reg>
 8006856:	4603      	mov	r3, r0
 8006858:	f5b3 4f18 	cmp.w	r3, #38912	; 0x9800
 800685c:	d1ee      	bne.n	800683c <VS_Soft_Reset+0x5c>
 800685e:	e000      	b.n	8006862 <VS_Soft_Reset+0x82>
            break;
 8006860:	bf00      	nop
    }
    osDelay(20 / portTICK_RATE_MS);
 8006862:	2014      	movs	r0, #20
 8006864:	f007 fd88 	bl	800e378 <osDelay>
}
 8006868:	bf00      	nop
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	4221010c 	.word	0x4221010c

08006874 <VS_HD_Reset>:
//硬复位MP3
//返回1:复位失败;0:复位成功
uint8_t VS_HD_Reset(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
    uint8_t retry = 0;
 800687a:	2300      	movs	r3, #0
 800687c:	71fb      	strb	r3, [r7, #7]
    VS_RST = 0;
 800687e:	4b15      	ldr	r3, [pc, #84]	; (80068d4 <VS_HD_Reset+0x60>)
 8006880:	2200      	movs	r2, #0
 8006882:	601a      	str	r2, [r3, #0]
    osDelay(20 / portTICK_RATE_MS);
 8006884:	2014      	movs	r0, #20
 8006886:	f007 fd77 	bl	800e378 <osDelay>
    VS_XDCS = 1; //取消数据传输
 800688a:	4b13      	ldr	r3, [pc, #76]	; (80068d8 <VS_HD_Reset+0x64>)
 800688c:	2201      	movs	r2, #1
 800688e:	601a      	str	r2, [r3, #0]
    VS_XCS = 1;  //取消数据传输
 8006890:	4b12      	ldr	r3, [pc, #72]	; (80068dc <VS_HD_Reset+0x68>)
 8006892:	2201      	movs	r2, #1
 8006894:	601a      	str	r2, [r3, #0]
    VS_RST = 1;
 8006896:	4b0f      	ldr	r3, [pc, #60]	; (80068d4 <VS_HD_Reset+0x60>)
 8006898:	2201      	movs	r2, #1
 800689a:	601a      	str	r2, [r3, #0]
    while (VS_DQ == 0 && retry < 200) //等待DREQ为高
 800689c:	e005      	b.n	80068aa <VS_HD_Reset+0x36>
    {
        retry++;
 800689e:	79fb      	ldrb	r3, [r7, #7]
 80068a0:	3301      	adds	r3, #1
 80068a2:	71fb      	strb	r3, [r7, #7]
        osDelay(1 / portTICK_RATE_MS);
 80068a4:	2001      	movs	r0, #1
 80068a6:	f007 fd67 	bl	800e378 <osDelay>
    while (VS_DQ == 0 && retry < 200) //等待DREQ为高
 80068aa:	4b0d      	ldr	r3, [pc, #52]	; (80068e0 <VS_HD_Reset+0x6c>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d102      	bne.n	80068b8 <VS_HD_Reset+0x44>
 80068b2:	79fb      	ldrb	r3, [r7, #7]
 80068b4:	2bc7      	cmp	r3, #199	; 0xc7
 80068b6:	d9f2      	bls.n	800689e <VS_HD_Reset+0x2a>
    };
    osDelay(20 / portTICK_RATE_MS);
 80068b8:	2014      	movs	r0, #20
 80068ba:	f007 fd5d 	bl	800e378 <osDelay>
    if (retry >= 200)
 80068be:	79fb      	ldrb	r3, [r7, #7]
 80068c0:	2bc7      	cmp	r3, #199	; 0xc7
 80068c2:	d901      	bls.n	80068c8 <VS_HD_Reset+0x54>
        return 1;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <VS_HD_Reset+0x56>
    else
        return 0;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	42210188 	.word	0x42210188
 80068d8:	42210180 	.word	0x42210180
 80068dc:	42210184 	.word	0x42210184
 80068e0:	4221010c 	.word	0x4221010c

080068e4 <VS_Sine_Test>:
//正弦测试
void VS_Sine_Test(void)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	af00      	add	r7, sp, #0
    VS_HD_Reset();
 80068e8:	f7ff ffc4 	bl	8006874 <VS_HD_Reset>
    VS_Soft_Reset();
 80068ec:	f7ff ff78 	bl	80067e0 <VS_Soft_Reset>
    VS_Set_Vol(100);
 80068f0:	2064      	movs	r0, #100	; 0x64
 80068f2:	f000 faa5 	bl	8006e40 <VS_Set_Vol>
    VS_WR_Cmd(SPI_MODE, 0x0820); //进入VS10XX的测试模式
 80068f6:	f44f 6102 	mov.w	r1, #2080	; 0x820
 80068fa:	2000      	movs	r0, #0
 80068fc:	f000 f892 	bl	8006a24 <VS_WR_Cmd>
    while (VS_DQ == 0)
 8006900:	bf00      	nop
 8006902:	4b46      	ldr	r3, [pc, #280]	; (8006a1c <VS_Sine_Test+0x138>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d0fb      	beq.n	8006902 <VS_Sine_Test+0x1e>
        ; //等待DREQ为高
    //向VS10XX发送正弦测试命令：0x53 0xef 0x6e n 0x00 0x00 0x00 0x00
    //其中n = 0x24, 设定VS10XX所产生的正弦波的频率值，具体计算方法见VS10XX的datasheet
    VS_SPI_SpeedLow(); //低速
 800690a:	f7ff ff47 	bl	800679c <VS_SPI_SpeedLow>
    VS_XDCS = 0;       //选中数据传输
 800690e:	4b44      	ldr	r3, [pc, #272]	; (8006a20 <VS_Sine_Test+0x13c>)
 8006910:	2200      	movs	r2, #0
 8006912:	601a      	str	r2, [r3, #0]
    VS_SPI_ReadWriteByte(0x53);
 8006914:	2053      	movs	r0, #83	; 0x53
 8006916:	f7ff ff55 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0xef);
 800691a:	20ef      	movs	r0, #239	; 0xef
 800691c:	f7ff ff52 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x6e);
 8006920:	206e      	movs	r0, #110	; 0x6e
 8006922:	f7ff ff4f 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x24);
 8006926:	2024      	movs	r0, #36	; 0x24
 8006928:	f7ff ff4c 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x00);
 800692c:	2000      	movs	r0, #0
 800692e:	f7ff ff49 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x00);
 8006932:	2000      	movs	r0, #0
 8006934:	f7ff ff46 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x00);
 8006938:	2000      	movs	r0, #0
 800693a:	f7ff ff43 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x00);
 800693e:	2000      	movs	r0, #0
 8006940:	f7ff ff40 	bl	80067c4 <VS_SPI_ReadWriteByte>
    osDelay(100 / portTICK_RATE_MS);
 8006944:	2064      	movs	r0, #100	; 0x64
 8006946:	f007 fd17 	bl	800e378 <osDelay>
    VS_XDCS = 1;
 800694a:	4b35      	ldr	r3, [pc, #212]	; (8006a20 <VS_Sine_Test+0x13c>)
 800694c:	2201      	movs	r2, #1
 800694e:	601a      	str	r2, [r3, #0]
    //退出正弦测试
    VS_XDCS = 0; //选中数据传输
 8006950:	4b33      	ldr	r3, [pc, #204]	; (8006a20 <VS_Sine_Test+0x13c>)
 8006952:	2200      	movs	r2, #0
 8006954:	601a      	str	r2, [r3, #0]
    VS_SPI_ReadWriteByte(0x45);
 8006956:	2045      	movs	r0, #69	; 0x45
 8006958:	f7ff ff34 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x78);
 800695c:	2078      	movs	r0, #120	; 0x78
 800695e:	f7ff ff31 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x69);
 8006962:	2069      	movs	r0, #105	; 0x69
 8006964:	f7ff ff2e 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x74);
 8006968:	2074      	movs	r0, #116	; 0x74
 800696a:	f7ff ff2b 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x00);
 800696e:	2000      	movs	r0, #0
 8006970:	f7ff ff28 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x00);
 8006974:	2000      	movs	r0, #0
 8006976:	f7ff ff25 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x00);
 800697a:	2000      	movs	r0, #0
 800697c:	f7ff ff22 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x00);
 8006980:	2000      	movs	r0, #0
 8006982:	f7ff ff1f 	bl	80067c4 <VS_SPI_ReadWriteByte>
    osDelay(100 / portTICK_RATE_MS);
 8006986:	2064      	movs	r0, #100	; 0x64
 8006988:	f007 fcf6 	bl	800e378 <osDelay>
    VS_XDCS = 1;
 800698c:	4b24      	ldr	r3, [pc, #144]	; (8006a20 <VS_Sine_Test+0x13c>)
 800698e:	2201      	movs	r2, #1
 8006990:	601a      	str	r2, [r3, #0]

    //再次进入正弦测试并设置n值为0x44，即将正弦波的频率设置为另外的值
    VS_XDCS = 0; //选中数据传输
 8006992:	4b23      	ldr	r3, [pc, #140]	; (8006a20 <VS_Sine_Test+0x13c>)
 8006994:	2200      	movs	r2, #0
 8006996:	601a      	str	r2, [r3, #0]
    VS_SPI_ReadWriteByte(0x53);
 8006998:	2053      	movs	r0, #83	; 0x53
 800699a:	f7ff ff13 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0xef);
 800699e:	20ef      	movs	r0, #239	; 0xef
 80069a0:	f7ff ff10 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x6e);
 80069a4:	206e      	movs	r0, #110	; 0x6e
 80069a6:	f7ff ff0d 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x44);
 80069aa:	2044      	movs	r0, #68	; 0x44
 80069ac:	f7ff ff0a 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x00);
 80069b0:	2000      	movs	r0, #0
 80069b2:	f7ff ff07 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x00);
 80069b6:	2000      	movs	r0, #0
 80069b8:	f7ff ff04 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x00);
 80069bc:	2000      	movs	r0, #0
 80069be:	f7ff ff01 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x00);
 80069c2:	2000      	movs	r0, #0
 80069c4:	f7ff fefe 	bl	80067c4 <VS_SPI_ReadWriteByte>
    osDelay(100 / portTICK_RATE_MS);
 80069c8:	2064      	movs	r0, #100	; 0x64
 80069ca:	f007 fcd5 	bl	800e378 <osDelay>
    VS_XDCS = 1;
 80069ce:	4b14      	ldr	r3, [pc, #80]	; (8006a20 <VS_Sine_Test+0x13c>)
 80069d0:	2201      	movs	r2, #1
 80069d2:	601a      	str	r2, [r3, #0]
    //退出正弦测试
    VS_XDCS = 0; //选中数据传输
 80069d4:	4b12      	ldr	r3, [pc, #72]	; (8006a20 <VS_Sine_Test+0x13c>)
 80069d6:	2200      	movs	r2, #0
 80069d8:	601a      	str	r2, [r3, #0]
    VS_SPI_ReadWriteByte(0x45);
 80069da:	2045      	movs	r0, #69	; 0x45
 80069dc:	f7ff fef2 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x78);
 80069e0:	2078      	movs	r0, #120	; 0x78
 80069e2:	f7ff feef 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x69);
 80069e6:	2069      	movs	r0, #105	; 0x69
 80069e8:	f7ff feec 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x74);
 80069ec:	2074      	movs	r0, #116	; 0x74
 80069ee:	f7ff fee9 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x00);
 80069f2:	2000      	movs	r0, #0
 80069f4:	f7ff fee6 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x00);
 80069f8:	2000      	movs	r0, #0
 80069fa:	f7ff fee3 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x00);
 80069fe:	2000      	movs	r0, #0
 8006a00:	f7ff fee0 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(0x00);
 8006a04:	2000      	movs	r0, #0
 8006a06:	f7ff fedd 	bl	80067c4 <VS_SPI_ReadWriteByte>
    osDelay(100 / portTICK_RATE_MS);
 8006a0a:	2064      	movs	r0, #100	; 0x64
 8006a0c:	f007 fcb4 	bl	800e378 <osDelay>
    VS_XDCS = 1;
 8006a10:	4b03      	ldr	r3, [pc, #12]	; (8006a20 <VS_Sine_Test+0x13c>)
 8006a12:	2201      	movs	r2, #1
 8006a14:	601a      	str	r2, [r3, #0]
}
 8006a16:	bf00      	nop
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	4221010c 	.word	0x4221010c
 8006a20:	42210180 	.word	0x42210180

08006a24 <VS_WR_Cmd>:
}
//向VS10XX写命令
//address:命令地址
//data:命令数据
void VS_WR_Cmd(uint8_t address, uint16_t data)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	460a      	mov	r2, r1
 8006a2e:	71fb      	strb	r3, [r7, #7]
 8006a30:	4613      	mov	r3, r2
 8006a32:	80bb      	strh	r3, [r7, #4]
    while (VS_DQ == 0)
 8006a34:	bf00      	nop
 8006a36:	4b14      	ldr	r3, [pc, #80]	; (8006a88 <VS_WR_Cmd+0x64>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d0fb      	beq.n	8006a36 <VS_WR_Cmd+0x12>
        ;              //等待空闲
    VS_SPI_SpeedLow(); //低速
 8006a3e:	f7ff fead 	bl	800679c <VS_SPI_SpeedLow>
    VS_XDCS = 1;
 8006a42:	4b12      	ldr	r3, [pc, #72]	; (8006a8c <VS_WR_Cmd+0x68>)
 8006a44:	2201      	movs	r2, #1
 8006a46:	601a      	str	r2, [r3, #0]
    VS_XCS = 0;
 8006a48:	4b11      	ldr	r3, [pc, #68]	; (8006a90 <VS_WR_Cmd+0x6c>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	601a      	str	r2, [r3, #0]
    VS_SPI_ReadWriteByte(VS_WRITE_COMMAND); //发送VS10XX的写命令
 8006a4e:	2002      	movs	r0, #2
 8006a50:	f7ff feb8 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(address);          //地址
 8006a54:	79fb      	ldrb	r3, [r7, #7]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7ff feb4 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(data >> 8);        //发送高八位
 8006a5c:	88bb      	ldrh	r3, [r7, #4]
 8006a5e:	0a1b      	lsrs	r3, r3, #8
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7ff fead 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(data);             //第八位
 8006a6a:	88bb      	ldrh	r3, [r7, #4]
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7ff fea8 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_XCS = 1;
 8006a74:	4b06      	ldr	r3, [pc, #24]	; (8006a90 <VS_WR_Cmd+0x6c>)
 8006a76:	2201      	movs	r2, #1
 8006a78:	601a      	str	r2, [r3, #0]
    VS_SPI_SpeedHigh(); //高速
 8006a7a:	f7ff fe99 	bl	80067b0 <VS_SPI_SpeedHigh>
}
 8006a7e:	bf00      	nop
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	4221010c 	.word	0x4221010c
 8006a8c:	42210180 	.word	0x42210180
 8006a90:	42210184 	.word	0x42210184

08006a94 <VS_RD_Reg>:
//读VS10XX的寄存器
//address：寄存器地址
//返回值：读到的值
//注意不要用倍速读取,会出错
uint16_t VS_RD_Reg(uint8_t address)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	71fb      	strb	r3, [r7, #7]
    uint16_t temp = 0;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	81fb      	strh	r3, [r7, #14]
    while (VS_DQ == 0)
 8006aa2:	bf00      	nop
 8006aa4:	4b16      	ldr	r3, [pc, #88]	; (8006b00 <VS_RD_Reg+0x6c>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d0fb      	beq.n	8006aa4 <VS_RD_Reg+0x10>
        ;              //非等待空闲状态
    VS_SPI_SpeedLow(); //低速
 8006aac:	f7ff fe76 	bl	800679c <VS_SPI_SpeedLow>
    VS_XDCS = 1;
 8006ab0:	4b14      	ldr	r3, [pc, #80]	; (8006b04 <VS_RD_Reg+0x70>)
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	601a      	str	r2, [r3, #0]
    VS_XCS = 0;
 8006ab6:	4b14      	ldr	r3, [pc, #80]	; (8006b08 <VS_RD_Reg+0x74>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	601a      	str	r2, [r3, #0]
    VS_SPI_ReadWriteByte(VS_READ_COMMAND); //发送VS10XX的读命令
 8006abc:	2003      	movs	r0, #3
 8006abe:	f7ff fe81 	bl	80067c4 <VS_SPI_ReadWriteByte>
    VS_SPI_ReadWriteByte(address);         //地址
 8006ac2:	79fb      	ldrb	r3, [r7, #7]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7ff fe7d 	bl	80067c4 <VS_SPI_ReadWriteByte>
    temp = VS_SPI_ReadWriteByte(0xff);     //读取高字节
 8006aca:	20ff      	movs	r0, #255	; 0xff
 8006acc:	f7ff fe7a 	bl	80067c4 <VS_SPI_ReadWriteByte>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	81fb      	strh	r3, [r7, #14]
    temp = temp << 8;
 8006ad4:	89fb      	ldrh	r3, [r7, #14]
 8006ad6:	021b      	lsls	r3, r3, #8
 8006ad8:	81fb      	strh	r3, [r7, #14]
    temp += VS_SPI_ReadWriteByte(0xff); //读取低字节
 8006ada:	20ff      	movs	r0, #255	; 0xff
 8006adc:	f7ff fe72 	bl	80067c4 <VS_SPI_ReadWriteByte>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	89fb      	ldrh	r3, [r7, #14]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	81fb      	strh	r3, [r7, #14]
    VS_XCS = 1;
 8006aea:	4b07      	ldr	r3, [pc, #28]	; (8006b08 <VS_RD_Reg+0x74>)
 8006aec:	2201      	movs	r2, #1
 8006aee:	601a      	str	r2, [r3, #0]
    VS_SPI_SpeedHigh(); //高速
 8006af0:	f7ff fe5e 	bl	80067b0 <VS_SPI_SpeedHigh>
    return temp;
 8006af4:	89fb      	ldrh	r3, [r7, #14]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	4221010c 	.word	0x4221010c
 8006b04:	42210180 	.word	0x42210180
 8006b08:	42210184 	.word	0x42210184

08006b0c <VS_WRAM_Read>:
//读取VS10xx的RAM
//addr：RAM地址
//返回值：读到的值
uint16_t VS_WRAM_Read(uint16_t addr)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	4603      	mov	r3, r0
 8006b14:	80fb      	strh	r3, [r7, #6]
    uint16_t res;
    vPortEnterCritical(); //进入临界区
 8006b16:	f00a f941 	bl	8010d9c <vPortEnterCritical>
    VS_WR_Cmd(SPI_WRAMADDR, addr);
 8006b1a:	88fb      	ldrh	r3, [r7, #6]
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	2007      	movs	r0, #7
 8006b20:	f7ff ff80 	bl	8006a24 <VS_WR_Cmd>
    res = VS_RD_Reg(SPI_WRAM);
 8006b24:	2006      	movs	r0, #6
 8006b26:	f7ff ffb5 	bl	8006a94 <VS_RD_Reg>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	81fb      	strh	r3, [r7, #14]
    vPortExitCritical(); //退出临界区
 8006b2e:	f00a f965 	bl	8010dfc <vPortExitCritical>
    return res;
 8006b32:	89fb      	ldrh	r3, [r7, #14]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <VS_Get_HeadInfo>:
        {0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, 0},
        {0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 0}};
//返回Kbps的大小
//返回值：得到的码率
uint16_t VS_Get_HeadInfo(void)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
    unsigned int HEAD0;
    unsigned int HEAD1;
    vPortEnterCritical(); //进入临界区
 8006b42:	f00a f92b 	bl	8010d9c <vPortEnterCritical>
    HEAD0 = VS_RD_Reg(SPI_HDAT0);
 8006b46:	2008      	movs	r0, #8
 8006b48:	f7ff ffa4 	bl	8006a94 <VS_RD_Reg>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	603b      	str	r3, [r7, #0]
    HEAD1 = VS_RD_Reg(SPI_HDAT1);
 8006b50:	2009      	movs	r0, #9
 8006b52:	f7ff ff9f 	bl	8006a94 <VS_RD_Reg>
 8006b56:	4603      	mov	r3, r0
 8006b58:	607b      	str	r3, [r7, #4]
    vPortExitCritical(); //退出临界区
 8006b5a:	f00a f94f 	bl	8010dfc <vPortExitCritical>
                        //printf("(H0,H1):%x,%x\n",HEAD0,HEAD1);
    switch (HEAD1)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f247 6265 	movw	r2, #30309	; 0x7665
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d040      	beq.n	8006bea <VS_Get_HeadInfo+0xae>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f247 6265 	movw	r2, #30309	; 0x7665
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d85e      	bhi.n	8006c30 <VS_Get_HeadInfo+0xf4>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f246 624c 	movw	r2, #26188	; 0x664c
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d036      	beq.n	8006bea <VS_Get_HeadInfo+0xae>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f246 624c 	movw	r2, #26188	; 0x664c
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d854      	bhi.n	8006c30 <VS_Get_HeadInfo+0xf4>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f245 724d 	movw	r2, #22349	; 0x574d
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d02c      	beq.n	8006bea <VS_Get_HeadInfo+0xae>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f245 724d 	movw	r2, #22349	; 0x574d
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d84a      	bhi.n	8006c30 <VS_Get_HeadInfo+0xf4>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f644 7267 	movw	r2, #20327	; 0x4f67
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d022      	beq.n	8006bea <VS_Get_HeadInfo+0xae>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f644 7267 	movw	r2, #20327	; 0x4f67
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d840      	bhi.n	8006c30 <VS_Get_HeadInfo+0xf4>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f644 5254 	movw	r2, #19796	; 0x4d54
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d018      	beq.n	8006bea <VS_Get_HeadInfo+0xae>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f644 5254 	movw	r2, #19796	; 0x4d54
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d836      	bhi.n	8006c30 <VS_Get_HeadInfo+0xf4>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f644 5234 	movw	r2, #19764	; 0x4d34
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d00e      	beq.n	8006bea <VS_Get_HeadInfo+0xae>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f644 5234 	movw	r2, #19764	; 0x4d34
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d82c      	bhi.n	8006c30 <VS_Get_HeadInfo+0xf4>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f244 1244 	movw	r2, #16708	; 0x4144
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d004      	beq.n	8006bea <VS_Get_HeadInfo+0xae>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f244 1254 	movw	r2, #16724	; 0x4154
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d122      	bne.n	8006c30 <VS_Get_HeadInfo+0xf4>
    case 0X4F67: //OGG
    case 0X574D: //WMA格式
    case 0X664C: //FLAC格式
    {
        ////printf("HEAD0:%d\n",HEAD0);
        HEAD1 = HEAD0 * 2 / 25; //相当于*8/100
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	4a1e      	ldr	r2, [pc, #120]	; (8006c68 <VS_Get_HeadInfo+0x12c>)
 8006bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf4:	08db      	lsrs	r3, r3, #3
 8006bf6:	607b      	str	r3, [r7, #4]
        if ((HEAD1 % 10) > 5)
 8006bf8:	6879      	ldr	r1, [r7, #4]
 8006bfa:	4b1c      	ldr	r3, [pc, #112]	; (8006c6c <VS_Get_HeadInfo+0x130>)
 8006bfc:	fba3 2301 	umull	r2, r3, r3, r1
 8006c00:	08da      	lsrs	r2, r3, #3
 8006c02:	4613      	mov	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	1aca      	subs	r2, r1, r3
 8006c0c:	2a05      	cmp	r2, #5
 8006c0e:	d908      	bls.n	8006c22 <VS_Get_HeadInfo+0xe6>
            return HEAD1 / 10 + 1; //对小数点第一位四舍五入
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a16      	ldr	r2, [pc, #88]	; (8006c6c <VS_Get_HeadInfo+0x130>)
 8006c14:	fba2 2303 	umull	r2, r3, r2, r3
 8006c18:	08db      	lsrs	r3, r3, #3
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	e01d      	b.n	8006c5e <VS_Get_HeadInfo+0x122>
        else
            return HEAD1 / 10;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a11      	ldr	r2, [pc, #68]	; (8006c6c <VS_Get_HeadInfo+0x130>)
 8006c26:	fba2 2303 	umull	r2, r3, r2, r3
 8006c2a:	08db      	lsrs	r3, r3, #3
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	e016      	b.n	8006c5e <VS_Get_HeadInfo+0x122>
    }
    default: //MP3格式,仅做了阶层III的表
    {
        HEAD1 >>= 3;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	08db      	lsrs	r3, r3, #3
 8006c34:	607b      	str	r3, [r7, #4]
        HEAD1 = HEAD1 & 0x03;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f003 0303 	and.w	r3, r3, #3
 8006c3c:	607b      	str	r3, [r7, #4]
        if (HEAD1 == 3)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2b03      	cmp	r3, #3
 8006c42:	d102      	bne.n	8006c4a <VS_Get_HeadInfo+0x10e>
            HEAD1 = 1;
 8006c44:	2301      	movs	r3, #1
 8006c46:	607b      	str	r3, [r7, #4]
 8006c48:	e001      	b.n	8006c4e <VS_Get_HeadInfo+0x112>
        else
            HEAD1 = 0;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	607b      	str	r3, [r7, #4]
        return bitrate[HEAD1][HEAD0 >> 12];
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	0b1b      	lsrs	r3, r3, #12
 8006c52:	4907      	ldr	r1, [pc, #28]	; (8006c70 <VS_Get_HeadInfo+0x134>)
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	0112      	lsls	r2, r2, #4
 8006c58:	4413      	add	r3, r2
 8006c5a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    }
    }
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	51eb851f 	.word	0x51eb851f
 8006c6c:	cccccccd 	.word	0xcccccccd
 8006c70:	08015c90 	.word	0x08015c90

08006c74 <VS_Get_EndFillByte>:
    return VS_WRAM_Read(0X1E05); //平均位速
}
//得到需要填充的数字
//返回值:需要填充的数字
uint16_t VS_Get_EndFillByte(void)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	af00      	add	r7, sp, #0
    return VS_WRAM_Read(0X1E06); //填充字节
 8006c78:	f641 6006 	movw	r0, #7686	; 0x1e06
 8006c7c:	f7ff ff46 	bl	8006b0c <VS_WRAM_Read>
 8006c80:	4603      	mov	r3, r0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	bd80      	pop	{r7, pc}
	...

08006c88 <VS_Send_MusicData>:
//发送一次音频数据
//固定为32字节
//返回值:0,发送成功
//		 1,VS10xx不缺数据,本次数据未成功发送
uint8_t VS_Send_MusicData(uint8_t *buf)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    if (VS_DQ != 0) //送数据给VS10XX
 8006c90:	4b10      	ldr	r3, [pc, #64]	; (8006cd4 <VS_Send_MusicData+0x4c>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d017      	beq.n	8006cc8 <VS_Send_MusicData+0x40>
    {
        VS_XDCS = 0;
 8006c98:	4b0f      	ldr	r3, [pc, #60]	; (8006cd8 <VS_Send_MusicData+0x50>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	601a      	str	r2, [r3, #0]
        for (n = 0; n < 32; n++)
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	73fb      	strb	r3, [r7, #15]
 8006ca2:	e009      	b.n	8006cb8 <VS_Send_MusicData+0x30>
        {
            VS_SPI_ReadWriteByte(buf[n]);
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	4413      	add	r3, r2
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7ff fd89 	bl	80067c4 <VS_SPI_ReadWriteByte>
        for (n = 0; n < 32; n++)
 8006cb2:	7bfb      	ldrb	r3, [r7, #15]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	73fb      	strb	r3, [r7, #15]
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	2b1f      	cmp	r3, #31
 8006cbc:	d9f2      	bls.n	8006ca4 <VS_Send_MusicData+0x1c>
        }
        VS_XDCS = 1;
 8006cbe:	4b06      	ldr	r3, [pc, #24]	; (8006cd8 <VS_Send_MusicData+0x50>)
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	601a      	str	r2, [r3, #0]
    }
    else
        return 1;
    return 0; //成功发送了
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	e000      	b.n	8006cca <VS_Send_MusicData+0x42>
        return 1;
 8006cc8:	2301      	movs	r3, #1
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	4221010c 	.word	0x4221010c
 8006cd8:	42210180 	.word	0x42210180

08006cdc <VS_Restart_Play>:
//切歌
//通过此函数切歌，不会出现切换“噪声”
void VS_Restart_Play(void)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08a      	sub	sp, #40	; 0x28
 8006ce0:	af00      	add	r7, sp, #0
    uint16_t temp;
    uint16_t i;
    uint8_t n;
    uint8_t vsbuf[32];
    for (n = 0; n < 32; n++)
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006ce8:	e00c      	b.n	8006d04 <VS_Restart_Play+0x28>
        vsbuf[n] = 0;           //清零
 8006cea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006cee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006cf2:	4413      	add	r3, r2
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f803 2c28 	strb.w	r2, [r3, #-40]
    for (n = 0; n < 32; n++)
 8006cfa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006cfe:	3301      	adds	r3, #1
 8006d00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006d04:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006d08:	2b1f      	cmp	r3, #31
 8006d0a:	d9ee      	bls.n	8006cea <VS_Restart_Play+0xe>
    temp = VS_RD_Reg(SPI_MODE); //读取SPI_MODE的内容
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	f7ff fec1 	bl	8006a94 <VS_RD_Reg>
 8006d12:	4603      	mov	r3, r0
 8006d14:	847b      	strh	r3, [r7, #34]	; 0x22
    temp |= 1 << 3;             //设置SM_CANCEL位
 8006d16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d18:	f043 0308 	orr.w	r3, r3, #8
 8006d1c:	847b      	strh	r3, [r7, #34]	; 0x22
    temp |= 1 << 2;             //设置SM_LAYER12位,允许播放MP1,MP2
 8006d1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d20:	f043 0304 	orr.w	r3, r3, #4
 8006d24:	847b      	strh	r3, [r7, #34]	; 0x22
    VS_WR_Cmd(SPI_MODE, temp);  //设置取消当前解码指令
 8006d26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d28:	4619      	mov	r1, r3
 8006d2a:	2000      	movs	r0, #0
 8006d2c:	f7ff fe7a 	bl	8006a24 <VS_WR_Cmd>
    for (i = 0; i < 2048;)      //发送2048个0,期间读取SM_CANCEL位.如果为0,则表示已经取消了当前解码
 8006d30:	2300      	movs	r3, #0
 8006d32:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006d34:	e013      	b.n	8006d5e <VS_Restart_Play+0x82>
    {
        if (VS_Send_MusicData(vsbuf) == 0) //每发送32个字节后检测一次
 8006d36:	463b      	mov	r3, r7
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7ff ffa5 	bl	8006c88 <VS_Send_MusicData>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10c      	bne.n	8006d5e <VS_Restart_Play+0x82>
        {
            i += 32;                    //发送了32个字节
 8006d44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d46:	3320      	adds	r3, #32
 8006d48:	84fb      	strh	r3, [r7, #38]	; 0x26
            temp = VS_RD_Reg(SPI_MODE); //读取SPI_MODE的内容
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	f7ff fea2 	bl	8006a94 <VS_RD_Reg>
 8006d50:	4603      	mov	r3, r0
 8006d52:	847b      	strh	r3, [r7, #34]	; 0x22
            if ((temp & (1 << 3)) == 0)
 8006d54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d56:	f003 0308 	and.w	r3, r3, #8
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d004      	beq.n	8006d68 <VS_Restart_Play+0x8c>
    for (i = 0; i < 2048;)      //发送2048个0,期间读取SM_CANCEL位.如果为0,则表示已经取消了当前解码
 8006d5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d64:	d3e7      	bcc.n	8006d36 <VS_Restart_Play+0x5a>
 8006d66:	e000      	b.n	8006d6a <VS_Restart_Play+0x8e>
                break; //成功取消了
 8006d68:	bf00      	nop
        }
    }
    if (i < 2048) //SM_CANCEL正常
 8006d6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d70:	d22d      	bcs.n	8006dce <VS_Restart_Play+0xf2>
    {
        temp = VS_Get_EndFillByte() & 0xff; //读取填充字节
 8006d72:	f7ff ff7f 	bl	8006c74 <VS_Get_EndFillByte>
 8006d76:	4603      	mov	r3, r0
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	847b      	strh	r3, [r7, #34]	; 0x22
        for (n = 0; n < 32; n++)
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006d82:	e00d      	b.n	8006da0 <VS_Restart_Play+0xc4>
            vsbuf[n] = temp; //填充字节放入数组
 8006d84:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006d88:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006d8a:	b2d2      	uxtb	r2, r2
 8006d8c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006d90:	440b      	add	r3, r1
 8006d92:	f803 2c28 	strb.w	r2, [r3, #-40]
        for (n = 0; n < 32; n++)
 8006d96:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006da0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006da4:	2b1f      	cmp	r3, #31
 8006da6:	d9ed      	bls.n	8006d84 <VS_Restart_Play+0xa8>
        for (i = 0; i < 2052;)
 8006da8:	2300      	movs	r3, #0
 8006daa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006dac:	e009      	b.n	8006dc2 <VS_Restart_Play+0xe6>
        {
            if (VS_Send_MusicData(vsbuf) == 0)
 8006dae:	463b      	mov	r3, r7
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7ff ff69 	bl	8006c88 <VS_Send_MusicData>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d102      	bne.n	8006dc2 <VS_Restart_Play+0xe6>
                i += 32; //填充
 8006dbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006dbe:	3320      	adds	r3, #32
 8006dc0:	84fb      	strh	r3, [r7, #38]	; 0x26
        for (i = 0; i < 2052;)
 8006dc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006dc4:	f640 0203 	movw	r2, #2051	; 0x803
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d9f0      	bls.n	8006dae <VS_Restart_Play+0xd2>
 8006dcc:	e001      	b.n	8006dd2 <VS_Restart_Play+0xf6>
        }
    }
    else
        VS_Soft_Reset(); //SM_CANCEL不成功,坏情况,需要软复位
 8006dce:	f7ff fd07 	bl	80067e0 <VS_Soft_Reset>
    temp = VS_RD_Reg(SPI_HDAT0);
 8006dd2:	2008      	movs	r0, #8
 8006dd4:	f7ff fe5e 	bl	8006a94 <VS_RD_Reg>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	847b      	strh	r3, [r7, #34]	; 0x22
    temp += VS_RD_Reg(SPI_HDAT1);
 8006ddc:	2009      	movs	r0, #9
 8006dde:	f7ff fe59 	bl	8006a94 <VS_RD_Reg>
 8006de2:	4603      	mov	r3, r0
 8006de4:	461a      	mov	r2, r3
 8006de6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006de8:	4413      	add	r3, r2
 8006dea:	847b      	strh	r3, [r7, #34]	; 0x22
    if (temp) //软复位,还是没有成功取消,放杀手锏,硬复位
 8006dec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <VS_Restart_Play+0x11e>
    {
        VS_HD_Reset();   //硬复位
 8006df2:	f7ff fd3f 	bl	8006874 <VS_HD_Reset>
        VS_Soft_Reset(); //软复位
 8006df6:	f7ff fcf3 	bl	80067e0 <VS_Soft_Reset>
    }
}
 8006dfa:	bf00      	nop
 8006dfc:	3728      	adds	r7, #40	; 0x28
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <VS_Reset_DecodeTime>:
//重设解码时间
void VS_Reset_DecodeTime(void)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	af00      	add	r7, sp, #0
    VS_WR_Cmd(SPI_DECODE_TIME, 0x0000);
 8006e06:	2100      	movs	r1, #0
 8006e08:	2004      	movs	r0, #4
 8006e0a:	f7ff fe0b 	bl	8006a24 <VS_WR_Cmd>
    VS_WR_Cmd(SPI_DECODE_TIME, 0x0000); //操作两次
 8006e0e:	2100      	movs	r1, #0
 8006e10:	2004      	movs	r0, #4
 8006e12:	f7ff fe07 	bl	8006a24 <VS_WR_Cmd>
}
 8006e16:	bf00      	nop
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <VS_Get_DecodeTime>:
//得到mp3的播放时间n sec
//返回值：解码时长
uint16_t VS_Get_DecodeTime(void)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b082      	sub	sp, #8
 8006e1e:	af00      	add	r7, sp, #0
    uint16_t dt = 0;
 8006e20:	2300      	movs	r3, #0
 8006e22:	80fb      	strh	r3, [r7, #6]
    vPortEnterCritical(); //进入临界区
 8006e24:	f009 ffba 	bl	8010d9c <vPortEnterCritical>
    dt = VS_RD_Reg(SPI_DECODE_TIME);
 8006e28:	2004      	movs	r0, #4
 8006e2a:	f7ff fe33 	bl	8006a94 <VS_RD_Reg>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	80fb      	strh	r3, [r7, #6]
    vPortExitCritical(); //退出临界区
 8006e32:	f009 ffe3 	bl	8010dfc <vPortExitCritical>
    return dt;
 8006e36:	88fb      	ldrh	r3, [r7, #6]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <VS_Set_Vol>:
}
///////////////////////////////////////////////////////////////////////////////////////////////////
//设定VS10XX播放的音量和高低音
//volx:音量大小(0~254)
void VS_Set_Vol(uint8_t volx)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	4603      	mov	r3, r0
 8006e48:	71fb      	strb	r3, [r7, #7]
    uint16_t volt = 0; //暂存音量值
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	81fb      	strh	r3, [r7, #14]
    volt = 254 - volx; //取反一下,得到最大值,表示最大的表示
 8006e4e:	79fb      	ldrb	r3, [r7, #7]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	f1c3 03fe 	rsb	r3, r3, #254	; 0xfe
 8006e56:	81fb      	strh	r3, [r7, #14]
    volt <<= 8;
 8006e58:	89fb      	ldrh	r3, [r7, #14]
 8006e5a:	021b      	lsls	r3, r3, #8
 8006e5c:	81fb      	strh	r3, [r7, #14]
    volt += 254 - volx;       //得到音量设置后大小
 8006e5e:	79fb      	ldrb	r3, [r7, #7]
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	89fa      	ldrh	r2, [r7, #14]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	33fe      	adds	r3, #254	; 0xfe
 8006e6a:	81fb      	strh	r3, [r7, #14]
    vPortEnterCritical();      //进入临界区
 8006e6c:	f009 ff96 	bl	8010d9c <vPortEnterCritical>
    VS_WR_Cmd(SPI_VOL, volt); //设音量
 8006e70:	89fb      	ldrh	r3, [r7, #14]
 8006e72:	4619      	mov	r1, r3
 8006e74:	200b      	movs	r0, #11
 8006e76:	f7ff fdd5 	bl	8006a24 <VS_WR_Cmd>
    vPortExitCritical();       //退出临界区
 8006e7a:	f009 ffbf 	bl	8010dfc <vPortExitCritical>
}
 8006e7e:	bf00      	nop
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <VS_Set_Bass>:
//bfreq:低频上限频率	2~15(单位:10Hz)
//bass:低频增益			0~15(单位:1dB)
//tfreq:高频下限频率 	1~15(单位:Khz)
//treble:高频增益  	 	0~15(单位:1.5dB,小于9的时候为负数)
void VS_Set_Bass(uint8_t bfreq, uint8_t bass, uint8_t tfreq, uint8_t treble)
{
 8006e86:	b590      	push	{r4, r7, lr}
 8006e88:	b085      	sub	sp, #20
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	4604      	mov	r4, r0
 8006e8e:	4608      	mov	r0, r1
 8006e90:	4611      	mov	r1, r2
 8006e92:	461a      	mov	r2, r3
 8006e94:	4623      	mov	r3, r4
 8006e96:	71fb      	strb	r3, [r7, #7]
 8006e98:	4603      	mov	r3, r0
 8006e9a:	71bb      	strb	r3, [r7, #6]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	717b      	strb	r3, [r7, #5]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	713b      	strb	r3, [r7, #4]
    uint16_t bass_set = 0; //暂存音调寄存器值
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	81bb      	strh	r3, [r7, #12]
    signed char temp = 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	73fb      	strb	r3, [r7, #15]
    if (treble == 0)
 8006eac:	793b      	ldrb	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d102      	bne.n	8006eb8 <VS_Set_Bass+0x32>
        temp = 0; //变换
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	73fb      	strb	r3, [r7, #15]
 8006eb6:	e00b      	b.n	8006ed0 <VS_Set_Bass+0x4a>
    else if (treble > 8)
 8006eb8:	793b      	ldrb	r3, [r7, #4]
 8006eba:	2b08      	cmp	r3, #8
 8006ebc:	d904      	bls.n	8006ec8 <VS_Set_Bass+0x42>
        temp = treble - 8;
 8006ebe:	793b      	ldrb	r3, [r7, #4]
 8006ec0:	3b08      	subs	r3, #8
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	73fb      	strb	r3, [r7, #15]
 8006ec6:	e003      	b.n	8006ed0 <VS_Set_Bass+0x4a>
    else
        temp = treble - 9;
 8006ec8:	793b      	ldrb	r3, [r7, #4]
 8006eca:	3b09      	subs	r3, #9
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	73fb      	strb	r3, [r7, #15]
    bass_set = temp & 0X0F; //高音设定
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	f003 030f 	and.w	r3, r3, #15
 8006ed8:	81bb      	strh	r3, [r7, #12]
    bass_set <<= 4;
 8006eda:	89bb      	ldrh	r3, [r7, #12]
 8006edc:	011b      	lsls	r3, r3, #4
 8006ede:	81bb      	strh	r3, [r7, #12]
    bass_set += tfreq & 0xf; //高音下限频率
 8006ee0:	797b      	ldrb	r3, [r7, #5]
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	f003 030f 	and.w	r3, r3, #15
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	89bb      	ldrh	r3, [r7, #12]
 8006eec:	4413      	add	r3, r2
 8006eee:	81bb      	strh	r3, [r7, #12]
    bass_set <<= 4;
 8006ef0:	89bb      	ldrh	r3, [r7, #12]
 8006ef2:	011b      	lsls	r3, r3, #4
 8006ef4:	81bb      	strh	r3, [r7, #12]
    bass_set += bass & 0xf; //低音设定
 8006ef6:	79bb      	ldrb	r3, [r7, #6]
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	f003 030f 	and.w	r3, r3, #15
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	89bb      	ldrh	r3, [r7, #12]
 8006f02:	4413      	add	r3, r2
 8006f04:	81bb      	strh	r3, [r7, #12]
    bass_set <<= 4;
 8006f06:	89bb      	ldrh	r3, [r7, #12]
 8006f08:	011b      	lsls	r3, r3, #4
 8006f0a:	81bb      	strh	r3, [r7, #12]
    bass_set += bfreq & 0xf;       //低音上限
 8006f0c:	79fb      	ldrb	r3, [r7, #7]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	f003 030f 	and.w	r3, r3, #15
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	89bb      	ldrh	r3, [r7, #12]
 8006f18:	4413      	add	r3, r2
 8006f1a:	81bb      	strh	r3, [r7, #12]
    vPortEnterCritical();           //进入临界区
 8006f1c:	f009 ff3e 	bl	8010d9c <vPortEnterCritical>
    VS_WR_Cmd(SPI_BASS, bass_set); //BASS
 8006f20:	89bb      	ldrh	r3, [r7, #12]
 8006f22:	4619      	mov	r1, r3
 8006f24:	2002      	movs	r0, #2
 8006f26:	f7ff fd7d 	bl	8006a24 <VS_WR_Cmd>
    vPortExitCritical();            //退出临界区
 8006f2a:	f009 ff67 	bl	8010dfc <vPortExitCritical>
}
 8006f2e:	bf00      	nop
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd90      	pop	{r4, r7, pc}

08006f36 <VS_Set_Effect>:
//设定音效
//eft:0,关闭;1,最小;2,中等;3,最大.
void VS_Set_Effect(uint8_t eft)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b084      	sub	sp, #16
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	71fb      	strb	r3, [r7, #7]
    uint16_t temp;
    vPortEnterCritical();        //进入临界区
 8006f40:	f009 ff2c 	bl	8010d9c <vPortEnterCritical>
    temp = VS_RD_Reg(SPI_MODE); //读取SPI_MODE的内容
 8006f44:	2000      	movs	r0, #0
 8006f46:	f7ff fda5 	bl	8006a94 <VS_RD_Reg>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	81fb      	strh	r3, [r7, #14]
    if (eft & 0X01)
 8006f4e:	79fb      	ldrb	r3, [r7, #7]
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d004      	beq.n	8006f62 <VS_Set_Effect+0x2c>
        temp |= 1 << 4; //设定LO
 8006f58:	89fb      	ldrh	r3, [r7, #14]
 8006f5a:	f043 0310 	orr.w	r3, r3, #16
 8006f5e:	81fb      	strh	r3, [r7, #14]
 8006f60:	e003      	b.n	8006f6a <VS_Set_Effect+0x34>
    else
        temp &= ~(1 << 5); //取消LO
 8006f62:	89fb      	ldrh	r3, [r7, #14]
 8006f64:	f023 0320 	bic.w	r3, r3, #32
 8006f68:	81fb      	strh	r3, [r7, #14]
    if (eft & 0X02)
 8006f6a:	79fb      	ldrb	r3, [r7, #7]
 8006f6c:	f003 0302 	and.w	r3, r3, #2
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d004      	beq.n	8006f7e <VS_Set_Effect+0x48>
        temp |= 1 << 7; //设定HO
 8006f74:	89fb      	ldrh	r3, [r7, #14]
 8006f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f7a:	81fb      	strh	r3, [r7, #14]
 8006f7c:	e003      	b.n	8006f86 <VS_Set_Effect+0x50>
    else
        temp &= ~(1 << 7);     //取消HO
 8006f7e:	89fb      	ldrh	r3, [r7, #14]
 8006f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f84:	81fb      	strh	r3, [r7, #14]
    VS_WR_Cmd(SPI_MODE, temp); //设定模式
 8006f86:	89fb      	ldrh	r3, [r7, #14]
 8006f88:	4619      	mov	r1, r3
 8006f8a:	2000      	movs	r0, #0
 8006f8c:	f7ff fd4a 	bl	8006a24 <VS_WR_Cmd>
    vPortExitCritical();        //退出临界区
 8006f90:	f009 ff34 	bl	8010dfc <vPortExitCritical>
}
 8006f94:	bf00      	nop
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <VS_Set_All>:
///////////////////////////////////////////////////////////////////////////////
//设置音量,音效等.
void VS_Set_All(void)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	af00      	add	r7, sp, #0
    VS_Set_Vol(vsset.mvol);
 8006fa0:	4b0a      	ldr	r3, [pc, #40]	; (8006fcc <VS_Set_All+0x30>)
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7ff ff4b 	bl	8006e40 <VS_Set_Vol>
    VS_Set_Bass(vsset.bflimit, vsset.bass, vsset.tflimit, vsset.treble);
 8006faa:	4b08      	ldr	r3, [pc, #32]	; (8006fcc <VS_Set_All+0x30>)
 8006fac:	7858      	ldrb	r0, [r3, #1]
 8006fae:	4b07      	ldr	r3, [pc, #28]	; (8006fcc <VS_Set_All+0x30>)
 8006fb0:	7899      	ldrb	r1, [r3, #2]
 8006fb2:	4b06      	ldr	r3, [pc, #24]	; (8006fcc <VS_Set_All+0x30>)
 8006fb4:	78da      	ldrb	r2, [r3, #3]
 8006fb6:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <VS_Set_All+0x30>)
 8006fb8:	791b      	ldrb	r3, [r3, #4]
 8006fba:	f7ff ff64 	bl	8006e86 <VS_Set_Bass>
    VS_Set_Effect(vsset.effect);
 8006fbe:	4b03      	ldr	r3, [pc, #12]	; (8006fcc <VS_Set_All+0x30>)
 8006fc0:	795b      	ldrb	r3, [r3, #5]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7ff ffb7 	bl	8006f36 <VS_Set_Effect>
}
 8006fc8:	bf00      	nop
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	20000140 	.word	0x20000140

08006fd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006fd0:	480c      	ldr	r0, [pc, #48]	; (8007004 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006fd2:	490d      	ldr	r1, [pc, #52]	; (8007008 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006fd4:	4a0d      	ldr	r2, [pc, #52]	; (800700c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006fd8:	e002      	b.n	8006fe0 <LoopCopyDataInit>

08006fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006fde:	3304      	adds	r3, #4

08006fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006fe4:	d3f9      	bcc.n	8006fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006fe6:	4a0a      	ldr	r2, [pc, #40]	; (8007010 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006fe8:	4c0a      	ldr	r4, [pc, #40]	; (8007014 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006fec:	e001      	b.n	8006ff2 <LoopFillZerobss>

08006fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006ff0:	3204      	adds	r2, #4

08006ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ff4:	d3fb      	bcc.n	8006fee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006ff6:	f7fb fc9d 	bl	8002934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006ffa:	f00a faa3 	bl	8011544 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006ffe:	f7fb f807 	bl	8002010 <main>
  bx lr
 8007002:	4770      	bx	lr
  ldr r0, =_sdata
 8007004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007008:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 800700c:	08040b10 	.word	0x08040b10
  ldr r2, =_sbss
 8007010:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8007014:	200024f8 	.word	0x200024f8

08007018 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007018:	e7fe      	b.n	8007018 <ADC1_2_IRQHandler>
	...

0800701c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007020:	4b08      	ldr	r3, [pc, #32]	; (8007044 <HAL_Init+0x28>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a07      	ldr	r2, [pc, #28]	; (8007044 <HAL_Init+0x28>)
 8007026:	f043 0310 	orr.w	r3, r3, #16
 800702a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800702c:	2003      	movs	r0, #3
 800702e:	f000 f8f5 	bl	800721c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007032:	200f      	movs	r0, #15
 8007034:	f7fb fb48 	bl	80026c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007038:	f7fb fa66 	bl	8002508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	40022000 	.word	0x40022000

08007048 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007048:	b480      	push	{r7}
 800704a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800704c:	4b05      	ldr	r3, [pc, #20]	; (8007064 <HAL_IncTick+0x1c>)
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	461a      	mov	r2, r3
 8007052:	4b05      	ldr	r3, [pc, #20]	; (8007068 <HAL_IncTick+0x20>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4413      	add	r3, r2
 8007058:	4a03      	ldr	r2, [pc, #12]	; (8007068 <HAL_IncTick+0x20>)
 800705a:	6013      	str	r3, [r2, #0]
}
 800705c:	bf00      	nop
 800705e:	46bd      	mov	sp, r7
 8007060:	bc80      	pop	{r7}
 8007062:	4770      	bx	lr
 8007064:	20000146 	.word	0x20000146
 8007068:	2000203c 	.word	0x2000203c

0800706c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800706c:	b480      	push	{r7}
 800706e:	af00      	add	r7, sp, #0
  return uwTick;
 8007070:	4b02      	ldr	r3, [pc, #8]	; (800707c <HAL_GetTick+0x10>)
 8007072:	681b      	ldr	r3, [r3, #0]
}
 8007074:	4618      	mov	r0, r3
 8007076:	46bd      	mov	sp, r7
 8007078:	bc80      	pop	{r7}
 800707a:	4770      	bx	lr
 800707c:	2000203c 	.word	0x2000203c

08007080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007088:	f7ff fff0 	bl	800706c <HAL_GetTick>
 800708c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007098:	d005      	beq.n	80070a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800709a:	4b0a      	ldr	r3, [pc, #40]	; (80070c4 <HAL_Delay+0x44>)
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	461a      	mov	r2, r3
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	4413      	add	r3, r2
 80070a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80070a6:	bf00      	nop
 80070a8:	f7ff ffe0 	bl	800706c <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d8f7      	bhi.n	80070a8 <HAL_Delay+0x28>
  {
  }
}
 80070b8:	bf00      	nop
 80070ba:	bf00      	nop
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	20000146 	.word	0x20000146

080070c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f003 0307 	and.w	r3, r3, #7
 80070d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070d8:	4b0c      	ldr	r3, [pc, #48]	; (800710c <__NVIC_SetPriorityGrouping+0x44>)
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80070e4:	4013      	ands	r3, r2
 80070e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80070f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80070f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070fa:	4a04      	ldr	r2, [pc, #16]	; (800710c <__NVIC_SetPriorityGrouping+0x44>)
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	60d3      	str	r3, [r2, #12]
}
 8007100:	bf00      	nop
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	bc80      	pop	{r7}
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	e000ed00 	.word	0xe000ed00

08007110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007110:	b480      	push	{r7}
 8007112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007114:	4b04      	ldr	r3, [pc, #16]	; (8007128 <__NVIC_GetPriorityGrouping+0x18>)
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	0a1b      	lsrs	r3, r3, #8
 800711a:	f003 0307 	and.w	r3, r3, #7
}
 800711e:	4618      	mov	r0, r3
 8007120:	46bd      	mov	sp, r7
 8007122:	bc80      	pop	{r7}
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	e000ed00 	.word	0xe000ed00

0800712c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	4603      	mov	r3, r0
 8007134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800713a:	2b00      	cmp	r3, #0
 800713c:	db0b      	blt.n	8007156 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800713e:	79fb      	ldrb	r3, [r7, #7]
 8007140:	f003 021f 	and.w	r2, r3, #31
 8007144:	4906      	ldr	r1, [pc, #24]	; (8007160 <__NVIC_EnableIRQ+0x34>)
 8007146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800714a:	095b      	lsrs	r3, r3, #5
 800714c:	2001      	movs	r0, #1
 800714e:	fa00 f202 	lsl.w	r2, r0, r2
 8007152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	bc80      	pop	{r7}
 800715e:	4770      	bx	lr
 8007160:	e000e100 	.word	0xe000e100

08007164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	4603      	mov	r3, r0
 800716c:	6039      	str	r1, [r7, #0]
 800716e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007174:	2b00      	cmp	r3, #0
 8007176:	db0a      	blt.n	800718e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	b2da      	uxtb	r2, r3
 800717c:	490c      	ldr	r1, [pc, #48]	; (80071b0 <__NVIC_SetPriority+0x4c>)
 800717e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007182:	0112      	lsls	r2, r2, #4
 8007184:	b2d2      	uxtb	r2, r2
 8007186:	440b      	add	r3, r1
 8007188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800718c:	e00a      	b.n	80071a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	b2da      	uxtb	r2, r3
 8007192:	4908      	ldr	r1, [pc, #32]	; (80071b4 <__NVIC_SetPriority+0x50>)
 8007194:	79fb      	ldrb	r3, [r7, #7]
 8007196:	f003 030f 	and.w	r3, r3, #15
 800719a:	3b04      	subs	r3, #4
 800719c:	0112      	lsls	r2, r2, #4
 800719e:	b2d2      	uxtb	r2, r2
 80071a0:	440b      	add	r3, r1
 80071a2:	761a      	strb	r2, [r3, #24]
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bc80      	pop	{r7}
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	e000e100 	.word	0xe000e100
 80071b4:	e000ed00 	.word	0xe000ed00

080071b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b089      	sub	sp, #36	; 0x24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f003 0307 	and.w	r3, r3, #7
 80071ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	f1c3 0307 	rsb	r3, r3, #7
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	bf28      	it	cs
 80071d6:	2304      	movcs	r3, #4
 80071d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	3304      	adds	r3, #4
 80071de:	2b06      	cmp	r3, #6
 80071e0:	d902      	bls.n	80071e8 <NVIC_EncodePriority+0x30>
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	3b03      	subs	r3, #3
 80071e6:	e000      	b.n	80071ea <NVIC_EncodePriority+0x32>
 80071e8:	2300      	movs	r3, #0
 80071ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071ec:	f04f 32ff 	mov.w	r2, #4294967295
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	fa02 f303 	lsl.w	r3, r2, r3
 80071f6:	43da      	mvns	r2, r3
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	401a      	ands	r2, r3
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007200:	f04f 31ff 	mov.w	r1, #4294967295
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	fa01 f303 	lsl.w	r3, r1, r3
 800720a:	43d9      	mvns	r1, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007210:	4313      	orrs	r3, r2
         );
}
 8007212:	4618      	mov	r0, r3
 8007214:	3724      	adds	r7, #36	; 0x24
 8007216:	46bd      	mov	sp, r7
 8007218:	bc80      	pop	{r7}
 800721a:	4770      	bx	lr

0800721c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7ff ff4f 	bl	80070c8 <__NVIC_SetPriorityGrouping>
}
 800722a:	bf00      	nop
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007232:	b580      	push	{r7, lr}
 8007234:	b086      	sub	sp, #24
 8007236:	af00      	add	r7, sp, #0
 8007238:	4603      	mov	r3, r0
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	607a      	str	r2, [r7, #4]
 800723e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007240:	2300      	movs	r3, #0
 8007242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007244:	f7ff ff64 	bl	8007110 <__NVIC_GetPriorityGrouping>
 8007248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	68b9      	ldr	r1, [r7, #8]
 800724e:	6978      	ldr	r0, [r7, #20]
 8007250:	f7ff ffb2 	bl	80071b8 <NVIC_EncodePriority>
 8007254:	4602      	mov	r2, r0
 8007256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800725a:	4611      	mov	r1, r2
 800725c:	4618      	mov	r0, r3
 800725e:	f7ff ff81 	bl	8007164 <__NVIC_SetPriority>
}
 8007262:	bf00      	nop
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b082      	sub	sp, #8
 800726e:	af00      	add	r7, sp, #0
 8007270:	4603      	mov	r3, r0
 8007272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff ff57 	bl	800712c <__NVIC_EnableIRQ>
}
 800727e:	bf00      	nop
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
	...

08007288 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007288:	b480      	push	{r7}
 800728a:	b08b      	sub	sp, #44	; 0x2c
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007292:	2300      	movs	r3, #0
 8007294:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007296:	2300      	movs	r3, #0
 8007298:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800729a:	e179      	b.n	8007590 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800729c:	2201      	movs	r2, #1
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	fa02 f303 	lsl.w	r3, r2, r3
 80072a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	69fa      	ldr	r2, [r7, #28]
 80072ac:	4013      	ands	r3, r2
 80072ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80072b0:	69ba      	ldr	r2, [r7, #24]
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	f040 8168 	bne.w	800758a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	4aa0      	ldr	r2, [pc, #640]	; (8007540 <HAL_GPIO_Init+0x2b8>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d05e      	beq.n	8007382 <HAL_GPIO_Init+0xfa>
 80072c4:	4a9e      	ldr	r2, [pc, #632]	; (8007540 <HAL_GPIO_Init+0x2b8>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d875      	bhi.n	80073b6 <HAL_GPIO_Init+0x12e>
 80072ca:	4a9e      	ldr	r2, [pc, #632]	; (8007544 <HAL_GPIO_Init+0x2bc>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d058      	beq.n	8007382 <HAL_GPIO_Init+0xfa>
 80072d0:	4a9c      	ldr	r2, [pc, #624]	; (8007544 <HAL_GPIO_Init+0x2bc>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d86f      	bhi.n	80073b6 <HAL_GPIO_Init+0x12e>
 80072d6:	4a9c      	ldr	r2, [pc, #624]	; (8007548 <HAL_GPIO_Init+0x2c0>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d052      	beq.n	8007382 <HAL_GPIO_Init+0xfa>
 80072dc:	4a9a      	ldr	r2, [pc, #616]	; (8007548 <HAL_GPIO_Init+0x2c0>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d869      	bhi.n	80073b6 <HAL_GPIO_Init+0x12e>
 80072e2:	4a9a      	ldr	r2, [pc, #616]	; (800754c <HAL_GPIO_Init+0x2c4>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d04c      	beq.n	8007382 <HAL_GPIO_Init+0xfa>
 80072e8:	4a98      	ldr	r2, [pc, #608]	; (800754c <HAL_GPIO_Init+0x2c4>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d863      	bhi.n	80073b6 <HAL_GPIO_Init+0x12e>
 80072ee:	4a98      	ldr	r2, [pc, #608]	; (8007550 <HAL_GPIO_Init+0x2c8>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d046      	beq.n	8007382 <HAL_GPIO_Init+0xfa>
 80072f4:	4a96      	ldr	r2, [pc, #600]	; (8007550 <HAL_GPIO_Init+0x2c8>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d85d      	bhi.n	80073b6 <HAL_GPIO_Init+0x12e>
 80072fa:	2b12      	cmp	r3, #18
 80072fc:	d82a      	bhi.n	8007354 <HAL_GPIO_Init+0xcc>
 80072fe:	2b12      	cmp	r3, #18
 8007300:	d859      	bhi.n	80073b6 <HAL_GPIO_Init+0x12e>
 8007302:	a201      	add	r2, pc, #4	; (adr r2, 8007308 <HAL_GPIO_Init+0x80>)
 8007304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007308:	08007383 	.word	0x08007383
 800730c:	0800735d 	.word	0x0800735d
 8007310:	0800736f 	.word	0x0800736f
 8007314:	080073b1 	.word	0x080073b1
 8007318:	080073b7 	.word	0x080073b7
 800731c:	080073b7 	.word	0x080073b7
 8007320:	080073b7 	.word	0x080073b7
 8007324:	080073b7 	.word	0x080073b7
 8007328:	080073b7 	.word	0x080073b7
 800732c:	080073b7 	.word	0x080073b7
 8007330:	080073b7 	.word	0x080073b7
 8007334:	080073b7 	.word	0x080073b7
 8007338:	080073b7 	.word	0x080073b7
 800733c:	080073b7 	.word	0x080073b7
 8007340:	080073b7 	.word	0x080073b7
 8007344:	080073b7 	.word	0x080073b7
 8007348:	080073b7 	.word	0x080073b7
 800734c:	08007365 	.word	0x08007365
 8007350:	08007379 	.word	0x08007379
 8007354:	4a7f      	ldr	r2, [pc, #508]	; (8007554 <HAL_GPIO_Init+0x2cc>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d013      	beq.n	8007382 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800735a:	e02c      	b.n	80073b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	623b      	str	r3, [r7, #32]
          break;
 8007362:	e029      	b.n	80073b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	3304      	adds	r3, #4
 800736a:	623b      	str	r3, [r7, #32]
          break;
 800736c:	e024      	b.n	80073b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	3308      	adds	r3, #8
 8007374:	623b      	str	r3, [r7, #32]
          break;
 8007376:	e01f      	b.n	80073b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	330c      	adds	r3, #12
 800737e:	623b      	str	r3, [r7, #32]
          break;
 8007380:	e01a      	b.n	80073b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d102      	bne.n	8007390 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800738a:	2304      	movs	r3, #4
 800738c:	623b      	str	r3, [r7, #32]
          break;
 800738e:	e013      	b.n	80073b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d105      	bne.n	80073a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007398:	2308      	movs	r3, #8
 800739a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	69fa      	ldr	r2, [r7, #28]
 80073a0:	611a      	str	r2, [r3, #16]
          break;
 80073a2:	e009      	b.n	80073b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80073a4:	2308      	movs	r3, #8
 80073a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	69fa      	ldr	r2, [r7, #28]
 80073ac:	615a      	str	r2, [r3, #20]
          break;
 80073ae:	e003      	b.n	80073b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80073b0:	2300      	movs	r3, #0
 80073b2:	623b      	str	r3, [r7, #32]
          break;
 80073b4:	e000      	b.n	80073b8 <HAL_GPIO_Init+0x130>
          break;
 80073b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	2bff      	cmp	r3, #255	; 0xff
 80073bc:	d801      	bhi.n	80073c2 <HAL_GPIO_Init+0x13a>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	e001      	b.n	80073c6 <HAL_GPIO_Init+0x13e>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	3304      	adds	r3, #4
 80073c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	2bff      	cmp	r3, #255	; 0xff
 80073cc:	d802      	bhi.n	80073d4 <HAL_GPIO_Init+0x14c>
 80073ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	e002      	b.n	80073da <HAL_GPIO_Init+0x152>
 80073d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d6:	3b08      	subs	r3, #8
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	210f      	movs	r1, #15
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	fa01 f303 	lsl.w	r3, r1, r3
 80073e8:	43db      	mvns	r3, r3
 80073ea:	401a      	ands	r2, r3
 80073ec:	6a39      	ldr	r1, [r7, #32]
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	fa01 f303 	lsl.w	r3, r1, r3
 80073f4:	431a      	orrs	r2, r3
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007402:	2b00      	cmp	r3, #0
 8007404:	f000 80c1 	beq.w	800758a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007408:	4b53      	ldr	r3, [pc, #332]	; (8007558 <HAL_GPIO_Init+0x2d0>)
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	4a52      	ldr	r2, [pc, #328]	; (8007558 <HAL_GPIO_Init+0x2d0>)
 800740e:	f043 0301 	orr.w	r3, r3, #1
 8007412:	6193      	str	r3, [r2, #24]
 8007414:	4b50      	ldr	r3, [pc, #320]	; (8007558 <HAL_GPIO_Init+0x2d0>)
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	60bb      	str	r3, [r7, #8]
 800741e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007420:	4a4e      	ldr	r2, [pc, #312]	; (800755c <HAL_GPIO_Init+0x2d4>)
 8007422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007424:	089b      	lsrs	r3, r3, #2
 8007426:	3302      	adds	r3, #2
 8007428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800742c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800742e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007430:	f003 0303 	and.w	r3, r3, #3
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	220f      	movs	r2, #15
 8007438:	fa02 f303 	lsl.w	r3, r2, r3
 800743c:	43db      	mvns	r3, r3
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	4013      	ands	r3, r2
 8007442:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a46      	ldr	r2, [pc, #280]	; (8007560 <HAL_GPIO_Init+0x2d8>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d01f      	beq.n	800748c <HAL_GPIO_Init+0x204>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a45      	ldr	r2, [pc, #276]	; (8007564 <HAL_GPIO_Init+0x2dc>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d019      	beq.n	8007488 <HAL_GPIO_Init+0x200>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a44      	ldr	r2, [pc, #272]	; (8007568 <HAL_GPIO_Init+0x2e0>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d013      	beq.n	8007484 <HAL_GPIO_Init+0x1fc>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a43      	ldr	r2, [pc, #268]	; (800756c <HAL_GPIO_Init+0x2e4>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d00d      	beq.n	8007480 <HAL_GPIO_Init+0x1f8>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a42      	ldr	r2, [pc, #264]	; (8007570 <HAL_GPIO_Init+0x2e8>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d007      	beq.n	800747c <HAL_GPIO_Init+0x1f4>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a41      	ldr	r2, [pc, #260]	; (8007574 <HAL_GPIO_Init+0x2ec>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d101      	bne.n	8007478 <HAL_GPIO_Init+0x1f0>
 8007474:	2305      	movs	r3, #5
 8007476:	e00a      	b.n	800748e <HAL_GPIO_Init+0x206>
 8007478:	2306      	movs	r3, #6
 800747a:	e008      	b.n	800748e <HAL_GPIO_Init+0x206>
 800747c:	2304      	movs	r3, #4
 800747e:	e006      	b.n	800748e <HAL_GPIO_Init+0x206>
 8007480:	2303      	movs	r3, #3
 8007482:	e004      	b.n	800748e <HAL_GPIO_Init+0x206>
 8007484:	2302      	movs	r3, #2
 8007486:	e002      	b.n	800748e <HAL_GPIO_Init+0x206>
 8007488:	2301      	movs	r3, #1
 800748a:	e000      	b.n	800748e <HAL_GPIO_Init+0x206>
 800748c:	2300      	movs	r3, #0
 800748e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007490:	f002 0203 	and.w	r2, r2, #3
 8007494:	0092      	lsls	r2, r2, #2
 8007496:	4093      	lsls	r3, r2
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	4313      	orrs	r3, r2
 800749c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800749e:	492f      	ldr	r1, [pc, #188]	; (800755c <HAL_GPIO_Init+0x2d4>)
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	089b      	lsrs	r3, r3, #2
 80074a4:	3302      	adds	r3, #2
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d006      	beq.n	80074c6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80074b8:	4b2f      	ldr	r3, [pc, #188]	; (8007578 <HAL_GPIO_Init+0x2f0>)
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	492e      	ldr	r1, [pc, #184]	; (8007578 <HAL_GPIO_Init+0x2f0>)
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	600b      	str	r3, [r1, #0]
 80074c4:	e006      	b.n	80074d4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80074c6:	4b2c      	ldr	r3, [pc, #176]	; (8007578 <HAL_GPIO_Init+0x2f0>)
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	43db      	mvns	r3, r3
 80074ce:	492a      	ldr	r1, [pc, #168]	; (8007578 <HAL_GPIO_Init+0x2f0>)
 80074d0:	4013      	ands	r3, r2
 80074d2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d006      	beq.n	80074ee <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80074e0:	4b25      	ldr	r3, [pc, #148]	; (8007578 <HAL_GPIO_Init+0x2f0>)
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	4924      	ldr	r1, [pc, #144]	; (8007578 <HAL_GPIO_Init+0x2f0>)
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	604b      	str	r3, [r1, #4]
 80074ec:	e006      	b.n	80074fc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80074ee:	4b22      	ldr	r3, [pc, #136]	; (8007578 <HAL_GPIO_Init+0x2f0>)
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	43db      	mvns	r3, r3
 80074f6:	4920      	ldr	r1, [pc, #128]	; (8007578 <HAL_GPIO_Init+0x2f0>)
 80074f8:	4013      	ands	r3, r2
 80074fa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d006      	beq.n	8007516 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007508:	4b1b      	ldr	r3, [pc, #108]	; (8007578 <HAL_GPIO_Init+0x2f0>)
 800750a:	689a      	ldr	r2, [r3, #8]
 800750c:	491a      	ldr	r1, [pc, #104]	; (8007578 <HAL_GPIO_Init+0x2f0>)
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	4313      	orrs	r3, r2
 8007512:	608b      	str	r3, [r1, #8]
 8007514:	e006      	b.n	8007524 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007516:	4b18      	ldr	r3, [pc, #96]	; (8007578 <HAL_GPIO_Init+0x2f0>)
 8007518:	689a      	ldr	r2, [r3, #8]
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	43db      	mvns	r3, r3
 800751e:	4916      	ldr	r1, [pc, #88]	; (8007578 <HAL_GPIO_Init+0x2f0>)
 8007520:	4013      	ands	r3, r2
 8007522:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d025      	beq.n	800757c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007530:	4b11      	ldr	r3, [pc, #68]	; (8007578 <HAL_GPIO_Init+0x2f0>)
 8007532:	68da      	ldr	r2, [r3, #12]
 8007534:	4910      	ldr	r1, [pc, #64]	; (8007578 <HAL_GPIO_Init+0x2f0>)
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	4313      	orrs	r3, r2
 800753a:	60cb      	str	r3, [r1, #12]
 800753c:	e025      	b.n	800758a <HAL_GPIO_Init+0x302>
 800753e:	bf00      	nop
 8007540:	10320000 	.word	0x10320000
 8007544:	10310000 	.word	0x10310000
 8007548:	10220000 	.word	0x10220000
 800754c:	10210000 	.word	0x10210000
 8007550:	10120000 	.word	0x10120000
 8007554:	10110000 	.word	0x10110000
 8007558:	40021000 	.word	0x40021000
 800755c:	40010000 	.word	0x40010000
 8007560:	40010800 	.word	0x40010800
 8007564:	40010c00 	.word	0x40010c00
 8007568:	40011000 	.word	0x40011000
 800756c:	40011400 	.word	0x40011400
 8007570:	40011800 	.word	0x40011800
 8007574:	40011c00 	.word	0x40011c00
 8007578:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800757c:	4b0b      	ldr	r3, [pc, #44]	; (80075ac <HAL_GPIO_Init+0x324>)
 800757e:	68da      	ldr	r2, [r3, #12]
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	43db      	mvns	r3, r3
 8007584:	4909      	ldr	r1, [pc, #36]	; (80075ac <HAL_GPIO_Init+0x324>)
 8007586:	4013      	ands	r3, r2
 8007588:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	3301      	adds	r3, #1
 800758e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	fa22 f303 	lsr.w	r3, r2, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	f47f ae7e 	bne.w	800729c <HAL_GPIO_Init+0x14>
  }
}
 80075a0:	bf00      	nop
 80075a2:	bf00      	nop
 80075a4:	372c      	adds	r7, #44	; 0x2c
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bc80      	pop	{r7}
 80075aa:	4770      	bx	lr
 80075ac:	40010400 	.word	0x40010400

080075b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	460b      	mov	r3, r1
 80075ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	689a      	ldr	r2, [r3, #8]
 80075c0:	887b      	ldrh	r3, [r7, #2]
 80075c2:	4013      	ands	r3, r2
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d002      	beq.n	80075ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80075c8:	2301      	movs	r3, #1
 80075ca:	73fb      	strb	r3, [r7, #15]
 80075cc:	e001      	b.n	80075d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80075ce:	2300      	movs	r3, #0
 80075d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80075d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	bc80      	pop	{r7}
 80075dc:	4770      	bx	lr
	...

080075e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075e0:	b480      	push	{r7}
 80075e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075e4:	4b02      	ldr	r3, [pc, #8]	; (80075f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80075e6:	681b      	ldr	r3, [r3, #0]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bc80      	pop	{r7}
 80075ee:	4770      	bx	lr
 80075f0:	20000138 	.word	0x20000138

080075f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80075f8:	f7ff fff2 	bl	80075e0 <HAL_RCC_GetHCLKFreq>
 80075fc:	4602      	mov	r2, r0
 80075fe:	4b05      	ldr	r3, [pc, #20]	; (8007614 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	0adb      	lsrs	r3, r3, #11
 8007604:	f003 0307 	and.w	r3, r3, #7
 8007608:	4903      	ldr	r1, [pc, #12]	; (8007618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800760a:	5ccb      	ldrb	r3, [r1, r3]
 800760c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007610:	4618      	mov	r0, r3
 8007612:	bd80      	pop	{r7, pc}
 8007614:	40021000 	.word	0x40021000
 8007618:	08012848 	.word	0x08012848

0800761c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	220f      	movs	r2, #15
 800762a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800762c:	4b11      	ldr	r3, [pc, #68]	; (8007674 <HAL_RCC_GetClockConfig+0x58>)
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f003 0203 	and.w	r2, r3, #3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007638:	4b0e      	ldr	r3, [pc, #56]	; (8007674 <HAL_RCC_GetClockConfig+0x58>)
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007644:	4b0b      	ldr	r3, [pc, #44]	; (8007674 <HAL_RCC_GetClockConfig+0x58>)
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007650:	4b08      	ldr	r3, [pc, #32]	; (8007674 <HAL_RCC_GetClockConfig+0x58>)
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	08db      	lsrs	r3, r3, #3
 8007656:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800765e:	4b06      	ldr	r3, [pc, #24]	; (8007678 <HAL_RCC_GetClockConfig+0x5c>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0207 	and.w	r2, r3, #7
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800766a:	bf00      	nop
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	bc80      	pop	{r7}
 8007672:	4770      	bx	lr
 8007674:	40021000 	.word	0x40021000
 8007678:	40022000 	.word	0x40022000

0800767c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e022      	b.n	80076d4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d105      	bne.n	80076a6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f7fa ff69 	bl	8002578 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2203      	movs	r2, #3
 80076aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f814 	bl	80076dc <HAL_SD_InitCard>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d001      	beq.n	80076be <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e00a      	b.n	80076d4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80076dc:	b5b0      	push	{r4, r5, r7, lr}
 80076de:	b08e      	sub	sp, #56	; 0x38
 80076e0:	af04      	add	r7, sp, #16
 80076e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80076e4:	2300      	movs	r3, #0
 80076e6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80076e8:	2300      	movs	r3, #0
 80076ea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80076ec:	2300      	movs	r3, #0
 80076ee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80076f0:	2300      	movs	r3, #0
 80076f2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80076f4:	2300      	movs	r3, #0
 80076f6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80076f8:	2376      	movs	r3, #118	; 0x76
 80076fa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681d      	ldr	r5, [r3, #0]
 8007700:	466c      	mov	r4, sp
 8007702:	f107 0314 	add.w	r3, r7, #20
 8007706:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800770a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800770e:	f107 0308 	add.w	r3, r7, #8
 8007712:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007714:	4628      	mov	r0, r5
 8007716:	f001 fec3 	bl	80094a0 <SDIO_Init>
 800771a:	4603      	mov	r3, r0
 800771c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007724:	2b00      	cmp	r3, #0
 8007726:	d001      	beq.n	800772c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e04c      	b.n	80077c6 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800772c:	4b28      	ldr	r3, [pc, #160]	; (80077d0 <HAL_SD_InitCard+0xf4>)
 800772e:	2200      	movs	r2, #0
 8007730:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4618      	mov	r0, r3
 8007738:	f001 fef8 	bl	800952c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800773c:	4b24      	ldr	r3, [pc, #144]	; (80077d0 <HAL_SD_InitCard+0xf4>)
 800773e:	2201      	movs	r2, #1
 8007740:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 ff02 	bl	800854c <SD_PowerON>
 8007748:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800774a:	6a3b      	ldr	r3, [r7, #32]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00b      	beq.n	8007768 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	431a      	orrs	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e02e      	b.n	80077c6 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fe23 	bl	80083b4 <SD_InitCard>
 800776e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00b      	beq.n	800778e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007782:	6a3b      	ldr	r3, [r7, #32]
 8007784:	431a      	orrs	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e01b      	b.n	80077c6 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007796:	4618      	mov	r0, r3
 8007798:	f001 ff56 	bl	8009648 <SDMMC_CmdBlockLength>
 800779c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800779e:	6a3b      	ldr	r3, [r7, #32]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00f      	beq.n	80077c4 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a0a      	ldr	r2, [pc, #40]	; (80077d4 <HAL_SD_InitCard+0xf8>)
 80077aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077b0:	6a3b      	ldr	r3, [r7, #32]
 80077b2:	431a      	orrs	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e000      	b.n	80077c6 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3728      	adds	r7, #40	; 0x28
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bdb0      	pop	{r4, r5, r7, pc}
 80077ce:	bf00      	nop
 80077d0:	423000a0 	.word	0x423000a0
 80077d4:	004005ff 	.word	0x004005ff

080077d8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b092      	sub	sp, #72	; 0x48
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]
 80077e4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80077e6:	f7ff fc41 	bl	800706c <HAL_GetTick>
 80077ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d107      	bne.n	800780a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e1bd      	b.n	8007b86 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007810:	b2db      	uxtb	r3, r3
 8007812:	2b01      	cmp	r3, #1
 8007814:	f040 81b0 	bne.w	8007b78 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800781e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	441a      	add	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007828:	429a      	cmp	r2, r3
 800782a:	d907      	bls.n	800783c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007830:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e1a4      	b.n	8007b86 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2203      	movs	r2, #3
 8007840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2200      	movs	r2, #0
 800784a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007850:	2b01      	cmp	r3, #1
 8007852:	d002      	beq.n	800785a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007856:	025b      	lsls	r3, r3, #9
 8007858:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800785a:	f04f 33ff 	mov.w	r3, #4294967295
 800785e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	025b      	lsls	r3, r3, #9
 8007864:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007866:	2390      	movs	r3, #144	; 0x90
 8007868:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800786a:	2302      	movs	r3, #2
 800786c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800786e:	2300      	movs	r3, #0
 8007870:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007872:	2301      	movs	r3, #1
 8007874:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f107 0214 	add.w	r2, r7, #20
 800787e:	4611      	mov	r1, r2
 8007880:	4618      	mov	r0, r3
 8007882:	f001 feb6 	bl	80095f2 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d90a      	bls.n	80078a2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2202      	movs	r2, #2
 8007890:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007898:	4618      	mov	r0, r3
 800789a:	f001 ff19 	bl	80096d0 <SDMMC_CmdReadMultiBlock>
 800789e:	6478      	str	r0, [r7, #68]	; 0x44
 80078a0:	e009      	b.n	80078b6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2201      	movs	r2, #1
 80078a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80078ae:	4618      	mov	r0, r3
 80078b0:	f001 feec 	bl	800968c <SDMMC_CmdReadSingleBlock>
 80078b4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80078b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d012      	beq.n	80078e2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a7a      	ldr	r2, [pc, #488]	; (8007aac <HAL_SD_ReadBlocks+0x2d4>)
 80078c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078ca:	431a      	orrs	r2, r3
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e151      	b.n	8007b86 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80078e6:	e061      	b.n	80079ac <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d03c      	beq.n	8007970 <HAL_SD_ReadBlocks+0x198>
 80078f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d039      	beq.n	8007970 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80078fc:	2300      	movs	r3, #0
 80078fe:	643b      	str	r3, [r7, #64]	; 0x40
 8007900:	e033      	b.n	800796a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4618      	mov	r0, r3
 8007908:	f001 fdf4 	bl	80094f4 <SDIO_ReadFIFO>
 800790c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800790e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007910:	b2da      	uxtb	r2, r3
 8007912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007914:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007918:	3301      	adds	r3, #1
 800791a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800791c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800791e:	3b01      	subs	r3, #1
 8007920:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007924:	0a1b      	lsrs	r3, r3, #8
 8007926:	b2da      	uxtb	r2, r3
 8007928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800792a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800792c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800792e:	3301      	adds	r3, #1
 8007930:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007934:	3b01      	subs	r3, #1
 8007936:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793a:	0c1b      	lsrs	r3, r3, #16
 800793c:	b2da      	uxtb	r2, r3
 800793e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007940:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007944:	3301      	adds	r3, #1
 8007946:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800794a:	3b01      	subs	r3, #1
 800794c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800794e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007950:	0e1b      	lsrs	r3, r3, #24
 8007952:	b2da      	uxtb	r2, r3
 8007954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007956:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795a:	3301      	adds	r3, #1
 800795c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800795e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007960:	3b01      	subs	r3, #1
 8007962:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8007964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007966:	3301      	adds	r3, #1
 8007968:	643b      	str	r3, [r7, #64]	; 0x40
 800796a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800796c:	2b07      	cmp	r3, #7
 800796e:	d9c8      	bls.n	8007902 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007970:	f7ff fb7c 	bl	800706c <HAL_GetTick>
 8007974:	4602      	mov	r2, r0
 8007976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800797c:	429a      	cmp	r2, r3
 800797e:	d902      	bls.n	8007986 <HAL_SD_ReadBlocks+0x1ae>
 8007980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007982:	2b00      	cmp	r3, #0
 8007984:	d112      	bne.n	80079ac <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a48      	ldr	r2, [pc, #288]	; (8007aac <HAL_SD_ReadBlocks+0x2d4>)
 800798c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007992:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e0ec      	b.n	8007b86 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079b2:	f240 332a 	movw	r3, #810	; 0x32a
 80079b6:	4013      	ands	r3, r2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d095      	beq.n	80078e8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d022      	beq.n	8007a10 <HAL_SD_ReadBlocks+0x238>
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d91f      	bls.n	8007a10 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d4:	2b03      	cmp	r3, #3
 80079d6:	d01b      	beq.n	8007a10 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4618      	mov	r0, r3
 80079de:	f001 fedd 	bl	800979c <SDMMC_CmdStopTransfer>
 80079e2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80079e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d012      	beq.n	8007a10 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a2f      	ldr	r2, [pc, #188]	; (8007aac <HAL_SD_ReadBlocks+0x2d4>)
 80079f0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079f8:	431a      	orrs	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e0ba      	b.n	8007b86 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a16:	f003 0308 	and.w	r3, r3, #8
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d012      	beq.n	8007a44 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a22      	ldr	r2, [pc, #136]	; (8007aac <HAL_SD_ReadBlocks+0x2d4>)
 8007a24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2a:	f043 0208 	orr.w	r2, r3, #8
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e0a0      	b.n	8007b86 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a4a:	f003 0302 	and.w	r3, r3, #2
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d012      	beq.n	8007a78 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a15      	ldr	r2, [pc, #84]	; (8007aac <HAL_SD_ReadBlocks+0x2d4>)
 8007a58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5e:	f043 0202 	orr.w	r2, r3, #2
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	e086      	b.n	8007b86 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a7e:	f003 0320 	and.w	r3, r3, #32
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d063      	beq.n	8007b4e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a08      	ldr	r2, [pc, #32]	; (8007aac <HAL_SD_ReadBlocks+0x2d4>)
 8007a8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a92:	f043 0220 	orr.w	r2, r3, #32
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e06c      	b.n	8007b86 <HAL_SD_ReadBlocks+0x3ae>
 8007aac:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f001 fd1d 	bl	80094f4 <SDIO_ReadFIFO>
 8007aba:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8007abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007abe:	b2da      	uxtb	r2, r3
 8007ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007acc:	3b01      	subs	r3, #1
 8007ace:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad2:	0a1b      	lsrs	r3, r3, #8
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007adc:	3301      	adds	r3, #1
 8007ade:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae8:	0c1b      	lsrs	r3, r3, #16
 8007aea:	b2da      	uxtb	r2, r3
 8007aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aee:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af2:	3301      	adds	r3, #1
 8007af4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007af8:	3b01      	subs	r3, #1
 8007afa:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afe:	0e1b      	lsrs	r3, r3, #24
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b04:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b08:	3301      	adds	r3, #1
 8007b0a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007b12:	f7ff faab 	bl	800706c <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d902      	bls.n	8007b28 <HAL_SD_ReadBlocks+0x350>
 8007b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d112      	bne.n	8007b4e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a18      	ldr	r2, [pc, #96]	; (8007b90 <HAL_SD_ReadBlocks+0x3b8>)
 8007b2e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e01b      	b.n	8007b86 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d002      	beq.n	8007b62 <HAL_SD_ReadBlocks+0x38a>
 8007b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1a6      	bne.n	8007ab0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f240 523a 	movw	r2, #1338	; 0x53a
 8007b6a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007b74:	2300      	movs	r3, #0
 8007b76:	e006      	b.n	8007b86 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
  }
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3748      	adds	r7, #72	; 0x48
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	004005ff 	.word	0x004005ff

08007b94 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b092      	sub	sp, #72	; 0x48
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
 8007ba0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007ba2:	f7ff fa63 	bl	800706c <HAL_GetTick>
 8007ba6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d107      	bne.n	8007bc6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e166      	b.n	8007e94 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	f040 8159 	bne.w	8007e86 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007bda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	441a      	add	r2, r3
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d907      	bls.n	8007bf8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e14d      	b.n	8007e94 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2203      	movs	r2, #3
 8007bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2200      	movs	r2, #0
 8007c06:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d002      	beq.n	8007c16 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c12:	025b      	lsls	r3, r3, #9
 8007c14:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007c16:	f04f 33ff 	mov.w	r3, #4294967295
 8007c1a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	025b      	lsls	r3, r3, #9
 8007c20:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007c22:	2390      	movs	r3, #144	; 0x90
 8007c24:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007c26:	2300      	movs	r3, #0
 8007c28:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f107 0218 	add.w	r2, r7, #24
 8007c3a:	4611      	mov	r1, r2
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f001 fcd8 	bl	80095f2 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d90a      	bls.n	8007c5e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c54:	4618      	mov	r0, r3
 8007c56:	f001 fd7f 	bl	8009758 <SDMMC_CmdWriteMultiBlock>
 8007c5a:	6478      	str	r0, [r7, #68]	; 0x44
 8007c5c:	e009      	b.n	8007c72 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2210      	movs	r2, #16
 8007c62:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f001 fd52 	bl	8009714 <SDMMC_CmdWriteSingleBlock>
 8007c70:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d012      	beq.n	8007c9e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a87      	ldr	r2, [pc, #540]	; (8007e9c <HAL_SD_WriteBlocks+0x308>)
 8007c7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c86:	431a      	orrs	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e0fa      	b.n	8007e94 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007ca2:	e065      	b.n	8007d70 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d040      	beq.n	8007d34 <HAL_SD_WriteBlocks+0x1a0>
 8007cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d03d      	beq.n	8007d34 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007cb8:	2300      	movs	r3, #0
 8007cba:	643b      	str	r3, [r7, #64]	; 0x40
 8007cbc:	e037      	b.n	8007d2e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8007cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	021a      	lsls	r2, r3, #8
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cde:	3301      	adds	r3, #1
 8007ce0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	041a      	lsls	r2, r3, #16
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	061a      	lsls	r2, r3, #24
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d0e:	3301      	adds	r3, #1
 8007d10:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d14:	3b01      	subs	r3, #1
 8007d16:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f107 0214 	add.w	r2, r7, #20
 8007d20:	4611      	mov	r1, r2
 8007d22:	4618      	mov	r0, r3
 8007d24:	f001 fbf2 	bl	800950c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	643b      	str	r3, [r7, #64]	; 0x40
 8007d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d30:	2b07      	cmp	r3, #7
 8007d32:	d9c4      	bls.n	8007cbe <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007d34:	f7ff f99a 	bl	800706c <HAL_GetTick>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d902      	bls.n	8007d4a <HAL_SD_WriteBlocks+0x1b6>
 8007d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d112      	bne.n	8007d70 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a53      	ldr	r2, [pc, #332]	; (8007e9c <HAL_SD_WriteBlocks+0x308>)
 8007d50:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d58:	431a      	orrs	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e091      	b.n	8007e94 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d76:	f240 331a 	movw	r3, #794	; 0x31a
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d091      	beq.n	8007ca4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d022      	beq.n	8007dd4 <HAL_SD_WriteBlocks+0x240>
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d91f      	bls.n	8007dd4 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d98:	2b03      	cmp	r3, #3
 8007d9a:	d01b      	beq.n	8007dd4 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f001 fcfb 	bl	800979c <SDMMC_CmdStopTransfer>
 8007da6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d012      	beq.n	8007dd4 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a3a      	ldr	r2, [pc, #232]	; (8007e9c <HAL_SD_WriteBlocks+0x308>)
 8007db4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dbc:	431a      	orrs	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e05f      	b.n	8007e94 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dda:	f003 0308 	and.w	r3, r3, #8
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d012      	beq.n	8007e08 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a2d      	ldr	r2, [pc, #180]	; (8007e9c <HAL_SD_WriteBlocks+0x308>)
 8007de8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dee:	f043 0208 	orr.w	r2, r3, #8
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e045      	b.n	8007e94 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e0e:	f003 0302 	and.w	r3, r3, #2
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d012      	beq.n	8007e3c <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a20      	ldr	r2, [pc, #128]	; (8007e9c <HAL_SD_WriteBlocks+0x308>)
 8007e1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e22:	f043 0202 	orr.w	r2, r3, #2
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e02b      	b.n	8007e94 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e42:	f003 0310 	and.w	r3, r3, #16
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d012      	beq.n	8007e70 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a13      	ldr	r2, [pc, #76]	; (8007e9c <HAL_SD_WriteBlocks+0x308>)
 8007e50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e56:	f043 0210 	orr.w	r2, r3, #16
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e011      	b.n	8007e94 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f240 523a 	movw	r2, #1338	; 0x53a
 8007e78:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	e006      	b.n	8007e94 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
  }
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3748      	adds	r7, #72	; 0x48
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	004005ff 	.word	0x004005ff

08007ea0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eae:	0f9b      	lsrs	r3, r3, #30
 8007eb0:	b2da      	uxtb	r2, r3
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eba:	0e9b      	lsrs	r3, r3, #26
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	f003 030f 	and.w	r3, r3, #15
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ecc:	0e1b      	lsrs	r3, r3, #24
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	f003 0303 	and.w	r3, r3, #3
 8007ed4:	b2da      	uxtb	r2, r3
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ede:	0c1b      	lsrs	r3, r3, #16
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eea:	0a1b      	lsrs	r3, r3, #8
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ef6:	b2da      	uxtb	r2, r3
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f00:	0d1b      	lsrs	r3, r3, #20
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f0c:	0c1b      	lsrs	r3, r3, #16
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	f003 030f 	and.w	r3, r3, #15
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f1e:	0bdb      	lsrs	r3, r3, #15
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	b2da      	uxtb	r2, r3
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f30:	0b9b      	lsrs	r3, r3, #14
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	f003 0301 	and.w	r3, r3, #1
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f42:	0b5b      	lsrs	r3, r3, #13
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	b2da      	uxtb	r2, r3
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f54:	0b1b      	lsrs	r3, r3, #12
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	b2da      	uxtb	r2, r3
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	2200      	movs	r2, #0
 8007f66:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d163      	bne.n	8008038 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f74:	009a      	lsls	r2, r3, #2
 8007f76:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007f80:	0f92      	lsrs	r2, r2, #30
 8007f82:	431a      	orrs	r2, r3
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f8c:	0edb      	lsrs	r3, r3, #27
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	f003 0307 	and.w	r3, r3, #7
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f9e:	0e1b      	lsrs	r3, r3, #24
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	f003 0307 	and.w	r3, r3, #7
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fb0:	0d5b      	lsrs	r3, r3, #21
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	f003 0307 	and.w	r3, r3, #7
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fc2:	0c9b      	lsrs	r3, r3, #18
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	f003 0307 	and.w	r3, r3, #7
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fd4:	0bdb      	lsrs	r3, r3, #15
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	f003 0307 	and.w	r3, r3, #7
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	1c5a      	adds	r2, r3, #1
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	7e1b      	ldrb	r3, [r3, #24]
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	f003 0307 	and.w	r3, r3, #7
 8007ff6:	3302      	adds	r3, #2
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008002:	fb02 f203 	mul.w	r2, r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	7a1b      	ldrb	r3, [r3, #8]
 800800e:	b2db      	uxtb	r3, r3
 8008010:	f003 030f 	and.w	r3, r3, #15
 8008014:	2201      	movs	r2, #1
 8008016:	409a      	lsls	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008024:	0a52      	lsrs	r2, r2, #9
 8008026:	fb02 f203 	mul.w	r2, r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008034:	661a      	str	r2, [r3, #96]	; 0x60
 8008036:	e031      	b.n	800809c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803c:	2b01      	cmp	r3, #1
 800803e:	d11d      	bne.n	800807c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008044:	041b      	lsls	r3, r3, #16
 8008046:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800804e:	0c1b      	lsrs	r3, r3, #16
 8008050:	431a      	orrs	r2, r3
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	3301      	adds	r3, #1
 800805c:	029a      	lsls	r2, r3, #10
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008070:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	661a      	str	r2, [r3, #96]	; 0x60
 800807a:	e00f      	b.n	800809c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a58      	ldr	r2, [pc, #352]	; (80081e4 <HAL_SD_GetCardCSD+0x344>)
 8008082:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008088:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e09d      	b.n	80081d8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080a0:	0b9b      	lsrs	r3, r3, #14
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	f003 0301 	and.w	r3, r3, #1
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080b2:	09db      	lsrs	r3, r3, #7
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d4:	0fdb      	lsrs	r3, r3, #31
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e0:	0f5b      	lsrs	r3, r3, #29
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	f003 0303 	and.w	r3, r3, #3
 80080e8:	b2da      	uxtb	r2, r3
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080f2:	0e9b      	lsrs	r3, r3, #26
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	f003 0307 	and.w	r3, r3, #7
 80080fa:	b2da      	uxtb	r2, r3
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008104:	0d9b      	lsrs	r3, r3, #22
 8008106:	b2db      	uxtb	r3, r3
 8008108:	f003 030f 	and.w	r3, r3, #15
 800810c:	b2da      	uxtb	r2, r3
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008116:	0d5b      	lsrs	r3, r3, #21
 8008118:	b2db      	uxtb	r3, r3
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	b2da      	uxtb	r2, r3
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008132:	0c1b      	lsrs	r3, r3, #16
 8008134:	b2db      	uxtb	r3, r3
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	b2da      	uxtb	r2, r3
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008146:	0bdb      	lsrs	r3, r3, #15
 8008148:	b2db      	uxtb	r3, r3
 800814a:	f003 0301 	and.w	r3, r3, #1
 800814e:	b2da      	uxtb	r2, r3
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800815a:	0b9b      	lsrs	r3, r3, #14
 800815c:	b2db      	uxtb	r3, r3
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	b2da      	uxtb	r2, r3
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800816e:	0b5b      	lsrs	r3, r3, #13
 8008170:	b2db      	uxtb	r3, r3
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	b2da      	uxtb	r2, r3
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008182:	0b1b      	lsrs	r3, r3, #12
 8008184:	b2db      	uxtb	r3, r3
 8008186:	f003 0301 	and.w	r3, r3, #1
 800818a:	b2da      	uxtb	r2, r3
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008196:	0a9b      	lsrs	r3, r3, #10
 8008198:	b2db      	uxtb	r3, r3
 800819a:	f003 0303 	and.w	r3, r3, #3
 800819e:	b2da      	uxtb	r2, r3
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081aa:	0a1b      	lsrs	r3, r3, #8
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	f003 0303 	and.w	r3, r3, #3
 80081b2:	b2da      	uxtb	r2, r3
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081be:	085b      	lsrs	r3, r3, #1
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	2201      	movs	r2, #1
 80081d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	bc80      	pop	{r7}
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	004005ff 	.word	0x004005ff

080081e8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	bc80      	pop	{r7}
 800823c:	4770      	bx	lr
	...

08008240 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008240:	b5b0      	push	{r4, r5, r7, lr}
 8008242:	b08e      	sub	sp, #56	; 0x38
 8008244:	af04      	add	r7, sp, #16
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800824a:	2300      	movs	r3, #0
 800824c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2203      	movs	r2, #3
 8008254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800825c:	2b03      	cmp	r3, #3
 800825e:	d02e      	beq.n	80082be <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008266:	d106      	bne.n	8008276 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	639a      	str	r2, [r3, #56]	; 0x38
 8008274:	e029      	b.n	80082ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800827c:	d10a      	bne.n	8008294 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fa1a 	bl	80086b8 <SD_WideBus_Enable>
 8008284:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800828a:	6a3b      	ldr	r3, [r7, #32]
 800828c:	431a      	orrs	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	639a      	str	r2, [r3, #56]	; 0x38
 8008292:	e01a      	b.n	80082ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10a      	bne.n	80082b0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fa57 	bl	800874e <SD_WideBus_Disable>
 80082a0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082a6:	6a3b      	ldr	r3, [r7, #32]
 80082a8:	431a      	orrs	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	639a      	str	r2, [r3, #56]	; 0x38
 80082ae:	e00c      	b.n	80082ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	639a      	str	r2, [r3, #56]	; 0x38
 80082bc:	e005      	b.n	80082ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00b      	beq.n	80082ea <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a26      	ldr	r2, [pc, #152]	; (8008370 <HAL_SD_ConfigWideBusOperation+0x130>)
 80082d8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80082e8:	e01f      	b.n	800832a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	695b      	ldr	r3, [r3, #20]
 8008304:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681d      	ldr	r5, [r3, #0]
 8008310:	466c      	mov	r4, sp
 8008312:	f107 0314 	add.w	r3, r7, #20
 8008316:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800831a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800831e:	f107 0308 	add.w	r3, r7, #8
 8008322:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008324:	4628      	mov	r0, r5
 8008326:	f001 f8bb 	bl	80094a0 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008332:	4618      	mov	r0, r3
 8008334:	f001 f988 	bl	8009648 <SDMMC_CmdBlockLength>
 8008338:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00c      	beq.n	800835a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a0a      	ldr	r2, [pc, #40]	; (8008370 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008346:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800834c:	6a3b      	ldr	r3, [r7, #32]
 800834e:	431a      	orrs	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008366:	4618      	mov	r0, r3
 8008368:	3728      	adds	r7, #40	; 0x28
 800836a:	46bd      	mov	sp, r7
 800836c:	bdb0      	pop	{r4, r5, r7, pc}
 800836e:	bf00      	nop
 8008370:	004005ff 	.word	0x004005ff

08008374 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800837c:	2300      	movs	r3, #0
 800837e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008380:	f107 030c 	add.w	r3, r7, #12
 8008384:	4619      	mov	r1, r3
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f96e 	bl	8008668 <SD_SendStatus>
 800838c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d005      	beq.n	80083a0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	431a      	orrs	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	0a5b      	lsrs	r3, r3, #9
 80083a4:	f003 030f 	and.w	r3, r3, #15
 80083a8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80083aa:	693b      	ldr	r3, [r7, #16]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3718      	adds	r7, #24
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80083b4:	b5b0      	push	{r4, r5, r7, lr}
 80083b6:	b094      	sub	sp, #80	; 0x50
 80083b8:	af04      	add	r7, sp, #16
 80083ba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80083bc:	2301      	movs	r3, #1
 80083be:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4618      	mov	r0, r3
 80083c6:	f001 f8c0 	bl	800954a <SDIO_GetPowerState>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d102      	bne.n	80083d6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80083d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80083d4:	e0b6      	b.n	8008544 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083da:	2b03      	cmp	r3, #3
 80083dc:	d02f      	beq.n	800843e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f001 fae4 	bl	80099b0 <SDMMC_CmdSendCID>
 80083e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80083ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d001      	beq.n	80083f4 <SD_InitCard+0x40>
    {
      return errorstate;
 80083f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083f2:	e0a7      	b.n	8008544 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2100      	movs	r1, #0
 80083fa:	4618      	mov	r0, r3
 80083fc:	f001 f8e7 	bl	80095ce <SDIO_GetResponse>
 8008400:	4602      	mov	r2, r0
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2104      	movs	r1, #4
 800840c:	4618      	mov	r0, r3
 800840e:	f001 f8de 	bl	80095ce <SDIO_GetResponse>
 8008412:	4602      	mov	r2, r0
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2108      	movs	r1, #8
 800841e:	4618      	mov	r0, r3
 8008420:	f001 f8d5 	bl	80095ce <SDIO_GetResponse>
 8008424:	4602      	mov	r2, r0
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	210c      	movs	r1, #12
 8008430:	4618      	mov	r0, r3
 8008432:	f001 f8cc 	bl	80095ce <SDIO_GetResponse>
 8008436:	4602      	mov	r2, r0
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008442:	2b03      	cmp	r3, #3
 8008444:	d00d      	beq.n	8008462 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f107 020e 	add.w	r2, r7, #14
 800844e:	4611      	mov	r1, r2
 8008450:	4618      	mov	r0, r3
 8008452:	f001 faea 	bl	8009a2a <SDMMC_CmdSetRelAdd>
 8008456:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <SD_InitCard+0xae>
    {
      return errorstate;
 800845e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008460:	e070      	b.n	8008544 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008466:	2b03      	cmp	r3, #3
 8008468:	d036      	beq.n	80084d8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800846a:	89fb      	ldrh	r3, [r7, #14]
 800846c:	461a      	mov	r2, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800847a:	041b      	lsls	r3, r3, #16
 800847c:	4619      	mov	r1, r3
 800847e:	4610      	mov	r0, r2
 8008480:	f001 fab4 	bl	80099ec <SDMMC_CmdSendCSD>
 8008484:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008488:	2b00      	cmp	r3, #0
 800848a:	d001      	beq.n	8008490 <SD_InitCard+0xdc>
    {
      return errorstate;
 800848c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800848e:	e059      	b.n	8008544 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2100      	movs	r1, #0
 8008496:	4618      	mov	r0, r3
 8008498:	f001 f899 	bl	80095ce <SDIO_GetResponse>
 800849c:	4602      	mov	r2, r0
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2104      	movs	r1, #4
 80084a8:	4618      	mov	r0, r3
 80084aa:	f001 f890 	bl	80095ce <SDIO_GetResponse>
 80084ae:	4602      	mov	r2, r0
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2108      	movs	r1, #8
 80084ba:	4618      	mov	r0, r3
 80084bc:	f001 f887 	bl	80095ce <SDIO_GetResponse>
 80084c0:	4602      	mov	r2, r0
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	210c      	movs	r1, #12
 80084cc:	4618      	mov	r0, r3
 80084ce:	f001 f87e 	bl	80095ce <SDIO_GetResponse>
 80084d2:	4602      	mov	r2, r0
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2104      	movs	r1, #4
 80084de:	4618      	mov	r0, r3
 80084e0:	f001 f875 	bl	80095ce <SDIO_GetResponse>
 80084e4:	4603      	mov	r3, r0
 80084e6:	0d1a      	lsrs	r2, r3, #20
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80084ec:	f107 0310 	add.w	r3, r7, #16
 80084f0:	4619      	mov	r1, r3
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f7ff fcd4 	bl	8007ea0 <HAL_SD_GetCardCSD>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d002      	beq.n	8008504 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80084fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008502:	e01f      	b.n	8008544 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6819      	ldr	r1, [r3, #0]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800850c:	041b      	lsls	r3, r3, #16
 800850e:	461a      	mov	r2, r3
 8008510:	f04f 0300 	mov.w	r3, #0
 8008514:	4608      	mov	r0, r1
 8008516:	f001 f963 	bl	80097e0 <SDMMC_CmdSelDesel>
 800851a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800851c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800851e:	2b00      	cmp	r3, #0
 8008520:	d001      	beq.n	8008526 <SD_InitCard+0x172>
  {
    return errorstate;
 8008522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008524:	e00e      	b.n	8008544 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681d      	ldr	r5, [r3, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	466c      	mov	r4, sp
 800852e:	f103 0210 	add.w	r2, r3, #16
 8008532:	ca07      	ldmia	r2, {r0, r1, r2}
 8008534:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008538:	3304      	adds	r3, #4
 800853a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800853c:	4628      	mov	r0, r5
 800853e:	f000 ffaf 	bl	80094a0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3740      	adds	r7, #64	; 0x40
 8008548:	46bd      	mov	sp, r7
 800854a:	bdb0      	pop	{r4, r5, r7, pc}

0800854c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b086      	sub	sp, #24
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008554:	2300      	movs	r3, #0
 8008556:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008558:	2300      	movs	r3, #0
 800855a:	617b      	str	r3, [r7, #20]
 800855c:	2300      	movs	r3, #0
 800855e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4618      	mov	r0, r3
 8008566:	f001 f95e 	bl	8009826 <SDMMC_CmdGoIdleState>
 800856a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d001      	beq.n	8008576 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	e072      	b.n	800865c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4618      	mov	r0, r3
 800857c:	f001 f971 	bl	8009862 <SDMMC_CmdOperCond>
 8008580:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00d      	beq.n	80085a4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4618      	mov	r0, r3
 8008594:	f001 f947 	bl	8009826 <SDMMC_CmdGoIdleState>
 8008598:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d004      	beq.n	80085aa <SD_PowerON+0x5e>
    {
      return errorstate;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	e05b      	b.n	800865c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d137      	bne.n	8008622 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2100      	movs	r1, #0
 80085b8:	4618      	mov	r0, r3
 80085ba:	f001 f971 	bl	80098a0 <SDMMC_CmdAppCommand>
 80085be:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d02d      	beq.n	8008622 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80085ca:	e047      	b.n	800865c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2100      	movs	r1, #0
 80085d2:	4618      	mov	r0, r3
 80085d4:	f001 f964 	bl	80098a0 <SDMMC_CmdAppCommand>
 80085d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d001      	beq.n	80085e4 <SD_PowerON+0x98>
    {
      return errorstate;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	e03b      	b.n	800865c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	491e      	ldr	r1, [pc, #120]	; (8008664 <SD_PowerON+0x118>)
 80085ea:	4618      	mov	r0, r3
 80085ec:	f001 f97a 	bl	80098e4 <SDMMC_CmdAppOperCommand>
 80085f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80085fc:	e02e      	b.n	800865c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2100      	movs	r1, #0
 8008604:	4618      	mov	r0, r3
 8008606:	f000 ffe2 	bl	80095ce <SDIO_GetResponse>
 800860a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	0fdb      	lsrs	r3, r3, #31
 8008610:	2b01      	cmp	r3, #1
 8008612:	d101      	bne.n	8008618 <SD_PowerON+0xcc>
 8008614:	2301      	movs	r3, #1
 8008616:	e000      	b.n	800861a <SD_PowerON+0xce>
 8008618:	2300      	movs	r3, #0
 800861a:	613b      	str	r3, [r7, #16]

    count++;
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	3301      	adds	r3, #1
 8008620:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008628:	4293      	cmp	r3, r2
 800862a:	d802      	bhi.n	8008632 <SD_PowerON+0xe6>
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d0cc      	beq.n	80085cc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008638:	4293      	cmp	r3, r2
 800863a:	d902      	bls.n	8008642 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800863c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008640:	e00c      	b.n	800865c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d003      	beq.n	8008654 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	645a      	str	r2, [r3, #68]	; 0x44
 8008652:	e002      	b.n	800865a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3718      	adds	r7, #24
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	c1100000 	.word	0xc1100000

08008668 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d102      	bne.n	800867e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008678:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800867c:	e018      	b.n	80086b0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008686:	041b      	lsls	r3, r3, #16
 8008688:	4619      	mov	r1, r3
 800868a:	4610      	mov	r0, r2
 800868c:	f001 f9ee 	bl	8009a6c <SDMMC_CmdSendStatus>
 8008690:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d001      	beq.n	800869c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	e009      	b.n	80086b0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2100      	movs	r1, #0
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 ff93 	bl	80095ce <SDIO_GetResponse>
 80086a8:	4602      	mov	r2, r0
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b086      	sub	sp, #24
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80086c0:	2300      	movs	r3, #0
 80086c2:	60fb      	str	r3, [r7, #12]
 80086c4:	2300      	movs	r3, #0
 80086c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2100      	movs	r1, #0
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 ff7d 	bl	80095ce <SDIO_GetResponse>
 80086d4:	4603      	mov	r3, r0
 80086d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086de:	d102      	bne.n	80086e6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80086e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086e4:	e02f      	b.n	8008746 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80086e6:	f107 030c 	add.w	r3, r7, #12
 80086ea:	4619      	mov	r1, r3
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f879 	bl	80087e4 <SD_FindSCR>
 80086f2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d001      	beq.n	80086fe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	e023      	b.n	8008746 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008704:	2b00      	cmp	r3, #0
 8008706:	d01c      	beq.n	8008742 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008710:	041b      	lsls	r3, r3, #16
 8008712:	4619      	mov	r1, r3
 8008714:	4610      	mov	r0, r2
 8008716:	f001 f8c3 	bl	80098a0 <SDMMC_CmdAppCommand>
 800871a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d001      	beq.n	8008726 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	e00f      	b.n	8008746 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2102      	movs	r1, #2
 800872c:	4618      	mov	r0, r3
 800872e:	f001 f8fc 	bl	800992a <SDMMC_CmdBusWidth>
 8008732:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	e003      	b.n	8008746 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800873e:	2300      	movs	r3, #0
 8008740:	e001      	b.n	8008746 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008742:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008746:	4618      	mov	r0, r3
 8008748:	3718      	adds	r7, #24
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b086      	sub	sp, #24
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008756:	2300      	movs	r3, #0
 8008758:	60fb      	str	r3, [r7, #12]
 800875a:	2300      	movs	r3, #0
 800875c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2100      	movs	r1, #0
 8008764:	4618      	mov	r0, r3
 8008766:	f000 ff32 	bl	80095ce <SDIO_GetResponse>
 800876a:	4603      	mov	r3, r0
 800876c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008770:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008774:	d102      	bne.n	800877c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008776:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800877a:	e02f      	b.n	80087dc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800877c:	f107 030c 	add.w	r3, r7, #12
 8008780:	4619      	mov	r1, r3
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f82e 	bl	80087e4 <SD_FindSCR>
 8008788:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d001      	beq.n	8008794 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	e023      	b.n	80087dc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800879a:	2b00      	cmp	r3, #0
 800879c:	d01c      	beq.n	80087d8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087a6:	041b      	lsls	r3, r3, #16
 80087a8:	4619      	mov	r1, r3
 80087aa:	4610      	mov	r0, r2
 80087ac:	f001 f878 	bl	80098a0 <SDMMC_CmdAppCommand>
 80087b0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	e00f      	b.n	80087dc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2100      	movs	r1, #0
 80087c2:	4618      	mov	r0, r3
 80087c4:	f001 f8b1 	bl	800992a <SDMMC_CmdBusWidth>
 80087c8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d001      	beq.n	80087d4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	e003      	b.n	80087dc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80087d4:	2300      	movs	r3, #0
 80087d6:	e001      	b.n	80087dc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80087d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3718      	adds	r7, #24
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80087e4:	b590      	push	{r4, r7, lr}
 80087e6:	b08f      	sub	sp, #60	; 0x3c
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80087ee:	f7fe fc3d 	bl	800706c <HAL_GetTick>
 80087f2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80087f4:	2300      	movs	r3, #0
 80087f6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80087f8:	2300      	movs	r3, #0
 80087fa:	60bb      	str	r3, [r7, #8]
 80087fc:	2300      	movs	r3, #0
 80087fe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2108      	movs	r1, #8
 800880a:	4618      	mov	r0, r3
 800880c:	f000 ff1c 	bl	8009648 <SDMMC_CmdBlockLength>
 8008810:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008814:	2b00      	cmp	r3, #0
 8008816:	d001      	beq.n	800881c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881a:	e0b2      	b.n	8008982 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008824:	041b      	lsls	r3, r3, #16
 8008826:	4619      	mov	r1, r3
 8008828:	4610      	mov	r0, r2
 800882a:	f001 f839 	bl	80098a0 <SDMMC_CmdAppCommand>
 800882e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008832:	2b00      	cmp	r3, #0
 8008834:	d001      	beq.n	800883a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008838:	e0a3      	b.n	8008982 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800883a:	f04f 33ff 	mov.w	r3, #4294967295
 800883e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008840:	2308      	movs	r3, #8
 8008842:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008844:	2330      	movs	r3, #48	; 0x30
 8008846:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008848:	2302      	movs	r3, #2
 800884a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800884c:	2300      	movs	r3, #0
 800884e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008850:	2301      	movs	r3, #1
 8008852:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f107 0210 	add.w	r2, r7, #16
 800885c:	4611      	mov	r1, r2
 800885e:	4618      	mov	r0, r3
 8008860:	f000 fec7 	bl	80095f2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4618      	mov	r0, r3
 800886a:	f001 f880 	bl	800996e <SDMMC_CmdSendSCR>
 800886e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008872:	2b00      	cmp	r3, #0
 8008874:	d02a      	beq.n	80088cc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8008876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008878:	e083      	b.n	8008982 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00f      	beq.n	80088a8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6819      	ldr	r1, [r3, #0]
 800888c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	f107 0208 	add.w	r2, r7, #8
 8008894:	18d4      	adds	r4, r2, r3
 8008896:	4608      	mov	r0, r1
 8008898:	f000 fe2c 	bl	80094f4 <SDIO_ReadFIFO>
 800889c:	4603      	mov	r3, r0
 800889e:	6023      	str	r3, [r4, #0]
      index++;
 80088a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a2:	3301      	adds	r3, #1
 80088a4:	637b      	str	r3, [r7, #52]	; 0x34
 80088a6:	e006      	b.n	80088b6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d012      	beq.n	80088dc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80088b6:	f7fe fbd9 	bl	800706c <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c4:	d102      	bne.n	80088cc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80088c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088ca:	e05a      	b.n	8008982 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d0cf      	beq.n	800887a <SD_FindSCR+0x96>
 80088da:	e000      	b.n	80088de <SD_FindSCR+0xfa>
      break;
 80088dc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e4:	f003 0308 	and.w	r3, r3, #8
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d005      	beq.n	80088f8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2208      	movs	r2, #8
 80088f2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80088f4:	2308      	movs	r3, #8
 80088f6:	e044      	b.n	8008982 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	2b00      	cmp	r3, #0
 8008904:	d005      	beq.n	8008912 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2202      	movs	r2, #2
 800890c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800890e:	2302      	movs	r3, #2
 8008910:	e037      	b.n	8008982 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008918:	f003 0320 	and.w	r3, r3, #32
 800891c:	2b00      	cmp	r3, #0
 800891e:	d005      	beq.n	800892c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2220      	movs	r2, #32
 8008926:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008928:	2320      	movs	r3, #32
 800892a:	e02a      	b.n	8008982 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f240 523a 	movw	r2, #1338	; 0x53a
 8008934:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	061a      	lsls	r2, r3, #24
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	021b      	lsls	r3, r3, #8
 800893e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008942:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	0a1b      	lsrs	r3, r3, #8
 8008948:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800894c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	0e1b      	lsrs	r3, r3, #24
 8008952:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008956:	601a      	str	r2, [r3, #0]
    scr++;
 8008958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895a:	3304      	adds	r3, #4
 800895c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	061a      	lsls	r2, r3, #24
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	021b      	lsls	r3, r3, #8
 8008966:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800896a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	0a1b      	lsrs	r3, r3, #8
 8008970:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008974:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	0e1b      	lsrs	r3, r3, #24
 800897a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800897c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	373c      	adds	r7, #60	; 0x3c
 8008986:	46bd      	mov	sp, r7
 8008988:	bd90      	pop	{r4, r7, pc}

0800898a <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b084      	sub	sp, #16
 800898e:	af00      	add	r7, sp, #0
 8008990:	60f8      	str	r0, [r7, #12]
 8008992:	60b9      	str	r1, [r7, #8]
 8008994:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d004      	beq.n	80089a6 <HAL_SRAM_Init+0x1c>
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089a4:	d101      	bne.n	80089aa <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e038      	b.n	8008a1c <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d106      	bne.n	80089c4 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f7f9 fe78 	bl	80026b4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	3308      	adds	r3, #8
 80089cc:	4619      	mov	r1, r3
 80089ce:	4610      	mov	r0, r2
 80089d0:	f000 fb72 	bl	80090b8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6818      	ldr	r0, [r3, #0]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	461a      	mov	r2, r3
 80089de:	68b9      	ldr	r1, [r7, #8]
 80089e0:	f000 fbd4 	bl	800918c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6858      	ldr	r0, [r3, #4]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	689a      	ldr	r2, [r3, #8]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f0:	6879      	ldr	r1, [r7, #4]
 80089f2:	f000 fbff 	bl	80091f4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	6892      	ldr	r2, [r2, #8]
 80089fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	6892      	ldr	r2, [r2, #8]
 8008a0a:	f041 0101 	orr.w	r1, r1, #1
 8008a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d101      	bne.n	8008a36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e041      	b.n	8008aba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d106      	bne.n	8008a50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f839 	bl	8008ac2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2202      	movs	r2, #2
 8008a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	3304      	adds	r3, #4
 8008a60:	4619      	mov	r1, r3
 8008a62:	4610      	mov	r0, r2
 8008a64:	f000 f9c2 	bl	8008dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008ac2:	b480      	push	{r7}
 8008ac4:	b083      	sub	sp, #12
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008aca:	bf00      	nop
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bc80      	pop	{r7}
 8008ad2:	4770      	bx	lr

08008ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d001      	beq.n	8008aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e044      	b.n	8008b76 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2202      	movs	r2, #2
 8008af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68da      	ldr	r2, [r3, #12]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f042 0201 	orr.w	r2, r2, #1
 8008b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a1d      	ldr	r2, [pc, #116]	; (8008b80 <HAL_TIM_Base_Start_IT+0xac>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d018      	beq.n	8008b40 <HAL_TIM_Base_Start_IT+0x6c>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a1c      	ldr	r2, [pc, #112]	; (8008b84 <HAL_TIM_Base_Start_IT+0xb0>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d013      	beq.n	8008b40 <HAL_TIM_Base_Start_IT+0x6c>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b20:	d00e      	beq.n	8008b40 <HAL_TIM_Base_Start_IT+0x6c>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a18      	ldr	r2, [pc, #96]	; (8008b88 <HAL_TIM_Base_Start_IT+0xb4>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d009      	beq.n	8008b40 <HAL_TIM_Base_Start_IT+0x6c>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a16      	ldr	r2, [pc, #88]	; (8008b8c <HAL_TIM_Base_Start_IT+0xb8>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d004      	beq.n	8008b40 <HAL_TIM_Base_Start_IT+0x6c>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a15      	ldr	r2, [pc, #84]	; (8008b90 <HAL_TIM_Base_Start_IT+0xbc>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d111      	bne.n	8008b64 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	f003 0307 	and.w	r3, r3, #7
 8008b4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2b06      	cmp	r3, #6
 8008b50:	d010      	beq.n	8008b74 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f042 0201 	orr.w	r2, r2, #1
 8008b60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b62:	e007      	b.n	8008b74 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f042 0201 	orr.w	r2, r2, #1
 8008b72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bc80      	pop	{r7}
 8008b7e:	4770      	bx	lr
 8008b80:	40012c00 	.word	0x40012c00
 8008b84:	40013400 	.word	0x40013400
 8008b88:	40000400 	.word	0x40000400
 8008b8c:	40000800 	.word	0x40000800
 8008b90:	40000c00 	.word	0x40000c00

08008b94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	f003 0302 	and.w	r3, r3, #2
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d122      	bne.n	8008bf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	f003 0302 	and.w	r3, r3, #2
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d11b      	bne.n	8008bf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f06f 0202 	mvn.w	r2, #2
 8008bc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	f003 0303 	and.w	r3, r3, #3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d003      	beq.n	8008bde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 f8ed 	bl	8008db6 <HAL_TIM_IC_CaptureCallback>
 8008bdc:	e005      	b.n	8008bea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f8e0 	bl	8008da4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 f8ef 	bl	8008dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	f003 0304 	and.w	r3, r3, #4
 8008bfa:	2b04      	cmp	r3, #4
 8008bfc:	d122      	bne.n	8008c44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	f003 0304 	and.w	r3, r3, #4
 8008c08:	2b04      	cmp	r3, #4
 8008c0a:	d11b      	bne.n	8008c44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f06f 0204 	mvn.w	r2, #4
 8008c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2202      	movs	r2, #2
 8008c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d003      	beq.n	8008c32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f8c3 	bl	8008db6 <HAL_TIM_IC_CaptureCallback>
 8008c30:	e005      	b.n	8008c3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f8b6 	bl	8008da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f8c5 	bl	8008dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	f003 0308 	and.w	r3, r3, #8
 8008c4e:	2b08      	cmp	r3, #8
 8008c50:	d122      	bne.n	8008c98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	f003 0308 	and.w	r3, r3, #8
 8008c5c:	2b08      	cmp	r3, #8
 8008c5e:	d11b      	bne.n	8008c98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f06f 0208 	mvn.w	r2, #8
 8008c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2204      	movs	r2, #4
 8008c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	69db      	ldr	r3, [r3, #28]
 8008c76:	f003 0303 	and.w	r3, r3, #3
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d003      	beq.n	8008c86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 f899 	bl	8008db6 <HAL_TIM_IC_CaptureCallback>
 8008c84:	e005      	b.n	8008c92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f88c 	bl	8008da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f89b 	bl	8008dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	f003 0310 	and.w	r3, r3, #16
 8008ca2:	2b10      	cmp	r3, #16
 8008ca4:	d122      	bne.n	8008cec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	f003 0310 	and.w	r3, r3, #16
 8008cb0:	2b10      	cmp	r3, #16
 8008cb2:	d11b      	bne.n	8008cec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f06f 0210 	mvn.w	r2, #16
 8008cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2208      	movs	r2, #8
 8008cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	69db      	ldr	r3, [r3, #28]
 8008cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f86f 	bl	8008db6 <HAL_TIM_IC_CaptureCallback>
 8008cd8:	e005      	b.n	8008ce6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f862 	bl	8008da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 f871 	bl	8008dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	f003 0301 	and.w	r3, r3, #1
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d10e      	bne.n	8008d18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d107      	bne.n	8008d18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f06f 0201 	mvn.w	r2, #1
 8008d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7f9 fbe0 	bl	80024d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d22:	2b80      	cmp	r3, #128	; 0x80
 8008d24:	d10e      	bne.n	8008d44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d30:	2b80      	cmp	r3, #128	; 0x80
 8008d32:	d107      	bne.n	8008d44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 f8d7 	bl	8008ef2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d4e:	2b40      	cmp	r3, #64	; 0x40
 8008d50:	d10e      	bne.n	8008d70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d5c:	2b40      	cmp	r3, #64	; 0x40
 8008d5e:	d107      	bne.n	8008d70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f835 	bl	8008dda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	f003 0320 	and.w	r3, r3, #32
 8008d7a:	2b20      	cmp	r3, #32
 8008d7c:	d10e      	bne.n	8008d9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	f003 0320 	and.w	r3, r3, #32
 8008d88:	2b20      	cmp	r3, #32
 8008d8a:	d107      	bne.n	8008d9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f06f 0220 	mvn.w	r2, #32
 8008d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f8a2 	bl	8008ee0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d9c:	bf00      	nop
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008dac:	bf00      	nop
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bc80      	pop	{r7}
 8008db4:	4770      	bx	lr

08008db6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b083      	sub	sp, #12
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008dbe:	bf00      	nop
 8008dc0:	370c      	adds	r7, #12
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bc80      	pop	{r7}
 8008dc6:	4770      	bx	lr

08008dc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bc80      	pop	{r7}
 8008dd8:	4770      	bx	lr

08008dda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008dda:	b480      	push	{r7}
 8008ddc:	b083      	sub	sp, #12
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008de2:	bf00      	nop
 8008de4:	370c      	adds	r7, #12
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bc80      	pop	{r7}
 8008dea:	4770      	bx	lr

08008dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a33      	ldr	r2, [pc, #204]	; (8008ecc <TIM_Base_SetConfig+0xe0>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d013      	beq.n	8008e2c <TIM_Base_SetConfig+0x40>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a32      	ldr	r2, [pc, #200]	; (8008ed0 <TIM_Base_SetConfig+0xe4>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d00f      	beq.n	8008e2c <TIM_Base_SetConfig+0x40>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e12:	d00b      	beq.n	8008e2c <TIM_Base_SetConfig+0x40>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a2f      	ldr	r2, [pc, #188]	; (8008ed4 <TIM_Base_SetConfig+0xe8>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d007      	beq.n	8008e2c <TIM_Base_SetConfig+0x40>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a2e      	ldr	r2, [pc, #184]	; (8008ed8 <TIM_Base_SetConfig+0xec>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d003      	beq.n	8008e2c <TIM_Base_SetConfig+0x40>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a2d      	ldr	r2, [pc, #180]	; (8008edc <TIM_Base_SetConfig+0xf0>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d108      	bne.n	8008e3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a22      	ldr	r2, [pc, #136]	; (8008ecc <TIM_Base_SetConfig+0xe0>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d013      	beq.n	8008e6e <TIM_Base_SetConfig+0x82>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a21      	ldr	r2, [pc, #132]	; (8008ed0 <TIM_Base_SetConfig+0xe4>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d00f      	beq.n	8008e6e <TIM_Base_SetConfig+0x82>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e54:	d00b      	beq.n	8008e6e <TIM_Base_SetConfig+0x82>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a1e      	ldr	r2, [pc, #120]	; (8008ed4 <TIM_Base_SetConfig+0xe8>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d007      	beq.n	8008e6e <TIM_Base_SetConfig+0x82>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a1d      	ldr	r2, [pc, #116]	; (8008ed8 <TIM_Base_SetConfig+0xec>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d003      	beq.n	8008e6e <TIM_Base_SetConfig+0x82>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a1c      	ldr	r2, [pc, #112]	; (8008edc <TIM_Base_SetConfig+0xf0>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d108      	bne.n	8008e80 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	695b      	ldr	r3, [r3, #20]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	689a      	ldr	r2, [r3, #8]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a09      	ldr	r2, [pc, #36]	; (8008ecc <TIM_Base_SetConfig+0xe0>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d003      	beq.n	8008eb4 <TIM_Base_SetConfig+0xc8>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a08      	ldr	r2, [pc, #32]	; (8008ed0 <TIM_Base_SetConfig+0xe4>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d103      	bne.n	8008ebc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	691a      	ldr	r2, [r3, #16]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	615a      	str	r2, [r3, #20]
}
 8008ec2:	bf00      	nop
 8008ec4:	3714      	adds	r7, #20
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bc80      	pop	{r7}
 8008eca:	4770      	bx	lr
 8008ecc:	40012c00 	.word	0x40012c00
 8008ed0:	40013400 	.word	0x40013400
 8008ed4:	40000400 	.word	0x40000400
 8008ed8:	40000800 	.word	0x40000800
 8008edc:	40000c00 	.word	0x40000c00

08008ee0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bc80      	pop	{r7}
 8008ef0:	4770      	bx	lr

08008ef2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ef2:	b480      	push	{r7}
 8008ef4:	b083      	sub	sp, #12
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008efa:	bf00      	nop
 8008efc:	370c      	adds	r7, #12
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bc80      	pop	{r7}
 8008f02:	4770      	bx	lr

08008f04 <LL_ADC_REG_SetSequencerLength>:
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f12:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	431a      	orrs	r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008f1e:	bf00      	nop
 8008f20:	370c      	adds	r7, #12
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bc80      	pop	{r7}
 8008f26:	4770      	bx	lr

08008f28 <LL_ADC_IsEnabled>:
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	f003 0301 	and.w	r3, r3, #1
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	bf0c      	ite	eq
 8008f3c:	2301      	moveq	r3, #1
 8008f3e:	2300      	movne	r3, #0
 8008f40:	b2db      	uxtb	r3, r3
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	370c      	adds	r7, #12
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bc80      	pop	{r7}
 8008f4a:	4770      	bx	lr

08008f4c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8008f4c:	b590      	push	{r4, r7, lr}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8008f56:	2300      	movs	r3, #0
 8008f58:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a1c      	ldr	r2, [pc, #112]	; (8008fd0 <LL_ADC_CommonInit+0x84>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d10e      	bne.n	8008f80 <LL_ADC_CommonInit+0x34>
 8008f62:	481b      	ldr	r0, [pc, #108]	; (8008fd0 <LL_ADC_CommonInit+0x84>)
 8008f64:	f7ff ffe0 	bl	8008f28 <LL_ADC_IsEnabled>
 8008f68:	4604      	mov	r4, r0
 8008f6a:	481a      	ldr	r0, [pc, #104]	; (8008fd4 <LL_ADC_CommonInit+0x88>)
 8008f6c:	f7ff ffdc 	bl	8008f28 <LL_ADC_IsEnabled>
 8008f70:	4603      	mov	r3, r0
 8008f72:	4323      	orrs	r3, r4
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	bf0c      	ite	eq
 8008f78:	2301      	moveq	r3, #1
 8008f7a:	2300      	movne	r3, #0
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	e008      	b.n	8008f92 <LL_ADC_CommonInit+0x46>
 8008f80:	4815      	ldr	r0, [pc, #84]	; (8008fd8 <LL_ADC_CommonInit+0x8c>)
 8008f82:	f7ff ffd1 	bl	8008f28 <LL_ADC_IsEnabled>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	bf0c      	ite	eq
 8008f8c:	2301      	moveq	r3, #1
 8008f8e:	2300      	movne	r3, #0
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d014      	beq.n	8008fc0 <LL_ADC_CommonInit+0x74>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d009      	beq.n	8008fb2 <LL_ADC_CommonInit+0x66>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	431a      	orrs	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	605a      	str	r2, [r3, #4]
 8008fb0:	e008      	b.n	8008fc4 <LL_ADC_CommonInit+0x78>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	605a      	str	r2, [r3, #4]
 8008fbe:	e001      	b.n	8008fc4 <LL_ADC_CommonInit+0x78>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8008fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3714      	adds	r7, #20
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd90      	pop	{r4, r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	40012400 	.word	0x40012400
 8008fd4:	40012800 	.word	0x40012800
 8008fd8:	40013c00 	.word	0x40013c00

08008fdc <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7ff ff9c 	bl	8008f28 <LL_ADC_IsEnabled>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d112      	bne.n	800901c <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	431a      	orrs	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	431a      	orrs	r2, r3
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	609a      	str	r2, [r3, #8]
 800901a:	e001      	b.n	8009020 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8009020:	7bfb      	ldrb	r3, [r7, #15]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b084      	sub	sp, #16
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8009034:	2300      	movs	r3, #0
 8009036:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f7ff ff75 	bl	8008f28 <LL_ADC_IsEnabled>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d131      	bne.n	80090a8 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00c      	beq.n	8009066 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	6859      	ldr	r1, [r3, #4]
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	430b      	orrs	r3, r1
 800905e:	431a      	orrs	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	605a      	str	r2, [r3, #4]
 8009064:	e008      	b.n	8009078 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	431a      	orrs	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8009080:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	6811      	ldr	r1, [r2, #0]
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	68d2      	ldr	r2, [r2, #12]
 800908c:	4311      	orrs	r1, r2
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	6912      	ldr	r2, [r2, #16]
 8009092:	430a      	orrs	r2, r1
 8009094:	431a      	orrs	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	4619      	mov	r1, r3
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7ff ff2f 	bl	8008f04 <LL_ADC_REG_SetSequencerLength>
 80090a6:	e001      	b.n	80090ac <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80090ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
	...

080090b8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b087      	sub	sp, #28
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	6812      	ldr	r2, [r2, #0]
 80090d0:	f023 0101 	bic.w	r1, r3, #1
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	2b08      	cmp	r3, #8
 80090e0:	d102      	bne.n	80090e8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80090e2:	2340      	movs	r3, #64	; 0x40
 80090e4:	617b      	str	r3, [r7, #20]
 80090e6:	e001      	b.n	80090ec <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80090e8:	2300      	movs	r3, #0
 80090ea:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80090f8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80090fe:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009104:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800910a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8009110:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8009116:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 800911c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8009122:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8009128:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800912e:	4313      	orrs	r3, r2
 8009130:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	4313      	orrs	r3, r2
 800913a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	4313      	orrs	r3, r2
 8009144:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8009146:	4b10      	ldr	r3, [pc, #64]	; (8009188 <FSMC_NORSRAM_Init+0xd0>)
 8009148:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009150:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8009158:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	43db      	mvns	r3, r3
 8009168:	ea02 0103 	and.w	r1, r2, r3
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	4319      	orrs	r1, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	371c      	adds	r7, #28
 8009180:	46bd      	mov	sp, r7
 8009182:	bc80      	pop	{r7}
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	0008fb7f 	.word	0x0008fb7f

0800918c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800918c:	b480      	push	{r7}
 800918e:	b085      	sub	sp, #20
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	1c5a      	adds	r2, r3, #1
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091a2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	011b      	lsls	r3, r3, #4
 80091b0:	431a      	orrs	r2, r3
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	021b      	lsls	r3, r3, #8
 80091b8:	431a      	orrs	r2, r3
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	041b      	lsls	r3, r3, #16
 80091c0:	431a      	orrs	r2, r3
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	691b      	ldr	r3, [r3, #16]
 80091c6:	3b01      	subs	r3, #1
 80091c8:	051b      	lsls	r3, r3, #20
 80091ca:	431a      	orrs	r2, r3
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	695b      	ldr	r3, [r3, #20]
 80091d0:	3b02      	subs	r3, #2
 80091d2:	061b      	lsls	r3, r3, #24
 80091d4:	431a      	orrs	r2, r3
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	4313      	orrs	r3, r2
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	3201      	adds	r2, #1
 80091e0:	4319      	orrs	r1, r3
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3714      	adds	r7, #20
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bc80      	pop	{r7}
 80091f2:	4770      	bx	lr

080091f4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009208:	d11d      	bne.n	8009246 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009212:	4b13      	ldr	r3, [pc, #76]	; (8009260 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8009214:	4013      	ands	r3, r2
 8009216:	68ba      	ldr	r2, [r7, #8]
 8009218:	6811      	ldr	r1, [r2, #0]
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	6852      	ldr	r2, [r2, #4]
 800921e:	0112      	lsls	r2, r2, #4
 8009220:	4311      	orrs	r1, r2
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	6892      	ldr	r2, [r2, #8]
 8009226:	0212      	lsls	r2, r2, #8
 8009228:	4311      	orrs	r1, r2
 800922a:	68ba      	ldr	r2, [r7, #8]
 800922c:	6992      	ldr	r2, [r2, #24]
 800922e:	4311      	orrs	r1, r2
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	68d2      	ldr	r2, [r2, #12]
 8009234:	0412      	lsls	r2, r2, #16
 8009236:	430a      	orrs	r2, r1
 8009238:	ea43 0102 	orr.w	r1, r3, r2
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009244:	e005      	b.n	8009252 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800924e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3714      	adds	r7, #20
 8009258:	46bd      	mov	sp, r7
 800925a:	bc80      	pop	{r7}
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	cff00000 	.word	0xcff00000

08009264 <LL_GPIO_SetPinMode>:
{
 8009264:	b490      	push	{r4, r7}
 8009266:	b088      	sub	sp, #32
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	461a      	mov	r2, r3
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	0e1b      	lsrs	r3, r3, #24
 8009278:	4413      	add	r3, r2
 800927a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800927c:	6822      	ldr	r2, [r4, #0]
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	fa93 f3a3 	rbit	r3, r3
 8009288:	613b      	str	r3, [r7, #16]
  return result;
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	fab3 f383 	clz	r3, r3
 8009290:	b2db      	uxtb	r3, r3
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	210f      	movs	r1, #15
 8009296:	fa01 f303 	lsl.w	r3, r1, r3
 800929a:	43db      	mvns	r3, r3
 800929c:	401a      	ands	r2, r3
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	fa93 f3a3 	rbit	r3, r3
 80092a8:	61bb      	str	r3, [r7, #24]
  return result;
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	fab3 f383 	clz	r3, r3
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	6879      	ldr	r1, [r7, #4]
 80092b6:	fa01 f303 	lsl.w	r3, r1, r3
 80092ba:	4313      	orrs	r3, r2
 80092bc:	6023      	str	r3, [r4, #0]
}
 80092be:	bf00      	nop
 80092c0:	3720      	adds	r7, #32
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bc90      	pop	{r4, r7}
 80092c6:	4770      	bx	lr

080092c8 <LL_GPIO_SetPinSpeed>:
{
 80092c8:	b490      	push	{r4, r7}
 80092ca:	b088      	sub	sp, #32
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	461a      	mov	r2, r3
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	0e1b      	lsrs	r3, r3, #24
 80092dc:	4413      	add	r3, r2
 80092de:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80092e0:	6822      	ldr	r2, [r4, #0]
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	fa93 f3a3 	rbit	r3, r3
 80092ec:	613b      	str	r3, [r7, #16]
  return result;
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	fab3 f383 	clz	r3, r3
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	2103      	movs	r1, #3
 80092fa:	fa01 f303 	lsl.w	r3, r1, r3
 80092fe:	43db      	mvns	r3, r3
 8009300:	401a      	ands	r2, r3
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	fa93 f3a3 	rbit	r3, r3
 800930c:	61bb      	str	r3, [r7, #24]
  return result;
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	fab3 f383 	clz	r3, r3
 8009314:	b2db      	uxtb	r3, r3
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	6879      	ldr	r1, [r7, #4]
 800931a:	fa01 f303 	lsl.w	r3, r1, r3
 800931e:	4313      	orrs	r3, r2
 8009320:	6023      	str	r3, [r4, #0]
}
 8009322:	bf00      	nop
 8009324:	3720      	adds	r7, #32
 8009326:	46bd      	mov	sp, r7
 8009328:	bc90      	pop	{r4, r7}
 800932a:	4770      	bx	lr

0800932c <LL_GPIO_SetPinOutputType>:
{
 800932c:	b490      	push	{r4, r7}
 800932e:	b088      	sub	sp, #32
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	461a      	mov	r2, r3
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	0e1b      	lsrs	r3, r3, #24
 8009340:	4413      	add	r3, r2
 8009342:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8009344:	6822      	ldr	r2, [r4, #0]
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	fa93 f3a3 	rbit	r3, r3
 8009350:	613b      	str	r3, [r7, #16]
  return result;
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	fab3 f383 	clz	r3, r3
 8009358:	b2db      	uxtb	r3, r3
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	2104      	movs	r1, #4
 800935e:	fa01 f303 	lsl.w	r3, r1, r3
 8009362:	43db      	mvns	r3, r3
 8009364:	401a      	ands	r2, r3
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	fa93 f3a3 	rbit	r3, r3
 8009370:	61bb      	str	r3, [r7, #24]
  return result;
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	fab3 f383 	clz	r3, r3
 8009378:	b2db      	uxtb	r3, r3
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	6879      	ldr	r1, [r7, #4]
 800937e:	fa01 f303 	lsl.w	r3, r1, r3
 8009382:	4313      	orrs	r3, r2
 8009384:	6023      	str	r3, [r4, #0]
}
 8009386:	bf00      	nop
 8009388:	3720      	adds	r7, #32
 800938a:	46bd      	mov	sp, r7
 800938c:	bc90      	pop	{r4, r7}
 800938e:	4770      	bx	lr

08009390 <LL_GPIO_SetPinPull>:
{
 8009390:	b480      	push	{r7}
 8009392:	b087      	sub	sp, #28
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	68da      	ldr	r2, [r3, #12]
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	0a1b      	lsrs	r3, r3, #8
 80093a4:	43db      	mvns	r3, r3
 80093a6:	401a      	ands	r2, r3
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	0a1b      	lsrs	r3, r3, #8
 80093ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	fa93 f3a3 	rbit	r3, r3
 80093b4:	613b      	str	r3, [r7, #16]
  return result;
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	fab3 f383 	clz	r3, r3
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	4619      	mov	r1, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	408b      	lsls	r3, r1
 80093c4:	431a      	orrs	r2, r3
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	60da      	str	r2, [r3, #12]
}
 80093ca:	bf00      	nop
 80093cc:	371c      	adds	r7, #28
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bc80      	pop	{r7}
 80093d2:	4770      	bx	lr

080093d4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b088      	sub	sp, #32
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	021b      	lsls	r3, r3, #8
 80093e4:	0c1b      	lsrs	r3, r3, #16
 80093e6:	617b      	str	r3, [r7, #20]
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	fa93 f3a3 	rbit	r3, r3
 80093f2:	60fb      	str	r3, [r7, #12]
  return result;
 80093f4:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80093f6:	fab3 f383 	clz	r3, r3
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80093fe:	e044      	b.n	800948a <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8009400:	2201      	movs	r2, #1
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	409a      	lsls	r2, r3
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	4013      	ands	r3, r2
 800940a:	2b00      	cmp	r3, #0
 800940c:	d03a      	beq.n	8009484 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	2b07      	cmp	r3, #7
 8009412:	d806      	bhi.n	8009422 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8009414:	f240 1201 	movw	r2, #257	; 0x101
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	fa02 f303 	lsl.w	r3, r2, r3
 800941e:	61bb      	str	r3, [r7, #24]
 8009420:	e008      	b.n	8009434 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	3b08      	subs	r3, #8
 8009426:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800942a:	fa02 f303 	lsl.w	r3, r2, r3
 800942e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009432:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	2b08      	cmp	r3, #8
 800943a:	d106      	bne.n	800944a <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	461a      	mov	r2, r3
 8009442:	69b9      	ldr	r1, [r7, #24]
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f7ff ffa3 	bl	8009390 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	461a      	mov	r2, r3
 8009450:	69b9      	ldr	r1, [r7, #24]
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7ff ff06 	bl	8009264 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d003      	beq.n	8009468 <LL_GPIO_Init+0x94>
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	2b09      	cmp	r3, #9
 8009466:	d10d      	bne.n	8009484 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	461a      	mov	r2, r3
 800946e:	69b9      	ldr	r1, [r7, #24]
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7ff ff29 	bl	80092c8 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	461a      	mov	r2, r3
 800947c:	69b9      	ldr	r1, [r7, #24]
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f7ff ff54 	bl	800932c <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	3301      	adds	r3, #1
 8009488:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	fa22 f303 	lsr.w	r3, r2, r3
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1b4      	bne.n	8009400 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3720      	adds	r7, #32
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80094a0:	b084      	sub	sp, #16
 80094a2:	b480      	push	{r7}
 80094a4:	b085      	sub	sp, #20
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
 80094aa:	f107 001c 	add.w	r0, r7, #28
 80094ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80094b2:	2300      	movs	r3, #0
 80094b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80094b6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80094b8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80094ba:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80094bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80094be:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80094c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80094c2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80094c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80094c6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80094c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80094ca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	4313      	orrs	r3, r2
 80094d0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80094da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	431a      	orrs	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3714      	adds	r7, #20
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bc80      	pop	{r7}
 80094f0:	b004      	add	sp, #16
 80094f2:	4770      	bx	lr

080094f4 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009502:	4618      	mov	r0, r3
 8009504:	370c      	adds	r7, #12
 8009506:	46bd      	mov	sp, r7
 8009508:	bc80      	pop	{r7}
 800950a:	4770      	bx	lr

0800950c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	370c      	adds	r7, #12
 8009526:	46bd      	mov	sp, r7
 8009528:	bc80      	pop	{r7}
 800952a:	4770      	bx	lr

0800952c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2203      	movs	r2, #3
 8009538:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800953a:	2002      	movs	r0, #2
 800953c:	f7fd fda0 	bl	8007080 <HAL_Delay>
  
  return HAL_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800954a:	b480      	push	{r7}
 800954c:	b083      	sub	sp, #12
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 0303 	and.w	r3, r3, #3
}
 800955a:	4618      	mov	r0, r3
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	bc80      	pop	{r7}
 8009562:	4770      	bx	lr

08009564 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800956e:	2300      	movs	r3, #0
 8009570:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009582:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009588:	431a      	orrs	r2, r3
                       Command->CPSM);
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800958e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	4313      	orrs	r3, r2
 8009594:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800959e:	f023 030f 	bic.w	r3, r3, #15
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	431a      	orrs	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3714      	adds	r7, #20
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bc80      	pop	{r7}
 80095b4:	4770      	bx	lr

080095b6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80095b6:	b480      	push	{r7}
 80095b8:	b083      	sub	sp, #12
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	691b      	ldr	r3, [r3, #16]
 80095c2:	b2db      	uxtb	r3, r3
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bc80      	pop	{r7}
 80095cc:	4770      	bx	lr

080095ce <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80095ce:	b480      	push	{r7}
 80095d0:	b085      	sub	sp, #20
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
 80095d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	3314      	adds	r3, #20
 80095dc:	461a      	mov	r2, r3
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	4413      	add	r3, r2
 80095e2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
}  
 80095e8:	4618      	mov	r0, r3
 80095ea:	3714      	adds	r7, #20
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bc80      	pop	{r7}
 80095f0:	4770      	bx	lr

080095f2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80095f2:	b480      	push	{r7}
 80095f4:	b085      	sub	sp, #20
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
 80095fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80095fc:	2300      	movs	r3, #0
 80095fe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009618:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800961e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009624:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	4313      	orrs	r3, r2
 800962a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009630:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	431a      	orrs	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800963c:	2300      	movs	r3, #0

}
 800963e:	4618      	mov	r0, r3
 8009640:	3714      	adds	r7, #20
 8009642:	46bd      	mov	sp, r7
 8009644:	bc80      	pop	{r7}
 8009646:	4770      	bx	lr

08009648 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b088      	sub	sp, #32
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009656:	2310      	movs	r3, #16
 8009658:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800965a:	2340      	movs	r3, #64	; 0x40
 800965c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800965e:	2300      	movs	r3, #0
 8009660:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009666:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009668:	f107 0308 	add.w	r3, r7, #8
 800966c:	4619      	mov	r1, r3
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7ff ff78 	bl	8009564 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009674:	f241 3288 	movw	r2, #5000	; 0x1388
 8009678:	2110      	movs	r1, #16
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 fa42 	bl	8009b04 <SDMMC_GetCmdResp1>
 8009680:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009682:	69fb      	ldr	r3, [r7, #28]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3720      	adds	r7, #32
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b088      	sub	sp, #32
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800969a:	2311      	movs	r3, #17
 800969c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800969e:	2340      	movs	r3, #64	; 0x40
 80096a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80096a2:	2300      	movs	r3, #0
 80096a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80096a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80096ac:	f107 0308 	add.w	r3, r7, #8
 80096b0:	4619      	mov	r1, r3
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7ff ff56 	bl	8009564 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80096b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80096bc:	2111      	movs	r1, #17
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 fa20 	bl	8009b04 <SDMMC_GetCmdResp1>
 80096c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096c6:	69fb      	ldr	r3, [r7, #28]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3720      	adds	r7, #32
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b088      	sub	sp, #32
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80096de:	2312      	movs	r3, #18
 80096e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80096e2:	2340      	movs	r3, #64	; 0x40
 80096e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80096e6:	2300      	movs	r3, #0
 80096e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80096ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80096f0:	f107 0308 	add.w	r3, r7, #8
 80096f4:	4619      	mov	r1, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f7ff ff34 	bl	8009564 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80096fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009700:	2112      	movs	r1, #18
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f9fe 	bl	8009b04 <SDMMC_GetCmdResp1>
 8009708:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800970a:	69fb      	ldr	r3, [r7, #28]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3720      	adds	r7, #32
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b088      	sub	sp, #32
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009722:	2318      	movs	r3, #24
 8009724:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009726:	2340      	movs	r3, #64	; 0x40
 8009728:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800972a:	2300      	movs	r3, #0
 800972c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800972e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009732:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009734:	f107 0308 	add.w	r3, r7, #8
 8009738:	4619      	mov	r1, r3
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f7ff ff12 	bl	8009564 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009740:	f241 3288 	movw	r2, #5000	; 0x1388
 8009744:	2118      	movs	r1, #24
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f9dc 	bl	8009b04 <SDMMC_GetCmdResp1>
 800974c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800974e:	69fb      	ldr	r3, [r7, #28]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3720      	adds	r7, #32
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b088      	sub	sp, #32
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009766:	2319      	movs	r3, #25
 8009768:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800976a:	2340      	movs	r3, #64	; 0x40
 800976c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800976e:	2300      	movs	r3, #0
 8009770:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009776:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009778:	f107 0308 	add.w	r3, r7, #8
 800977c:	4619      	mov	r1, r3
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f7ff fef0 	bl	8009564 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009784:	f241 3288 	movw	r2, #5000	; 0x1388
 8009788:	2119      	movs	r1, #25
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 f9ba 	bl	8009b04 <SDMMC_GetCmdResp1>
 8009790:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009792:	69fb      	ldr	r3, [r7, #28]
}
 8009794:	4618      	mov	r0, r3
 8009796:	3720      	adds	r7, #32
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b088      	sub	sp, #32
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80097a4:	2300      	movs	r3, #0
 80097a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80097a8:	230c      	movs	r3, #12
 80097aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097ac:	2340      	movs	r3, #64	; 0x40
 80097ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097b0:	2300      	movs	r3, #0
 80097b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097ba:	f107 0308 	add.w	r3, r7, #8
 80097be:	4619      	mov	r1, r3
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f7ff fecf 	bl	8009564 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80097c6:	4a05      	ldr	r2, [pc, #20]	; (80097dc <SDMMC_CmdStopTransfer+0x40>)
 80097c8:	210c      	movs	r1, #12
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f99a 	bl	8009b04 <SDMMC_GetCmdResp1>
 80097d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097d2:	69fb      	ldr	r3, [r7, #28]
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3720      	adds	r7, #32
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	05f5e100 	.word	0x05f5e100

080097e0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b08a      	sub	sp, #40	; 0x28
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80097f0:	2307      	movs	r3, #7
 80097f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097f4:	2340      	movs	r3, #64	; 0x40
 80097f6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097f8:	2300      	movs	r3, #0
 80097fa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009800:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009802:	f107 0310 	add.w	r3, r7, #16
 8009806:	4619      	mov	r1, r3
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f7ff feab 	bl	8009564 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800980e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009812:	2107      	movs	r1, #7
 8009814:	68f8      	ldr	r0, [r7, #12]
 8009816:	f000 f975 	bl	8009b04 <SDMMC_GetCmdResp1>
 800981a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800981c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800981e:	4618      	mov	r0, r3
 8009820:	3728      	adds	r7, #40	; 0x28
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b088      	sub	sp, #32
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800982e:	2300      	movs	r3, #0
 8009830:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009832:	2300      	movs	r3, #0
 8009834:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009836:	2300      	movs	r3, #0
 8009838:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800983a:	2300      	movs	r3, #0
 800983c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800983e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009842:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009844:	f107 0308 	add.w	r3, r7, #8
 8009848:	4619      	mov	r1, r3
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f7ff fe8a 	bl	8009564 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f92d 	bl	8009ab0 <SDMMC_GetCmdError>
 8009856:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009858:	69fb      	ldr	r3, [r7, #28]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3720      	adds	r7, #32
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b088      	sub	sp, #32
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800986a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800986e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009870:	2308      	movs	r3, #8
 8009872:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009874:	2340      	movs	r3, #64	; 0x40
 8009876:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009878:	2300      	movs	r3, #0
 800987a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800987c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009880:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009882:	f107 0308 	add.w	r3, r7, #8
 8009886:	4619      	mov	r1, r3
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f7ff fe6b 	bl	8009564 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fb20 	bl	8009ed4 <SDMMC_GetCmdResp7>
 8009894:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009896:	69fb      	ldr	r3, [r7, #28]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3720      	adds	r7, #32
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b088      	sub	sp, #32
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80098ae:	2337      	movs	r3, #55	; 0x37
 80098b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098b2:	2340      	movs	r3, #64	; 0x40
 80098b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098b6:	2300      	movs	r3, #0
 80098b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098c0:	f107 0308 	add.w	r3, r7, #8
 80098c4:	4619      	mov	r1, r3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7ff fe4c 	bl	8009564 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80098cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80098d0:	2137      	movs	r1, #55	; 0x37
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 f916 	bl	8009b04 <SDMMC_GetCmdResp1>
 80098d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098da:	69fb      	ldr	r3, [r7, #28]
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3720      	adds	r7, #32
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b088      	sub	sp, #32
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80098fa:	2329      	movs	r3, #41	; 0x29
 80098fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098fe:	2340      	movs	r3, #64	; 0x40
 8009900:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009902:	2300      	movs	r3, #0
 8009904:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800990a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800990c:	f107 0308 	add.w	r3, r7, #8
 8009910:	4619      	mov	r1, r3
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f7ff fe26 	bl	8009564 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 fa29 	bl	8009d70 <SDMMC_GetCmdResp3>
 800991e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009920:	69fb      	ldr	r3, [r7, #28]
}
 8009922:	4618      	mov	r0, r3
 8009924:	3720      	adds	r7, #32
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b088      	sub	sp, #32
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
 8009932:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009938:	2306      	movs	r3, #6
 800993a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800993c:	2340      	movs	r3, #64	; 0x40
 800993e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009940:	2300      	movs	r3, #0
 8009942:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009948:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800994a:	f107 0308 	add.w	r3, r7, #8
 800994e:	4619      	mov	r1, r3
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f7ff fe07 	bl	8009564 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009956:	f241 3288 	movw	r2, #5000	; 0x1388
 800995a:	2106      	movs	r1, #6
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 f8d1 	bl	8009b04 <SDMMC_GetCmdResp1>
 8009962:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009964:	69fb      	ldr	r3, [r7, #28]
}
 8009966:	4618      	mov	r0, r3
 8009968:	3720      	adds	r7, #32
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b088      	sub	sp, #32
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009976:	2300      	movs	r3, #0
 8009978:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800997a:	2333      	movs	r3, #51	; 0x33
 800997c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800997e:	2340      	movs	r3, #64	; 0x40
 8009980:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009982:	2300      	movs	r3, #0
 8009984:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800998a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800998c:	f107 0308 	add.w	r3, r7, #8
 8009990:	4619      	mov	r1, r3
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f7ff fde6 	bl	8009564 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009998:	f241 3288 	movw	r2, #5000	; 0x1388
 800999c:	2133      	movs	r1, #51	; 0x33
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 f8b0 	bl	8009b04 <SDMMC_GetCmdResp1>
 80099a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099a6:	69fb      	ldr	r3, [r7, #28]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3720      	adds	r7, #32
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b088      	sub	sp, #32
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80099b8:	2300      	movs	r3, #0
 80099ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80099bc:	2302      	movs	r3, #2
 80099be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80099c0:	23c0      	movs	r3, #192	; 0xc0
 80099c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099c4:	2300      	movs	r3, #0
 80099c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099ce:	f107 0308 	add.w	r3, r7, #8
 80099d2:	4619      	mov	r1, r3
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f7ff fdc5 	bl	8009564 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 f980 	bl	8009ce0 <SDMMC_GetCmdResp2>
 80099e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099e2:	69fb      	ldr	r3, [r7, #28]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3720      	adds	r7, #32
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b088      	sub	sp, #32
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80099fa:	2309      	movs	r3, #9
 80099fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80099fe:	23c0      	movs	r3, #192	; 0xc0
 8009a00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a02:	2300      	movs	r3, #0
 8009a04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a0c:	f107 0308 	add.w	r3, r7, #8
 8009a10:	4619      	mov	r1, r3
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f7ff fda6 	bl	8009564 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 f961 	bl	8009ce0 <SDMMC_GetCmdResp2>
 8009a1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a20:	69fb      	ldr	r3, [r7, #28]
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3720      	adds	r7, #32
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b088      	sub	sp, #32
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
 8009a32:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009a34:	2300      	movs	r3, #0
 8009a36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009a38:	2303      	movs	r3, #3
 8009a3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a3c:	2340      	movs	r3, #64	; 0x40
 8009a3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a40:	2300      	movs	r3, #0
 8009a42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a4a:	f107 0308 	add.w	r3, r7, #8
 8009a4e:	4619      	mov	r1, r3
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f7ff fd87 	bl	8009564 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009a56:	683a      	ldr	r2, [r7, #0]
 8009a58:	2103      	movs	r1, #3
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f9c4 	bl	8009de8 <SDMMC_GetCmdResp6>
 8009a60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a62:	69fb      	ldr	r3, [r7, #28]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3720      	adds	r7, #32
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b088      	sub	sp, #32
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009a7a:	230d      	movs	r3, #13
 8009a7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a7e:	2340      	movs	r3, #64	; 0x40
 8009a80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a82:	2300      	movs	r3, #0
 8009a84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a8c:	f107 0308 	add.w	r3, r7, #8
 8009a90:	4619      	mov	r1, r3
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f7ff fd66 	bl	8009564 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a9c:	210d      	movs	r1, #13
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 f830 	bl	8009b04 <SDMMC_GetCmdResp1>
 8009aa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009aa6:	69fb      	ldr	r3, [r7, #28]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3720      	adds	r7, #32
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b085      	sub	sp, #20
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ab8:	4b10      	ldr	r3, [pc, #64]	; (8009afc <SDMMC_GetCmdError+0x4c>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a10      	ldr	r2, [pc, #64]	; (8009b00 <SDMMC_GetCmdError+0x50>)
 8009abe:	fba2 2303 	umull	r2, r3, r2, r3
 8009ac2:	0a5b      	lsrs	r3, r3, #9
 8009ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ac8:	fb02 f303 	mul.w	r3, r2, r3
 8009acc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	1e5a      	subs	r2, r3, #1
 8009ad2:	60fa      	str	r2, [r7, #12]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d102      	bne.n	8009ade <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ad8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009adc:	e009      	b.n	8009af2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d0f1      	beq.n	8009ace <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	22c5      	movs	r2, #197	; 0xc5
 8009aee:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009af0:	2300      	movs	r3, #0
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3714      	adds	r7, #20
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bc80      	pop	{r7}
 8009afa:	4770      	bx	lr
 8009afc:	20000138 	.word	0x20000138
 8009b00:	10624dd3 	.word	0x10624dd3

08009b04 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b088      	sub	sp, #32
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	607a      	str	r2, [r7, #4]
 8009b10:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009b12:	4b70      	ldr	r3, [pc, #448]	; (8009cd4 <SDMMC_GetCmdResp1+0x1d0>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a70      	ldr	r2, [pc, #448]	; (8009cd8 <SDMMC_GetCmdResp1+0x1d4>)
 8009b18:	fba2 2303 	umull	r2, r3, r2, r3
 8009b1c:	0a5a      	lsrs	r2, r3, #9
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	fb02 f303 	mul.w	r3, r2, r3
 8009b24:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	1e5a      	subs	r2, r3, #1
 8009b2a:	61fa      	str	r2, [r7, #28]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d102      	bne.n	8009b36 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b34:	e0c9      	b.n	8009cca <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b3a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d0ef      	beq.n	8009b26 <SDMMC_GetCmdResp1+0x22>
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1ea      	bne.n	8009b26 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b54:	f003 0304 	and.w	r3, r3, #4
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d004      	beq.n	8009b66 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2204      	movs	r2, #4
 8009b60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b62:	2304      	movs	r3, #4
 8009b64:	e0b1      	b.n	8009cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b6a:	f003 0301 	and.w	r3, r3, #1
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d004      	beq.n	8009b7c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2201      	movs	r2, #1
 8009b76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	e0a6      	b.n	8009cca <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	22c5      	movs	r2, #197	; 0xc5
 8009b80:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009b82:	68f8      	ldr	r0, [r7, #12]
 8009b84:	f7ff fd17 	bl	80095b6 <SDIO_GetCommandResponse>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	7afb      	ldrb	r3, [r7, #11]
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d001      	beq.n	8009b96 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e099      	b.n	8009cca <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009b96:	2100      	movs	r1, #0
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	f7ff fd18 	bl	80095ce <SDIO_GetResponse>
 8009b9e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009ba0:	697a      	ldr	r2, [r7, #20]
 8009ba2:	4b4e      	ldr	r3, [pc, #312]	; (8009cdc <SDMMC_GetCmdResp1+0x1d8>)
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d101      	bne.n	8009bae <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009baa:	2300      	movs	r3, #0
 8009bac:	e08d      	b.n	8009cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	da02      	bge.n	8009bba <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009bb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009bb8:	e087      	b.n	8009cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d001      	beq.n	8009bc8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009bc4:	2340      	movs	r3, #64	; 0x40
 8009bc6:	e080      	b.n	8009cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d001      	beq.n	8009bd6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009bd2:	2380      	movs	r3, #128	; 0x80
 8009bd4:	e079      	b.n	8009cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d002      	beq.n	8009be6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009be0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009be4:	e071      	b.n	8009cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d002      	beq.n	8009bf6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bf4:	e069      	b.n	8009cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d002      	beq.n	8009c06 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c04:	e061      	b.n	8009cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d002      	beq.n	8009c16 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009c10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c14:	e059      	b.n	8009cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d002      	beq.n	8009c26 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c24:	e051      	b.n	8009cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d002      	beq.n	8009c36 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009c30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c34:	e049      	b.n	8009cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d002      	beq.n	8009c46 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009c40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009c44:	e041      	b.n	8009cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d002      	beq.n	8009c56 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009c50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c54:	e039      	b.n	8009cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d002      	beq.n	8009c66 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009c60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009c64:	e031      	b.n	8009cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d002      	beq.n	8009c76 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009c70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009c74:	e029      	b.n	8009cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d002      	beq.n	8009c86 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009c80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009c84:	e021      	b.n	8009cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d002      	beq.n	8009c96 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009c90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009c94:	e019      	b.n	8009cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d002      	beq.n	8009ca6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009ca0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009ca4:	e011      	b.n	8009cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d002      	beq.n	8009cb6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009cb0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009cb4:	e009      	b.n	8009cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	f003 0308 	and.w	r3, r3, #8
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d002      	beq.n	8009cc6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009cc0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009cc4:	e001      	b.n	8009cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009cc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3720      	adds	r7, #32
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	20000138 	.word	0x20000138
 8009cd8:	10624dd3 	.word	0x10624dd3
 8009cdc:	fdffe008 	.word	0xfdffe008

08009ce0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ce8:	4b1f      	ldr	r3, [pc, #124]	; (8009d68 <SDMMC_GetCmdResp2+0x88>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a1f      	ldr	r2, [pc, #124]	; (8009d6c <SDMMC_GetCmdResp2+0x8c>)
 8009cee:	fba2 2303 	umull	r2, r3, r2, r3
 8009cf2:	0a5b      	lsrs	r3, r3, #9
 8009cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cf8:	fb02 f303 	mul.w	r3, r2, r3
 8009cfc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	1e5a      	subs	r2, r3, #1
 8009d02:	60fa      	str	r2, [r7, #12]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d102      	bne.n	8009d0e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d0c:	e026      	b.n	8009d5c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d12:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d0ef      	beq.n	8009cfe <SDMMC_GetCmdResp2+0x1e>
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1ea      	bne.n	8009cfe <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d2c:	f003 0304 	and.w	r3, r3, #4
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d004      	beq.n	8009d3e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2204      	movs	r2, #4
 8009d38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d3a:	2304      	movs	r3, #4
 8009d3c:	e00e      	b.n	8009d5c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d42:	f003 0301 	and.w	r3, r3, #1
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d004      	beq.n	8009d54 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d50:	2301      	movs	r3, #1
 8009d52:	e003      	b.n	8009d5c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	22c5      	movs	r2, #197	; 0xc5
 8009d58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3714      	adds	r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bc80      	pop	{r7}
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	20000138 	.word	0x20000138
 8009d6c:	10624dd3 	.word	0x10624dd3

08009d70 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b085      	sub	sp, #20
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009d78:	4b19      	ldr	r3, [pc, #100]	; (8009de0 <SDMMC_GetCmdResp3+0x70>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a19      	ldr	r2, [pc, #100]	; (8009de4 <SDMMC_GetCmdResp3+0x74>)
 8009d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d82:	0a5b      	lsrs	r3, r3, #9
 8009d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d88:	fb02 f303 	mul.w	r3, r2, r3
 8009d8c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	1e5a      	subs	r2, r3, #1
 8009d92:	60fa      	str	r2, [r7, #12]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d102      	bne.n	8009d9e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d9c:	e01b      	b.n	8009dd6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009da2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d0ef      	beq.n	8009d8e <SDMMC_GetCmdResp3+0x1e>
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d1ea      	bne.n	8009d8e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dbc:	f003 0304 	and.w	r3, r3, #4
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d004      	beq.n	8009dce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2204      	movs	r2, #4
 8009dc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009dca:	2304      	movs	r3, #4
 8009dcc:	e003      	b.n	8009dd6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	22c5      	movs	r2, #197	; 0xc5
 8009dd2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3714      	adds	r7, #20
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bc80      	pop	{r7}
 8009dde:	4770      	bx	lr
 8009de0:	20000138 	.word	0x20000138
 8009de4:	10624dd3 	.word	0x10624dd3

08009de8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b088      	sub	sp, #32
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	460b      	mov	r3, r1
 8009df2:	607a      	str	r2, [r7, #4]
 8009df4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009df6:	4b35      	ldr	r3, [pc, #212]	; (8009ecc <SDMMC_GetCmdResp6+0xe4>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a35      	ldr	r2, [pc, #212]	; (8009ed0 <SDMMC_GetCmdResp6+0xe8>)
 8009dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8009e00:	0a5b      	lsrs	r3, r3, #9
 8009e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e06:	fb02 f303 	mul.w	r3, r2, r3
 8009e0a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	1e5a      	subs	r2, r3, #1
 8009e10:	61fa      	str	r2, [r7, #28]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d102      	bne.n	8009e1c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e1a:	e052      	b.n	8009ec2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e20:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d0ef      	beq.n	8009e0c <SDMMC_GetCmdResp6+0x24>
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d1ea      	bne.n	8009e0c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e3a:	f003 0304 	and.w	r3, r3, #4
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d004      	beq.n	8009e4c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2204      	movs	r2, #4
 8009e46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e48:	2304      	movs	r3, #4
 8009e4a:	e03a      	b.n	8009ec2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e50:	f003 0301 	and.w	r3, r3, #1
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d004      	beq.n	8009e62 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e02f      	b.n	8009ec2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f7ff fba7 	bl	80095b6 <SDIO_GetCommandResponse>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	7afb      	ldrb	r3, [r7, #11]
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d001      	beq.n	8009e76 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e72:	2301      	movs	r3, #1
 8009e74:	e025      	b.n	8009ec2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	22c5      	movs	r2, #197	; 0xc5
 8009e7a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	68f8      	ldr	r0, [r7, #12]
 8009e80:	f7ff fba5 	bl	80095ce <SDIO_GetResponse>
 8009e84:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d106      	bne.n	8009e9e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	0c1b      	lsrs	r3, r3, #16
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	e011      	b.n	8009ec2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d002      	beq.n	8009eae <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009ea8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009eac:	e009      	b.n	8009ec2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d002      	beq.n	8009ebe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ebc:	e001      	b.n	8009ec2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009ebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3720      	adds	r7, #32
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	20000138 	.word	0x20000138
 8009ed0:	10624dd3 	.word	0x10624dd3

08009ed4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009edc:	4b22      	ldr	r3, [pc, #136]	; (8009f68 <SDMMC_GetCmdResp7+0x94>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a22      	ldr	r2, [pc, #136]	; (8009f6c <SDMMC_GetCmdResp7+0x98>)
 8009ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee6:	0a5b      	lsrs	r3, r3, #9
 8009ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009eec:	fb02 f303 	mul.w	r3, r2, r3
 8009ef0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	1e5a      	subs	r2, r3, #1
 8009ef6:	60fa      	str	r2, [r7, #12]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d102      	bne.n	8009f02 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009efc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f00:	e02c      	b.n	8009f5c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f06:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d0ef      	beq.n	8009ef2 <SDMMC_GetCmdResp7+0x1e>
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d1ea      	bne.n	8009ef2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f20:	f003 0304 	and.w	r3, r3, #4
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d004      	beq.n	8009f32 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2204      	movs	r2, #4
 8009f2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f2e:	2304      	movs	r3, #4
 8009f30:	e014      	b.n	8009f5c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f36:	f003 0301 	and.w	r3, r3, #1
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d004      	beq.n	8009f48 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f44:	2301      	movs	r3, #1
 8009f46:	e009      	b.n	8009f5c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d002      	beq.n	8009f5a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2240      	movs	r2, #64	; 0x40
 8009f58:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009f5a:	2300      	movs	r3, #0
  
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3714      	adds	r7, #20
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bc80      	pop	{r7}
 8009f64:	4770      	bx	lr
 8009f66:	bf00      	nop
 8009f68:	20000138 	.word	0x20000138
 8009f6c:	10624dd3 	.word	0x10624dd3

08009f70 <LL_SPI_IsEnabled>:
{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f80:	2b40      	cmp	r3, #64	; 0x40
 8009f82:	d101      	bne.n	8009f88 <LL_SPI_IsEnabled+0x18>
 8009f84:	2301      	movs	r3, #1
 8009f86:	e000      	b.n	8009f8a <LL_SPI_IsEnabled+0x1a>
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	370c      	adds	r7, #12
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bc80      	pop	{r7}
 8009f92:	4770      	bx	lr

08009f94 <LL_SPI_SetCRCPolynomial>:
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	611a      	str	r2, [r3, #16]
}
 8009fa8:	bf00      	nop
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bc80      	pop	{r7}
 8009fb0:	4770      	bx	lr

08009fb2 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b084      	sub	sp, #16
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
 8009fba:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f7ff ffd5 	bl	8009f70 <LL_SPI_IsEnabled>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d139      	bne.n	800a040 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009fd4:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8009fd8:	683a      	ldr	r2, [r7, #0]
 8009fda:	6811      	ldr	r1, [r2, #0]
 8009fdc:	683a      	ldr	r2, [r7, #0]
 8009fde:	6852      	ldr	r2, [r2, #4]
 8009fe0:	4311      	orrs	r1, r2
 8009fe2:	683a      	ldr	r2, [r7, #0]
 8009fe4:	6892      	ldr	r2, [r2, #8]
 8009fe6:	4311      	orrs	r1, r2
 8009fe8:	683a      	ldr	r2, [r7, #0]
 8009fea:	68d2      	ldr	r2, [r2, #12]
 8009fec:	4311      	orrs	r1, r2
 8009fee:	683a      	ldr	r2, [r7, #0]
 8009ff0:	6912      	ldr	r2, [r2, #16]
 8009ff2:	4311      	orrs	r1, r2
 8009ff4:	683a      	ldr	r2, [r7, #0]
 8009ff6:	6952      	ldr	r2, [r2, #20]
 8009ff8:	4311      	orrs	r1, r2
 8009ffa:	683a      	ldr	r2, [r7, #0]
 8009ffc:	6992      	ldr	r2, [r2, #24]
 8009ffe:	4311      	orrs	r1, r2
 800a000:	683a      	ldr	r2, [r7, #0]
 800a002:	69d2      	ldr	r2, [r2, #28]
 800a004:	4311      	orrs	r1, r2
 800a006:	683a      	ldr	r2, [r7, #0]
 800a008:	6a12      	ldr	r2, [r2, #32]
 800a00a:	430a      	orrs	r2, r1
 800a00c:	431a      	orrs	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	f023 0204 	bic.w	r2, r3, #4
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	695b      	ldr	r3, [r3, #20]
 800a01e:	0c1b      	lsrs	r3, r3, #16
 800a020:	431a      	orrs	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	6a1b      	ldr	r3, [r3, #32]
 800a02a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a02e:	d105      	bne.n	800a03c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a034:	4619      	mov	r1, r3
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f7ff ffac 	bl	8009f94 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800a03c:	2300      	movs	r3, #0
 800a03e:	73fb      	strb	r3, [r7, #15]
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	69db      	ldr	r3, [r3, #28]
 800a044:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
 800a04c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
	...

0800a058 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800a060:	4b0e      	ldr	r3, [pc, #56]	; (800a09c <LL_mDelay+0x44>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800a066:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a06e:	d00c      	beq.n	800a08a <LL_mDelay+0x32>
  {
    Delay++;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	3301      	adds	r3, #1
 800a074:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800a076:	e008      	b.n	800a08a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800a078:	4b08      	ldr	r3, [pc, #32]	; (800a09c <LL_mDelay+0x44>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a080:	2b00      	cmp	r3, #0
 800a082:	d002      	beq.n	800a08a <LL_mDelay+0x32>
    {
      Delay--;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	3b01      	subs	r3, #1
 800a088:	607b      	str	r3, [r7, #4]
  while (Delay)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1f3      	bne.n	800a078 <LL_mDelay+0x20>
    }
  }
}
 800a090:	bf00      	nop
 800a092:	bf00      	nop
 800a094:	3714      	adds	r7, #20
 800a096:	46bd      	mov	sp, r7
 800a098:	bc80      	pop	{r7}
 800a09a:	4770      	bx	lr
 800a09c:	e000e010 	.word	0xe000e010

0800a0a0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800a0a8:	4a03      	ldr	r2, [pc, #12]	; (800a0b8 <LL_SetSystemCoreClock+0x18>)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6013      	str	r3, [r2, #0]
}
 800a0ae:	bf00      	nop
 800a0b0:	370c      	adds	r7, #12
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bc80      	pop	{r7}
 800a0b6:	4770      	bx	lr
 800a0b8:	20000138 	.word	0x20000138

0800a0bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a0c0:	4904      	ldr	r1, [pc, #16]	; (800a0d4 <MX_FATFS_Init+0x18>)
 800a0c2:	4805      	ldr	r0, [pc, #20]	; (800a0d8 <MX_FATFS_Init+0x1c>)
 800a0c4:	f003 fea0 	bl	800de08 <FATFS_LinkDriver>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	4b03      	ldr	r3, [pc, #12]	; (800a0dc <MX_FATFS_Init+0x20>)
 800a0ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a0d0:	bf00      	nop
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	20002044 	.word	0x20002044
 800a0d8:	08015ce0 	.word	0x08015ce0
 800a0dc:	20002040 	.word	0x20002040

0800a0e0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a0e4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bc80      	pop	{r7}
 800a0ec:	4770      	bx	lr
	...

0800a0f0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a0fa:	f000 f879 	bl	800a1f0 <BSP_SD_IsDetected>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b01      	cmp	r3, #1
 800a102:	d001      	beq.n	800a108 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	e012      	b.n	800a12e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a108:	480b      	ldr	r0, [pc, #44]	; (800a138 <BSP_SD_Init+0x48>)
 800a10a:	f7fd fab7 	bl	800767c <HAL_SD_Init>
 800a10e:	4603      	mov	r3, r0
 800a110:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a112:	79fb      	ldrb	r3, [r7, #7]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d109      	bne.n	800a12c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a118:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a11c:	4806      	ldr	r0, [pc, #24]	; (800a138 <BSP_SD_Init+0x48>)
 800a11e:	f7fe f88f 	bl	8008240 <HAL_SD_ConfigWideBusOperation>
 800a122:	4603      	mov	r3, r0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d001      	beq.n	800a12c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a12c:	79fb      	ldrb	r3, [r7, #7]
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3708      	adds	r7, #8
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	20001ec0 	.word	0x20001ec0

0800a13c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b088      	sub	sp, #32
 800a140:	af02      	add	r7, sp, #8
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	607a      	str	r2, [r7, #4]
 800a148:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a14a:	2300      	movs	r3, #0
 800a14c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	68ba      	ldr	r2, [r7, #8]
 800a156:	68f9      	ldr	r1, [r7, #12]
 800a158:	4806      	ldr	r0, [pc, #24]	; (800a174 <BSP_SD_ReadBlocks+0x38>)
 800a15a:	f7fd fb3d 	bl	80077d8 <HAL_SD_ReadBlocks>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d001      	beq.n	800a168 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a164:	2301      	movs	r3, #1
 800a166:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a168:	7dfb      	ldrb	r3, [r7, #23]
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3718      	adds	r7, #24
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	20001ec0 	.word	0x20001ec0

0800a178 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b088      	sub	sp, #32
 800a17c:	af02      	add	r7, sp, #8
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	607a      	str	r2, [r7, #4]
 800a184:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a186:	2300      	movs	r3, #0
 800a188:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	9300      	str	r3, [sp, #0]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	68ba      	ldr	r2, [r7, #8]
 800a192:	68f9      	ldr	r1, [r7, #12]
 800a194:	4806      	ldr	r0, [pc, #24]	; (800a1b0 <BSP_SD_WriteBlocks+0x38>)
 800a196:	f7fd fcfd 	bl	8007b94 <HAL_SD_WriteBlocks>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d001      	beq.n	800a1a4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a1a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3718      	adds	r7, #24
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	20001ec0 	.word	0x20001ec0

0800a1b4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a1b8:	4805      	ldr	r0, [pc, #20]	; (800a1d0 <BSP_SD_GetCardState+0x1c>)
 800a1ba:	f7fe f8db 	bl	8008374 <HAL_SD_GetCardState>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b04      	cmp	r3, #4
 800a1c2:	bf14      	ite	ne
 800a1c4:	2301      	movne	r3, #1
 800a1c6:	2300      	moveq	r3, #0
 800a1c8:	b2db      	uxtb	r3, r3
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	20001ec0 	.word	0x20001ec0

0800a1d4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a1dc:	6879      	ldr	r1, [r7, #4]
 800a1de:	4803      	ldr	r0, [pc, #12]	; (800a1ec <BSP_SD_GetCardInfo+0x18>)
 800a1e0:	f7fe f802 	bl	80081e8 <HAL_SD_GetCardInfo>
}
 800a1e4:	bf00      	nop
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	20001ec0 	.word	0x20001ec0

0800a1f0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a1fa:	f000 f80b 	bl	800a214 <BSP_PlatformIsDetected>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d101      	bne.n	800a208 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a204:	2300      	movs	r3, #0
 800a206:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a208:	79fb      	ldrb	r3, [r7, #7]
 800a20a:	b2db      	uxtb	r3, r3
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3708      	adds	r7, #8
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a21a:	2301      	movs	r3, #1
 800a21c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a21e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a222:	4806      	ldr	r0, [pc, #24]	; (800a23c <BSP_PlatformIsDetected+0x28>)
 800a224:	f7fd f9c4 	bl	80075b0 <HAL_GPIO_ReadPin>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d001      	beq.n	800a232 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a22e:	2300      	movs	r3, #0
 800a230:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a232:	79fb      	ldrb	r3, [r7, #7]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3708      	adds	r7, #8
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	40010800 	.word	0x40010800

0800a240 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
 800a246:	4603      	mov	r3, r0
 800a248:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a24a:	79fb      	ldrb	r3, [r7, #7]
 800a24c:	4a08      	ldr	r2, [pc, #32]	; (800a270 <disk_status+0x30>)
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	4413      	add	r3, r2
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	79fa      	ldrb	r2, [r7, #7]
 800a258:	4905      	ldr	r1, [pc, #20]	; (800a270 <disk_status+0x30>)
 800a25a:	440a      	add	r2, r1
 800a25c:	7a12      	ldrb	r2, [r2, #8]
 800a25e:	4610      	mov	r0, r2
 800a260:	4798      	blx	r3
 800a262:	4603      	mov	r3, r0
 800a264:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a266:	7bfb      	ldrb	r3, [r7, #15]
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	20000200 	.word	0x20000200

0800a274 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	4603      	mov	r3, r0
 800a27c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a27e:	2300      	movs	r3, #0
 800a280:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800a282:	79fb      	ldrb	r3, [r7, #7]
 800a284:	4a0d      	ldr	r2, [pc, #52]	; (800a2bc <disk_initialize+0x48>)
 800a286:	5cd3      	ldrb	r3, [r2, r3]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d111      	bne.n	800a2b0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800a28c:	79fb      	ldrb	r3, [r7, #7]
 800a28e:	4a0b      	ldr	r2, [pc, #44]	; (800a2bc <disk_initialize+0x48>)
 800a290:	2101      	movs	r1, #1
 800a292:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a294:	79fb      	ldrb	r3, [r7, #7]
 800a296:	4a09      	ldr	r2, [pc, #36]	; (800a2bc <disk_initialize+0x48>)
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	4413      	add	r3, r2
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	79fa      	ldrb	r2, [r7, #7]
 800a2a2:	4906      	ldr	r1, [pc, #24]	; (800a2bc <disk_initialize+0x48>)
 800a2a4:	440a      	add	r2, r1
 800a2a6:	7a12      	ldrb	r2, [r2, #8]
 800a2a8:	4610      	mov	r0, r2
 800a2aa:	4798      	blx	r3
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	20000200 	.word	0x20000200

0800a2c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a2c0:	b590      	push	{r4, r7, lr}
 800a2c2:	b087      	sub	sp, #28
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60b9      	str	r1, [r7, #8]
 800a2c8:	607a      	str	r2, [r7, #4]
 800a2ca:	603b      	str	r3, [r7, #0]
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a2d0:	7bfb      	ldrb	r3, [r7, #15]
 800a2d2:	4a0a      	ldr	r2, [pc, #40]	; (800a2fc <disk_read+0x3c>)
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	4413      	add	r3, r2
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	689c      	ldr	r4, [r3, #8]
 800a2dc:	7bfb      	ldrb	r3, [r7, #15]
 800a2de:	4a07      	ldr	r2, [pc, #28]	; (800a2fc <disk_read+0x3c>)
 800a2e0:	4413      	add	r3, r2
 800a2e2:	7a18      	ldrb	r0, [r3, #8]
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	68b9      	ldr	r1, [r7, #8]
 800a2ea:	47a0      	blx	r4
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	75fb      	strb	r3, [r7, #23]
  return res;
 800a2f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	371c      	adds	r7, #28
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd90      	pop	{r4, r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	20000200 	.word	0x20000200

0800a300 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a300:	b590      	push	{r4, r7, lr}
 800a302:	b087      	sub	sp, #28
 800a304:	af00      	add	r7, sp, #0
 800a306:	60b9      	str	r1, [r7, #8]
 800a308:	607a      	str	r2, [r7, #4]
 800a30a:	603b      	str	r3, [r7, #0]
 800a30c:	4603      	mov	r3, r0
 800a30e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a310:	7bfb      	ldrb	r3, [r7, #15]
 800a312:	4a0a      	ldr	r2, [pc, #40]	; (800a33c <disk_write+0x3c>)
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	4413      	add	r3, r2
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	68dc      	ldr	r4, [r3, #12]
 800a31c:	7bfb      	ldrb	r3, [r7, #15]
 800a31e:	4a07      	ldr	r2, [pc, #28]	; (800a33c <disk_write+0x3c>)
 800a320:	4413      	add	r3, r2
 800a322:	7a18      	ldrb	r0, [r3, #8]
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	68b9      	ldr	r1, [r7, #8]
 800a32a:	47a0      	blx	r4
 800a32c:	4603      	mov	r3, r0
 800a32e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a330:	7dfb      	ldrb	r3, [r7, #23]
}
 800a332:	4618      	mov	r0, r3
 800a334:	371c      	adds	r7, #28
 800a336:	46bd      	mov	sp, r7
 800a338:	bd90      	pop	{r4, r7, pc}
 800a33a:	bf00      	nop
 800a33c:	20000200 	.word	0x20000200

0800a340 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	4603      	mov	r3, r0
 800a348:	603a      	str	r2, [r7, #0]
 800a34a:	71fb      	strb	r3, [r7, #7]
 800a34c:	460b      	mov	r3, r1
 800a34e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a350:	79fb      	ldrb	r3, [r7, #7]
 800a352:	4a09      	ldr	r2, [pc, #36]	; (800a378 <disk_ioctl+0x38>)
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	4413      	add	r3, r2
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	79fa      	ldrb	r2, [r7, #7]
 800a35e:	4906      	ldr	r1, [pc, #24]	; (800a378 <disk_ioctl+0x38>)
 800a360:	440a      	add	r2, r1
 800a362:	7a10      	ldrb	r0, [r2, #8]
 800a364:	79b9      	ldrb	r1, [r7, #6]
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	4798      	blx	r3
 800a36a:	4603      	mov	r3, r0
 800a36c:	73fb      	strb	r3, [r7, #15]
  return res;
 800a36e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	20000200 	.word	0x20000200

0800a37c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a37c:	b480      	push	{r7}
 800a37e:	b087      	sub	sp, #28
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800a390:	e007      	b.n	800a3a2 <mem_cpy+0x26>
		*d++ = *s++;
 800a392:	693a      	ldr	r2, [r7, #16]
 800a394:	1c53      	adds	r3, r2, #1
 800a396:	613b      	str	r3, [r7, #16]
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	1c59      	adds	r1, r3, #1
 800a39c:	6179      	str	r1, [r7, #20]
 800a39e:	7812      	ldrb	r2, [r2, #0]
 800a3a0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	1e5a      	subs	r2, r3, #1
 800a3a6:	607a      	str	r2, [r7, #4]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1f2      	bne.n	800a392 <mem_cpy+0x16>
}
 800a3ac:	bf00      	nop
 800a3ae:	bf00      	nop
 800a3b0:	371c      	adds	r7, #28
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bc80      	pop	{r7}
 800a3b6:	4770      	bx	lr

0800a3b8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a3b8:	b480      	push	{r7}
 800a3ba:	b087      	sub	sp, #28
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800a3c8:	e005      	b.n	800a3d6 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	1c5a      	adds	r2, r3, #1
 800a3ce:	617a      	str	r2, [r7, #20]
 800a3d0:	68ba      	ldr	r2, [r7, #8]
 800a3d2:	b2d2      	uxtb	r2, r2
 800a3d4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	1e5a      	subs	r2, r3, #1
 800a3da:	607a      	str	r2, [r7, #4]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d1f4      	bne.n	800a3ca <mem_set+0x12>
}
 800a3e0:	bf00      	nop
 800a3e2:	bf00      	nop
 800a3e4:	371c      	adds	r7, #28
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bc80      	pop	{r7}
 800a3ea:	4770      	bx	lr

0800a3ec <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800a3ec:	b480      	push	{r7}
 800a3ee:	b089      	sub	sp, #36	; 0x24
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	61fb      	str	r3, [r7, #28]
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a400:	2300      	movs	r3, #0
 800a402:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800a404:	bf00      	nop
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	1e5a      	subs	r2, r3, #1
 800a40a:	607a      	str	r2, [r7, #4]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d00d      	beq.n	800a42c <mem_cmp+0x40>
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	1c5a      	adds	r2, r3, #1
 800a414:	61fa      	str	r2, [r7, #28]
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	4619      	mov	r1, r3
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	1c5a      	adds	r2, r3, #1
 800a41e:	61ba      	str	r2, [r7, #24]
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	1acb      	subs	r3, r1, r3
 800a424:	617b      	str	r3, [r7, #20]
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d0ec      	beq.n	800a406 <mem_cmp+0x1a>
	return r;
 800a42c:	697b      	ldr	r3, [r7, #20]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3724      	adds	r7, #36	; 0x24
 800a432:	46bd      	mov	sp, r7
 800a434:	bc80      	pop	{r7}
 800a436:	4770      	bx	lr

0800a438 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a442:	e002      	b.n	800a44a <chk_chr+0x12>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	3301      	adds	r3, #1
 800a448:	607b      	str	r3, [r7, #4]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d005      	beq.n	800a45e <chk_chr+0x26>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	461a      	mov	r2, r3
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d1f2      	bne.n	800a444 <chk_chr+0xc>
	return *str;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	781b      	ldrb	r3, [r3, #0]
}
 800a462:	4618      	mov	r0, r3
 800a464:	370c      	adds	r7, #12
 800a466:	46bd      	mov	sp, r7
 800a468:	bc80      	pop	{r7}
 800a46a:	4770      	bx	lr

0800a46c <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a47a:	4618      	mov	r0, r3
 800a47c:	f003 fe4c 	bl	800e118 <ff_req_grant>
 800a480:	4603      	mov	r3, r0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3708      	adds	r7, #8
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}

0800a48a <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b082      	sub	sp, #8
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
 800a492:	460b      	mov	r3, r1
 800a494:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d011      	beq.n	800a4c0 <unlock_fs+0x36>
 800a49c:	78fb      	ldrb	r3, [r7, #3]
 800a49e:	2b0c      	cmp	r3, #12
 800a4a0:	d00e      	beq.n	800a4c0 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 800a4a2:	78fb      	ldrb	r3, [r7, #3]
 800a4a4:	2b0b      	cmp	r3, #11
 800a4a6:	d00b      	beq.n	800a4c0 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 800a4a8:	78fb      	ldrb	r3, [r7, #3]
 800a4aa:	2b09      	cmp	r3, #9
 800a4ac:	d008      	beq.n	800a4c0 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 800a4ae:	78fb      	ldrb	r3, [r7, #3]
 800a4b0:	2b0f      	cmp	r3, #15
 800a4b2:	d005      	beq.n	800a4c0 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f003 fe41 	bl	800e142 <ff_rel_grant>
	}
}
 800a4c0:	bf00      	nop
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b085      	sub	sp, #20
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	60bb      	str	r3, [r7, #8]
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	60fb      	str	r3, [r7, #12]
 800a4da:	e038      	b.n	800a54e <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800a4dc:	492f      	ldr	r1, [pc, #188]	; (800a59c <chk_lock+0xd4>)
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	4613      	mov	r3, r2
 800a4e2:	005b      	lsls	r3, r3, #1
 800a4e4:	4413      	add	r3, r2
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	440b      	add	r3, r1
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d029      	beq.n	800a544 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800a4f0:	492a      	ldr	r1, [pc, #168]	; (800a59c <chk_lock+0xd4>)
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	4613      	mov	r3, r2
 800a4f6:	005b      	lsls	r3, r3, #1
 800a4f8:	4413      	add	r3, r2
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	440b      	add	r3, r1
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a506:	429a      	cmp	r2, r3
 800a508:	d11e      	bne.n	800a548 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800a50a:	4924      	ldr	r1, [pc, #144]	; (800a59c <chk_lock+0xd4>)
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	4613      	mov	r3, r2
 800a510:	005b      	lsls	r3, r3, #1
 800a512:	4413      	add	r3, r2
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	440b      	add	r3, r1
 800a518:	3304      	adds	r3, #4
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800a522:	429a      	cmp	r2, r3
 800a524:	d110      	bne.n	800a548 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800a526:	491d      	ldr	r1, [pc, #116]	; (800a59c <chk_lock+0xd4>)
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	4613      	mov	r3, r2
 800a52c:	005b      	lsls	r3, r3, #1
 800a52e:	4413      	add	r3, r2
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	440b      	add	r3, r1
 800a534:	3308      	adds	r3, #8
 800a536:	881a      	ldrh	r2, [r3, #0]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 800a53e:	429a      	cmp	r2, r3
 800a540:	d102      	bne.n	800a548 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800a542:	e007      	b.n	800a554 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800a544:	2301      	movs	r3, #1
 800a546:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	3301      	adds	r3, #1
 800a54c:	60fb      	str	r3, [r7, #12]
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2b01      	cmp	r3, #1
 800a552:	d9c3      	bls.n	800a4dc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2b02      	cmp	r3, #2
 800a558:	d109      	bne.n	800a56e <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d102      	bne.n	800a566 <chk_lock+0x9e>
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	2b02      	cmp	r3, #2
 800a564:	d101      	bne.n	800a56a <chk_lock+0xa2>
 800a566:	2300      	movs	r3, #0
 800a568:	e013      	b.n	800a592 <chk_lock+0xca>
 800a56a:	2312      	movs	r3, #18
 800a56c:	e011      	b.n	800a592 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d10b      	bne.n	800a58c <chk_lock+0xc4>
 800a574:	4909      	ldr	r1, [pc, #36]	; (800a59c <chk_lock+0xd4>)
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	4613      	mov	r3, r2
 800a57a:	005b      	lsls	r3, r3, #1
 800a57c:	4413      	add	r3, r2
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	440b      	add	r3, r1
 800a582:	330a      	adds	r3, #10
 800a584:	881b      	ldrh	r3, [r3, #0]
 800a586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a58a:	d101      	bne.n	800a590 <chk_lock+0xc8>
 800a58c:	2310      	movs	r3, #16
 800a58e:	e000      	b.n	800a592 <chk_lock+0xca>
 800a590:	2300      	movs	r3, #0
}
 800a592:	4618      	mov	r0, r3
 800a594:	3714      	adds	r7, #20
 800a596:	46bd      	mov	sp, r7
 800a598:	bc80      	pop	{r7}
 800a59a:	4770      	bx	lr
 800a59c:	200001e8 	.word	0x200001e8

0800a5a0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	607b      	str	r3, [r7, #4]
 800a5aa:	e002      	b.n	800a5b2 <enq_lock+0x12>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	607b      	str	r3, [r7, #4]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d809      	bhi.n	800a5cc <enq_lock+0x2c>
 800a5b8:	490a      	ldr	r1, [pc, #40]	; (800a5e4 <enq_lock+0x44>)
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	4613      	mov	r3, r2
 800a5be:	005b      	lsls	r3, r3, #1
 800a5c0:	4413      	add	r3, r2
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	440b      	add	r3, r1
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d1ef      	bne.n	800a5ac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2b02      	cmp	r3, #2
 800a5d0:	bf14      	ite	ne
 800a5d2:	2301      	movne	r3, #1
 800a5d4:	2300      	moveq	r3, #0
 800a5d6:	b2db      	uxtb	r3, r3
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	370c      	adds	r7, #12
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bc80      	pop	{r7}
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop
 800a5e4:	200001e8 	.word	0x200001e8

0800a5e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b085      	sub	sp, #20
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	60fb      	str	r3, [r7, #12]
 800a5f6:	e02b      	b.n	800a650 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800a5f8:	4955      	ldr	r1, [pc, #340]	; (800a750 <inc_lock+0x168>)
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	4613      	mov	r3, r2
 800a5fe:	005b      	lsls	r3, r3, #1
 800a600:	4413      	add	r3, r2
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	440b      	add	r3, r1
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a60e:	429a      	cmp	r2, r3
 800a610:	d11b      	bne.n	800a64a <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800a612:	494f      	ldr	r1, [pc, #316]	; (800a750 <inc_lock+0x168>)
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	4613      	mov	r3, r2
 800a618:	005b      	lsls	r3, r3, #1
 800a61a:	4413      	add	r3, r2
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	440b      	add	r3, r1
 800a620:	3304      	adds	r3, #4
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d10d      	bne.n	800a64a <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800a62e:	4948      	ldr	r1, [pc, #288]	; (800a750 <inc_lock+0x168>)
 800a630:	68fa      	ldr	r2, [r7, #12]
 800a632:	4613      	mov	r3, r2
 800a634:	005b      	lsls	r3, r3, #1
 800a636:	4413      	add	r3, r2
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	440b      	add	r3, r1
 800a63c:	3308      	adds	r3, #8
 800a63e:	881a      	ldrh	r2, [r3, #0]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 800a646:	429a      	cmp	r2, r3
 800a648:	d006      	beq.n	800a658 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	3301      	adds	r3, #1
 800a64e:	60fb      	str	r3, [r7, #12]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2b01      	cmp	r3, #1
 800a654:	d9d0      	bls.n	800a5f8 <inc_lock+0x10>
 800a656:	e000      	b.n	800a65a <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800a658:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2b02      	cmp	r3, #2
 800a65e:	d145      	bne.n	800a6ec <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a660:	2300      	movs	r3, #0
 800a662:	60fb      	str	r3, [r7, #12]
 800a664:	e002      	b.n	800a66c <inc_lock+0x84>
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	3301      	adds	r3, #1
 800a66a:	60fb      	str	r3, [r7, #12]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d809      	bhi.n	800a686 <inc_lock+0x9e>
 800a672:	4937      	ldr	r1, [pc, #220]	; (800a750 <inc_lock+0x168>)
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	4613      	mov	r3, r2
 800a678:	005b      	lsls	r3, r3, #1
 800a67a:	4413      	add	r3, r2
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	440b      	add	r3, r1
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d1ef      	bne.n	800a666 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2b02      	cmp	r3, #2
 800a68a:	d101      	bne.n	800a690 <inc_lock+0xa8>
 800a68c:	2300      	movs	r3, #0
 800a68e:	e05a      	b.n	800a746 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800a696:	482e      	ldr	r0, [pc, #184]	; (800a750 <inc_lock+0x168>)
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	4613      	mov	r3, r2
 800a69c:	005b      	lsls	r3, r3, #1
 800a69e:	4413      	add	r3, r2
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	4403      	add	r3, r0
 800a6a4:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800a6ac:	4828      	ldr	r0, [pc, #160]	; (800a750 <inc_lock+0x168>)
 800a6ae:	68fa      	ldr	r2, [r7, #12]
 800a6b0:	4613      	mov	r3, r2
 800a6b2:	005b      	lsls	r3, r3, #1
 800a6b4:	4413      	add	r3, r2
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	4403      	add	r3, r0
 800a6ba:	3304      	adds	r3, #4
 800a6bc:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 800a6c4:	4922      	ldr	r1, [pc, #136]	; (800a750 <inc_lock+0x168>)
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	005b      	lsls	r3, r3, #1
 800a6cc:	4413      	add	r3, r2
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	440b      	add	r3, r1
 800a6d2:	3308      	adds	r3, #8
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800a6d8:	491d      	ldr	r1, [pc, #116]	; (800a750 <inc_lock+0x168>)
 800a6da:	68fa      	ldr	r2, [r7, #12]
 800a6dc:	4613      	mov	r3, r2
 800a6de:	005b      	lsls	r3, r3, #1
 800a6e0:	4413      	add	r3, r2
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	440b      	add	r3, r1
 800a6e6:	330a      	adds	r3, #10
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00c      	beq.n	800a70c <inc_lock+0x124>
 800a6f2:	4917      	ldr	r1, [pc, #92]	; (800a750 <inc_lock+0x168>)
 800a6f4:	68fa      	ldr	r2, [r7, #12]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	005b      	lsls	r3, r3, #1
 800a6fa:	4413      	add	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	440b      	add	r3, r1
 800a700:	330a      	adds	r3, #10
 800a702:	881b      	ldrh	r3, [r3, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d001      	beq.n	800a70c <inc_lock+0x124>
 800a708:	2300      	movs	r3, #0
 800a70a:	e01c      	b.n	800a746 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d10b      	bne.n	800a72a <inc_lock+0x142>
 800a712:	490f      	ldr	r1, [pc, #60]	; (800a750 <inc_lock+0x168>)
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	4613      	mov	r3, r2
 800a718:	005b      	lsls	r3, r3, #1
 800a71a:	4413      	add	r3, r2
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	440b      	add	r3, r1
 800a720:	330a      	adds	r3, #10
 800a722:	881b      	ldrh	r3, [r3, #0]
 800a724:	3301      	adds	r3, #1
 800a726:	b299      	uxth	r1, r3
 800a728:	e001      	b.n	800a72e <inc_lock+0x146>
 800a72a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a72e:	4808      	ldr	r0, [pc, #32]	; (800a750 <inc_lock+0x168>)
 800a730:	68fa      	ldr	r2, [r7, #12]
 800a732:	4613      	mov	r3, r2
 800a734:	005b      	lsls	r3, r3, #1
 800a736:	4413      	add	r3, r2
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	4403      	add	r3, r0
 800a73c:	330a      	adds	r3, #10
 800a73e:	460a      	mov	r2, r1
 800a740:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	3301      	adds	r3, #1
}
 800a746:	4618      	mov	r0, r3
 800a748:	3714      	adds	r7, #20
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bc80      	pop	{r7}
 800a74e:	4770      	bx	lr
 800a750:	200001e8 	.word	0x200001e8

0800a754 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a754:	b480      	push	{r7}
 800a756:	b085      	sub	sp, #20
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	3b01      	subs	r3, #1
 800a760:	607b      	str	r3, [r7, #4]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2b01      	cmp	r3, #1
 800a766:	d82e      	bhi.n	800a7c6 <dec_lock+0x72>
		n = Files[i].ctr;
 800a768:	491b      	ldr	r1, [pc, #108]	; (800a7d8 <dec_lock+0x84>)
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	4613      	mov	r3, r2
 800a76e:	005b      	lsls	r3, r3, #1
 800a770:	4413      	add	r3, r2
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	440b      	add	r3, r1
 800a776:	330a      	adds	r3, #10
 800a778:	881b      	ldrh	r3, [r3, #0]
 800a77a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a77c:	89fb      	ldrh	r3, [r7, #14]
 800a77e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a782:	d101      	bne.n	800a788 <dec_lock+0x34>
 800a784:	2300      	movs	r3, #0
 800a786:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800a788:	89fb      	ldrh	r3, [r7, #14]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d002      	beq.n	800a794 <dec_lock+0x40>
 800a78e:	89fb      	ldrh	r3, [r7, #14]
 800a790:	3b01      	subs	r3, #1
 800a792:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a794:	4910      	ldr	r1, [pc, #64]	; (800a7d8 <dec_lock+0x84>)
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	4613      	mov	r3, r2
 800a79a:	005b      	lsls	r3, r3, #1
 800a79c:	4413      	add	r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	440b      	add	r3, r1
 800a7a2:	330a      	adds	r3, #10
 800a7a4:	89fa      	ldrh	r2, [r7, #14]
 800a7a6:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a7a8:	89fb      	ldrh	r3, [r7, #14]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d108      	bne.n	800a7c0 <dec_lock+0x6c>
 800a7ae:	490a      	ldr	r1, [pc, #40]	; (800a7d8 <dec_lock+0x84>)
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	005b      	lsls	r3, r3, #1
 800a7b6:	4413      	add	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	440b      	add	r3, r1
 800a7bc:	2200      	movs	r2, #0
 800a7be:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	737b      	strb	r3, [r7, #13]
 800a7c4:	e001      	b.n	800a7ca <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a7c6:	2302      	movs	r3, #2
 800a7c8:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a7ca:	7b7b      	ldrb	r3, [r7, #13]
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3714      	adds	r7, #20
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bc80      	pop	{r7}
 800a7d4:	4770      	bx	lr
 800a7d6:	bf00      	nop
 800a7d8:	200001e8 	.word	0x200001e8

0800a7dc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b085      	sub	sp, #20
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	60fb      	str	r3, [r7, #12]
 800a7e8:	e016      	b.n	800a818 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a7ea:	4910      	ldr	r1, [pc, #64]	; (800a82c <clear_lock+0x50>)
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	005b      	lsls	r3, r3, #1
 800a7f2:	4413      	add	r3, r2
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	440b      	add	r3, r1
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d108      	bne.n	800a812 <clear_lock+0x36>
 800a800:	490a      	ldr	r1, [pc, #40]	; (800a82c <clear_lock+0x50>)
 800a802:	68fa      	ldr	r2, [r7, #12]
 800a804:	4613      	mov	r3, r2
 800a806:	005b      	lsls	r3, r3, #1
 800a808:	4413      	add	r3, r2
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	440b      	add	r3, r1
 800a80e:	2200      	movs	r2, #0
 800a810:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	3301      	adds	r3, #1
 800a816:	60fb      	str	r3, [r7, #12]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d9e5      	bls.n	800a7ea <clear_lock+0xe>
	}
}
 800a81e:	bf00      	nop
 800a820:	bf00      	nop
 800a822:	3714      	adds	r7, #20
 800a824:	46bd      	mov	sp, r7
 800a826:	bc80      	pop	{r7}
 800a828:	4770      	bx	lr
 800a82a:	bf00      	nop
 800a82c:	200001e8 	.word	0x200001e8

0800a830 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b086      	sub	sp, #24
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a838:	2300      	movs	r3, #0
 800a83a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800a842:	2b00      	cmp	r3, #0
 800a844:	d038      	beq.n	800a8b8 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800a84c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a854:	6879      	ldr	r1, [r7, #4]
 800a856:	2301      	movs	r3, #1
 800a858:	697a      	ldr	r2, [r7, #20]
 800a85a:	f7ff fd51 	bl	800a300 <disk_write>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d002      	beq.n	800a86a <sync_window+0x3a>
			res = FR_DISK_ERR;
 800a864:	2301      	movs	r3, #1
 800a866:	73fb      	strb	r3, [r7, #15]
 800a868:	e026      	b.n	800a8b8 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a878:	697a      	ldr	r2, [r7, #20]
 800a87a:	1ad2      	subs	r2, r2, r3
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800a882:	429a      	cmp	r2, r3
 800a884:	d218      	bcs.n	800a8b8 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800a88c:	613b      	str	r3, [r7, #16]
 800a88e:	e010      	b.n	800a8b2 <sync_window+0x82>
					wsect += fs->fsize;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800a896:	697a      	ldr	r2, [r7, #20]
 800a898:	4413      	add	r3, r2
 800a89a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a8a2:	6879      	ldr	r1, [r7, #4]
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	697a      	ldr	r2, [r7, #20]
 800a8a8:	f7ff fd2a 	bl	800a300 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	3b01      	subs	r3, #1
 800a8b0:	613b      	str	r3, [r7, #16]
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d8eb      	bhi.n	800a890 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800a8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3718      	adds	r7, #24
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b084      	sub	sp, #16
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
 800a8ca:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800a8d6:	683a      	ldr	r2, [r7, #0]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d01b      	beq.n	800a914 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f7ff ffa7 	bl	800a830 <sync_window>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a8e6:	7bfb      	ldrb	r3, [r7, #15]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d113      	bne.n	800a914 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a8f2:	6879      	ldr	r1, [r7, #4]
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	683a      	ldr	r2, [r7, #0]
 800a8f8:	f7ff fce2 	bl	800a2c0 <disk_read>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d004      	beq.n	800a90c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a902:	f04f 33ff 	mov.w	r3, #4294967295
 800a906:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a908:	2301      	movs	r3, #1
 800a90a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	683a      	ldr	r2, [r7, #0]
 800a910:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
	}
	return res;
 800a914:	7bfb      	ldrb	r3, [r7, #15]
}
 800a916:	4618      	mov	r0, r3
 800a918:	3710      	adds	r7, #16
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}

0800a91e <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b084      	sub	sp, #16
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f7ff ff82 	bl	800a830 <sync_window>
 800a92c:	4603      	mov	r3, r0
 800a92e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a930:	7bfb      	ldrb	r3, [r7, #15]
 800a932:	2b00      	cmp	r3, #0
 800a934:	f040 809b 	bne.w	800aa6e <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a93e:	2b03      	cmp	r3, #3
 800a940:	f040 8088 	bne.w	800aa54 <sync_fs+0x136>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	f040 8082 	bne.w	800aa54 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a956:	2100      	movs	r1, #0
 800a958:	4618      	mov	r0, r3
 800a95a:	f7ff fd2d 	bl	800a3b8 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2255      	movs	r2, #85	; 0x55
 800a962:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	22aa      	movs	r2, #170	; 0xaa
 800a96a:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2252      	movs	r2, #82	; 0x52
 800a972:	701a      	strb	r2, [r3, #0]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2252      	movs	r2, #82	; 0x52
 800a978:	705a      	strb	r2, [r3, #1]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2261      	movs	r2, #97	; 0x61
 800a97e:	709a      	strb	r2, [r3, #2]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2241      	movs	r2, #65	; 0x41
 800a984:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2272      	movs	r2, #114	; 0x72
 800a98a:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2272      	movs	r2, #114	; 0x72
 800a992:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2241      	movs	r2, #65	; 0x41
 800a99a:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2261      	movs	r2, #97	; 0x61
 800a9a2:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a9ac:	b2da      	uxtb	r2, r3
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	0a1b      	lsrs	r3, r3, #8
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	b2da      	uxtb	r2, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a9ce:	0c1b      	lsrs	r3, r3, #16
 800a9d0:	b2da      	uxtb	r2, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a9de:	0e1b      	lsrs	r3, r3, #24
 800a9e0:	b2da      	uxtb	r2, r3
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a9ee:	b2da      	uxtb	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	0a1b      	lsrs	r3, r3, #8
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	b2da      	uxtb	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800aa10:	0c1b      	lsrs	r3, r3, #16
 800aa12:	b2da      	uxtb	r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800aa20:	0e1b      	lsrs	r3, r3, #24
 800aa22:	b2da      	uxtb	r2, r3
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800aa30:	1c5a      	adds	r2, r3, #1
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800aa3e:	6879      	ldr	r1, [r7, #4]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 800aa46:	2301      	movs	r3, #1
 800aa48:	f7ff fc5a 	bl	800a300 <disk_write>
			fs->fsi_flag = 0;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7ff fc6e 	bl	800a340 <disk_ioctl>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d001      	beq.n	800aa6e <sync_fs+0x150>
			res = FR_DISK_ERR;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800aa6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	3b02      	subs	r3, #2
 800aa86:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800aa8e:	3b02      	subs	r3, #2
 800aa90:	683a      	ldr	r2, [r7, #0]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d301      	bcc.n	800aa9a <clust2sect+0x22>
 800aa96:	2300      	movs	r3, #0
 800aa98:	e00a      	b.n	800aab0 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	fb03 f202 	mul.w	r2, r3, r2
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800aaae:	4413      	add	r3, r2
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bc80      	pop	{r7}
 800aab8:	4770      	bx	lr

0800aaba <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b086      	sub	sp, #24
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
 800aac2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d905      	bls.n	800aad6 <get_fat+0x1c>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800aad0:	683a      	ldr	r2, [r7, #0]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d302      	bcc.n	800aadc <get_fat+0x22>
		val = 1;	/* Internal error */
 800aad6:	2301      	movs	r3, #1
 800aad8:	617b      	str	r3, [r7, #20]
 800aada:	e0a3      	b.n	800ac24 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800aadc:	f04f 33ff 	mov.w	r3, #4294967295
 800aae0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800aae8:	2b03      	cmp	r3, #3
 800aaea:	d068      	beq.n	800abbe <get_fat+0x104>
 800aaec:	2b03      	cmp	r3, #3
 800aaee:	f300 808f 	bgt.w	800ac10 <get_fat+0x156>
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d002      	beq.n	800aafc <get_fat+0x42>
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	d040      	beq.n	800ab7c <get_fat+0xc2>
 800aafa:	e089      	b.n	800ac10 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	60fb      	str	r3, [r7, #12]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	085b      	lsrs	r3, r3, #1
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	4413      	add	r3, r2
 800ab08:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	0a5b      	lsrs	r3, r3, #9
 800ab14:	4413      	add	r3, r2
 800ab16:	4619      	mov	r1, r3
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f7ff fed2 	bl	800a8c2 <move_window>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d178      	bne.n	800ac16 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	1c5a      	adds	r2, r3, #1
 800ab28:	60fa      	str	r2, [r7, #12]
 800ab2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	5cd3      	ldrb	r3, [r2, r3]
 800ab32:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	0a5b      	lsrs	r3, r3, #9
 800ab3e:	4413      	add	r3, r2
 800ab40:	4619      	mov	r1, r3
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f7ff febd 	bl	800a8c2 <move_window>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d165      	bne.n	800ac1a <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	5cd3      	ldrb	r3, [r2, r3]
 800ab58:	021b      	lsls	r3, r3, #8
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	f003 0301 	and.w	r3, r3, #1
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d002      	beq.n	800ab72 <get_fat+0xb8>
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	091b      	lsrs	r3, r3, #4
 800ab70:	e002      	b.n	800ab78 <get_fat+0xbe>
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab78:	617b      	str	r3, [r7, #20]
			break;
 800ab7a:	e053      	b.n	800ac24 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	0a1b      	lsrs	r3, r3, #8
 800ab86:	4413      	add	r3, r2
 800ab88:	4619      	mov	r1, r3
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f7ff fe99 	bl	800a8c2 <move_window>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d143      	bne.n	800ac1e <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	005b      	lsls	r3, r3, #1
 800ab9a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	4413      	add	r3, r2
 800aba2:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	3301      	adds	r3, #1
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	021b      	lsls	r3, r3, #8
 800abac:	b21a      	sxth	r2, r3
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	b21b      	sxth	r3, r3
 800abb4:	4313      	orrs	r3, r2
 800abb6:	b21b      	sxth	r3, r3
 800abb8:	b29b      	uxth	r3, r3
 800abba:	617b      	str	r3, [r7, #20]
			break;
 800abbc:	e032      	b.n	800ac24 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	09db      	lsrs	r3, r3, #7
 800abc8:	4413      	add	r3, r2
 800abca:	4619      	mov	r1, r3
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f7ff fe78 	bl	800a8c2 <move_window>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d124      	bne.n	800ac22 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	4413      	add	r3, r2
 800abe4:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	3303      	adds	r3, #3
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	061a      	lsls	r2, r3, #24
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	3302      	adds	r3, #2
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	041b      	lsls	r3, r3, #16
 800abf6:	4313      	orrs	r3, r2
 800abf8:	693a      	ldr	r2, [r7, #16]
 800abfa:	3201      	adds	r2, #1
 800abfc:	7812      	ldrb	r2, [r2, #0]
 800abfe:	0212      	lsls	r2, r2, #8
 800ac00:	4313      	orrs	r3, r2
 800ac02:	693a      	ldr	r2, [r7, #16]
 800ac04:	7812      	ldrb	r2, [r2, #0]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ac0c:	617b      	str	r3, [r7, #20]
			break;
 800ac0e:	e009      	b.n	800ac24 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 800ac10:	2301      	movs	r3, #1
 800ac12:	617b      	str	r3, [r7, #20]
 800ac14:	e006      	b.n	800ac24 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ac16:	bf00      	nop
 800ac18:	e004      	b.n	800ac24 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ac1a:	bf00      	nop
 800ac1c:	e002      	b.n	800ac24 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ac1e:	bf00      	nop
 800ac20:	e000      	b.n	800ac24 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ac22:	bf00      	nop
		}
	}

	return val;
 800ac24:	697b      	ldr	r3, [r7, #20]
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3718      	adds	r7, #24
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b088      	sub	sp, #32
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	60f8      	str	r0, [r7, #12]
 800ac36:	60b9      	str	r1, [r7, #8]
 800ac38:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d905      	bls.n	800ac4c <put_fat+0x1e>
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ac46:	68ba      	ldr	r2, [r7, #8]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d302      	bcc.n	800ac52 <put_fat+0x24>
		res = FR_INT_ERR;
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	77fb      	strb	r3, [r7, #31]
 800ac50:	e0f6      	b.n	800ae40 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ac58:	2b03      	cmp	r3, #3
 800ac5a:	f000 809e 	beq.w	800ad9a <put_fat+0x16c>
 800ac5e:	2b03      	cmp	r3, #3
 800ac60:	f300 80e4 	bgt.w	800ae2c <put_fat+0x1fe>
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d002      	beq.n	800ac6e <put_fat+0x40>
 800ac68:	2b02      	cmp	r3, #2
 800ac6a:	d06f      	beq.n	800ad4c <put_fat+0x11e>
 800ac6c:	e0de      	b.n	800ae2c <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	617b      	str	r3, [r7, #20]
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	085b      	lsrs	r3, r3, #1
 800ac76:	697a      	ldr	r2, [r7, #20]
 800ac78:	4413      	add	r3, r2
 800ac7a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	0a5b      	lsrs	r3, r3, #9
 800ac86:	4413      	add	r3, r2
 800ac88:	4619      	mov	r1, r3
 800ac8a:	68f8      	ldr	r0, [r7, #12]
 800ac8c:	f7ff fe19 	bl	800a8c2 <move_window>
 800ac90:	4603      	mov	r3, r0
 800ac92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ac94:	7ffb      	ldrb	r3, [r7, #31]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	f040 80cb 	bne.w	800ae32 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	1c5a      	adds	r2, r3, #1
 800aca0:	617a      	str	r2, [r7, #20]
 800aca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aca6:	68fa      	ldr	r2, [r7, #12]
 800aca8:	4413      	add	r3, r2
 800acaa:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	f003 0301 	and.w	r3, r3, #1
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d00d      	beq.n	800acd2 <put_fat+0xa4>
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	b25b      	sxtb	r3, r3
 800acbc:	f003 030f 	and.w	r3, r3, #15
 800acc0:	b25a      	sxtb	r2, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	011b      	lsls	r3, r3, #4
 800acc8:	b25b      	sxtb	r3, r3
 800acca:	4313      	orrs	r3, r2
 800accc:	b25b      	sxtb	r3, r3
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	e001      	b.n	800acd6 <put_fat+0xa8>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	69ba      	ldr	r2, [r7, #24]
 800acd8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2201      	movs	r2, #1
 800acde:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	0a5b      	lsrs	r3, r3, #9
 800acec:	4413      	add	r3, r2
 800acee:	4619      	mov	r1, r3
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f7ff fde6 	bl	800a8c2 <move_window>
 800acf6:	4603      	mov	r3, r0
 800acf8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800acfa:	7ffb      	ldrb	r3, [r7, #31]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f040 809a 	bne.w	800ae36 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad08:	68fa      	ldr	r2, [r7, #12]
 800ad0a:	4413      	add	r3, r2
 800ad0c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	f003 0301 	and.w	r3, r3, #1
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d003      	beq.n	800ad20 <put_fat+0xf2>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	091b      	lsrs	r3, r3, #4
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	e00e      	b.n	800ad3e <put_fat+0x110>
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	b25b      	sxtb	r3, r3
 800ad26:	f023 030f 	bic.w	r3, r3, #15
 800ad2a:	b25a      	sxtb	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	0a1b      	lsrs	r3, r3, #8
 800ad30:	b25b      	sxtb	r3, r3
 800ad32:	f003 030f 	and.w	r3, r3, #15
 800ad36:	b25b      	sxtb	r3, r3
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	b25b      	sxtb	r3, r3
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	69ba      	ldr	r2, [r7, #24]
 800ad40:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800ad4a:	e079      	b.n	800ae40 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	0a1b      	lsrs	r3, r3, #8
 800ad56:	4413      	add	r3, r2
 800ad58:	4619      	mov	r1, r3
 800ad5a:	68f8      	ldr	r0, [r7, #12]
 800ad5c:	f7ff fdb1 	bl	800a8c2 <move_window>
 800ad60:	4603      	mov	r3, r0
 800ad62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ad64:	7ffb      	ldrb	r3, [r7, #31]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d167      	bne.n	800ae3a <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	005b      	lsls	r3, r3, #1
 800ad6e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	4413      	add	r3, r2
 800ad76:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	b2da      	uxtb	r2, r3
 800ad7c:	69bb      	ldr	r3, [r7, #24]
 800ad7e:	701a      	strb	r2, [r3, #0]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	0a1b      	lsrs	r3, r3, #8
 800ad86:	b29a      	uxth	r2, r3
 800ad88:	69bb      	ldr	r3, [r7, #24]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	b2d2      	uxtb	r2, r2
 800ad8e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2201      	movs	r2, #1
 800ad94:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800ad98:	e052      	b.n	800ae40 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	09db      	lsrs	r3, r3, #7
 800ada4:	4413      	add	r3, r2
 800ada6:	4619      	mov	r1, r3
 800ada8:	68f8      	ldr	r0, [r7, #12]
 800adaa:	f7ff fd8a 	bl	800a8c2 <move_window>
 800adae:	4603      	mov	r3, r0
 800adb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800adb2:	7ffb      	ldrb	r3, [r7, #31]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d142      	bne.n	800ae3e <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	009b      	lsls	r3, r3, #2
 800adbc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800adc0:	68fa      	ldr	r2, [r7, #12]
 800adc2:	4413      	add	r3, r2
 800adc4:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800adc6:	69bb      	ldr	r3, [r7, #24]
 800adc8:	3303      	adds	r3, #3
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	061a      	lsls	r2, r3, #24
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	3302      	adds	r3, #2
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	041b      	lsls	r3, r3, #16
 800add6:	4313      	orrs	r3, r2
 800add8:	69ba      	ldr	r2, [r7, #24]
 800adda:	3201      	adds	r2, #1
 800addc:	7812      	ldrb	r2, [r2, #0]
 800adde:	0212      	lsls	r2, r2, #8
 800ade0:	4313      	orrs	r3, r2
 800ade2:	69ba      	ldr	r2, [r7, #24]
 800ade4:	7812      	ldrb	r2, [r2, #0]
 800ade6:	4313      	orrs	r3, r2
 800ade8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	4313      	orrs	r3, r2
 800adf0:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	b2da      	uxtb	r2, r3
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	701a      	strb	r2, [r3, #0]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	0a1b      	lsrs	r3, r3, #8
 800ae00:	b29a      	uxth	r2, r3
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	3301      	adds	r3, #1
 800ae06:	b2d2      	uxtb	r2, r2
 800ae08:	701a      	strb	r2, [r3, #0]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	0c1a      	lsrs	r2, r3, #16
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	3302      	adds	r3, #2
 800ae12:	b2d2      	uxtb	r2, r2
 800ae14:	701a      	strb	r2, [r3, #0]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	0e1a      	lsrs	r2, r3, #24
 800ae1a:	69bb      	ldr	r3, [r7, #24]
 800ae1c:	3303      	adds	r3, #3
 800ae1e:	b2d2      	uxtb	r2, r2
 800ae20:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2201      	movs	r2, #1
 800ae26:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800ae2a:	e009      	b.n	800ae40 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	77fb      	strb	r3, [r7, #31]
 800ae30:	e006      	b.n	800ae40 <put_fat+0x212>
			if (res != FR_OK) break;
 800ae32:	bf00      	nop
 800ae34:	e004      	b.n	800ae40 <put_fat+0x212>
			if (res != FR_OK) break;
 800ae36:	bf00      	nop
 800ae38:	e002      	b.n	800ae40 <put_fat+0x212>
			if (res != FR_OK) break;
 800ae3a:	bf00      	nop
 800ae3c:	e000      	b.n	800ae40 <put_fat+0x212>
			if (res != FR_OK) break;
 800ae3e:	bf00      	nop
		}
	}

	return res;
 800ae40:	7ffb      	ldrb	r3, [r7, #31]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3720      	adds	r7, #32
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b084      	sub	sp, #16
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d905      	bls.n	800ae66 <remove_chain+0x1c>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ae60:	683a      	ldr	r2, [r7, #0]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d302      	bcc.n	800ae6c <remove_chain+0x22>
		res = FR_INT_ERR;
 800ae66:	2302      	movs	r3, #2
 800ae68:	73fb      	strb	r3, [r7, #15]
 800ae6a:	e043      	b.n	800aef4 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800ae70:	e036      	b.n	800aee0 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800ae72:	6839      	ldr	r1, [r7, #0]
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f7ff fe20 	bl	800aaba <get_fat>
 800ae7a:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d035      	beq.n	800aeee <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d102      	bne.n	800ae8e <remove_chain+0x44>
 800ae88:	2302      	movs	r3, #2
 800ae8a:	73fb      	strb	r3, [r7, #15]
 800ae8c:	e032      	b.n	800aef4 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae94:	d102      	bne.n	800ae9c <remove_chain+0x52>
 800ae96:	2301      	movs	r3, #1
 800ae98:	73fb      	strb	r3, [r7, #15]
 800ae9a:	e02b      	b.n	800aef4 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	6839      	ldr	r1, [r7, #0]
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f7ff fec4 	bl	800ac2e <put_fat>
 800aea6:	4603      	mov	r3, r0
 800aea8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800aeaa:	7bfb      	ldrb	r3, [r7, #15]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d120      	bne.n	800aef2 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aeb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeba:	d00f      	beq.n	800aedc <remove_chain+0x92>
				fs->free_clust++;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aec2:	1c5a      	adds	r2, r3, #1
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				fs->fsi_flag |= 1;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800aed0:	f043 0301 	orr.w	r3, r3, #1
 800aed4:	b2da      	uxtb	r2, r3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800aee6:	683a      	ldr	r2, [r7, #0]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d3c2      	bcc.n	800ae72 <remove_chain+0x28>
 800aeec:	e002      	b.n	800aef4 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800aeee:	bf00      	nop
 800aef0:	e000      	b.n	800aef4 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800aef2:	bf00      	nop
		}
	}

	return res;
 800aef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b086      	sub	sp, #24
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
 800af06:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d10f      	bne.n	800af2e <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800af14:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d005      	beq.n	800af28 <create_chain+0x2a>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800af22:	693a      	ldr	r2, [r7, #16]
 800af24:	429a      	cmp	r2, r3
 800af26:	d31c      	bcc.n	800af62 <create_chain+0x64>
 800af28:	2301      	movs	r3, #1
 800af2a:	613b      	str	r3, [r7, #16]
 800af2c:	e019      	b.n	800af62 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800af2e:	6839      	ldr	r1, [r7, #0]
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f7ff fdc2 	bl	800aaba <get_fat>
 800af36:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d801      	bhi.n	800af42 <create_chain+0x44>
 800af3e:	2301      	movs	r3, #1
 800af40:	e076      	b.n	800b030 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af48:	d101      	bne.n	800af4e <create_chain+0x50>
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	e070      	b.n	800b030 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800af54:	68ba      	ldr	r2, [r7, #8]
 800af56:	429a      	cmp	r2, r3
 800af58:	d201      	bcs.n	800af5e <create_chain+0x60>
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	e068      	b.n	800b030 <create_chain+0x132>
		scl = clst;
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	3301      	adds	r3, #1
 800af6a:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800af72:	697a      	ldr	r2, [r7, #20]
 800af74:	429a      	cmp	r2, r3
 800af76:	d307      	bcc.n	800af88 <create_chain+0x8a>
			ncl = 2;
 800af78:	2302      	movs	r3, #2
 800af7a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800af7c:	697a      	ldr	r2, [r7, #20]
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	429a      	cmp	r2, r3
 800af82:	d901      	bls.n	800af88 <create_chain+0x8a>
 800af84:	2300      	movs	r3, #0
 800af86:	e053      	b.n	800b030 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800af88:	6979      	ldr	r1, [r7, #20]
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f7ff fd95 	bl	800aaba <get_fat>
 800af90:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00e      	beq.n	800afb6 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af9e:	d002      	beq.n	800afa6 <create_chain+0xa8>
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d101      	bne.n	800afaa <create_chain+0xac>
			return cs;
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	e042      	b.n	800b030 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800afaa:	697a      	ldr	r2, [r7, #20]
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d1d9      	bne.n	800af66 <create_chain+0x68>
 800afb2:	2300      	movs	r3, #0
 800afb4:	e03c      	b.n	800b030 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800afb6:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800afb8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800afbc:	6979      	ldr	r1, [r7, #20]
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7ff fe35 	bl	800ac2e <put_fat>
 800afc4:	4603      	mov	r3, r0
 800afc6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800afc8:	7bfb      	ldrb	r3, [r7, #15]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d109      	bne.n	800afe2 <create_chain+0xe4>
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d006      	beq.n	800afe2 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800afd4:	697a      	ldr	r2, [r7, #20]
 800afd6:	6839      	ldr	r1, [r7, #0]
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f7ff fe28 	bl	800ac2e <put_fat>
 800afde:	4603      	mov	r3, r0
 800afe0:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800afe2:	7bfb      	ldrb	r3, [r7, #15]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d11a      	bne.n	800b01e <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	697a      	ldr	r2, [r7, #20]
 800afec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800affa:	d018      	beq.n	800b02e <create_chain+0x130>
			fs->free_clust--;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b002:	1e5a      	subs	r2, r3, #1
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800b010:	f043 0301 	orr.w	r3, r3, #1
 800b014:	b2da      	uxtb	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800b01c:	e007      	b.n	800b02e <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800b01e:	7bfb      	ldrb	r3, [r7, #15]
 800b020:	2b01      	cmp	r3, #1
 800b022:	d102      	bne.n	800b02a <create_chain+0x12c>
 800b024:	f04f 33ff 	mov.w	r3, #4294967295
 800b028:	e000      	b.n	800b02c <create_chain+0x12e>
 800b02a:	2301      	movs	r3, #1
 800b02c:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800b02e:	697b      	ldr	r3, [r7, #20]
}
 800b030:	4618      	mov	r0, r3
 800b032:	3718      	adds	r7, #24
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800b038:	b480      	push	{r7}
 800b03a:	b087      	sub	sp, #28
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800b048:	3304      	adds	r3, #4
 800b04a:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	0a5b      	lsrs	r3, r3, #9
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800b056:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800b05a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b05e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	1d1a      	adds	r2, r3, #4
 800b064:	613a      	str	r2, [r7, #16]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d101      	bne.n	800b074 <clmt_clust+0x3c>
 800b070:	2300      	movs	r3, #0
 800b072:	e010      	b.n	800b096 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800b074:	697a      	ldr	r2, [r7, #20]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d307      	bcc.n	800b08c <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800b07c:	697a      	ldr	r2, [r7, #20]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	617b      	str	r3, [r7, #20]
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	3304      	adds	r3, #4
 800b088:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b08a:	e7e9      	b.n	800b060 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800b08c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	4413      	add	r3, r2
}
 800b096:	4618      	mov	r0, r3
 800b098:	371c      	adds	r7, #28
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bc80      	pop	{r7}
 800b09e:	4770      	bx	lr

0800b0a0 <dir_sdi>:
//static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	b29a      	uxth	r2, r3
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800b0ba:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d007      	beq.n	800b0d2 <dir_sdi+0x32>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b0c8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b0cc:	697a      	ldr	r2, [r7, #20]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d301      	bcc.n	800b0d6 <dir_sdi+0x36>
		return FR_INT_ERR;
 800b0d2:	2302      	movs	r3, #2
 800b0d4:	e074      	b.n	800b1c0 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d10c      	bne.n	800b0f6 <dir_sdi+0x56>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b0e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b0e6:	2b03      	cmp	r3, #3
 800b0e8:	d105      	bne.n	800b0f6 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b0f0:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800b0f4:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d111      	bne.n	800b120 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b102:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b106:	461a      	mov	r2, r3
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d301      	bcc.n	800b112 <dir_sdi+0x72>
			return FR_INT_ERR;
 800b10e:	2302      	movs	r3, #2
 800b110:	e056      	b.n	800b1c0 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b118:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800b11c:	613b      	str	r3, [r7, #16]
 800b11e:	e032      	b.n	800b186 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b126:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b12a:	011b      	lsls	r3, r3, #4
 800b12c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800b12e:	e01e      	b.n	800b16e <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b136:	6979      	ldr	r1, [r7, #20]
 800b138:	4618      	mov	r0, r3
 800b13a:	f7ff fcbe 	bl	800aaba <get_fat>
 800b13e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b146:	d101      	bne.n	800b14c <dir_sdi+0xac>
 800b148:	2301      	movs	r3, #1
 800b14a:	e039      	b.n	800b1c0 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d907      	bls.n	800b162 <dir_sdi+0xc2>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b158:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b15c:	697a      	ldr	r2, [r7, #20]
 800b15e:	429a      	cmp	r2, r3
 800b160:	d301      	bcc.n	800b166 <dir_sdi+0xc6>
				return FR_INT_ERR;
 800b162:	2302      	movs	r3, #2
 800b164:	e02c      	b.n	800b1c0 <dir_sdi+0x120>
			idx -= ic;
 800b166:	683a      	ldr	r2, [r7, #0]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	1ad3      	subs	r3, r2, r3
 800b16c:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800b16e:	683a      	ldr	r2, [r7, #0]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	429a      	cmp	r2, r3
 800b174:	d2dc      	bcs.n	800b130 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b17c:	6979      	ldr	r1, [r7, #20]
 800b17e:	4618      	mov	r0, r3
 800b180:	f7ff fc7a 	bl	800aa78 <clust2sect>
 800b184:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	697a      	ldr	r2, [r7, #20]
 800b18a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d101      	bne.n	800b198 <dir_sdi+0xf8>
 800b194:	2302      	movs	r3, #2
 800b196:	e013      	b.n	800b1c0 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	091a      	lsrs	r2, r3, #4
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	441a      	add	r2, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	f003 030f 	and.w	r3, r3, #15
 800b1b4:	015b      	lsls	r3, r3, #5
 800b1b6:	441a      	add	r2, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800b1be:	2300      	movs	r3, #0
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3718      	adds	r7, #24
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b1c8:	b590      	push	{r4, r7, lr}
 800b1ca:	b087      	sub	sp, #28
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800b1d8:	3301      	adds	r3, #1
 800b1da:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d004      	beq.n	800b1ee <dir_next+0x26>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d101      	bne.n	800b1f2 <dir_next+0x2a>
		return FR_NO_FILE;
 800b1ee:	2304      	movs	r3, #4
 800b1f0:	e0dd      	b.n	800b3ae <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f003 030f 	and.w	r3, r3, #15
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f040 80c6 	bne.w	800b38a <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b204:	1c5a      	adds	r2, r3, #1
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b212:	2b00      	cmp	r3, #0
 800b214:	d10b      	bne.n	800b22e <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b21c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b220:	461a      	mov	r2, r3
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	4293      	cmp	r3, r2
 800b226:	f0c0 80b0 	bcc.w	800b38a <dir_next+0x1c2>
				return FR_NO_FILE;
 800b22a:	2304      	movs	r3, #4
 800b22c:	e0bf      	b.n	800b3ae <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	091b      	lsrs	r3, r3, #4
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800b238:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800b23c:	3a01      	subs	r2, #1
 800b23e:	4013      	ands	r3, r2
 800b240:	2b00      	cmp	r3, #0
 800b242:	f040 80a2 	bne.w	800b38a <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b252:	4619      	mov	r1, r3
 800b254:	4610      	mov	r0, r2
 800b256:	f7ff fc30 	bl	800aaba <get_fat>
 800b25a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d801      	bhi.n	800b266 <dir_next+0x9e>
 800b262:	2302      	movs	r3, #2
 800b264:	e0a3      	b.n	800b3ae <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b26c:	d101      	bne.n	800b272 <dir_next+0xaa>
 800b26e:	2301      	movs	r3, #1
 800b270:	e09d      	b.n	800b3ae <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b278:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b27c:	697a      	ldr	r2, [r7, #20]
 800b27e:	429a      	cmp	r2, r3
 800b280:	d374      	bcc.n	800b36c <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d101      	bne.n	800b28c <dir_next+0xc4>
 800b288:	2304      	movs	r3, #4
 800b28a:	e090      	b.n	800b3ae <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b298:	4619      	mov	r1, r3
 800b29a:	4610      	mov	r0, r2
 800b29c:	f7ff fe2f 	bl	800aefe <create_chain>
 800b2a0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d101      	bne.n	800b2ac <dir_next+0xe4>
 800b2a8:	2307      	movs	r3, #7
 800b2aa:	e080      	b.n	800b3ae <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d101      	bne.n	800b2b6 <dir_next+0xee>
 800b2b2:	2302      	movs	r3, #2
 800b2b4:	e07b      	b.n	800b3ae <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2bc:	d101      	bne.n	800b2c2 <dir_next+0xfa>
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e075      	b.n	800b3ae <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7ff fab1 	bl	800a830 <sync_window>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d001      	beq.n	800b2d8 <dir_next+0x110>
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	e06a      	b.n	800b3ae <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b2de:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b2e2:	2100      	movs	r1, #0
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7ff f867 	bl	800a3b8 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800b2f6:	6979      	ldr	r1, [r7, #20]
 800b2f8:	4610      	mov	r0, r2
 800b2fa:	f7ff fbbd 	bl	800aa78 <clust2sect>
 800b2fe:	4603      	mov	r3, r0
 800b300:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800b304:	2300      	movs	r3, #0
 800b306:	613b      	str	r3, [r7, #16]
 800b308:	e01b      	b.n	800b342 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b310:	2201      	movs	r2, #1
 800b312:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7ff fa87 	bl	800a830 <sync_window>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d001      	beq.n	800b32c <dir_next+0x164>
 800b328:	2301      	movs	r3, #1
 800b32a:	e040      	b.n	800b3ae <dir_next+0x1e6>
						dp->fs->winsect++;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b332:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 800b336:	3201      	adds	r2, #1
 800b338:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	3301      	adds	r3, #1
 800b340:	613b      	str	r3, [r7, #16]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b348:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b34c:	461a      	mov	r2, r3
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	4293      	cmp	r3, r2
 800b352:	d3da      	bcc.n	800b30a <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b35a:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b364:	693a      	ldr	r2, [r7, #16]
 800b366:	1a8a      	subs	r2, r1, r2
 800b368:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	697a      	ldr	r2, [r7, #20]
 800b370:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b37a:	6979      	ldr	r1, [r7, #20]
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7ff fb7b 	bl	800aa78 <clust2sect>
 800b382:	4602      	mov	r2, r0
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b39a:	461a      	mov	r2, r3
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f003 030f 	and.w	r3, r3, #15
 800b3a2:	015b      	lsls	r3, r3, #5
 800b3a4:	441a      	add	r2, r3
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800b3ac:	2300      	movs	r3, #0
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	371c      	adds	r7, #28
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd90      	pop	{r4, r7, pc}

0800b3b6 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b084      	sub	sp, #16
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
 800b3be:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800b3c0:	2100      	movs	r1, #0
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f7ff fe6c 	bl	800b0a0 <dir_sdi>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b3cc:	7bfb      	ldrb	r3, [r7, #15]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d131      	bne.n	800b436 <dir_alloc+0x80>
		n = 0;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	4610      	mov	r0, r2
 800b3e6:	f7ff fa6c 	bl	800a8c2 <move_window>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800b3ee:	7bfb      	ldrb	r3, [r7, #15]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d11f      	bne.n	800b434 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	2be5      	cmp	r3, #229	; 0xe5
 800b3fe:	d005      	beq.n	800b40c <dir_alloc+0x56>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d107      	bne.n	800b41c <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	3301      	adds	r3, #1
 800b410:	60bb      	str	r3, [r7, #8]
 800b412:	68ba      	ldr	r2, [r7, #8]
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	429a      	cmp	r2, r3
 800b418:	d102      	bne.n	800b420 <dir_alloc+0x6a>
 800b41a:	e00c      	b.n	800b436 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b41c:	2300      	movs	r3, #0
 800b41e:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800b420:	2101      	movs	r1, #1
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f7ff fed0 	bl	800b1c8 <dir_next>
 800b428:	4603      	mov	r3, r0
 800b42a:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800b42c:	7bfb      	ldrb	r3, [r7, #15]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d0d1      	beq.n	800b3d6 <dir_alloc+0x20>
 800b432:	e000      	b.n	800b436 <dir_alloc+0x80>
			if (res != FR_OK) break;
 800b434:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b436:	7bfb      	ldrb	r3, [r7, #15]
 800b438:	2b04      	cmp	r3, #4
 800b43a:	d101      	bne.n	800b440 <dir_alloc+0x8a>
 800b43c:	2307      	movs	r3, #7
 800b43e:	73fb      	strb	r3, [r7, #15]
	return res;
 800b440:	7bfb      	ldrb	r3, [r7, #15]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800b44a:	b480      	push	{r7}
 800b44c:	b085      	sub	sp, #20
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
 800b452:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	331b      	adds	r3, #27
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	021b      	lsls	r3, r3, #8
 800b45c:	b21a      	sxth	r2, r3
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	331a      	adds	r3, #26
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	b21b      	sxth	r3, r3
 800b466:	4313      	orrs	r3, r2
 800b468:	b21b      	sxth	r3, r3
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b474:	2b03      	cmp	r3, #3
 800b476:	d10f      	bne.n	800b498 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	3315      	adds	r3, #21
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	021b      	lsls	r3, r3, #8
 800b480:	b21a      	sxth	r2, r3
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	3314      	adds	r3, #20
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	b21b      	sxth	r3, r3
 800b48a:	4313      	orrs	r3, r2
 800b48c:	b21b      	sxth	r3, r3
 800b48e:	b29b      	uxth	r3, r3
 800b490:	041b      	lsls	r3, r3, #16
 800b492:	68fa      	ldr	r2, [r7, #12]
 800b494:	4313      	orrs	r3, r2
 800b496:	60fb      	str	r3, [r7, #12]

	return cl;
 800b498:	68fb      	ldr	r3, [r7, #12]
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3714      	adds	r7, #20
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bc80      	pop	{r7}
 800b4a2:	4770      	bx	lr

0800b4a4 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	331a      	adds	r3, #26
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	b2d2      	uxtb	r2, r2
 800b4b6:	701a      	strb	r2, [r3, #0]
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	0a1b      	lsrs	r3, r3, #8
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	331b      	adds	r3, #27
 800b4c4:	b2d2      	uxtb	r2, r2
 800b4c6:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	0c1a      	lsrs	r2, r3, #16
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	3314      	adds	r3, #20
 800b4d0:	b2d2      	uxtb	r2, r2
 800b4d2:	701a      	strb	r2, [r3, #0]
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	0c1b      	lsrs	r3, r3, #16
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	0a1b      	lsrs	r3, r3, #8
 800b4dc:	b29a      	uxth	r2, r3
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	3315      	adds	r3, #21
 800b4e2:	b2d2      	uxtb	r2, r2
 800b4e4:	701a      	strb	r2, [r3, #0]
}
 800b4e6:	bf00      	nop
 800b4e8:	370c      	adds	r7, #12
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bc80      	pop	{r7}
 800b4ee:	4770      	bx	lr

0800b4f0 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b086      	sub	sp, #24
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b502:	1e5a      	subs	r2, r3, #1
 800b504:	4613      	mov	r3, r2
 800b506:	005b      	lsls	r3, r3, #1
 800b508:	4413      	add	r3, r2
 800b50a:	009b      	lsls	r3, r3, #2
 800b50c:	4413      	add	r3, r2
 800b50e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800b510:	2300      	movs	r3, #0
 800b512:	613b      	str	r3, [r7, #16]
 800b514:	2301      	movs	r3, #1
 800b516:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800b518:	4a2b      	ldr	r2, [pc, #172]	; (800b5c8 <cmp_lfn+0xd8>)
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	4413      	add	r3, r2
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	3301      	adds	r3, #1
 800b522:	683a      	ldr	r2, [r7, #0]
 800b524:	4413      	add	r3, r2
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	021b      	lsls	r3, r3, #8
 800b52a:	b21a      	sxth	r2, r3
 800b52c:	4926      	ldr	r1, [pc, #152]	; (800b5c8 <cmp_lfn+0xd8>)
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	440b      	add	r3, r1
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	4619      	mov	r1, r3
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	440b      	add	r3, r1
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	b21b      	sxth	r3, r3
 800b53e:	4313      	orrs	r3, r2
 800b540:	b21b      	sxth	r3, r3
 800b542:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800b544:	89fb      	ldrh	r3, [r7, #14]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d019      	beq.n	800b57e <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800b54a:	89bb      	ldrh	r3, [r7, #12]
 800b54c:	4618      	mov	r0, r3
 800b54e:	f002 fdb5 	bl	800e0bc <ff_wtoupper>
 800b552:	4603      	mov	r3, r0
 800b554:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	2bfe      	cmp	r3, #254	; 0xfe
 800b55a:	d80e      	bhi.n	800b57a <cmp_lfn+0x8a>
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	1c5a      	adds	r2, r3, #1
 800b560:	617a      	str	r2, [r7, #20]
 800b562:	005b      	lsls	r3, r3, #1
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	4413      	add	r3, r2
 800b568:	881b      	ldrh	r3, [r3, #0]
 800b56a:	4618      	mov	r0, r3
 800b56c:	f002 fda6 	bl	800e0bc <ff_wtoupper>
 800b570:	4603      	mov	r3, r0
 800b572:	461a      	mov	r2, r3
 800b574:	89fb      	ldrh	r3, [r7, #14]
 800b576:	4293      	cmp	r3, r2
 800b578:	d008      	beq.n	800b58c <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800b57a:	2300      	movs	r3, #0
 800b57c:	e01f      	b.n	800b5be <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800b57e:	89bb      	ldrh	r3, [r7, #12]
 800b580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b584:	4293      	cmp	r3, r2
 800b586:	d001      	beq.n	800b58c <cmp_lfn+0x9c>
 800b588:	2300      	movs	r3, #0
 800b58a:	e018      	b.n	800b5be <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	3301      	adds	r3, #1
 800b590:	613b      	str	r3, [r7, #16]
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	2b0c      	cmp	r3, #12
 800b596:	d9bf      	bls.n	800b518 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d00b      	beq.n	800b5bc <cmp_lfn+0xcc>
 800b5a4:	89fb      	ldrh	r3, [r7, #14]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d008      	beq.n	800b5bc <cmp_lfn+0xcc>
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	005b      	lsls	r3, r3, #1
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	4413      	add	r3, r2
 800b5b2:	881b      	ldrh	r3, [r3, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d001      	beq.n	800b5bc <cmp_lfn+0xcc>
		return 0;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	e000      	b.n	800b5be <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800b5bc:	2301      	movs	r3, #1
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3718      	adds	r7, #24
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	08015cd0 	.word	0x08015cd0

0800b5cc <pick_lfn>:
static
int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
	BYTE* dir			/* Pointer to the directory entry */
)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b087      	sub	sp, #28
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5de:	1e5a      	subs	r2, r3, #1
 800b5e0:	4613      	mov	r3, r2
 800b5e2:	005b      	lsls	r3, r3, #1
 800b5e4:	4413      	add	r3, r2
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	4413      	add	r3, r2
 800b5ea:	617b      	str	r3, [r7, #20]

	s = 0; wc = 1;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	613b      	str	r3, [r7, #16]
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
 800b5f4:	4a26      	ldr	r2, [pc, #152]	; (800b690 <pick_lfn+0xc4>)
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	683a      	ldr	r2, [r7, #0]
 800b600:	4413      	add	r3, r2
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	021b      	lsls	r3, r3, #8
 800b606:	b21a      	sxth	r2, r3
 800b608:	4921      	ldr	r1, [pc, #132]	; (800b690 <pick_lfn+0xc4>)
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	440b      	add	r3, r1
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	4619      	mov	r1, r3
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	440b      	add	r3, r1
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	b21b      	sxth	r3, r3
 800b61a:	4313      	orrs	r3, r2
 800b61c:	b21b      	sxth	r3, r3
 800b61e:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800b620:	89fb      	ldrh	r3, [r7, #14]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00f      	beq.n	800b646 <pick_lfn+0x7a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	2bfe      	cmp	r3, #254	; 0xfe
 800b62a:	d901      	bls.n	800b630 <pick_lfn+0x64>
 800b62c:	2300      	movs	r3, #0
 800b62e:	e029      	b.n	800b684 <pick_lfn+0xb8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b630:	89bb      	ldrh	r3, [r7, #12]
 800b632:	81fb      	strh	r3, [r7, #14]
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	1c5a      	adds	r2, r3, #1
 800b638:	617a      	str	r2, [r7, #20]
 800b63a:	005b      	lsls	r3, r3, #1
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	4413      	add	r3, r2
 800b640:	89fa      	ldrh	r2, [r7, #14]
 800b642:	801a      	strh	r2, [r3, #0]
 800b644:	e006      	b.n	800b654 <pick_lfn+0x88>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b646:	89bb      	ldrh	r3, [r7, #12]
 800b648:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d001      	beq.n	800b654 <pick_lfn+0x88>
 800b650:	2300      	movs	r3, #0
 800b652:	e017      	b.n	800b684 <pick_lfn+0xb8>
		}
	} while (++s < 13);						/* Read all character in the entry */
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	3301      	adds	r3, #1
 800b658:	613b      	str	r3, [r7, #16]
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	2b0c      	cmp	r3, #12
 800b65e:	d9c9      	bls.n	800b5f4 <pick_lfn+0x28>

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d00a      	beq.n	800b682 <pick_lfn+0xb6>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	2bfe      	cmp	r3, #254	; 0xfe
 800b670:	d901      	bls.n	800b676 <pick_lfn+0xaa>
 800b672:	2300      	movs	r3, #0
 800b674:	e006      	b.n	800b684 <pick_lfn+0xb8>
		lfnbuf[i] = 0;
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	005b      	lsls	r3, r3, #1
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	4413      	add	r3, r2
 800b67e:	2200      	movs	r2, #0
 800b680:	801a      	strh	r2, [r3, #0]
	}

	return 1;
 800b682:	2301      	movs	r3, #1
}
 800b684:	4618      	mov	r0, r3
 800b686:	371c      	adds	r7, #28
 800b688:	46bd      	mov	sp, r7
 800b68a:	bc80      	pop	{r7}
 800b68c:	4770      	bx	lr
 800b68e:	bf00      	nop
 800b690:	08015cd0 	.word	0x08015cd0

0800b694 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800b694:	b480      	push	{r7}
 800b696:	b089      	sub	sp, #36	; 0x24
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	4611      	mov	r1, r2
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	71fb      	strb	r3, [r7, #7]
 800b6a6:	4613      	mov	r3, r2
 800b6a8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	330d      	adds	r3, #13
 800b6ae:	79ba      	ldrb	r2, [r7, #6]
 800b6b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	330b      	adds	r3, #11
 800b6b6:	220f      	movs	r2, #15
 800b6b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	330c      	adds	r3, #12
 800b6be:	2200      	movs	r2, #0
 800b6c0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	331a      	adds	r3, #26
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	701a      	strb	r2, [r3, #0]
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	331b      	adds	r3, #27
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800b6d2:	79fb      	ldrb	r3, [r7, #7]
 800b6d4:	1e5a      	subs	r2, r3, #1
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	005b      	lsls	r3, r3, #1
 800b6da:	4413      	add	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	4413      	add	r3, r2
 800b6e0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	82fb      	strh	r3, [r7, #22]
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800b6ea:	8afb      	ldrh	r3, [r7, #22]
 800b6ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d007      	beq.n	800b704 <fit_lfn+0x70>
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	1c5a      	adds	r2, r3, #1
 800b6f8:	61fa      	str	r2, [r7, #28]
 800b6fa:	005b      	lsls	r3, r3, #1
 800b6fc:	68fa      	ldr	r2, [r7, #12]
 800b6fe:	4413      	add	r3, r2
 800b700:	881b      	ldrh	r3, [r3, #0]
 800b702:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800b704:	4a1c      	ldr	r2, [pc, #112]	; (800b778 <fit_lfn+0xe4>)
 800b706:	69bb      	ldr	r3, [r7, #24]
 800b708:	4413      	add	r3, r2
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	461a      	mov	r2, r3
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	4413      	add	r3, r2
 800b712:	8afa      	ldrh	r2, [r7, #22]
 800b714:	b2d2      	uxtb	r2, r2
 800b716:	701a      	strb	r2, [r3, #0]
 800b718:	8afb      	ldrh	r3, [r7, #22]
 800b71a:	0a1b      	lsrs	r3, r3, #8
 800b71c:	b299      	uxth	r1, r3
 800b71e:	4a16      	ldr	r2, [pc, #88]	; (800b778 <fit_lfn+0xe4>)
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	4413      	add	r3, r2
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	3301      	adds	r3, #1
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	4413      	add	r3, r2
 800b72c:	b2ca      	uxtb	r2, r1
 800b72e:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800b730:	8afb      	ldrh	r3, [r7, #22]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d102      	bne.n	800b73c <fit_lfn+0xa8>
 800b736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b73a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b73c:	69bb      	ldr	r3, [r7, #24]
 800b73e:	3301      	adds	r3, #1
 800b740:	61bb      	str	r3, [r7, #24]
 800b742:	69bb      	ldr	r3, [r7, #24]
 800b744:	2b0c      	cmp	r3, #12
 800b746:	d9d0      	bls.n	800b6ea <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800b748:	8afb      	ldrh	r3, [r7, #22]
 800b74a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b74e:	4293      	cmp	r3, r2
 800b750:	d006      	beq.n	800b760 <fit_lfn+0xcc>
 800b752:	69fb      	ldr	r3, [r7, #28]
 800b754:	005b      	lsls	r3, r3, #1
 800b756:	68fa      	ldr	r2, [r7, #12]
 800b758:	4413      	add	r3, r2
 800b75a:	881b      	ldrh	r3, [r3, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d103      	bne.n	800b768 <fit_lfn+0xd4>
 800b760:	79fb      	ldrb	r3, [r7, #7]
 800b762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b766:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	79fa      	ldrb	r2, [r7, #7]
 800b76c:	701a      	strb	r2, [r3, #0]
}
 800b76e:	bf00      	nop
 800b770:	3724      	adds	r7, #36	; 0x24
 800b772:	46bd      	mov	sp, r7
 800b774:	bc80      	pop	{r7}
 800b776:	4770      	bx	lr
 800b778:	08015cd0 	.word	0x08015cd0

0800b77c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b08c      	sub	sp, #48	; 0x30
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	607a      	str	r2, [r7, #4]
 800b788:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b78a:	220b      	movs	r2, #11
 800b78c:	68b9      	ldr	r1, [r7, #8]
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	f7fe fdf4 	bl	800a37c <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	2b05      	cmp	r3, #5
 800b798:	d92b      	bls.n	800b7f2 <gen_numname+0x76>
		sr = seq;
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b79e:	e022      	b.n	800b7e6 <gen_numname+0x6a>
			wc = *lfn++;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	1c9a      	adds	r2, r3, #2
 800b7a4:	607a      	str	r2, [r7, #4]
 800b7a6:	881b      	ldrh	r3, [r3, #0]
 800b7a8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7ae:	e017      	b.n	800b7e0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	005a      	lsls	r2, r3, #1
 800b7b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b7b6:	f003 0301 	and.w	r3, r3, #1
 800b7ba:	4413      	add	r3, r2
 800b7bc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b7be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b7c0:	085b      	lsrs	r3, r3, #1
 800b7c2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b7c4:	69fb      	ldr	r3, [r7, #28]
 800b7c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d005      	beq.n	800b7da <gen_numname+0x5e>
 800b7ce:	69fb      	ldr	r3, [r7, #28]
 800b7d0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800b7d4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800b7d8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7dc:	3301      	adds	r3, #1
 800b7de:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e2:	2b0f      	cmp	r3, #15
 800b7e4:	d9e4      	bls.n	800b7b0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	881b      	ldrh	r3, [r3, #0]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d1d8      	bne.n	800b7a0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b7ee:	69fb      	ldr	r3, [r7, #28]
 800b7f0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b7f2:	2307      	movs	r3, #7
 800b7f4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	b2db      	uxtb	r3, r3
 800b7fa:	f003 030f 	and.w	r3, r3, #15
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	3330      	adds	r3, #48	; 0x30
 800b802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b806:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b80a:	2b39      	cmp	r3, #57	; 0x39
 800b80c:	d904      	bls.n	800b818 <gen_numname+0x9c>
 800b80e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b812:	3307      	adds	r3, #7
 800b814:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800b818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81a:	1e5a      	subs	r2, r3, #1
 800b81c:	62ba      	str	r2, [r7, #40]	; 0x28
 800b81e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b822:	4413      	add	r3, r2
 800b824:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b828:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	091b      	lsrs	r3, r3, #4
 800b830:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d1de      	bne.n	800b7f6 <gen_numname+0x7a>
	ns[i] = '~';
 800b838:	f107 0214 	add.w	r2, r7, #20
 800b83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83e:	4413      	add	r3, r2
 800b840:	227e      	movs	r2, #126	; 0x7e
 800b842:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b844:	2300      	movs	r3, #0
 800b846:	627b      	str	r3, [r7, #36]	; 0x24
 800b848:	e016      	b.n	800b878 <gen_numname+0xfc>
		if (IsDBCS1(dst[j])) {
 800b84a:	68fa      	ldr	r2, [r7, #12]
 800b84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84e:	4413      	add	r3, r2
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	2b80      	cmp	r3, #128	; 0x80
 800b854:	d90d      	bls.n	800b872 <gen_numname+0xf6>
 800b856:	68fa      	ldr	r2, [r7, #12]
 800b858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85a:	4413      	add	r3, r2
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	2bff      	cmp	r3, #255	; 0xff
 800b860:	d007      	beq.n	800b872 <gen_numname+0xf6>
			if (j == i - 1) break;
 800b862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b864:	3b01      	subs	r3, #1
 800b866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b868:	429a      	cmp	r2, r3
 800b86a:	d010      	beq.n	800b88e <gen_numname+0x112>
			j++;
 800b86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86e:	3301      	adds	r3, #1
 800b870:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b874:	3301      	adds	r3, #1
 800b876:	627b      	str	r3, [r7, #36]	; 0x24
 800b878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d207      	bcs.n	800b890 <gen_numname+0x114>
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b884:	4413      	add	r3, r2
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	2b20      	cmp	r3, #32
 800b88a:	d1de      	bne.n	800b84a <gen_numname+0xce>
 800b88c:	e000      	b.n	800b890 <gen_numname+0x114>
			if (j == i - 1) break;
 800b88e:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b892:	2b07      	cmp	r3, #7
 800b894:	d808      	bhi.n	800b8a8 <gen_numname+0x12c>
 800b896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b898:	1c5a      	adds	r2, r3, #1
 800b89a:	62ba      	str	r2, [r7, #40]	; 0x28
 800b89c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b8a0:	4413      	add	r3, r2
 800b8a2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b8a6:	e000      	b.n	800b8aa <gen_numname+0x12e>
 800b8a8:	2120      	movs	r1, #32
 800b8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ac:	1c5a      	adds	r2, r3, #1
 800b8ae:	627a      	str	r2, [r7, #36]	; 0x24
 800b8b0:	68fa      	ldr	r2, [r7, #12]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	460a      	mov	r2, r1
 800b8b6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ba:	2b07      	cmp	r3, #7
 800b8bc:	d9e8      	bls.n	800b890 <gen_numname+0x114>
}
 800b8be:	bf00      	nop
 800b8c0:	bf00      	nop
 800b8c2:	3730      	adds	r7, #48	; 0x30
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b8d4:	230b      	movs	r3, #11
 800b8d6:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800b8d8:	7bfb      	ldrb	r3, [r7, #15]
 800b8da:	b2da      	uxtb	r2, r3
 800b8dc:	0852      	lsrs	r2, r2, #1
 800b8de:	01db      	lsls	r3, r3, #7
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	b2da      	uxtb	r2, r3
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	1c59      	adds	r1, r3, #1
 800b8e8:	6079      	str	r1, [r7, #4]
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	73fb      	strb	r3, [r7, #15]
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	3b01      	subs	r3, #1
 800b8f4:	60bb      	str	r3, [r7, #8]
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d1ed      	bne.n	800b8d8 <sum_sfn+0x10>
	return sum;
 800b8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3714      	adds	r7, #20
 800b902:	46bd      	mov	sp, r7
 800b904:	bc80      	pop	{r7}
 800b906:	4770      	bx	lr

0800b908 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b086      	sub	sp, #24
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b910:	2100      	movs	r1, #0
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f7ff fbc4 	bl	800b0a0 <dir_sdi>
 800b918:	4603      	mov	r3, r0
 800b91a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b91c:	7dfb      	ldrb	r3, [r7, #23]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d001      	beq.n	800b926 <dir_find+0x1e>
 800b922:	7dfb      	ldrb	r3, [r7, #23]
 800b924:	e0ac      	b.n	800ba80 <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800b926:	23ff      	movs	r3, #255	; 0xff
 800b928:	753b      	strb	r3, [r7, #20]
 800b92a:	7d3b      	ldrb	r3, [r7, #20]
 800b92c:	757b      	strb	r3, [r7, #21]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b934:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b944:	4619      	mov	r1, r3
 800b946:	4610      	mov	r0, r2
 800b948:	f7fe ffbb 	bl	800a8c2 <move_window>
 800b94c:	4603      	mov	r3, r0
 800b94e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b950:	7dfb      	ldrb	r3, [r7, #23]
 800b952:	2b00      	cmp	r3, #0
 800b954:	f040 808e 	bne.w	800ba74 <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b95e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b966:	7dbb      	ldrb	r3, [r7, #22]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d102      	bne.n	800b972 <dir_find+0x6a>
 800b96c:	2304      	movs	r3, #4
 800b96e:	75fb      	strb	r3, [r7, #23]
 800b970:	e085      	b.n	800ba7e <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	330b      	adds	r3, #11
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b97c:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b97e:	7dbb      	ldrb	r3, [r7, #22]
 800b980:	2be5      	cmp	r3, #229	; 0xe5
 800b982:	d007      	beq.n	800b994 <dir_find+0x8c>
 800b984:	7bfb      	ldrb	r3, [r7, #15]
 800b986:	f003 0308 	and.w	r3, r3, #8
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d00a      	beq.n	800b9a4 <dir_find+0x9c>
 800b98e:	7bfb      	ldrb	r3, [r7, #15]
 800b990:	2b0f      	cmp	r3, #15
 800b992:	d007      	beq.n	800b9a4 <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800b994:	23ff      	movs	r3, #255	; 0xff
 800b996:	757b      	strb	r3, [r7, #21]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b99e:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
 800b9a2:	e05c      	b.n	800ba5e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b9a4:	7bfb      	ldrb	r3, [r7, #15]
 800b9a6:	2b0f      	cmp	r3, #15
 800b9a8:	d133      	bne.n	800ba12 <dir_find+0x10a>
				if (dp->lfn) {
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d054      	beq.n	800ba5e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b9b4:	7dbb      	ldrb	r3, [r7, #22]
 800b9b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d00e      	beq.n	800b9dc <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	7b5b      	ldrb	r3, [r3, #13]
 800b9c2:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800b9c4:	7dbb      	ldrb	r3, [r7, #22]
 800b9c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9ca:	75bb      	strb	r3, [r7, #22]
 800b9cc:	7dbb      	ldrb	r3, [r7, #22]
 800b9ce:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800b9dc:	7dba      	ldrb	r2, [r7, #22]
 800b9de:	7d7b      	ldrb	r3, [r7, #21]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d113      	bne.n	800ba0c <dir_find+0x104>
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	330d      	adds	r3, #13
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	7d3a      	ldrb	r2, [r7, #20]
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d10d      	bne.n	800ba0c <dir_find+0x104>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800b9f6:	6939      	ldr	r1, [r7, #16]
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7ff fd79 	bl	800b4f0 <cmp_lfn>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d003      	beq.n	800ba0c <dir_find+0x104>
 800ba04:	7d7b      	ldrb	r3, [r7, #21]
 800ba06:	3b01      	subs	r3, #1
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	e000      	b.n	800ba0e <dir_find+0x106>
 800ba0c:	23ff      	movs	r3, #255	; 0xff
 800ba0e:	757b      	strb	r3, [r7, #21]
 800ba10:	e025      	b.n	800ba5e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800ba12:	7d7b      	ldrb	r3, [r7, #21]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d107      	bne.n	800ba28 <dir_find+0x120>
 800ba18:	6938      	ldr	r0, [r7, #16]
 800ba1a:	f7ff ff55 	bl	800b8c8 <sum_sfn>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	461a      	mov	r2, r3
 800ba22:	7d3b      	ldrb	r3, [r7, #20]
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d027      	beq.n	800ba78 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ba2e:	330b      	adds	r3, #11
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	f003 0301 	and.w	r3, r3, #1
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d10a      	bne.n	800ba50 <dir_find+0x148>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ba40:	220b      	movs	r2, #11
 800ba42:	4619      	mov	r1, r3
 800ba44:	6938      	ldr	r0, [r7, #16]
 800ba46:	f7fe fcd1 	bl	800a3ec <mem_cmp>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d015      	beq.n	800ba7c <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800ba50:	23ff      	movs	r3, #255	; 0xff
 800ba52:	757b      	strb	r3, [r7, #21]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba5a:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800ba5e:	2100      	movs	r1, #0
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f7ff fbb1 	bl	800b1c8 <dir_next>
 800ba66:	4603      	mov	r3, r0
 800ba68:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ba6a:	7dfb      	ldrb	r3, [r7, #23]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f43f af63 	beq.w	800b938 <dir_find+0x30>
 800ba72:	e004      	b.n	800ba7e <dir_find+0x176>
		if (res != FR_OK) break;
 800ba74:	bf00      	nop
 800ba76:	e002      	b.n	800ba7e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800ba78:	bf00      	nop
 800ba7a:	e000      	b.n	800ba7e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800ba7c:	bf00      	nop

	return res;
 800ba7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3718      	adds	r7, #24
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b086      	sub	sp, #24
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 800ba92:	23ff      	movs	r3, #255	; 0xff
 800ba94:	757b      	strb	r3, [r7, #21]
 800ba96:	23ff      	movs	r3, #255	; 0xff
 800ba98:	753b      	strb	r3, [r7, #20]
#endif

	res = FR_NO_FILE;
 800ba9a:	2304      	movs	r3, #4
 800ba9c:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 800ba9e:	e082      	b.n	800bba6 <dir_read+0x11e>
		res = move_window(dp->fs, dp->sect);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800baac:	4619      	mov	r1, r3
 800baae:	4610      	mov	r0, r2
 800bab0:	f7fe ff07 	bl	800a8c2 <move_window>
 800bab4:	4603      	mov	r3, r0
 800bab6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bab8:	7dfb      	ldrb	r3, [r7, #23]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d17a      	bne.n	800bbb4 <dir_read+0x12c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bac4:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bacc:	7dbb      	ldrb	r3, [r7, #22]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d102      	bne.n	800bad8 <dir_read+0x50>
 800bad2:	2304      	movs	r3, #4
 800bad4:	75fb      	strb	r3, [r7, #23]
 800bad6:	e072      	b.n	800bbbe <dir_read+0x136>
		a = dir[DIR_Attr] & AM_MASK;
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	330b      	adds	r3, #11
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bae2:	73fb      	strb	r3, [r7, #15]
#if _USE_LFN	/* LFN configuration */
		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800bae4:	7dbb      	ldrb	r3, [r7, #22]
 800bae6:	2be5      	cmp	r3, #229	; 0xe5
 800bae8:	d00e      	beq.n	800bb08 <dir_read+0x80>
 800baea:	7dbb      	ldrb	r3, [r7, #22]
 800baec:	2b2e      	cmp	r3, #46	; 0x2e
 800baee:	d00b      	beq.n	800bb08 <dir_read+0x80>
 800baf0:	7bfb      	ldrb	r3, [r7, #15]
 800baf2:	f023 0320 	bic.w	r3, r3, #32
 800baf6:	2b08      	cmp	r3, #8
 800baf8:	bf0c      	ite	eq
 800bafa:	2301      	moveq	r3, #1
 800bafc:	2300      	movne	r3, #0
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	461a      	mov	r2, r3
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d002      	beq.n	800bb0e <dir_read+0x86>
			ord = 0xFF;
 800bb08:	23ff      	movs	r3, #255	; 0xff
 800bb0a:	757b      	strb	r3, [r7, #21]
 800bb0c:	e042      	b.n	800bb94 <dir_read+0x10c>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bb0e:	7bfb      	ldrb	r3, [r7, #15]
 800bb10:	2b0f      	cmp	r3, #15
 800bb12:	d12e      	bne.n	800bb72 <dir_read+0xea>
				if (c & LLEF) {			/* Is it start of LFN sequence? */
 800bb14:	7dbb      	ldrb	r3, [r7, #22]
 800bb16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00e      	beq.n	800bb3c <dir_read+0xb4>
					sum = dir[LDIR_Chksum];
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	7b5b      	ldrb	r3, [r3, #13]
 800bb22:	753b      	strb	r3, [r7, #20]
					c &= ~LLEF; ord = c;
 800bb24:	7dbb      	ldrb	r3, [r7, #22]
 800bb26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb2a:	75bb      	strb	r3, [r7, #22]
 800bb2c:	7dbb      	ldrb	r3, [r7, #22]
 800bb2e:	757b      	strb	r3, [r7, #21]
					dp->lfn_idx = dp->index;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800bb3c:	7dba      	ldrb	r2, [r7, #22]
 800bb3e:	7d7b      	ldrb	r3, [r7, #21]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d113      	bne.n	800bb6c <dir_read+0xe4>
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	330d      	adds	r3, #13
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	7d3a      	ldrb	r2, [r7, #20]
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d10d      	bne.n	800bb6c <dir_read+0xe4>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800bb56:	6939      	ldr	r1, [r7, #16]
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f7ff fd37 	bl	800b5cc <pick_lfn>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d003      	beq.n	800bb6c <dir_read+0xe4>
 800bb64:	7d7b      	ldrb	r3, [r7, #21]
 800bb66:	3b01      	subs	r3, #1
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	e000      	b.n	800bb6e <dir_read+0xe6>
 800bb6c:	23ff      	movs	r3, #255	; 0xff
 800bb6e:	757b      	strb	r3, [r7, #21]
 800bb70:	e010      	b.n	800bb94 <dir_read+0x10c>
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
 800bb72:	7d7b      	ldrb	r3, [r7, #21]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d107      	bne.n	800bb88 <dir_read+0x100>
 800bb78:	6938      	ldr	r0, [r7, #16]
 800bb7a:	f7ff fea5 	bl	800b8c8 <sum_sfn>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	461a      	mov	r2, r3
 800bb82:	7d3b      	ldrb	r3, [r7, #20]
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d017      	beq.n	800bbb8 <dir_read+0x130>
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb8e:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
				break;
 800bb92:	e011      	b.n	800bbb8 <dir_read+0x130>
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 800bb94:	2100      	movs	r1, #0
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f7ff fb16 	bl	800b1c8 <dir_next>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bba0:	7dfb      	ldrb	r3, [r7, #23]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d10a      	bne.n	800bbbc <dir_read+0x134>
	while (dp->sect) {
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	f47f af77 	bne.w	800baa0 <dir_read+0x18>
 800bbb2:	e004      	b.n	800bbbe <dir_read+0x136>
		if (res != FR_OK) break;
 800bbb4:	bf00      	nop
 800bbb6:	e002      	b.n	800bbbe <dir_read+0x136>
				break;
 800bbb8:	bf00      	nop
 800bbba:	e000      	b.n	800bbbe <dir_read+0x136>
		if (res != FR_OK) break;
 800bbbc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 800bbbe:	7dfb      	ldrb	r3, [r7, #23]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d003      	beq.n	800bbcc <dir_read+0x144>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	return res;
 800bbcc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3718      	adds	r7, #24
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
	...

0800bbd8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b08c      	sub	sp, #48	; 0x30
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bbe6:	623b      	str	r3, [r7, #32]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800bbee:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800bbf0:	f107 030c 	add.w	r3, r7, #12
 800bbf4:	220c      	movs	r2, #12
 800bbf6:	6a39      	ldr	r1, [r7, #32]
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f7fe fbbf 	bl	800a37c <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800bbfe:	7dfb      	ldrb	r3, [r7, #23]
 800bc00:	f003 0301 	and.w	r3, r3, #1
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d037      	beq.n	800bc78 <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800bc08:	6a3b      	ldr	r3, [r7, #32]
 800bc0a:	330b      	adds	r3, #11
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	701a      	strb	r2, [r3, #0]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		for (n = 1; n < 100; n++) {
 800bc18:	2301      	movs	r3, #1
 800bc1a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc1c:	e013      	b.n	800bc46 <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800bc1e:	f107 010c 	add.w	r1, r7, #12
 800bc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc24:	69fa      	ldr	r2, [r7, #28]
 800bc26:	6a38      	ldr	r0, [r7, #32]
 800bc28:	f7ff fda8 	bl	800b77c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f7ff fe6b 	bl	800b908 <dir_find>
 800bc32:	4603      	mov	r3, r0
 800bc34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800bc38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d106      	bne.n	800bc4e <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 800bc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc42:	3301      	adds	r3, #1
 800bc44:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc48:	2b63      	cmp	r3, #99	; 0x63
 800bc4a:	d9e8      	bls.n	800bc1e <dir_register+0x46>
 800bc4c:	e000      	b.n	800bc50 <dir_register+0x78>
			if (res != FR_OK) break;
 800bc4e:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc52:	2b64      	cmp	r3, #100	; 0x64
 800bc54:	d101      	bne.n	800bc5a <dir_register+0x82>
 800bc56:	2307      	movs	r3, #7
 800bc58:	e0c5      	b.n	800bde6 <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800bc5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc5e:	2b04      	cmp	r3, #4
 800bc60:	d002      	beq.n	800bc68 <dir_register+0x90>
 800bc62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc66:	e0be      	b.n	800bde6 <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800bc68:	6a3b      	ldr	r3, [r7, #32]
 800bc6a:	330b      	adds	r3, #11
 800bc6c:	7dfa      	ldrb	r2, [r7, #23]
 800bc6e:	701a      	strb	r2, [r3, #0]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	69fa      	ldr	r2, [r7, #28]
 800bc74:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800bc78:	7dfb      	ldrb	r3, [r7, #23]
 800bc7a:	f003 0302 	and.w	r3, r3, #2
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d014      	beq.n	800bcac <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 800bc82:	2300      	movs	r3, #0
 800bc84:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc86:	e002      	b.n	800bc8e <dir_register+0xb6>
 800bc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc90:	005b      	lsls	r3, r3, #1
 800bc92:	69fa      	ldr	r2, [r7, #28]
 800bc94:	4413      	add	r3, r2
 800bc96:	881b      	ldrh	r3, [r3, #0]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d1f5      	bne.n	800bc88 <dir_register+0xb0>
		nent = (n + 25) / 13;
 800bc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc9e:	3319      	adds	r3, #25
 800bca0:	4a53      	ldr	r2, [pc, #332]	; (800bdf0 <dir_register+0x218>)
 800bca2:	fba2 2303 	umull	r2, r3, r2, r3
 800bca6:	089b      	lsrs	r3, r3, #2
 800bca8:	627b      	str	r3, [r7, #36]	; 0x24
 800bcaa:	e001      	b.n	800bcb0 <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800bcac:	2301      	movs	r3, #1
 800bcae:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800bcb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f7ff fb7f 	bl	800b3b6 <dir_alloc>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800bcbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d153      	bne.n	800bd6e <dir_register+0x196>
 800bcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc8:	3b01      	subs	r3, #1
 800bcca:	627b      	str	r3, [r7, #36]	; 0x24
 800bccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d04d      	beq.n	800bd6e <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800bcd8:	461a      	mov	r2, r3
 800bcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcdc:	1ad3      	subs	r3, r2, r3
 800bcde:	4619      	mov	r1, r3
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f7ff f9dd 	bl	800b0a0 <dir_sdi>
 800bce6:	4603      	mov	r3, r0
 800bce8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800bcec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d13c      	bne.n	800bd6e <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7ff fde4 	bl	800b8c8 <sum_sfn>
 800bd00:	4603      	mov	r3, r0
 800bd02:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bd10:	4619      	mov	r1, r3
 800bd12:	4610      	mov	r0, r2
 800bd14:	f7fe fdd5 	bl	800a8c2 <move_window>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800bd1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d122      	bne.n	800bd6c <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 800bd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd34:	b2da      	uxtb	r2, r3
 800bd36:	7efb      	ldrb	r3, [r7, #27]
 800bd38:	f7ff fcac 	bl	800b694 <fit_lfn>
				dp->fs->wflag = 1;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd42:	2201      	movs	r2, #1
 800bd44:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = dir_next(dp, 0);	/* Next entry */
 800bd48:	2100      	movs	r1, #0
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f7ff fa3c 	bl	800b1c8 <dir_next>
 800bd50:	4603      	mov	r3, r0
 800bd52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800bd56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d107      	bne.n	800bd6e <dir_register+0x196>
 800bd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd60:	3b01      	subs	r3, #1
 800bd62:	627b      	str	r3, [r7, #36]	; 0x24
 800bd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d1cc      	bne.n	800bd04 <dir_register+0x12c>
 800bd6a:	e000      	b.n	800bd6e <dir_register+0x196>
				if (res != FR_OK) break;
 800bd6c:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800bd6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d135      	bne.n	800bde2 <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bd82:	4619      	mov	r1, r3
 800bd84:	4610      	mov	r0, r2
 800bd86:	f7fe fd9c 	bl	800a8c2 <move_window>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800bd90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d124      	bne.n	800bde2 <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd9e:	2220      	movs	r2, #32
 800bda0:	2100      	movs	r1, #0
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7fe fb08 	bl	800a3b8 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bdb4:	220b      	movs	r2, #11
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	f7fe fae0 	bl	800a37c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bdc2:	330b      	adds	r3, #11
 800bdc4:	781a      	ldrb	r2, [r3, #0]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bdcc:	330c      	adds	r3, #12
 800bdce:	f002 0218 	and.w	r2, r2, #24
 800bdd2:	b2d2      	uxtb	r2, r2
 800bdd4:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bddc:	2201      	movs	r2, #1
 800bdde:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 800bde2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3730      	adds	r7, #48	; 0x30
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	4ec4ec4f 	.word	0x4ec4ec4f

0800bdf4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b088      	sub	sp, #32
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	3309      	adds	r3, #9
 800be02:	61bb      	str	r3, [r7, #24]
	if (dp->sect) {		/* Get SFN */
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d070      	beq.n	800bef0 <get_fileinfo+0xfc>
		dir = dp->dir;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800be14:	60fb      	str	r3, [r7, #12]
		i = 0;
 800be16:	2300      	movs	r3, #0
 800be18:	61fb      	str	r3, [r7, #28]
		while (i < 11) {		/* Copy name body and extension */
 800be1a:	e032      	b.n	800be82 <get_fileinfo+0x8e>
			c = (TCHAR)dir[i++];
 800be1c:	69fb      	ldr	r3, [r7, #28]
 800be1e:	1c5a      	adds	r2, r3, #1
 800be20:	61fa      	str	r2, [r7, #28]
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	4413      	add	r3, r2
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	75fb      	strb	r3, [r7, #23]
			if (c == ' ') continue;				/* Skip padding spaces */
 800be2a:	7dfb      	ldrb	r3, [r7, #23]
 800be2c:	2b20      	cmp	r3, #32
 800be2e:	d100      	bne.n	800be32 <get_fileinfo+0x3e>
 800be30:	e027      	b.n	800be82 <get_fileinfo+0x8e>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800be32:	7dfb      	ldrb	r3, [r7, #23]
 800be34:	2b05      	cmp	r3, #5
 800be36:	d101      	bne.n	800be3c <get_fileinfo+0x48>
 800be38:	23e5      	movs	r3, #229	; 0xe5
 800be3a:	75fb      	strb	r3, [r7, #23]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 800be3c:	69fb      	ldr	r3, [r7, #28]
 800be3e:	2b09      	cmp	r3, #9
 800be40:	d104      	bne.n	800be4c <get_fileinfo+0x58>
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	1c5a      	adds	r2, r3, #1
 800be46:	61ba      	str	r2, [r7, #24]
 800be48:	222e      	movs	r2, #46	; 0x2e
 800be4a:	701a      	strb	r2, [r3, #0]
#if _USE_LFN
			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
 800be4c:	7dfb      	ldrb	r3, [r7, #23]
 800be4e:	2b40      	cmp	r3, #64	; 0x40
 800be50:	d912      	bls.n	800be78 <get_fileinfo+0x84>
 800be52:	7dfb      	ldrb	r3, [r7, #23]
 800be54:	2b5a      	cmp	r3, #90	; 0x5a
 800be56:	d80f      	bhi.n	800be78 <get_fileinfo+0x84>
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	330c      	adds	r3, #12
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	461a      	mov	r2, r3
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	2b08      	cmp	r3, #8
 800be64:	d901      	bls.n	800be6a <get_fileinfo+0x76>
 800be66:	2310      	movs	r3, #16
 800be68:	e000      	b.n	800be6c <get_fileinfo+0x78>
 800be6a:	2308      	movs	r3, #8
 800be6c:	4013      	ands	r3, r2
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d002      	beq.n	800be78 <get_fileinfo+0x84>
				c += 0x20;			/* To lower */
 800be72:	7dfb      	ldrb	r3, [r7, #23]
 800be74:	3320      	adds	r3, #32
 800be76:	75fb      	strb	r3, [r7, #23]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 800be78:	69bb      	ldr	r3, [r7, #24]
 800be7a:	1c5a      	adds	r2, r3, #1
 800be7c:	61ba      	str	r2, [r7, #24]
 800be7e:	7dfa      	ldrb	r2, [r7, #23]
 800be80:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	2b0a      	cmp	r3, #10
 800be86:	d9c9      	bls.n	800be1c <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	7ada      	ldrb	r2, [r3, #11]
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	331f      	adds	r3, #31
 800be94:	781b      	ldrb	r3, [r3, #0]
 800be96:	061a      	lsls	r2, r3, #24
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	331e      	adds	r3, #30
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	041b      	lsls	r3, r3, #16
 800bea0:	4313      	orrs	r3, r2
 800bea2:	68fa      	ldr	r2, [r7, #12]
 800bea4:	321d      	adds	r2, #29
 800bea6:	7812      	ldrb	r2, [r2, #0]
 800bea8:	0212      	lsls	r2, r2, #8
 800beaa:	4313      	orrs	r3, r2
 800beac:	68fa      	ldr	r2, [r7, #12]
 800beae:	321c      	adds	r2, #28
 800beb0:	7812      	ldrb	r2, [r2, #0]
 800beb2:	431a      	orrs	r2, r3
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	3319      	adds	r3, #25
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	021b      	lsls	r3, r3, #8
 800bec0:	b21a      	sxth	r2, r3
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	3318      	adds	r3, #24
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	b21b      	sxth	r3, r3
 800beca:	4313      	orrs	r3, r2
 800becc:	b21b      	sxth	r3, r3
 800bece:	b29a      	uxth	r2, r3
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	3317      	adds	r3, #23
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	021b      	lsls	r3, r3, #8
 800bedc:	b21a      	sxth	r2, r3
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	3316      	adds	r3, #22
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	b21b      	sxth	r3, r3
 800bee6:	4313      	orrs	r3, r2
 800bee8:	b21b      	sxth	r3, r3
 800beea:	b29a      	uxth	r2, r3
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 800bef0:	69bb      	ldr	r3, [r7, #24]
 800bef2:	2200      	movs	r2, #0
 800bef4:	701a      	strb	r2, [r3, #0]

#if _USE_LFN
	if (fno->lfname) {
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	699b      	ldr	r3, [r3, #24]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d051      	beq.n	800bfa2 <get_fileinfo+0x1ae>
		i = 0; p = fno->lfname;
 800befe:	2300      	movs	r3, #0
 800bf00:	61fb      	str	r3, [r7, #28]
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	699b      	ldr	r3, [r3, #24]
 800bf06:	61bb      	str	r3, [r7, #24]
		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d042      	beq.n	800bf98 <get_fileinfo+0x1a4>
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	69db      	ldr	r3, [r3, #28]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d03e      	beq.n	800bf98 <get_fileinfo+0x1a4>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8b3 3224 	ldrh.w	r3, [r3, #548]	; 0x224
 800bf20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d037      	beq.n	800bf98 <get_fileinfo+0x1a4>
			lfn = dp->lfn;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800bf2e:	613b      	str	r3, [r7, #16]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 800bf30:	e02a      	b.n	800bf88 <get_fileinfo+0x194>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800bf32:	897b      	ldrh	r3, [r7, #10]
 800bf34:	2100      	movs	r1, #0
 800bf36:	4618      	mov	r0, r3
 800bf38:	f002 f864 	bl	800e004 <ff_convert>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	817b      	strh	r3, [r7, #10]
				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
 800bf40:	897b      	ldrh	r3, [r7, #10]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d102      	bne.n	800bf4c <get_fileinfo+0x158>
 800bf46:	2300      	movs	r3, #0
 800bf48:	61fb      	str	r3, [r7, #28]
 800bf4a:	e025      	b.n	800bf98 <get_fileinfo+0x1a4>
				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
 800bf4c:	897b      	ldrh	r3, [r7, #10]
 800bf4e:	2bff      	cmp	r3, #255	; 0xff
 800bf50:	d909      	bls.n	800bf66 <get_fileinfo+0x172>
					p[i++] = (TCHAR)(w >> 8);
 800bf52:	897b      	ldrh	r3, [r7, #10]
 800bf54:	0a1b      	lsrs	r3, r3, #8
 800bf56:	b299      	uxth	r1, r3
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	1c5a      	adds	r2, r3, #1
 800bf5c:	61fa      	str	r2, [r7, #28]
 800bf5e:	69ba      	ldr	r2, [r7, #24]
 800bf60:	4413      	add	r3, r2
 800bf62:	b2ca      	uxtb	r2, r1
 800bf64:	701a      	strb	r2, [r3, #0]
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	69db      	ldr	r3, [r3, #28]
 800bf6a:	3b01      	subs	r3, #1
 800bf6c:	69fa      	ldr	r2, [r7, #28]
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d302      	bcc.n	800bf78 <get_fileinfo+0x184>
 800bf72:	2300      	movs	r3, #0
 800bf74:	61fb      	str	r3, [r7, #28]
 800bf76:	e00f      	b.n	800bf98 <get_fileinfo+0x1a4>
				p[i++] = (TCHAR)w;
 800bf78:	69fb      	ldr	r3, [r7, #28]
 800bf7a:	1c5a      	adds	r2, r3, #1
 800bf7c:	61fa      	str	r2, [r7, #28]
 800bf7e:	69ba      	ldr	r2, [r7, #24]
 800bf80:	4413      	add	r3, r2
 800bf82:	897a      	ldrh	r2, [r7, #10]
 800bf84:	b2d2      	uxtb	r2, r2
 800bf86:	701a      	strb	r2, [r3, #0]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	1c9a      	adds	r2, r3, #2
 800bf8c:	613a      	str	r2, [r7, #16]
 800bf8e:	881b      	ldrh	r3, [r3, #0]
 800bf90:	817b      	strh	r3, [r7, #10]
 800bf92:	897b      	ldrh	r3, [r7, #10]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d1cc      	bne.n	800bf32 <get_fileinfo+0x13e>
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
 800bf98:	69ba      	ldr	r2, [r7, #24]
 800bf9a:	69fb      	ldr	r3, [r7, #28]
 800bf9c:	4413      	add	r3, r2
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	701a      	strb	r2, [r3, #0]
	}
#endif
}
 800bfa2:	bf00      	nop
 800bfa4:	3720      	adds	r7, #32
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
	...

0800bfac <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b08a      	sub	sp, #40	; 0x28
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	613b      	str	r3, [r7, #16]
 800bfbc:	e002      	b.n	800bfc4 <create_name+0x18>
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	613b      	str	r3, [r7, #16]
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	2b2f      	cmp	r3, #47	; 0x2f
 800bfca:	d0f8      	beq.n	800bfbe <create_name+0x12>
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	2b5c      	cmp	r3, #92	; 0x5c
 800bfd2:	d0f4      	beq.n	800bfbe <create_name+0x12>
	lfn = dp->lfn;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800bfda:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	617b      	str	r3, [r7, #20]
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800bfe4:	69bb      	ldr	r3, [r7, #24]
 800bfe6:	1c5a      	adds	r2, r3, #1
 800bfe8:	61ba      	str	r2, [r7, #24]
 800bfea:	693a      	ldr	r2, [r7, #16]
 800bfec:	4413      	add	r3, r2
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800bff2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bff4:	2b1f      	cmp	r3, #31
 800bff6:	d959      	bls.n	800c0ac <create_name+0x100>
 800bff8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bffa:	2b2f      	cmp	r3, #47	; 0x2f
 800bffc:	d056      	beq.n	800c0ac <create_name+0x100>
 800bffe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c000:	2b5c      	cmp	r3, #92	; 0x5c
 800c002:	d053      	beq.n	800c0ac <create_name+0x100>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	2bfe      	cmp	r3, #254	; 0xfe
 800c008:	d901      	bls.n	800c00e <create_name+0x62>
			return FR_INVALID_NAME;
 800c00a:	2306      	movs	r3, #6
 800c00c:	e1c4      	b.n	800c398 <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c00e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c010:	b2db      	uxtb	r3, r3
 800c012:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 800c014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c016:	b2db      	uxtb	r3, r3
 800c018:	2b80      	cmp	r3, #128	; 0x80
 800c01a:	d925      	bls.n	800c068 <create_name+0xbc>
 800c01c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	2bff      	cmp	r3, #255	; 0xff
 800c022:	d021      	beq.n	800c068 <create_name+0xbc>
#if _DF1S
			b = (BYTE)p[si++];			/* Get 2nd byte */
 800c024:	69bb      	ldr	r3, [r7, #24]
 800c026:	1c5a      	adds	r2, r3, #1
 800c028:	61ba      	str	r2, [r7, #24]
 800c02a:	693a      	ldr	r2, [r7, #16]
 800c02c:	4413      	add	r3, r2
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			w = (w << 8) + b;			/* Create a DBC */
 800c034:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c036:	021b      	lsls	r3, r3, #8
 800c038:	b29a      	uxth	r2, r3
 800c03a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c03e:	b29b      	uxth	r3, r3
 800c040:	4413      	add	r3, r2
 800c042:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (!IsDBCS2(b))
 800c044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c048:	2b3f      	cmp	r3, #63	; 0x3f
 800c04a:	d903      	bls.n	800c054 <create_name+0xa8>
 800c04c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c050:	2b7e      	cmp	r3, #126	; 0x7e
 800c052:	d909      	bls.n	800c068 <create_name+0xbc>
 800c054:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c058:	2b00      	cmp	r3, #0
 800c05a:	da03      	bge.n	800c064 <create_name+0xb8>
 800c05c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c060:	2bff      	cmp	r3, #255	; 0xff
 800c062:	d101      	bne.n	800c068 <create_name+0xbc>
				return FR_INVALID_NAME;	/* Reject invalid sequence */
 800c064:	2306      	movs	r3, #6
 800c066:	e197      	b.n	800c398 <create_name+0x3ec>
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c068:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c06a:	2101      	movs	r1, #1
 800c06c:	4618      	mov	r0, r3
 800c06e:	f001 ffc9 	bl	800e004 <ff_convert>
 800c072:	4603      	mov	r3, r0
 800c074:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c076:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d101      	bne.n	800c080 <create_name+0xd4>
 800c07c:	2306      	movs	r3, #6
 800c07e:	e18b      	b.n	800c398 <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800c080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c082:	2b7f      	cmp	r3, #127	; 0x7f
 800c084:	d809      	bhi.n	800c09a <create_name+0xee>
 800c086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c088:	4619      	mov	r1, r3
 800c08a:	489b      	ldr	r0, [pc, #620]	; (800c2f8 <create_name+0x34c>)
 800c08c:	f7fe f9d4 	bl	800a438 <chk_chr>
 800c090:	4603      	mov	r3, r0
 800c092:	2b00      	cmp	r3, #0
 800c094:	d001      	beq.n	800c09a <create_name+0xee>
			return FR_INVALID_NAME;
 800c096:	2306      	movs	r3, #6
 800c098:	e17e      	b.n	800c398 <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	1c5a      	adds	r2, r3, #1
 800c09e:	617a      	str	r2, [r7, #20]
 800c0a0:	005b      	lsls	r3, r3, #1
 800c0a2:	68fa      	ldr	r2, [r7, #12]
 800c0a4:	4413      	add	r3, r2
 800c0a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c0a8:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c0aa:	e79b      	b.n	800bfe4 <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c0ac:	693a      	ldr	r2, [r7, #16]
 800c0ae:	69bb      	ldr	r3, [r7, #24]
 800c0b0:	441a      	add	r2, r3
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800c0b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0b8:	2b1f      	cmp	r3, #31
 800c0ba:	d801      	bhi.n	800c0c0 <create_name+0x114>
 800c0bc:	2304      	movs	r3, #4
 800c0be:	e000      	b.n	800c0c2 <create_name+0x116>
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800c0c6:	e011      	b.n	800c0ec <create_name+0x140>
		w = lfn[di - 1];
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c0ce:	3b01      	subs	r3, #1
 800c0d0:	005b      	lsls	r3, r3, #1
 800c0d2:	68fa      	ldr	r2, [r7, #12]
 800c0d4:	4413      	add	r3, r2
 800c0d6:	881b      	ldrh	r3, [r3, #0]
 800c0d8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c0da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0dc:	2b20      	cmp	r3, #32
 800c0de:	d002      	beq.n	800c0e6 <create_name+0x13a>
 800c0e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0e2:	2b2e      	cmp	r3, #46	; 0x2e
 800c0e4:	d106      	bne.n	800c0f4 <create_name+0x148>
		di--;
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	3b01      	subs	r3, #1
 800c0ea:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d1ea      	bne.n	800c0c8 <create_name+0x11c>
 800c0f2:	e000      	b.n	800c0f6 <create_name+0x14a>
		if (w != ' ' && w != '.') break;
 800c0f4:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d101      	bne.n	800c100 <create_name+0x154>
 800c0fc:	2306      	movs	r3, #6
 800c0fe:	e14b      	b.n	800c398 <create_name+0x3ec>

	lfn[di] = 0;						/* LFN is created */
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	005b      	lsls	r3, r3, #1
 800c104:	68fa      	ldr	r2, [r7, #12]
 800c106:	4413      	add	r3, r2
 800c108:	2200      	movs	r2, #0
 800c10a:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c112:	220b      	movs	r2, #11
 800c114:	2120      	movs	r1, #32
 800c116:	4618      	mov	r0, r3
 800c118:	f7fe f94e 	bl	800a3b8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c11c:	2300      	movs	r3, #0
 800c11e:	61bb      	str	r3, [r7, #24]
 800c120:	e002      	b.n	800c128 <create_name+0x17c>
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	3301      	adds	r3, #1
 800c126:	61bb      	str	r3, [r7, #24]
 800c128:	69bb      	ldr	r3, [r7, #24]
 800c12a:	005b      	lsls	r3, r3, #1
 800c12c:	68fa      	ldr	r2, [r7, #12]
 800c12e:	4413      	add	r3, r2
 800c130:	881b      	ldrh	r3, [r3, #0]
 800c132:	2b20      	cmp	r3, #32
 800c134:	d0f5      	beq.n	800c122 <create_name+0x176>
 800c136:	69bb      	ldr	r3, [r7, #24]
 800c138:	005b      	lsls	r3, r3, #1
 800c13a:	68fa      	ldr	r2, [r7, #12]
 800c13c:	4413      	add	r3, r2
 800c13e:	881b      	ldrh	r3, [r3, #0]
 800c140:	2b2e      	cmp	r3, #46	; 0x2e
 800c142:	d0ee      	beq.n	800c122 <create_name+0x176>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d009      	beq.n	800c15e <create_name+0x1b2>
 800c14a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c14e:	f043 0303 	orr.w	r3, r3, #3
 800c152:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c156:	e002      	b.n	800c15e <create_name+0x1b2>
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	3b01      	subs	r3, #1
 800c15c:	617b      	str	r3, [r7, #20]
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d009      	beq.n	800c178 <create_name+0x1cc>
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c16a:	3b01      	subs	r3, #1
 800c16c:	005b      	lsls	r3, r3, #1
 800c16e:	68fa      	ldr	r2, [r7, #12]
 800c170:	4413      	add	r3, r2
 800c172:	881b      	ldrh	r3, [r3, #0]
 800c174:	2b2e      	cmp	r3, #46	; 0x2e
 800c176:	d1ef      	bne.n	800c158 <create_name+0x1ac>

	b = i = 0; ni = 8;
 800c178:	2300      	movs	r3, #0
 800c17a:	623b      	str	r3, [r7, #32]
 800c17c:	2300      	movs	r3, #0
 800c17e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c182:	2308      	movs	r3, #8
 800c184:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	1c5a      	adds	r2, r3, #1
 800c18a:	61ba      	str	r2, [r7, #24]
 800c18c:	005b      	lsls	r3, r3, #1
 800c18e:	68fa      	ldr	r2, [r7, #12]
 800c190:	4413      	add	r3, r2
 800c192:	881b      	ldrh	r3, [r3, #0]
 800c194:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c196:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c198:	2b00      	cmp	r3, #0
 800c19a:	f000 80aa 	beq.w	800c2f2 <create_name+0x346>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c19e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1a0:	2b20      	cmp	r3, #32
 800c1a2:	d006      	beq.n	800c1b2 <create_name+0x206>
 800c1a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1a6:	2b2e      	cmp	r3, #46	; 0x2e
 800c1a8:	d10a      	bne.n	800c1c0 <create_name+0x214>
 800c1aa:	69ba      	ldr	r2, [r7, #24]
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d006      	beq.n	800c1c0 <create_name+0x214>
			cf |= NS_LOSS | NS_LFN; continue;
 800c1b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c1b6:	f043 0303 	orr.w	r3, r3, #3
 800c1ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c1be:	e097      	b.n	800c2f0 <create_name+0x344>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c1c0:	6a3a      	ldr	r2, [r7, #32]
 800c1c2:	69fb      	ldr	r3, [r7, #28]
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d203      	bcs.n	800c1d0 <create_name+0x224>
 800c1c8:	69ba      	ldr	r2, [r7, #24]
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d123      	bne.n	800c218 <create_name+0x26c>
			if (ni == 11) {				/* Long extension */
 800c1d0:	69fb      	ldr	r3, [r7, #28]
 800c1d2:	2b0b      	cmp	r3, #11
 800c1d4:	d106      	bne.n	800c1e4 <create_name+0x238>
				cf |= NS_LOSS | NS_LFN; break;
 800c1d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c1da:	f043 0303 	orr.w	r3, r3, #3
 800c1de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c1e2:	e08e      	b.n	800c302 <create_name+0x356>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c1e4:	69ba      	ldr	r2, [r7, #24]
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d005      	beq.n	800c1f8 <create_name+0x24c>
 800c1ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c1f0:	f043 0303 	orr.w	r3, r3, #3
 800c1f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 800c1f8:	69ba      	ldr	r2, [r7, #24]
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d87f      	bhi.n	800c300 <create_name+0x354>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	61bb      	str	r3, [r7, #24]
 800c204:	2308      	movs	r3, #8
 800c206:	623b      	str	r3, [r7, #32]
 800c208:	230b      	movs	r3, #11
 800c20a:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c20c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c216:	e06b      	b.n	800c2f0 <create_name+0x344>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c218:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c21a:	2b7f      	cmp	r3, #127	; 0x7f
 800c21c:	d910      	bls.n	800c240 <create_name+0x294>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 800c21e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c220:	4618      	mov	r0, r3
 800c222:	f001 ff4b 	bl	800e0bc <ff_wtoupper>
 800c226:	4603      	mov	r3, r0
 800c228:	2100      	movs	r1, #0
 800c22a:	4618      	mov	r0, r3
 800c22c:	f001 feea 	bl	800e004 <ff_convert>
 800c230:	4603      	mov	r3, r0
 800c232:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c234:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c238:	f043 0302 	orr.w	r3, r3, #2
 800c23c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if (_DF1S && w >= 0x100) {		/* DBC (always false at SBCS cfg) */
 800c240:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c242:	2bff      	cmp	r3, #255	; 0xff
 800c244:	d91a      	bls.n	800c27c <create_name+0x2d0>
			if (i >= ni - 1) {
 800c246:	69fb      	ldr	r3, [r7, #28]
 800c248:	3b01      	subs	r3, #1
 800c24a:	6a3a      	ldr	r2, [r7, #32]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d308      	bcc.n	800c262 <create_name+0x2b6>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 800c250:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c254:	f043 0303 	orr.w	r3, r3, #3
 800c258:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c25c:	69fb      	ldr	r3, [r7, #28]
 800c25e:	623b      	str	r3, [r7, #32]
 800c260:	e046      	b.n	800c2f0 <create_name+0x344>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 800c262:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c264:	0a1b      	lsrs	r3, r3, #8
 800c266:	b298      	uxth	r0, r3
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c26e:	6a3b      	ldr	r3, [r7, #32]
 800c270:	1c59      	adds	r1, r3, #1
 800c272:	6239      	str	r1, [r7, #32]
 800c274:	4413      	add	r3, r2
 800c276:	b2c2      	uxtb	r2, r0
 800c278:	701a      	strb	r2, [r3, #0]
 800c27a:	e02f      	b.n	800c2dc <create_name+0x330>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c27c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d007      	beq.n	800c292 <create_name+0x2e6>
 800c282:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c284:	4619      	mov	r1, r3
 800c286:	481d      	ldr	r0, [pc, #116]	; (800c2fc <create_name+0x350>)
 800c288:	f7fe f8d6 	bl	800a438 <chk_chr>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d008      	beq.n	800c2a4 <create_name+0x2f8>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c292:	235f      	movs	r3, #95	; 0x5f
 800c294:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c296:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c29a:	f043 0303 	orr.w	r3, r3, #3
 800c29e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c2a2:	e01b      	b.n	800c2dc <create_name+0x330>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c2a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2a6:	2b40      	cmp	r3, #64	; 0x40
 800c2a8:	d909      	bls.n	800c2be <create_name+0x312>
 800c2aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2ac:	2b5a      	cmp	r3, #90	; 0x5a
 800c2ae:	d806      	bhi.n	800c2be <create_name+0x312>
					b |= 2;
 800c2b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2b4:	f043 0302 	orr.w	r3, r3, #2
 800c2b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c2bc:	e00e      	b.n	800c2dc <create_name+0x330>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c2be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2c0:	2b60      	cmp	r3, #96	; 0x60
 800c2c2:	d90b      	bls.n	800c2dc <create_name+0x330>
 800c2c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2c6:	2b7a      	cmp	r3, #122	; 0x7a
 800c2c8:	d808      	bhi.n	800c2dc <create_name+0x330>
						b |= 1; w -= 0x20;
 800c2ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2ce:	f043 0301 	orr.w	r3, r3, #1
 800c2d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c2d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2d8:	3b20      	subs	r3, #32
 800c2da:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c2e2:	6a3b      	ldr	r3, [r7, #32]
 800c2e4:	1c59      	adds	r1, r3, #1
 800c2e6:	6239      	str	r1, [r7, #32]
 800c2e8:	4413      	add	r3, r2
 800c2ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c2ec:	b2d2      	uxtb	r2, r2
 800c2ee:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800c2f0:	e749      	b.n	800c186 <create_name+0x1da>
		if (!w) break;					/* Break on end of the LFN */
 800c2f2:	bf00      	nop
 800c2f4:	e005      	b.n	800c302 <create_name+0x356>
 800c2f6:	bf00      	nop
 800c2f8:	0801277c 	.word	0x0801277c
 800c2fc:	08012788 	.word	0x08012788
			if (si > di) break;			/* No extension */
 800c300:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	2be5      	cmp	r3, #229	; 0xe5
 800c30c:	d104      	bne.n	800c318 <create_name+0x36c>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c314:	2205      	movs	r2, #5
 800c316:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	2b08      	cmp	r3, #8
 800c31c:	d104      	bne.n	800c328 <create_name+0x37c>
 800c31e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800c328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c32c:	f003 030c 	and.w	r3, r3, #12
 800c330:	2b0c      	cmp	r3, #12
 800c332:	d005      	beq.n	800c340 <create_name+0x394>
 800c334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c338:	f003 0303 	and.w	r3, r3, #3
 800c33c:	2b03      	cmp	r3, #3
 800c33e:	d105      	bne.n	800c34c <create_name+0x3a0>
		cf |= NS_LFN;
 800c340:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c344:	f043 0302 	orr.w	r3, r3, #2
 800c348:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c34c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c350:	f003 0302 	and.w	r3, r3, #2
 800c354:	2b00      	cmp	r3, #0
 800c356:	d117      	bne.n	800c388 <create_name+0x3dc>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c35c:	f003 0303 	and.w	r3, r3, #3
 800c360:	2b01      	cmp	r3, #1
 800c362:	d105      	bne.n	800c370 <create_name+0x3c4>
 800c364:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c368:	f043 0310 	orr.w	r3, r3, #16
 800c36c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c374:	f003 030c 	and.w	r3, r3, #12
 800c378:	2b04      	cmp	r3, #4
 800c37a:	d105      	bne.n	800c388 <create_name+0x3dc>
 800c37c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c380:	f043 0308 	orr.w	r3, r3, #8
 800c384:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c38e:	330b      	adds	r3, #11
 800c390:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c394:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c396:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3728      	adds	r7, #40	; 0x28
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}

0800c3a0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b084      	sub	sp, #16
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	2b2f      	cmp	r3, #47	; 0x2f
 800c3b0:	d003      	beq.n	800c3ba <follow_path+0x1a>
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	781b      	ldrb	r3, [r3, #0]
 800c3b6:	2b5c      	cmp	r3, #92	; 0x5c
 800c3b8:	d102      	bne.n	800c3c0 <follow_path+0x20>
		path++;
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	3301      	adds	r3, #1
 800c3be:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	2b1f      	cmp	r3, #31
 800c3ce:	d80a      	bhi.n	800c3e6 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800c3d0:	2100      	movs	r1, #0
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f7fe fe64 	bl	800b0a0 <dir_sdi>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800c3e4:	e045      	b.n	800c472 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c3e6:	463b      	mov	r3, r7
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f7ff fdde 	bl	800bfac <create_name>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800c3f4:	7bfb      	ldrb	r3, [r7, #15]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d136      	bne.n	800c468 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f7ff fa84 	bl	800b908 <dir_find>
 800c400:	4603      	mov	r3, r0
 800c402:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c40a:	7adb      	ldrb	r3, [r3, #11]
 800c40c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800c40e:	7bfb      	ldrb	r3, [r7, #15]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d00a      	beq.n	800c42a <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c414:	7bfb      	ldrb	r3, [r7, #15]
 800c416:	2b04      	cmp	r3, #4
 800c418:	d128      	bne.n	800c46c <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c41a:	7bbb      	ldrb	r3, [r7, #14]
 800c41c:	f003 0304 	and.w	r3, r3, #4
 800c420:	2b00      	cmp	r3, #0
 800c422:	d123      	bne.n	800c46c <follow_path+0xcc>
 800c424:	2305      	movs	r3, #5
 800c426:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800c428:	e020      	b.n	800c46c <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c42a:	7bbb      	ldrb	r3, [r7, #14]
 800c42c:	f003 0304 	and.w	r3, r3, #4
 800c430:	2b00      	cmp	r3, #0
 800c432:	d11d      	bne.n	800c470 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c43a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	330b      	adds	r3, #11
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	f003 0310 	and.w	r3, r3, #16
 800c446:	2b00      	cmp	r3, #0
 800c448:	d102      	bne.n	800c450 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800c44a:	2305      	movs	r3, #5
 800c44c:	73fb      	strb	r3, [r7, #15]
 800c44e:	e010      	b.n	800c472 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c456:	68b9      	ldr	r1, [r7, #8]
 800c458:	4618      	mov	r0, r3
 800c45a:	f7fe fff6 	bl	800b44a <ld_clust>
 800c45e:	4602      	mov	r2, r0
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c466:	e7be      	b.n	800c3e6 <follow_path+0x46>
			if (res != FR_OK) break;
 800c468:	bf00      	nop
 800c46a:	e002      	b.n	800c472 <follow_path+0xd2>
				break;
 800c46c:	bf00      	nop
 800c46e:	e000      	b.n	800c472 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c470:	bf00      	nop
		}
	}

	return res;
 800c472:	7bfb      	ldrb	r3, [r7, #15]
}
 800c474:	4618      	mov	r0, r3
 800c476:	3710      	adds	r7, #16
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c47c:	b480      	push	{r7}
 800c47e:	b087      	sub	sp, #28
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c484:	f04f 33ff 	mov.w	r3, #4294967295
 800c488:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d031      	beq.n	800c4f6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	617b      	str	r3, [r7, #20]
 800c498:	e002      	b.n	800c4a0 <get_ldnumber+0x24>
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	3301      	adds	r3, #1
 800c49e:	617b      	str	r3, [r7, #20]
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	2b1f      	cmp	r3, #31
 800c4a6:	d903      	bls.n	800c4b0 <get_ldnumber+0x34>
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	2b3a      	cmp	r3, #58	; 0x3a
 800c4ae:	d1f4      	bne.n	800c49a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	2b3a      	cmp	r3, #58	; 0x3a
 800c4b6:	d11c      	bne.n	800c4f2 <get_ldnumber+0x76>
			tp = *path;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	1c5a      	adds	r2, r3, #1
 800c4c2:	60fa      	str	r2, [r7, #12]
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	3b30      	subs	r3, #48	; 0x30
 800c4c8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	2b09      	cmp	r3, #9
 800c4ce:	d80e      	bhi.n	800c4ee <get_ldnumber+0x72>
 800c4d0:	68fa      	ldr	r2, [r7, #12]
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d10a      	bne.n	800c4ee <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d107      	bne.n	800c4ee <get_ldnumber+0x72>
					vol = (int)i;
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	617b      	str	r3, [r7, #20]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	697a      	ldr	r2, [r7, #20]
 800c4ec:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	e002      	b.n	800c4f8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c4f6:	693b      	ldr	r3, [r7, #16]
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	371c      	adds	r7, #28
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bc80      	pop	{r7}
 800c500:	4770      	bx	lr
	...

0800c504 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2200      	movs	r2, #0
 800c512:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f04f 32ff 	mov.w	r2, #4294967295
 800c51c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800c520:	6839      	ldr	r1, [r7, #0]
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f7fe f9cd 	bl	800a8c2 <move_window>
 800c528:	4603      	mov	r3, r0
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d001      	beq.n	800c532 <check_fs+0x2e>
		return 3;
 800c52e:	2303      	movs	r3, #3
 800c530:	e04a      	b.n	800c5c8 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c538:	3301      	adds	r3, #1
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	021b      	lsls	r3, r3, #8
 800c53e:	b21a      	sxth	r2, r3
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800c546:	b21b      	sxth	r3, r3
 800c548:	4313      	orrs	r3, r2
 800c54a:	b21b      	sxth	r3, r3
 800c54c:	4a20      	ldr	r2, [pc, #128]	; (800c5d0 <check_fs+0xcc>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d001      	beq.n	800c556 <check_fs+0x52>
		return 2;
 800c552:	2302      	movs	r3, #2
 800c554:	e038      	b.n	800c5c8 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	3336      	adds	r3, #54	; 0x36
 800c55a:	3303      	adds	r3, #3
 800c55c:	781b      	ldrb	r3, [r3, #0]
 800c55e:	061a      	lsls	r2, r3, #24
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	3336      	adds	r3, #54	; 0x36
 800c564:	3302      	adds	r3, #2
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	041b      	lsls	r3, r3, #16
 800c56a:	4313      	orrs	r3, r2
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	3236      	adds	r2, #54	; 0x36
 800c570:	3201      	adds	r2, #1
 800c572:	7812      	ldrb	r2, [r2, #0]
 800c574:	0212      	lsls	r2, r2, #8
 800c576:	4313      	orrs	r3, r2
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800c57e:	4313      	orrs	r3, r2
 800c580:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c584:	4a13      	ldr	r2, [pc, #76]	; (800c5d4 <check_fs+0xd0>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d101      	bne.n	800c58e <check_fs+0x8a>
		return 0;
 800c58a:	2300      	movs	r3, #0
 800c58c:	e01c      	b.n	800c5c8 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	3352      	adds	r3, #82	; 0x52
 800c592:	3303      	adds	r3, #3
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	061a      	lsls	r2, r3, #24
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	3352      	adds	r3, #82	; 0x52
 800c59c:	3302      	adds	r3, #2
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	041b      	lsls	r3, r3, #16
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	687a      	ldr	r2, [r7, #4]
 800c5a6:	3252      	adds	r2, #82	; 0x52
 800c5a8:	3201      	adds	r2, #1
 800c5aa:	7812      	ldrb	r2, [r2, #0]
 800c5ac:	0212      	lsls	r2, r2, #8
 800c5ae:	4313      	orrs	r3, r2
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c5bc:	4a05      	ldr	r2, [pc, #20]	; (800c5d4 <check_fs+0xd0>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d101      	bne.n	800c5c6 <check_fs+0xc2>
		return 0;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	e000      	b.n	800c5c8 <check_fs+0xc4>

	return 1;
 800c5c6:	2301      	movs	r3, #1
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3708      	adds	r7, #8
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}
 800c5d0:	ffffaa55 	.word	0xffffaa55
 800c5d4:	00544146 	.word	0x00544146

0800c5d8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b096      	sub	sp, #88	; 0x58
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	60f8      	str	r0, [r7, #12]
 800c5e0:	60b9      	str	r1, [r7, #8]
 800c5e2:	4613      	mov	r3, r2
 800c5e4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c5ec:	68b8      	ldr	r0, [r7, #8]
 800c5ee:	f7ff ff45 	bl	800c47c <get_ldnumber>
 800c5f2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c5f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	da01      	bge.n	800c5fe <find_volume+0x26>
 800c5fa:	230b      	movs	r3, #11
 800c5fc:	e2b2      	b.n	800cb64 <find_volume+0x58c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c5fe:	4aa2      	ldr	r2, [pc, #648]	; (800c888 <find_volume+0x2b0>)
 800c600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c606:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d101      	bne.n	800c612 <find_volume+0x3a>
 800c60e:	230c      	movs	r3, #12
 800c610:	e2a8      	b.n	800cb64 <find_volume+0x58c>

	ENTER_FF(fs);						/* Lock the volume */
 800c612:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c614:	f7fd ff2a 	bl	800a46c <lock_fs>
 800c618:	4603      	mov	r3, r0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d101      	bne.n	800c622 <find_volume+0x4a>
 800c61e:	230f      	movs	r3, #15
 800c620:	e2a0      	b.n	800cb64 <find_volume+0x58c>
	*rfs = fs;							/* Return pointer to the file system object */
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c626:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800c628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d01b      	beq.n	800c66a <find_volume+0x92>
		stat = disk_status(fs->drv);
 800c632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c634:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c638:	4618      	mov	r0, r3
 800c63a:	f7fd fe01 	bl	800a240 <disk_status>
 800c63e:	4603      	mov	r3, r0
 800c640:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c644:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c648:	f003 0301 	and.w	r3, r3, #1
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d10c      	bne.n	800c66a <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800c650:	79fb      	ldrb	r3, [r7, #7]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d007      	beq.n	800c666 <find_volume+0x8e>
 800c656:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c65a:	f003 0304 	and.w	r3, r3, #4
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d001      	beq.n	800c666 <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 800c662:	230a      	movs	r3, #10
 800c664:	e27e      	b.n	800cb64 <find_volume+0x58c>
			return FR_OK;				/* The file system object is valid */
 800c666:	2300      	movs	r3, #0
 800c668:	e27c      	b.n	800cb64 <find_volume+0x58c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66c:	2200      	movs	r2, #0
 800c66e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c674:	b2da      	uxtb	r2, r3
 800c676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c678:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c682:	4618      	mov	r0, r3
 800c684:	f7fd fdf6 	bl	800a274 <disk_initialize>
 800c688:	4603      	mov	r3, r0
 800c68a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800c68e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c692:	f003 0301 	and.w	r3, r3, #1
 800c696:	2b00      	cmp	r3, #0
 800c698:	d001      	beq.n	800c69e <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c69a:	2303      	movs	r3, #3
 800c69c:	e262      	b.n	800cb64 <find_volume+0x58c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800c69e:	79fb      	ldrb	r3, [r7, #7]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d007      	beq.n	800c6b4 <find_volume+0xdc>
 800c6a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c6a8:	f003 0304 	and.w	r3, r3, #4
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d001      	beq.n	800c6b4 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800c6b0:	230a      	movs	r3, #10
 800c6b2:	e257      	b.n	800cb64 <find_volume+0x58c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800c6b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c6ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c6bc:	f7ff ff22 	bl	800c504 <check_fs>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800c6c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c6ca:	2b01      	cmp	r3, #1
 800c6cc:	d155      	bne.n	800c77a <find_volume+0x1a2>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	643b      	str	r3, [r7, #64]	; 0x40
 800c6d2:	e029      	b.n	800c728 <find_volume+0x150>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800c6d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6d8:	011b      	lsls	r3, r3, #4
 800c6da:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c6de:	4413      	add	r3, r2
 800c6e0:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800c6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e4:	3304      	adds	r3, #4
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d012      	beq.n	800c712 <find_volume+0x13a>
 800c6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ee:	330b      	adds	r3, #11
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	061a      	lsls	r2, r3, #24
 800c6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f6:	330a      	adds	r3, #10
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	041b      	lsls	r3, r3, #16
 800c6fc:	4313      	orrs	r3, r2
 800c6fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c700:	3209      	adds	r2, #9
 800c702:	7812      	ldrb	r2, [r2, #0]
 800c704:	0212      	lsls	r2, r2, #8
 800c706:	4313      	orrs	r3, r2
 800c708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c70a:	3208      	adds	r2, #8
 800c70c:	7812      	ldrb	r2, [r2, #0]
 800c70e:	431a      	orrs	r2, r3
 800c710:	e000      	b.n	800c714 <find_volume+0x13c>
 800c712:	2200      	movs	r2, #0
 800c714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c71c:	440b      	add	r3, r1
 800c71e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800c722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c724:	3301      	adds	r3, #1
 800c726:	643b      	str	r3, [r7, #64]	; 0x40
 800c728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c72a:	2b03      	cmp	r3, #3
 800c72c:	d9d2      	bls.n	800c6d4 <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800c72e:	2300      	movs	r3, #0
 800c730:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c734:	2b00      	cmp	r3, #0
 800c736:	d002      	beq.n	800c73e <find_volume+0x166>
 800c738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c73a:	3b01      	subs	r3, #1
 800c73c:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800c73e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c746:	4413      	add	r3, r2
 800c748:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c74c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800c74e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c750:	2b00      	cmp	r3, #0
 800c752:	d005      	beq.n	800c760 <find_volume+0x188>
 800c754:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c756:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c758:	f7ff fed4 	bl	800c504 <check_fs>
 800c75c:	4603      	mov	r3, r0
 800c75e:	e000      	b.n	800c762 <find_volume+0x18a>
 800c760:	2302      	movs	r3, #2
 800c762:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800c766:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d005      	beq.n	800c77a <find_volume+0x1a2>
 800c76e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c770:	3301      	adds	r3, #1
 800c772:	643b      	str	r3, [r7, #64]	; 0x40
 800c774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c776:	2b03      	cmp	r3, #3
 800c778:	d9e1      	bls.n	800c73e <find_volume+0x166>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c77a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c77e:	2b03      	cmp	r3, #3
 800c780:	d101      	bne.n	800c786 <find_volume+0x1ae>
 800c782:	2301      	movs	r3, #1
 800c784:	e1ee      	b.n	800cb64 <find_volume+0x58c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800c786:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d001      	beq.n	800c792 <find_volume+0x1ba>
 800c78e:	230d      	movs	r3, #13
 800c790:	e1e8      	b.n	800cb64 <find_volume+0x58c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c794:	7b1b      	ldrb	r3, [r3, #12]
 800c796:	021b      	lsls	r3, r3, #8
 800c798:	b21a      	sxth	r2, r3
 800c79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79c:	7adb      	ldrb	r3, [r3, #11]
 800c79e:	b21b      	sxth	r3, r3
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	b21b      	sxth	r3, r3
 800c7a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7a8:	d001      	beq.n	800c7ae <find_volume+0x1d6>
		return FR_NO_FILESYSTEM;
 800c7aa:	230d      	movs	r3, #13
 800c7ac:	e1da      	b.n	800cb64 <find_volume+0x58c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800c7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b0:	7ddb      	ldrb	r3, [r3, #23]
 800c7b2:	021b      	lsls	r3, r3, #8
 800c7b4:	b21a      	sxth	r2, r3
 800c7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b8:	7d9b      	ldrb	r3, [r3, #22]
 800c7ba:	b21b      	sxth	r3, r3
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	b21b      	sxth	r3, r3
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800c7c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d112      	bne.n	800c7f0 <find_volume+0x218>
 800c7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7cc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800c7d0:	061a      	lsls	r2, r3, #24
 800c7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c7d8:	041b      	lsls	r3, r3, #16
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7de:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800c7e2:	0212      	lsls	r2, r2, #8
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7e8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800c7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c7f4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800c7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fa:	7c1a      	ldrb	r2, [r3, #16]
 800c7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fe:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800c802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c804:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d006      	beq.n	800c81a <find_volume+0x242>
 800c80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80e:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800c812:	2b02      	cmp	r3, #2
 800c814:	d001      	beq.n	800c81a <find_volume+0x242>
		return FR_NO_FILESYSTEM;
 800c816:	230d      	movs	r3, #13
 800c818:	e1a4      	b.n	800cb64 <find_volume+0x58c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800c81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800c820:	461a      	mov	r2, r3
 800c822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c824:	fb02 f303 	mul.w	r3, r2, r3
 800c828:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800c82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c82c:	7b5a      	ldrb	r2, [r3, #13]
 800c82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c830:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800c834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c836:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d00a      	beq.n	800c854 <find_volume+0x27c>
 800c83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c840:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c844:	461a      	mov	r2, r3
 800c846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c848:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c84c:	3b01      	subs	r3, #1
 800c84e:	4013      	ands	r3, r2
 800c850:	2b00      	cmp	r3, #0
 800c852:	d001      	beq.n	800c858 <find_volume+0x280>
		return FR_NO_FILESYSTEM;
 800c854:	230d      	movs	r3, #13
 800c856:	e185      	b.n	800cb64 <find_volume+0x58c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800c858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c85a:	7c9b      	ldrb	r3, [r3, #18]
 800c85c:	021b      	lsls	r3, r3, #8
 800c85e:	b21a      	sxth	r2, r3
 800c860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c862:	7c5b      	ldrb	r3, [r3, #17]
 800c864:	b21b      	sxth	r3, r3
 800c866:	4313      	orrs	r3, r2
 800c868:	b21b      	sxth	r3, r3
 800c86a:	b29a      	uxth	r2, r3
 800c86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c86e:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800c872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c874:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800c878:	f003 030f 	and.w	r3, r3, #15
 800c87c:	b29b      	uxth	r3, r3
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d004      	beq.n	800c88c <find_volume+0x2b4>
		return FR_NO_FILESYSTEM;
 800c882:	230d      	movs	r3, #13
 800c884:	e16e      	b.n	800cb64 <find_volume+0x58c>
 800c886:	bf00      	nop
 800c888:	200001e0 	.word	0x200001e0

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800c88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c88e:	7d1b      	ldrb	r3, [r3, #20]
 800c890:	021b      	lsls	r3, r3, #8
 800c892:	b21a      	sxth	r2, r3
 800c894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c896:	7cdb      	ldrb	r3, [r3, #19]
 800c898:	b21b      	sxth	r3, r3
 800c89a:	4313      	orrs	r3, r2
 800c89c:	b21b      	sxth	r3, r3
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800c8a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d112      	bne.n	800c8ce <find_volume+0x2f6>
 800c8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8aa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800c8ae:	061a      	lsls	r2, r3, #24
 800c8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800c8b6:	041b      	lsls	r3, r3, #16
 800c8b8:	4313      	orrs	r3, r2
 800c8ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8bc:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800c8c0:	0212      	lsls	r2, r2, #8
 800c8c2:	4313      	orrs	r3, r2
 800c8c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8c6:	f892 2020 	ldrb.w	r2, [r2, #32]
 800c8ca:	4313      	orrs	r3, r2
 800c8cc:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800c8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d0:	7bdb      	ldrb	r3, [r3, #15]
 800c8d2:	021b      	lsls	r3, r3, #8
 800c8d4:	b21a      	sxth	r2, r3
 800c8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d8:	7b9b      	ldrb	r3, [r3, #14]
 800c8da:	b21b      	sxth	r3, r3
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	b21b      	sxth	r3, r3
 800c8e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800c8e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d101      	bne.n	800c8ec <find_volume+0x314>
 800c8e8:	230d      	movs	r3, #13
 800c8ea:	e13b      	b.n	800cb64 <find_volume+0x58c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800c8ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c8ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8f0:	4413      	add	r3, r2
 800c8f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8f4:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800c8f8:	0912      	lsrs	r2, r2, #4
 800c8fa:	b292      	uxth	r2, r2
 800c8fc:	4413      	add	r3, r2
 800c8fe:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c904:	429a      	cmp	r2, r3
 800c906:	d201      	bcs.n	800c90c <find_volume+0x334>
 800c908:	230d      	movs	r3, #13
 800c90a:	e12b      	b.n	800cb64 <find_volume+0x58c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800c90c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c910:	1ad3      	subs	r3, r2, r3
 800c912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c914:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800c918:	fbb3 f3f2 	udiv	r3, r3, r2
 800c91c:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800c91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c920:	2b00      	cmp	r3, #0
 800c922:	d101      	bne.n	800c928 <find_volume+0x350>
 800c924:	230d      	movs	r3, #13
 800c926:	e11d      	b.n	800cb64 <find_volume+0x58c>
	fmt = FS_FAT12;
 800c928:	2301      	movs	r3, #1
 800c92a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800c92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c930:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c934:	4293      	cmp	r3, r2
 800c936:	d902      	bls.n	800c93e <find_volume+0x366>
 800c938:	2302      	movs	r3, #2
 800c93a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800c93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c940:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c944:	4293      	cmp	r3, r2
 800c946:	d902      	bls.n	800c94e <find_volume+0x376>
 800c948:	2303      	movs	r3, #3
 800c94a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800c94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c950:	1c9a      	adds	r2, r3, #2
 800c952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c954:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 800c958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c95a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c95c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800c960:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c964:	441a      	add	r2, r3
 800c966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c968:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 800c96c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c970:	441a      	add	r2, r3
 800c972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c974:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 800c978:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c97c:	2b03      	cmp	r3, #3
 800c97e:	d121      	bne.n	800c9c4 <find_volume+0x3ec>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800c980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c982:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800c986:	2b00      	cmp	r3, #0
 800c988:	d001      	beq.n	800c98e <find_volume+0x3b6>
 800c98a:	230d      	movs	r3, #13
 800c98c:	e0ea      	b.n	800cb64 <find_volume+0x58c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800c98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c990:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c994:	061a      	lsls	r2, r3, #24
 800c996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c998:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800c99c:	041b      	lsls	r3, r3, #16
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9a2:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800c9a6:	0212      	lsls	r2, r2, #8
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9ac:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800c9b0:	431a      	orrs	r2, r3
 800c9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b4:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800c9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c9be:	009b      	lsls	r3, r3, #2
 800c9c0:	647b      	str	r3, [r7, #68]	; 0x44
 800c9c2:	e025      	b.n	800ca10 <find_volume+0x438>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800c9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d101      	bne.n	800c9d2 <find_volume+0x3fa>
 800c9ce:	230d      	movs	r3, #13
 800c9d0:	e0c8      	b.n	800cb64 <find_volume+0x58c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800c9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d4:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800c9d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9da:	441a      	add	r2, r3
 800c9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9de:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c9e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9e6:	2b02      	cmp	r3, #2
 800c9e8:	d104      	bne.n	800c9f4 <find_volume+0x41c>
 800c9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ec:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c9f0:	005b      	lsls	r3, r3, #1
 800c9f2:	e00c      	b.n	800ca0e <find_volume+0x436>
 800c9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c9fa:	4613      	mov	r3, r2
 800c9fc:	005b      	lsls	r3, r3, #1
 800c9fe:	4413      	add	r3, r2
 800ca00:	085a      	lsrs	r2, r3, #1
 800ca02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca04:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ca08:	f003 0301 	and.w	r3, r3, #1
 800ca0c:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800ca0e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800ca10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca12:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800ca16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca18:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ca1c:	0a5b      	lsrs	r3, r3, #9
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d201      	bcs.n	800ca26 <find_volume+0x44e>
		return FR_NO_FILESYSTEM;
 800ca22:	230d      	movs	r3, #13
 800ca24:	e09e      	b.n	800cb64 <find_volume+0x58c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800ca26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca28:	f04f 32ff 	mov.w	r2, #4294967295
 800ca2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800ca30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca32:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800ca36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca38:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800ca3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3e:	2280      	movs	r2, #128	; 0x80
 800ca40:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800ca44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca48:	2b03      	cmp	r3, #3
 800ca4a:	d177      	bne.n	800cb3c <find_volume+0x564>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800ca4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ca52:	021b      	lsls	r3, r3, #8
 800ca54:	b21a      	sxth	r2, r3
 800ca56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca5c:	b21b      	sxth	r3, r3
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	b21b      	sxth	r3, r3
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d16a      	bne.n	800cb3c <find_volume+0x564>
		&& move_window(fs, bsect + 1) == FR_OK)
 800ca66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca68:	3301      	adds	r3, #1
 800ca6a:	4619      	mov	r1, r3
 800ca6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ca6e:	f7fd ff28 	bl	800a8c2 <move_window>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d161      	bne.n	800cb3c <find_volume+0x564>
	{
		fs->fsi_flag = 0;
 800ca78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ca80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca82:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800ca86:	021b      	lsls	r3, r3, #8
 800ca88:	b21a      	sxth	r2, r3
 800ca8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800ca90:	b21b      	sxth	r3, r3
 800ca92:	4313      	orrs	r3, r2
 800ca94:	b21b      	sxth	r3, r3
 800ca96:	4a35      	ldr	r2, [pc, #212]	; (800cb6c <find_volume+0x594>)
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	d14f      	bne.n	800cb3c <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800ca9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9e:	78db      	ldrb	r3, [r3, #3]
 800caa0:	061a      	lsls	r2, r3, #24
 800caa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa4:	789b      	ldrb	r3, [r3, #2]
 800caa6:	041b      	lsls	r3, r3, #16
 800caa8:	4313      	orrs	r3, r2
 800caaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caac:	7852      	ldrb	r2, [r2, #1]
 800caae:	0212      	lsls	r2, r2, #8
 800cab0:	4313      	orrs	r3, r2
 800cab2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cab4:	7812      	ldrb	r2, [r2, #0]
 800cab6:	4313      	orrs	r3, r2
 800cab8:	4a2d      	ldr	r2, [pc, #180]	; (800cb70 <find_volume+0x598>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d13e      	bne.n	800cb3c <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800cabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac0:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800cac4:	061a      	lsls	r2, r3, #24
 800cac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac8:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800cacc:	041b      	lsls	r3, r3, #16
 800cace:	4313      	orrs	r3, r2
 800cad0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cad2:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800cad6:	0212      	lsls	r2, r2, #8
 800cad8:	4313      	orrs	r3, r2
 800cada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cadc:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800cae0:	4313      	orrs	r3, r2
 800cae2:	4a24      	ldr	r2, [pc, #144]	; (800cb74 <find_volume+0x59c>)
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d129      	bne.n	800cb3c <find_volume+0x564>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800cae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caea:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800caee:	061a      	lsls	r2, r3, #24
 800caf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf2:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800caf6:	041b      	lsls	r3, r3, #16
 800caf8:	4313      	orrs	r3, r2
 800cafa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cafc:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800cb00:	0212      	lsls	r2, r2, #8
 800cb02:	4313      	orrs	r3, r2
 800cb04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb06:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800cb0a:	431a      	orrs	r2, r3
 800cb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800cb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb14:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800cb18:	061a      	lsls	r2, r3, #24
 800cb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1c:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800cb20:	041b      	lsls	r3, r3, #16
 800cb22:	4313      	orrs	r3, r2
 800cb24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb26:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800cb2a:	0212      	lsls	r2, r2, #8
 800cb2c:	4313      	orrs	r3, r2
 800cb2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb30:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800cb34:	431a      	orrs	r2, r3
 800cb36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb38:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800cb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cb42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800cb46:	4b0c      	ldr	r3, [pc, #48]	; (800cb78 <find_volume+0x5a0>)
 800cb48:	881b      	ldrh	r3, [r3, #0]
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	b29a      	uxth	r2, r3
 800cb4e:	4b0a      	ldr	r3, [pc, #40]	; (800cb78 <find_volume+0x5a0>)
 800cb50:	801a      	strh	r2, [r3, #0]
 800cb52:	4b09      	ldr	r3, [pc, #36]	; (800cb78 <find_volume+0x5a0>)
 800cb54:	881a      	ldrh	r2, [r3, #0]
 800cb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb58:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800cb5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb5e:	f7fd fe3d 	bl	800a7dc <clear_lock>
#endif

	return FR_OK;
 800cb62:	2300      	movs	r3, #0
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3758      	adds	r7, #88	; 0x58
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	ffffaa55 	.word	0xffffaa55
 800cb70:	41615252 	.word	0x41615252
 800cb74:	61417272 	.word	0x61417272
 800cb78:	200001e4 	.word	0x200001e4

0800cb7c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d022      	beq.n	800cbd4 <validate+0x58>
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d01d      	beq.n	800cbd4 <validate+0x58>
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cb9e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d016      	beq.n	800cbd4 <validate+0x58>
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cbac:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d10c      	bne.n	800cbd4 <validate+0x58>
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cbc0:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7fd fb3b 	bl	800a240 <disk_status>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	f003 0301 	and.w	r3, r3, #1
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d001      	beq.n	800cbd8 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800cbd4:	2309      	movs	r3, #9
 800cbd6:	e00b      	b.n	800cbf0 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7fd fc44 	bl	800a46c <lock_fs>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d101      	bne.n	800cbee <validate+0x72>
 800cbea:	230f      	movs	r3, #15
 800cbec:	e000      	b.n	800cbf0 <validate+0x74>

	return FR_OK;
 800cbee:	2300      	movs	r3, #0
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3710      	adds	r7, #16
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	f5ad 6d8b 	sub.w	sp, sp, #1112	; 0x458
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	f107 030c 	add.w	r3, r7, #12
 800cc04:	6018      	str	r0, [r3, #0]
 800cc06:	f107 0308 	add.w	r3, r7, #8
 800cc0a:	6019      	str	r1, [r3, #0]
 800cc0c:	1dfb      	adds	r3, r7, #7
 800cc0e:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800cc10:	f107 030c 	add.w	r3, r7, #12
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d101      	bne.n	800cc1e <f_open+0x26>
 800cc1a:	2309      	movs	r3, #9
 800cc1c:	e202      	b.n	800d024 <f_open+0x42c>
	fp->fs = 0;			/* Clear file object */
 800cc1e:	f107 030c 	add.w	r3, r7, #12
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	2200      	movs	r2, #0
 800cc26:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800cc2a:	1dfb      	adds	r3, r7, #7
 800cc2c:	1dfa      	adds	r2, r7, #7
 800cc2e:	7812      	ldrb	r2, [r2, #0]
 800cc30:	f002 021f 	and.w	r2, r2, #31
 800cc34:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800cc36:	1dfb      	adds	r3, r7, #7
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	f023 0301 	bic.w	r3, r3, #1
 800cc3e:	b2da      	uxtb	r2, r3
 800cc40:	f107 0108 	add.w	r1, r7, #8
 800cc44:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800cc48:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7ff fcc3 	bl	800c5d8 <find_volume>
 800cc52:	4603      	mov	r3, r0
 800cc54:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800cc58:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	f040 81d5 	bne.w	800d00c <f_open+0x414>
		INIT_BUF(dj);
 800cc62:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800cc66:	f507 7205 	add.w	r2, r7, #532	; 0x214
 800cc6a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800cc6e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800cc72:	f107 0214 	add.w	r2, r7, #20
 800cc76:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		res = follow_path(&dj, path);	/* Follow the file path */
 800cc7a:	f107 0308 	add.w	r3, r7, #8
 800cc7e:	681a      	ldr	r2, [r3, #0]
 800cc80:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800cc84:	4611      	mov	r1, r2
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7ff fb8a 	bl	800c3a0 <follow_path>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
		dir = dj.dir;
 800cc92:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800cc96:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cc9a:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cc9e:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d11a      	bne.n	800ccdc <f_open+0xe4>
			if (!dir)	/* Default directory itself */
 800cca6:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d103      	bne.n	800ccb6 <f_open+0xbe>
				res = FR_INVALID_NAME;
 800ccae:	2306      	movs	r3, #6
 800ccb0:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 800ccb4:	e012      	b.n	800ccdc <f_open+0xe4>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ccb6:	1dfb      	adds	r3, r7, #7
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	f023 0301 	bic.w	r3, r3, #1
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	bf14      	ite	ne
 800ccc2:	2301      	movne	r3, #1
 800ccc4:	2300      	moveq	r3, #0
 800ccc6:	b2db      	uxtb	r3, r3
 800ccc8:	461a      	mov	r2, r3
 800ccca:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800ccce:	4611      	mov	r1, r2
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f7fd fbf9 	bl	800a4c8 <chk_lock>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ccdc:	1dfb      	adds	r3, r7, #7
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	f003 031c 	and.w	r3, r3, #28
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	f000 80cc 	beq.w	800ce82 <f_open+0x28a>
			if (res != FR_OK) {					/* No file, create new */
 800ccea:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d01f      	beq.n	800cd32 <f_open+0x13a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800ccf2:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800ccf6:	2b04      	cmp	r3, #4
 800ccf8:	d10e      	bne.n	800cd18 <f_open+0x120>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ccfa:	f7fd fc51 	bl	800a5a0 <enq_lock>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d006      	beq.n	800cd12 <f_open+0x11a>
 800cd04:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7fe ff65 	bl	800bbd8 <dir_register>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	e000      	b.n	800cd14 <f_open+0x11c>
 800cd12:	2312      	movs	r3, #18
 800cd14:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cd18:	1dfb      	adds	r3, r7, #7
 800cd1a:	1dfa      	adds	r2, r7, #7
 800cd1c:	7812      	ldrb	r2, [r2, #0]
 800cd1e:	f042 0208 	orr.w	r2, r2, #8
 800cd22:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800cd24:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800cd28:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cd2c:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 800cd30:	e014      	b.n	800cd5c <f_open+0x164>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cd32:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800cd36:	330b      	adds	r3, #11
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	f003 0311 	and.w	r3, r3, #17
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d003      	beq.n	800cd4a <f_open+0x152>
					res = FR_DENIED;
 800cd42:	2307      	movs	r3, #7
 800cd44:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 800cd48:	e008      	b.n	800cd5c <f_open+0x164>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800cd4a:	1dfb      	adds	r3, r7, #7
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	f003 0304 	and.w	r3, r3, #4
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d002      	beq.n	800cd5c <f_open+0x164>
						res = FR_EXIST;
 800cd56:	2308      	movs	r3, #8
 800cd58:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cd5c:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	f040 80af 	bne.w	800cec4 <f_open+0x2cc>
 800cd66:	1dfb      	adds	r3, r7, #7
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	f003 0308 	and.w	r3, r3, #8
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	f000 80a8 	beq.w	800cec4 <f_open+0x2cc>
				dw = GET_FATTIME();				/* Created time */
 800cd74:	f7fd f9b4 	bl	800a0e0 <get_fattime>
 800cd78:	f8c7 044c 	str.w	r0, [r7, #1100]	; 0x44c
				ST_DWORD(dir + DIR_CrtTime, dw);
 800cd7c:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800cd80:	330e      	adds	r3, #14
 800cd82:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 800cd86:	b2d2      	uxtb	r2, r2
 800cd88:	701a      	strb	r2, [r3, #0]
 800cd8a:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	0a1b      	lsrs	r3, r3, #8
 800cd92:	b29a      	uxth	r2, r3
 800cd94:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800cd98:	330f      	adds	r3, #15
 800cd9a:	b2d2      	uxtb	r2, r2
 800cd9c:	701a      	strb	r2, [r3, #0]
 800cd9e:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800cda2:	0c1a      	lsrs	r2, r3, #16
 800cda4:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800cda8:	3310      	adds	r3, #16
 800cdaa:	b2d2      	uxtb	r2, r2
 800cdac:	701a      	strb	r2, [r3, #0]
 800cdae:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800cdb2:	0e1a      	lsrs	r2, r3, #24
 800cdb4:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800cdb8:	3311      	adds	r3, #17
 800cdba:	b2d2      	uxtb	r2, r2
 800cdbc:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800cdbe:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800cdc2:	330b      	adds	r3, #11
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800cdc8:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800cdcc:	331c      	adds	r3, #28
 800cdce:	2200      	movs	r2, #0
 800cdd0:	701a      	strb	r2, [r3, #0]
 800cdd2:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800cdd6:	331d      	adds	r3, #29
 800cdd8:	2200      	movs	r2, #0
 800cdda:	701a      	strb	r2, [r3, #0]
 800cddc:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800cde0:	331e      	adds	r3, #30
 800cde2:	2200      	movs	r2, #0
 800cde4:	701a      	strb	r2, [r3, #0]
 800cde6:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800cdea:	331f      	adds	r3, #31
 800cdec:	2200      	movs	r2, #0
 800cdee:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800cdf0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800cdf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cdf8:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f7fe fb24 	bl	800b44a <ld_clust>
 800ce02:	f8c7 0448 	str.w	r0, [r7, #1096]	; 0x448
				st_clust(dir, 0);				/* cluster = 0 */
 800ce06:	2100      	movs	r1, #0
 800ce08:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 800ce0c:	f7fe fb4a 	bl	800b4a4 <st_clust>
				dj.fs->wflag = 1;
 800ce10:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800ce14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ce18:	2201      	movs	r2, #1
 800ce1a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800ce1e:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d04e      	beq.n	800cec4 <f_open+0x2cc>
					dw = dj.fs->winsect;
 800ce26:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800ce2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ce2e:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800ce32:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
					res = remove_chain(dj.fs, cl);
 800ce36:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800ce3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ce3e:	f8d7 1448 	ldr.w	r1, [r7, #1096]	; 0x448
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7fe f801 	bl	800ae4a <remove_chain>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
					if (res == FR_OK) {
 800ce4e:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d136      	bne.n	800cec4 <f_open+0x2cc>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800ce56:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800ce5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ce5e:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 800ce62:	3a01      	subs	r2, #1
 800ce64:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
						res = move_window(dj.fs, dw);
 800ce68:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800ce6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ce70:	f8d7 144c 	ldr.w	r1, [r7, #1100]	; 0x44c
 800ce74:	4618      	mov	r0, r3
 800ce76:	f7fd fd24 	bl	800a8c2 <move_window>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 800ce80:	e020      	b.n	800cec4 <f_open+0x2cc>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800ce82:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d11c      	bne.n	800cec4 <f_open+0x2cc>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800ce8a:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800ce8e:	330b      	adds	r3, #11
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	f003 0310 	and.w	r3, r3, #16
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d003      	beq.n	800cea2 <f_open+0x2aa>
					res = FR_NO_FILE;
 800ce9a:	2304      	movs	r3, #4
 800ce9c:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 800cea0:	e010      	b.n	800cec4 <f_open+0x2cc>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800cea2:	1dfb      	adds	r3, r7, #7
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	f003 0302 	and.w	r3, r3, #2
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d00a      	beq.n	800cec4 <f_open+0x2cc>
 800ceae:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800ceb2:	330b      	adds	r3, #11
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	f003 0301 	and.w	r3, r3, #1
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d002      	beq.n	800cec4 <f_open+0x2cc>
						res = FR_DENIED;
 800cebe:	2307      	movs	r3, #7
 800cec0:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
				}
			}
		}
		if (res == FR_OK) {
 800cec4:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d13d      	bne.n	800cf48 <f_open+0x350>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cecc:	1dfb      	adds	r3, r7, #7
 800cece:	781b      	ldrb	r3, [r3, #0]
 800ced0:	f003 0308 	and.w	r3, r3, #8
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d005      	beq.n	800cee4 <f_open+0x2ec>
				mode |= FA__WRITTEN;
 800ced8:	1dfb      	adds	r3, r7, #7
 800ceda:	1dfa      	adds	r2, r7, #7
 800cedc:	7812      	ldrb	r2, [r2, #0]
 800cede:	f042 0220 	orr.w	r2, r2, #32
 800cee2:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800cee4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800cee8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ceec:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 800cef0:	f107 030c 	add.w	r3, r7, #12
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800cefa:	f107 030c 	add.w	r3, r7, #12
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 800cf04:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cf08:	1dfb      	adds	r3, r7, #7
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	f023 0301 	bic.w	r3, r3, #1
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	bf14      	ite	ne
 800cf14:	2301      	movne	r3, #1
 800cf16:	2300      	moveq	r3, #0
 800cf18:	b2db      	uxtb	r3, r3
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800cf20:	4611      	mov	r1, r2
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7fd fb60 	bl	800a5e8 <inc_lock>
 800cf28:	4602      	mov	r2, r0
 800cf2a:	f107 030c 	add.w	r3, r7, #12
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800cf34:	f107 030c 	add.w	r3, r7, #12
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d102      	bne.n	800cf48 <f_open+0x350>
 800cf42:	2302      	movs	r3, #2
 800cf44:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800cf48:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d15d      	bne.n	800d00c <f_open+0x414>
			fp->flag = mode;					/* File access mode */
 800cf50:	f107 030c 	add.w	r3, r7, #12
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	1dfa      	adds	r2, r7, #7
 800cf58:	7812      	ldrb	r2, [r2, #0]
 800cf5a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800cf5e:	f107 030c 	add.w	r3, r7, #12
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	2200      	movs	r2, #0
 800cf66:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800cf6a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800cf6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cf72:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 800cf76:	4618      	mov	r0, r3
 800cf78:	f7fe fa67 	bl	800b44a <ld_clust>
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	f107 030c 	add.w	r3, r7, #12
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800cf88:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800cf8c:	331f      	adds	r3, #31
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	061a      	lsls	r2, r3, #24
 800cf92:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800cf96:	331e      	adds	r3, #30
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	041b      	lsls	r3, r3, #16
 800cf9c:	4313      	orrs	r3, r2
 800cf9e:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 800cfa2:	321d      	adds	r2, #29
 800cfa4:	7812      	ldrb	r2, [r2, #0]
 800cfa6:	0212      	lsls	r2, r2, #8
 800cfa8:	4313      	orrs	r3, r2
 800cfaa:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 800cfae:	321c      	adds	r2, #28
 800cfb0:	7812      	ldrb	r2, [r2, #0]
 800cfb2:	431a      	orrs	r2, r3
 800cfb4:	f107 030c 	add.w	r3, r7, #12
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800cfbe:	f107 030c 	add.w	r3, r7, #12
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800cfca:	f107 030c 	add.w	r3, r7, #12
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800cfd6:	f107 030c 	add.w	r3, r7, #12
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800cfe2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800cfe6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800cfea:	f107 030c 	add.w	r3, r7, #12
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 800cff4:	f107 030c 	add.w	r3, r7, #12
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cffe:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800d002:	f107 030c 	add.w	r3, r7, #12
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800d00c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800d010:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d014:	f897 2457 	ldrb.w	r2, [r7, #1111]	; 0x457
 800d018:	4611      	mov	r1, r2
 800d01a:	4618      	mov	r0, r3
 800d01c:	f7fd fa35 	bl	800a48a <unlock_fs>
 800d020:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
}
 800d024:	4618      	mov	r0, r3
 800d026:	f507 678b 	add.w	r7, r7, #1112	; 0x458
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}

0800d02e <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800d02e:	b580      	push	{r7, lr}
 800d030:	b08c      	sub	sp, #48	; 0x30
 800d032:	af00      	add	r7, sp, #0
 800d034:	60f8      	str	r0, [r7, #12]
 800d036:	60b9      	str	r1, [r7, #8]
 800d038:	607a      	str	r2, [r7, #4]
 800d03a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	2200      	movs	r2, #0
 800d044:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800d046:	68f8      	ldr	r0, [r7, #12]
 800d048:	f7ff fd98 	bl	800cb7c <validate>
 800d04c:	4603      	mov	r3, r0
 800d04e:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800d050:	7ffb      	ldrb	r3, [r7, #31]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d009      	beq.n	800d06a <f_read+0x3c>
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d05c:	7ffa      	ldrb	r2, [r7, #31]
 800d05e:	4611      	mov	r1, r2
 800d060:	4618      	mov	r0, r3
 800d062:	f7fd fa12 	bl	800a48a <unlock_fs>
 800d066:	7ffb      	ldrb	r3, [r7, #31]
 800d068:	e192      	b.n	800d390 <f_read+0x362>
	if (fp->err)								/* Check error */
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800d070:	2b00      	cmp	r3, #0
 800d072:	d00d      	beq.n	800d090 <f_read+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800d080:	4619      	mov	r1, r3
 800d082:	4610      	mov	r0, r2
 800d084:	f7fd fa01 	bl	800a48a <unlock_fs>
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800d08e:	e17f      	b.n	800d390 <f_read+0x362>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d096:	f003 0301 	and.w	r3, r3, #1
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d108      	bne.n	800d0b0 <f_read+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d0a4:	2107      	movs	r1, #7
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7fd f9ef 	bl	800a48a <unlock_fs>
 800d0ac:	2307      	movs	r3, #7
 800d0ae:	e16f      	b.n	800d390 <f_read+0x362>
	remain = fp->fsize - fp->fptr;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d0bc:	1ad3      	subs	r3, r2, r3
 800d0be:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d0c0:	687a      	ldr	r2, [r7, #4]
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	f240 8157 	bls.w	800d378 <f_read+0x34a>
 800d0ca:	69bb      	ldr	r3, [r7, #24]
 800d0cc:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d0ce:	e153      	b.n	800d378 <f_read+0x34a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d0d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	f040 811c 	bne.w	800d318 <f_read+0x2ea>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d0e6:	0a5b      	lsrs	r3, r3, #9
 800d0e8:	b2da      	uxtb	r2, r3
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d0f0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800d0f4:	3b01      	subs	r3, #1
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	4013      	ands	r3, r2
 800d0fa:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800d0fc:	7dfb      	ldrb	r3, [r7, #23]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d147      	bne.n	800d192 <f_read+0x164>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d104      	bne.n	800d116 <f_read+0xe8>
					clst = fp->sclust;			/* Follow from the origin */
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d112:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d114:	e018      	b.n	800d148 <f_read+0x11a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d008      	beq.n	800d132 <f_read+0x104>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d126:	4619      	mov	r1, r3
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	f7fd ff85 	bl	800b038 <clmt_clust>
 800d12e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d130:	e00a      	b.n	800d148 <f_read+0x11a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d13e:	4619      	mov	r1, r3
 800d140:	4610      	mov	r0, r2
 800d142:	f7fd fcba 	bl	800aaba <get_fat>
 800d146:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800d148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d14a:	2b01      	cmp	r3, #1
 800d14c:	d80c      	bhi.n	800d168 <f_read+0x13a>
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2202      	movs	r2, #2
 800d152:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d15c:	2102      	movs	r1, #2
 800d15e:	4618      	mov	r0, r3
 800d160:	f7fd f993 	bl	800a48a <unlock_fs>
 800d164:	2302      	movs	r3, #2
 800d166:	e113      	b.n	800d390 <f_read+0x362>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d16e:	d10c      	bne.n	800d18a <f_read+0x15c>
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2201      	movs	r2, #1
 800d174:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d17e:	2101      	movs	r1, #1
 800d180:	4618      	mov	r0, r3
 800d182:	f7fd f982 	bl	800a48a <unlock_fs>
 800d186:	2301      	movs	r3, #1
 800d188:	e102      	b.n	800d390 <f_read+0x362>
				fp->clust = clst;				/* Update current cluster */
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d18e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d19e:	4619      	mov	r1, r3
 800d1a0:	4610      	mov	r0, r2
 800d1a2:	f7fd fc69 	bl	800aa78 <clust2sect>
 800d1a6:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d10c      	bne.n	800d1c8 <f_read+0x19a>
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2202      	movs	r2, #2
 800d1b2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d1bc:	2102      	movs	r1, #2
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fd f963 	bl	800a48a <unlock_fs>
 800d1c4:	2302      	movs	r3, #2
 800d1c6:	e0e3      	b.n	800d390 <f_read+0x362>
			sect += csect;
 800d1c8:	7dfb      	ldrb	r3, [r7, #23]
 800d1ca:	693a      	ldr	r2, [r7, #16]
 800d1cc:	4413      	add	r3, r2
 800d1ce:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	0a5b      	lsrs	r3, r3, #9
 800d1d4:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d04d      	beq.n	800d278 <f_read+0x24a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800d1dc:	7dfa      	ldrb	r2, [r7, #23]
 800d1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e0:	4413      	add	r3, r2
 800d1e2:	68fa      	ldr	r2, [r7, #12]
 800d1e4:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800d1e8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d908      	bls.n	800d202 <f_read+0x1d4>
					cc = fp->fs->csize - csect;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d1f6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	7dfb      	ldrb	r3, [r7, #23]
 800d1fe:	1ad3      	subs	r3, r2, r3
 800d200:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d208:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800d20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20e:	693a      	ldr	r2, [r7, #16]
 800d210:	6a39      	ldr	r1, [r7, #32]
 800d212:	f7fd f855 	bl	800a2c0 <disk_read>
 800d216:	4603      	mov	r3, r0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d00c      	beq.n	800d236 <f_read+0x208>
					ABORT(fp->fs, FR_DISK_ERR);
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2201      	movs	r2, #1
 800d220:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d22a:	2101      	movs	r1, #1
 800d22c:	4618      	mov	r0, r3
 800d22e:	f7fd f92c 	bl	800a48a <unlock_fs>
 800d232:	2301      	movs	r3, #1
 800d234:	e0ac      	b.n	800d390 <f_read+0x362>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d23c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d240:	2b00      	cmp	r3, #0
 800d242:	d015      	beq.n	800d270 <f_read+0x242>
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	1ad3      	subs	r3, r2, r3
 800d24e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d250:	429a      	cmp	r2, r3
 800d252:	d90d      	bls.n	800d270 <f_read+0x242>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	1ad3      	subs	r3, r2, r3
 800d25e:	025b      	lsls	r3, r3, #9
 800d260:	6a3a      	ldr	r2, [r7, #32]
 800d262:	4413      	add	r3, r2
 800d264:	68f9      	ldr	r1, [r7, #12]
 800d266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d26a:	4618      	mov	r0, r3
 800d26c:	f7fd f886 	bl	800a37c <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800d270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d272:	025b      	lsls	r3, r3, #9
 800d274:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800d276:	e069      	b.n	800d34c <f_read+0x31e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d27e:	693a      	ldr	r2, [r7, #16]
 800d280:	429a      	cmp	r2, r3
 800d282:	d045      	beq.n	800d310 <f_read+0x2e2>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d28a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d024      	beq.n	800d2dc <f_read+0x2ae>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d298:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800d29c:	68f9      	ldr	r1, [r7, #12]
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	f7fd f82b 	bl	800a300 <disk_write>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d00c      	beq.n	800d2ca <f_read+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2201      	movs	r2, #1
 800d2b4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d2be:	2101      	movs	r1, #1
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7fd f8e2 	bl	800a48a <unlock_fs>
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	e062      	b.n	800d390 <f_read+0x362>
					fp->flag &= ~FA__DIRTY;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d2d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2d4:	b2da      	uxtb	r2, r3
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d2e2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800d2e6:	68f9      	ldr	r1, [r7, #12]
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	693a      	ldr	r2, [r7, #16]
 800d2ec:	f7fc ffe8 	bl	800a2c0 <disk_read>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d00c      	beq.n	800d310 <f_read+0x2e2>
					ABORT(fp->fs, FR_DISK_ERR);
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d304:	2101      	movs	r1, #1
 800d306:	4618      	mov	r0, r3
 800d308:	f7fd f8bf 	bl	800a48a <unlock_fs>
 800d30c:	2301      	movs	r3, #1
 800d30e:	e03f      	b.n	800d390 <f_read+0x362>
			}
#endif
			fp->dsect = sect;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	693a      	ldr	r2, [r7, #16]
 800d314:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d31e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d322:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d326:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800d328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d901      	bls.n	800d334 <f_read+0x306>
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d33a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d33e:	68fa      	ldr	r2, [r7, #12]
 800d340:	4413      	add	r3, r2
 800d342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d344:	4619      	mov	r1, r3
 800d346:	6a38      	ldr	r0, [r7, #32]
 800d348:	f7fd f818 	bl	800a37c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d34c:	6a3a      	ldr	r2, [r7, #32]
 800d34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d350:	4413      	add	r3, r2
 800d352:	623b      	str	r3, [r7, #32]
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d35c:	441a      	add	r2, r3
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36a:	441a      	add	r2, r3
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	601a      	str	r2, [r3, #0]
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d374:	1ad3      	subs	r3, r2, r3
 800d376:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	f47f aea8 	bne.w	800d0d0 <f_read+0xa2>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d386:	2100      	movs	r1, #0
 800d388:	4618      	mov	r0, r3
 800d38a:	f7fd f87e 	bl	800a48a <unlock_fs>
 800d38e:	2300      	movs	r3, #0
}
 800d390:	4618      	mov	r0, r3
 800d392:	3730      	adds	r7, #48	; 0x30
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}

0800d398 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b086      	sub	sp, #24
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f7ff fbeb 	bl	800cb7c <validate>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d3aa:	7dfb      	ldrb	r3, [r7, #23]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	f040 80af 	bne.w	800d510 <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d3b8:	f003 0320 	and.w	r3, r3, #32
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	f000 80a7 	beq.w	800d510 <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d3c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d020      	beq.n	800d412 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d3d6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800d3da:	6879      	ldr	r1, [r7, #4]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	f7fc ff8c 	bl	800a300 <disk_write>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d008      	beq.n	800d400 <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d3f4:	2101      	movs	r1, #1
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f7fd f847 	bl	800a48a <unlock_fs>
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	e090      	b.n	800d522 <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d40a:	b2da      	uxtb	r2, r3
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800d41e:	4619      	mov	r1, r3
 800d420:	4610      	mov	r0, r2
 800d422:	f7fd fa4e 	bl	800a8c2 <move_window>
 800d426:	4603      	mov	r3, r0
 800d428:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800d42a:	7dfb      	ldrb	r3, [r7, #23]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d16f      	bne.n	800d510 <f_sync+0x178>
				dir = fp->dir_ptr;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800d436:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	330b      	adds	r3, #11
 800d43c:	781a      	ldrb	r2, [r3, #0]
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	330b      	adds	r3, #11
 800d442:	f042 0220 	orr.w	r2, r2, #32
 800d446:	b2d2      	uxtb	r2, r2
 800d448:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	331c      	adds	r3, #28
 800d454:	b2d2      	uxtb	r2, r2
 800d456:	701a      	strb	r2, [r3, #0]
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d45e:	b29b      	uxth	r3, r3
 800d460:	0a1b      	lsrs	r3, r3, #8
 800d462:	b29a      	uxth	r2, r3
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	331d      	adds	r3, #29
 800d468:	b2d2      	uxtb	r2, r2
 800d46a:	701a      	strb	r2, [r3, #0]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d472:	0c1a      	lsrs	r2, r3, #16
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	331e      	adds	r3, #30
 800d478:	b2d2      	uxtb	r2, r2
 800d47a:	701a      	strb	r2, [r3, #0]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d482:	0e1a      	lsrs	r2, r3, #24
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	331f      	adds	r3, #31
 800d488:	b2d2      	uxtb	r2, r2
 800d48a:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d492:	4619      	mov	r1, r3
 800d494:	6938      	ldr	r0, [r7, #16]
 800d496:	f7fe f805 	bl	800b4a4 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800d49a:	f7fc fe21 	bl	800a0e0 <get_fattime>
 800d49e:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	3316      	adds	r3, #22
 800d4a4:	68fa      	ldr	r2, [r7, #12]
 800d4a6:	b2d2      	uxtb	r2, r2
 800d4a8:	701a      	strb	r2, [r3, #0]
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	b29b      	uxth	r3, r3
 800d4ae:	0a1b      	lsrs	r3, r3, #8
 800d4b0:	b29a      	uxth	r2, r3
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	3317      	adds	r3, #23
 800d4b6:	b2d2      	uxtb	r2, r2
 800d4b8:	701a      	strb	r2, [r3, #0]
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	0c1a      	lsrs	r2, r3, #16
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	3318      	adds	r3, #24
 800d4c2:	b2d2      	uxtb	r2, r2
 800d4c4:	701a      	strb	r2, [r3, #0]
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	0e1a      	lsrs	r2, r3, #24
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	3319      	adds	r3, #25
 800d4ce:	b2d2      	uxtb	r2, r2
 800d4d0:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	3312      	adds	r3, #18
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	701a      	strb	r2, [r3, #0]
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	3313      	adds	r3, #19
 800d4de:	2200      	movs	r2, #0
 800d4e0:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d4e8:	f023 0320 	bic.w	r3, r3, #32
 800d4ec:	b2da      	uxtb	r2, r3
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d506:	4618      	mov	r0, r3
 800d508:	f7fd fa09 	bl	800a91e <sync_fs>
 800d50c:	4603      	mov	r3, r0
 800d50e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d516:	7dfa      	ldrb	r2, [r7, #23]
 800d518:	4611      	mov	r1, r2
 800d51a:	4618      	mov	r0, r3
 800d51c:	f7fc ffb5 	bl	800a48a <unlock_fs>
 800d520:	7dfb      	ldrb	r3, [r7, #23]
}
 800d522:	4618      	mov	r0, r3
 800d524:	3718      	adds	r7, #24
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}

0800d52a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800d52a:	b580      	push	{r7, lr}
 800d52c:	b084      	sub	sp, #16
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f7ff ff30 	bl	800d398 <f_sync>
 800d538:	4603      	mov	r3, r0
 800d53a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d53c:	7bfb      	ldrb	r3, [r7, #15]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d11e      	bne.n	800d580 <f_close+0x56>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f7ff fb1a 	bl	800cb7c <validate>
 800d548:	4603      	mov	r3, r0
 800d54a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d54c:	7bfb      	ldrb	r3, [r7, #15]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d116      	bne.n	800d580 <f_close+0x56>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d558:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800d560:	4618      	mov	r0, r3
 800d562:	f7fd f8f7 	bl	800a754 <dec_lock>
 800d566:	4603      	mov	r3, r0
 800d568:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d56a:	7bfb      	ldrb	r3, [r7, #15]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d103      	bne.n	800d578 <f_close+0x4e>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2200      	movs	r2, #0
 800d574:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800d578:	2100      	movs	r1, #0
 800d57a:	68b8      	ldr	r0, [r7, #8]
 800d57c:	f7fc ff85 	bl	800a48a <unlock_fs>
#endif
		}
	}
	return res;
 800d580:	7bfb      	ldrb	r3, [r7, #15]
}
 800d582:	4618      	mov	r0, r3
 800d584:	3710      	adds	r7, #16
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}

0800d58a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800d58a:	b580      	push	{r7, lr}
 800d58c:	b090      	sub	sp, #64	; 0x40
 800d58e:	af00      	add	r7, sp, #0
 800d590:	6078      	str	r0, [r7, #4]
 800d592:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f7ff faf1 	bl	800cb7c <validate>
 800d59a:	4603      	mov	r3, r0
 800d59c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800d5a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d00b      	beq.n	800d5c0 <f_lseek+0x36>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d5ae:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d5b2:	4611      	mov	r1, r2
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f7fc ff68 	bl	800a48a <unlock_fs>
 800d5ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d5be:	e2af      	b.n	800db20 <f_lseek+0x596>
	if (fp->err)						/* Check error */
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d00d      	beq.n	800d5e6 <f_lseek+0x5c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	4610      	mov	r0, r2
 800d5da:	f7fc ff56 	bl	800a48a <unlock_fs>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800d5e4:	e29c      	b.n	800db20 <f_lseek+0x596>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	f000 8115 	beq.w	800d81c <f_lseek+0x292>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5f8:	d172      	bne.n	800d6e0 <f_lseek+0x156>
			tbl = fp->cltbl;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800d600:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d604:	1d1a      	adds	r2, r3, #4
 800d606:	627a      	str	r2, [r7, #36]	; 0x24
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	617b      	str	r3, [r7, #20]
 800d60c:	2302      	movs	r3, #2
 800d60e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d616:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800d618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d04f      	beq.n	800d6be <f_lseek+0x134>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d620:	613b      	str	r3, [r7, #16]
 800d622:	2300      	movs	r3, #0
 800d624:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d628:	3302      	adds	r3, #2
 800d62a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800d62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d62e:	60fb      	str	r3, [r7, #12]
 800d630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d632:	3301      	adds	r3, #1
 800d634:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d63c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d63e:	4618      	mov	r0, r3
 800d640:	f7fd fa3b 	bl	800aaba <get_fat>
 800d644:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800d646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d648:	2b01      	cmp	r3, #1
 800d64a:	d80c      	bhi.n	800d666 <f_lseek+0xdc>
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2202      	movs	r2, #2
 800d650:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d65a:	2102      	movs	r1, #2
 800d65c:	4618      	mov	r0, r3
 800d65e:	f7fc ff14 	bl	800a48a <unlock_fs>
 800d662:	2302      	movs	r3, #2
 800d664:	e25c      	b.n	800db20 <f_lseek+0x596>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d66c:	d10c      	bne.n	800d688 <f_lseek+0xfe>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2201      	movs	r2, #1
 800d672:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d67c:	2101      	movs	r1, #1
 800d67e:	4618      	mov	r0, r3
 800d680:	f7fc ff03 	bl	800a48a <unlock_fs>
 800d684:	2301      	movs	r3, #1
 800d686:	e24b      	b.n	800db20 <f_lseek+0x596>
					} while (cl == pcl + 1);
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	3301      	adds	r3, #1
 800d68c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d68e:	429a      	cmp	r2, r3
 800d690:	d0cc      	beq.n	800d62c <f_lseek+0xa2>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	429a      	cmp	r2, r3
 800d698:	d809      	bhi.n	800d6ae <f_lseek+0x124>
						*tbl++ = ncl; *tbl++ = tcl;
 800d69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69c:	1d1a      	adds	r2, r3, #4
 800d69e:	627a      	str	r2, [r7, #36]	; 0x24
 800d6a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6a2:	601a      	str	r2, [r3, #0]
 800d6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a6:	1d1a      	adds	r2, r3, #4
 800d6a8:	627a      	str	r2, [r7, #36]	; 0x24
 800d6aa:	693a      	ldr	r2, [r7, #16]
 800d6ac:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d6b4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d6b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d3af      	bcc.n	800d61e <f_lseek+0x94>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800d6c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6c6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800d6c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d803      	bhi.n	800d6d8 <f_lseek+0x14e>
				*tbl = 0;		/* Terminate table */
 800d6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	601a      	str	r2, [r3, #0]
 800d6d6:	e218      	b.n	800db0a <f_lseek+0x580>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d6d8:	2311      	movs	r3, #17
 800d6da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d6de:	e214      	b.n	800db0a <f_lseek+0x580>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d6e6:	683a      	ldr	r2, [r7, #0]
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d903      	bls.n	800d6f4 <f_lseek+0x16a>
				ofs = fp->fsize;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d6f2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	683a      	ldr	r2, [r7, #0]
 800d6f8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (ofs) {
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	f000 8203 	beq.w	800db0a <f_lseek+0x580>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	3b01      	subs	r3, #1
 800d708:	4619      	mov	r1, r3
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f7fd fc94 	bl	800b038 <clmt_clust>
 800d710:	4602      	mov	r2, r0
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d724:	4619      	mov	r1, r3
 800d726:	4610      	mov	r0, r2
 800d728:	f7fd f9a6 	bl	800aa78 <clust2sect>
 800d72c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800d72e:	69bb      	ldr	r3, [r7, #24]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d10c      	bne.n	800d74e <f_lseek+0x1c4>
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2202      	movs	r2, #2
 800d738:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d742:	2102      	movs	r1, #2
 800d744:	4618      	mov	r0, r3
 800d746:	f7fc fea0 	bl	800a48a <unlock_fs>
 800d74a:	2302      	movs	r3, #2
 800d74c:	e1e8      	b.n	800db20 <f_lseek+0x596>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	3b01      	subs	r3, #1
 800d752:	0a5b      	lsrs	r3, r3, #9
 800d754:	687a      	ldr	r2, [r7, #4]
 800d756:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800d75a:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800d75e:	3a01      	subs	r2, #1
 800d760:	4013      	ands	r3, r2
 800d762:	69ba      	ldr	r2, [r7, #24]
 800d764:	4413      	add	r3, r2
 800d766:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d76e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d772:	2b00      	cmp	r3, #0
 800d774:	f000 81c9 	beq.w	800db0a <f_lseek+0x580>
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d77e:	69ba      	ldr	r2, [r7, #24]
 800d780:	429a      	cmp	r2, r3
 800d782:	f000 81c2 	beq.w	800db0a <f_lseek+0x580>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d78c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d790:	2b00      	cmp	r3, #0
 800d792:	d024      	beq.n	800d7de <f_lseek+0x254>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d79a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800d79e:	6879      	ldr	r1, [r7, #4]
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	f7fc fdaa 	bl	800a300 <disk_write>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d00c      	beq.n	800d7cc <f_lseek+0x242>
							ABORT(fp->fs, FR_DISK_ERR);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d7c0:	2101      	movs	r1, #1
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7fc fe61 	bl	800a48a <unlock_fs>
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	e1a9      	b.n	800db20 <f_lseek+0x596>
						fp->flag &= ~FA__DIRTY;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d7d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7d6:	b2da      	uxtb	r2, r3
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d7e4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800d7e8:	6879      	ldr	r1, [r7, #4]
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	69ba      	ldr	r2, [r7, #24]
 800d7ee:	f7fc fd67 	bl	800a2c0 <disk_read>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d00c      	beq.n	800d812 <f_lseek+0x288>
						ABORT(fp->fs, FR_DISK_ERR);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d806:	2101      	movs	r1, #1
 800d808:	4618      	mov	r0, r3
 800d80a:	f7fc fe3e 	bl	800a48a <unlock_fs>
 800d80e:	2301      	movs	r3, #1
 800d810:	e186      	b.n	800db20 <f_lseek+0x596>
#endif
					fp->dsect = dsc;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	69ba      	ldr	r2, [r7, #24]
 800d816:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800d81a:	e176      	b.n	800db0a <f_lseek+0x580>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d822:	683a      	ldr	r2, [r7, #0]
 800d824:	429a      	cmp	r2, r3
 800d826:	d90a      	bls.n	800d83e <f_lseek+0x2b4>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d82e:	f003 0302 	and.w	r3, r3, #2
 800d832:	2b00      	cmp	r3, #0
 800d834:	d103      	bne.n	800d83e <f_lseek+0x2b4>
#endif
			) ofs = fp->fsize;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d83c:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d844:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d846:	2300      	movs	r3, #0
 800d848:	637b      	str	r3, [r7, #52]	; 0x34
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d84e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (ofs) {
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	2b00      	cmp	r3, #0
 800d856:	f000 80ea 	beq.w	800da2e <f_lseek+0x4a4>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d860:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800d864:	025b      	lsls	r3, r3, #9
 800d866:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d868:	6a3b      	ldr	r3, [r7, #32]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d01e      	beq.n	800d8ac <f_lseek+0x322>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	1e5a      	subs	r2, r3, #1
 800d872:	69fb      	ldr	r3, [r7, #28]
 800d874:	fbb2 f2f3 	udiv	r2, r2, r3
 800d878:	6a3b      	ldr	r3, [r7, #32]
 800d87a:	1e59      	subs	r1, r3, #1
 800d87c:	69fb      	ldr	r3, [r7, #28]
 800d87e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d882:	429a      	cmp	r2, r3
 800d884:	d312      	bcc.n	800d8ac <f_lseek+0x322>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800d886:	6a3b      	ldr	r3, [r7, #32]
 800d888:	1e5a      	subs	r2, r3, #1
 800d88a:	69fb      	ldr	r3, [r7, #28]
 800d88c:	425b      	negs	r3, r3
 800d88e:	401a      	ands	r2, r3
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				ofs -= fp->fptr;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d89c:	683a      	ldr	r2, [r7, #0]
 800d89e:	1ad3      	subs	r3, r2, r3
 800d8a0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d8a8:	63bb      	str	r3, [r7, #56]	; 0x38
 800d8aa:	e037      	b.n	800d91c <f_lseek+0x392>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d8b2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d12c      	bne.n	800d914 <f_lseek+0x38a>
					clst = create_chain(fp->fs, 0);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d8c0:	2100      	movs	r1, #0
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7fd fb1b 	bl	800aefe <create_chain>
 800d8c8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800d8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	d10c      	bne.n	800d8ea <f_lseek+0x360>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2202      	movs	r2, #2
 800d8d4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d8de:	2102      	movs	r1, #2
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f7fc fdd2 	bl	800a48a <unlock_fs>
 800d8e6:	2302      	movs	r3, #2
 800d8e8:	e11a      	b.n	800db20 <f_lseek+0x596>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8f0:	d10c      	bne.n	800d90c <f_lseek+0x382>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d900:	2101      	movs	r1, #1
 800d902:	4618      	mov	r0, r3
 800d904:	f7fc fdc1 	bl	800a48a <unlock_fs>
 800d908:	2301      	movs	r3, #1
 800d90a:	e109      	b.n	800db20 <f_lseek+0x596>
					fp->sclust = clst;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d910:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				}
#endif
				fp->clust = clst;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d918:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			if (clst != 0) {
 800d91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d91e:	2b00      	cmp	r3, #0
 800d920:	f000 8085 	beq.w	800da2e <f_lseek+0x4a4>
				while (ofs > bcs) {						/* Cluster following loop */
 800d924:	e055      	b.n	800d9d2 <f_lseek+0x448>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d92c:	f003 0302 	and.w	r3, r3, #2
 800d930:	2b00      	cmp	r3, #0
 800d932:	d00d      	beq.n	800d950 <f_lseek+0x3c6>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d93a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7fd fade 	bl	800aefe <create_chain>
 800d942:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800d944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d946:	2b00      	cmp	r3, #0
 800d948:	d10a      	bne.n	800d960 <f_lseek+0x3d6>
							ofs = bcs; break;
 800d94a:	69fb      	ldr	r3, [r7, #28]
 800d94c:	603b      	str	r3, [r7, #0]
 800d94e:	e044      	b.n	800d9da <f_lseek+0x450>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d956:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d958:	4618      	mov	r0, r3
 800d95a:	f7fd f8ae 	bl	800aaba <get_fat>
 800d95e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d962:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d966:	d10c      	bne.n	800d982 <f_lseek+0x3f8>
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2201      	movs	r2, #1
 800d96c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d976:	2101      	movs	r1, #1
 800d978:	4618      	mov	r0, r3
 800d97a:	f7fc fd86 	bl	800a48a <unlock_fs>
 800d97e:	2301      	movs	r3, #1
 800d980:	e0ce      	b.n	800db20 <f_lseek+0x596>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800d982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d984:	2b01      	cmp	r3, #1
 800d986:	d907      	bls.n	800d998 <f_lseek+0x40e>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d98e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d992:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d994:	429a      	cmp	r2, r3
 800d996:	d30c      	bcc.n	800d9b2 <f_lseek+0x428>
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2202      	movs	r2, #2
 800d99c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d9a6:	2102      	movs	r1, #2
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f7fc fd6e 	bl	800a48a <unlock_fs>
 800d9ae:	2302      	movs	r3, #2
 800d9b0:	e0b6      	b.n	800db20 <f_lseek+0x596>
					fp->clust = clst;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d9b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					fp->fptr += bcs;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d9c0:	69fb      	ldr	r3, [r7, #28]
 800d9c2:	441a      	add	r2, r3
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
					ofs -= bcs;
 800d9ca:	683a      	ldr	r2, [r7, #0]
 800d9cc:	69fb      	ldr	r3, [r7, #28]
 800d9ce:	1ad3      	subs	r3, r2, r3
 800d9d0:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800d9d2:	683a      	ldr	r2, [r7, #0]
 800d9d4:	69fb      	ldr	r3, [r7, #28]
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d8a5      	bhi.n	800d926 <f_lseek+0x39c>
				}
				fp->fptr += ofs;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	441a      	add	r2, r3
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d01c      	beq.n	800da2e <f_lseek+0x4a4>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d9fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f7fd f83b 	bl	800aa78 <clust2sect>
 800da02:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800da04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da06:	2b00      	cmp	r3, #0
 800da08:	d10c      	bne.n	800da24 <f_lseek+0x49a>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2202      	movs	r2, #2
 800da0e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800da18:	2102      	movs	r1, #2
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7fc fd35 	bl	800a48a <unlock_fs>
 800da20:	2302      	movs	r3, #2
 800da22:	e07d      	b.n	800db20 <f_lseek+0x596>
					nsect += ofs / SS(fp->fs);
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	0a5b      	lsrs	r3, r3, #9
 800da28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da2a:	4413      	add	r3, r2
 800da2c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800da34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d04f      	beq.n	800dadc <f_lseek+0x552>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800da42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da44:	429a      	cmp	r2, r3
 800da46:	d049      	beq.n	800dadc <f_lseek+0x552>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800da4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da52:	2b00      	cmp	r3, #0
 800da54:	d024      	beq.n	800daa0 <f_lseek+0x516>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800da5c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800da60:	6879      	ldr	r1, [r7, #4]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800da68:	2301      	movs	r3, #1
 800da6a:	f7fc fc49 	bl	800a300 <disk_write>
 800da6e:	4603      	mov	r3, r0
 800da70:	2b00      	cmp	r3, #0
 800da72:	d00c      	beq.n	800da8e <f_lseek+0x504>
					ABORT(fp->fs, FR_DISK_ERR);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2201      	movs	r2, #1
 800da78:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800da82:	2101      	movs	r1, #1
 800da84:	4618      	mov	r0, r3
 800da86:	f7fc fd00 	bl	800a48a <unlock_fs>
 800da8a:	2301      	movs	r3, #1
 800da8c:	e048      	b.n	800db20 <f_lseek+0x596>
				fp->flag &= ~FA__DIRTY;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800da94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da98:	b2da      	uxtb	r2, r3
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800daa6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800daaa:	6879      	ldr	r1, [r7, #4]
 800daac:	2301      	movs	r3, #1
 800daae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dab0:	f7fc fc06 	bl	800a2c0 <disk_read>
 800dab4:	4603      	mov	r3, r0
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d00c      	beq.n	800dad4 <f_lseek+0x54a>
				ABORT(fp->fs, FR_DISK_ERR);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2201      	movs	r2, #1
 800dabe:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800dac8:	2101      	movs	r1, #1
 800daca:	4618      	mov	r0, r3
 800dacc:	f7fc fcdd 	bl	800a48a <unlock_fs>
 800dad0:	2301      	movs	r3, #1
 800dad2:	e025      	b.n	800db20 <f_lseek+0x596>
#endif
			fp->dsect = nsect;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dad8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800dae8:	429a      	cmp	r2, r3
 800daea:	d90e      	bls.n	800db0a <f_lseek+0x580>
			fp->fsize = fp->fptr;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800dafe:	f043 0320 	orr.w	r3, r3, #32
 800db02:	b2da      	uxtb	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800db10:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800db14:	4611      	mov	r1, r2
 800db16:	4618      	mov	r0, r3
 800db18:	f7fc fcb7 	bl	800a48a <unlock_fs>
 800db1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800db20:	4618      	mov	r0, r3
 800db22:	3740      	adds	r7, #64	; 0x40
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 800db2e:	af00      	add	r7, sp, #0
 800db30:	1d3b      	adds	r3, r7, #4
 800db32:	6018      	str	r0, [r3, #0]
 800db34:	463b      	mov	r3, r7
 800db36:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 800db38:	1d3b      	adds	r3, r7, #4
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d101      	bne.n	800db44 <f_opendir+0x1c>
 800db40:	2309      	movs	r3, #9
 800db42:	e0a2      	b.n	800dc8a <f_opendir+0x162>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 800db44:	4639      	mov	r1, r7
 800db46:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800db4a:	2200      	movs	r2, #0
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7fe fd43 	bl	800c5d8 <find_volume>
 800db52:	4603      	mov	r3, r0
 800db54:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
	if (res == FR_OK) {
 800db58:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	f040 8081 	bne.w	800dc64 <f_opendir+0x13c>
		dp->fs = fs;
 800db62:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800db66:	1d3b      	adds	r3, r7, #4
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		INIT_BUF(*dp);
 800db6e:	1d3b      	adds	r3, r7, #4
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 800db76:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800db7a:	1d3b      	adds	r3, r7, #4
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f107 020c 	add.w	r2, r7, #12
 800db82:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800db86:	463b      	mov	r3, r7
 800db88:	681a      	ldr	r2, [r3, #0]
 800db8a:	1d3b      	adds	r3, r7, #4
 800db8c:	4611      	mov	r1, r2
 800db8e:	6818      	ldr	r0, [r3, #0]
 800db90:	f7fe fc06 	bl	800c3a0 <follow_path>
 800db94:	4603      	mov	r3, r0
 800db96:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 800db9a:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d159      	bne.n	800dc56 <f_opendir+0x12e>
			if (dp->dir) {						/* It is not the origin directory itself */
 800dba2:	1d3b      	adds	r3, r7, #4
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d01c      	beq.n	800dbe8 <f_opendir+0xc0>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 800dbae:	1d3b      	adds	r3, r7, #4
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dbb6:	330b      	adds	r3, #11
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	f003 0310 	and.w	r3, r3, #16
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d00f      	beq.n	800dbe2 <f_opendir+0xba>
					dp->sclust = ld_clust(fs, dp->dir);
 800dbc2:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800dbc6:	1d3b      	adds	r3, r7, #4
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dbce:	4619      	mov	r1, r3
 800dbd0:	4610      	mov	r0, r2
 800dbd2:	f7fd fc3a 	bl	800b44a <ld_clust>
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	1d3b      	adds	r3, r7, #4
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800dbe0:	e002      	b.n	800dbe8 <f_opendir+0xc0>
				else							/* The object is a file */
					res = FR_NO_PATH;
 800dbe2:	2305      	movs	r3, #5
 800dbe4:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
			}
			if (res == FR_OK) {
 800dbe8:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d132      	bne.n	800dc56 <f_opendir+0x12e>
				dp->id = fs->id;
 800dbf0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800dbf4:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800dbf8:	1d3b      	adds	r3, r7, #4
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800dc00:	1d3b      	adds	r3, r7, #4
 800dc02:	2100      	movs	r1, #0
 800dc04:	6818      	ldr	r0, [r3, #0]
 800dc06:	f7fd fa4b 	bl	800b0a0 <dir_sdi>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#if _FS_LOCK
				if (res == FR_OK) {
 800dc10:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d11e      	bne.n	800dc56 <f_opendir+0x12e>
					if (dp->sclust) {
 800dc18:	1d3b      	adds	r3, r7, #4
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d013      	beq.n	800dc4c <f_opendir+0x124>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800dc24:	1d3b      	adds	r3, r7, #4
 800dc26:	2100      	movs	r1, #0
 800dc28:	6818      	ldr	r0, [r3, #0]
 800dc2a:	f7fc fcdd 	bl	800a5e8 <inc_lock>
 800dc2e:	4602      	mov	r2, r0
 800dc30:	1d3b      	adds	r3, r7, #4
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
						if (!dp->lockid)
 800dc38:	1d3b      	adds	r3, r7, #4
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d108      	bne.n	800dc56 <f_opendir+0x12e>
							res = FR_TOO_MANY_OPEN_FILES;
 800dc44:	2312      	movs	r3, #18
 800dc46:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
 800dc4a:	e004      	b.n	800dc56 <f_opendir+0x12e>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 800dc4c:	1d3b      	adds	r3, r7, #4
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	2200      	movs	r2, #0
 800dc52:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800dc56:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800dc5a:	2b04      	cmp	r3, #4
 800dc5c:	d102      	bne.n	800dc64 <f_opendir+0x13c>
 800dc5e:	2305      	movs	r3, #5
 800dc60:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 800dc64:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d004      	beq.n	800dc76 <f_opendir+0x14e>
 800dc6c:	1d3b      	adds	r3, r7, #4
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	2200      	movs	r2, #0
 800dc72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	LEAVE_FF(fs, res);
 800dc76:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800dc7a:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 800dc7e:	4611      	mov	r1, r2
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7fc fc02 	bl	800a48a <unlock_fs>
 800dc86:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f507 7708 	add.w	r7, r7, #544	; 0x220
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	1d3b      	adds	r3, r7, #4
 800dc9e:	6018      	str	r0, [r3, #0]
 800dca0:	463b      	mov	r3, r7
 800dca2:	6019      	str	r1, [r3, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 800dca4:	1d3b      	adds	r3, r7, #4
 800dca6:	6818      	ldr	r0, [r3, #0]
 800dca8:	f7fe ff68 	bl	800cb7c <validate>
 800dcac:	4603      	mov	r3, r0
 800dcae:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if (res == FR_OK) {
 800dcb2:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d14a      	bne.n	800dd50 <f_readdir+0xbc>
		if (!fno) {
 800dcba:	463b      	mov	r3, r7
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d108      	bne.n	800dcd4 <f_readdir+0x40>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800dcc2:	1d3b      	adds	r3, r7, #4
 800dcc4:	2100      	movs	r1, #0
 800dcc6:	6818      	ldr	r0, [r3, #0]
 800dcc8:	f7fd f9ea 	bl	800b0a0 <dir_sdi>
 800dccc:	4603      	mov	r3, r0
 800dcce:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 800dcd2:	e03d      	b.n	800dd50 <f_readdir+0xbc>
		} else {
			INIT_BUF(*dp);
 800dcd4:	1d3b      	adds	r3, r7, #4
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800dcdc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800dce0:	1d3b      	adds	r3, r7, #4
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	f107 0208 	add.w	r2, r7, #8
 800dce8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
			res = dir_read(dp, 0);			/* Read an item */
 800dcec:	1d3b      	adds	r3, r7, #4
 800dcee:	2100      	movs	r1, #0
 800dcf0:	6818      	ldr	r0, [r3, #0]
 800dcf2:	f7fd fec9 	bl	800ba88 <dir_read>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 800dcfc:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800dd00:	2b04      	cmp	r3, #4
 800dd02:	d107      	bne.n	800dd14 <f_readdir+0x80>
				dp->sect = 0;
 800dd04:	1d3b      	adds	r3, r7, #4
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	2200      	movs	r2, #0
 800dd0a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				res = FR_OK;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
			}
			if (res == FR_OK) {				/* A valid entry is found */
 800dd14:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d119      	bne.n	800dd50 <f_readdir+0xbc>
				get_fileinfo(dp, fno);		/* Get the object information */
 800dd1c:	463a      	mov	r2, r7
 800dd1e:	1d3b      	adds	r3, r7, #4
 800dd20:	6811      	ldr	r1, [r2, #0]
 800dd22:	6818      	ldr	r0, [r3, #0]
 800dd24:	f7fe f866 	bl	800bdf4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800dd28:	1d3b      	adds	r3, r7, #4
 800dd2a:	2100      	movs	r1, #0
 800dd2c:	6818      	ldr	r0, [r3, #0]
 800dd2e:	f7fd fa4b 	bl	800b1c8 <dir_next>
 800dd32:	4603      	mov	r3, r0
 800dd34:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				if (res == FR_NO_FILE) {
 800dd38:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800dd3c:	2b04      	cmp	r3, #4
 800dd3e:	d107      	bne.n	800dd50 <f_readdir+0xbc>
					dp->sect = 0;
 800dd40:	1d3b      	adds	r3, r7, #4
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	2200      	movs	r2, #0
 800dd46:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
					res = FR_OK;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 800dd50:	1d3b      	adds	r3, r7, #4
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800dd58:	f897 2217 	ldrb.w	r2, [r7, #535]	; 0x217
 800dd5c:	4611      	mov	r1, r2
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7fc fb93 	bl	800a48a <unlock_fs>
 800dd64:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f507 7706 	add.w	r7, r7, #536	; 0x218
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
	...

0800dd74 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dd74:	b480      	push	{r7}
 800dd76:	b087      	sub	sp, #28
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	60f8      	str	r0, [r7, #12]
 800dd7c:	60b9      	str	r1, [r7, #8]
 800dd7e:	4613      	mov	r3, r2
 800dd80:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dd82:	2301      	movs	r3, #1
 800dd84:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dd86:	2300      	movs	r3, #0
 800dd88:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800dd8a:	4b1e      	ldr	r3, [pc, #120]	; (800de04 <FATFS_LinkDriverEx+0x90>)
 800dd8c:	7a5b      	ldrb	r3, [r3, #9]
 800dd8e:	b2db      	uxtb	r3, r3
 800dd90:	2b01      	cmp	r3, #1
 800dd92:	d831      	bhi.n	800ddf8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dd94:	4b1b      	ldr	r3, [pc, #108]	; (800de04 <FATFS_LinkDriverEx+0x90>)
 800dd96:	7a5b      	ldrb	r3, [r3, #9]
 800dd98:	b2db      	uxtb	r3, r3
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	4b19      	ldr	r3, [pc, #100]	; (800de04 <FATFS_LinkDriverEx+0x90>)
 800dd9e:	2100      	movs	r1, #0
 800dda0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800dda2:	4b18      	ldr	r3, [pc, #96]	; (800de04 <FATFS_LinkDriverEx+0x90>)
 800dda4:	7a5b      	ldrb	r3, [r3, #9]
 800dda6:	b2db      	uxtb	r3, r3
 800dda8:	4a16      	ldr	r2, [pc, #88]	; (800de04 <FATFS_LinkDriverEx+0x90>)
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	4413      	add	r3, r2
 800ddae:	68fa      	ldr	r2, [r7, #12]
 800ddb0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800ddb2:	4b14      	ldr	r3, [pc, #80]	; (800de04 <FATFS_LinkDriverEx+0x90>)
 800ddb4:	7a5b      	ldrb	r3, [r3, #9]
 800ddb6:	b2db      	uxtb	r3, r3
 800ddb8:	461a      	mov	r2, r3
 800ddba:	4b12      	ldr	r3, [pc, #72]	; (800de04 <FATFS_LinkDriverEx+0x90>)
 800ddbc:	4413      	add	r3, r2
 800ddbe:	79fa      	ldrb	r2, [r7, #7]
 800ddc0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ddc2:	4b10      	ldr	r3, [pc, #64]	; (800de04 <FATFS_LinkDriverEx+0x90>)
 800ddc4:	7a5b      	ldrb	r3, [r3, #9]
 800ddc6:	b2db      	uxtb	r3, r3
 800ddc8:	1c5a      	adds	r2, r3, #1
 800ddca:	b2d1      	uxtb	r1, r2
 800ddcc:	4a0d      	ldr	r2, [pc, #52]	; (800de04 <FATFS_LinkDriverEx+0x90>)
 800ddce:	7251      	strb	r1, [r2, #9]
 800ddd0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ddd2:	7dbb      	ldrb	r3, [r7, #22]
 800ddd4:	3330      	adds	r3, #48	; 0x30
 800ddd6:	b2da      	uxtb	r2, r3
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	3301      	adds	r3, #1
 800dde0:	223a      	movs	r2, #58	; 0x3a
 800dde2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	3302      	adds	r3, #2
 800dde8:	222f      	movs	r2, #47	; 0x2f
 800ddea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	3303      	adds	r3, #3
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800ddf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	371c      	adds	r7, #28
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bc80      	pop	{r7}
 800de02:	4770      	bx	lr
 800de04:	20000200 	.word	0x20000200

0800de08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b082      	sub	sp, #8
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800de12:	2200      	movs	r2, #0
 800de14:	6839      	ldr	r1, [r7, #0]
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f7ff ffac 	bl	800dd74 <FATFS_LinkDriverEx>
 800de1c:	4603      	mov	r3, r0
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3708      	adds	r7, #8
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
	...

0800de28 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	4603      	mov	r3, r0
 800de30:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800de32:	4b0b      	ldr	r3, [pc, #44]	; (800de60 <SD_initialize+0x38>)
 800de34:	2201      	movs	r2, #1
 800de36:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 800de38:	f7fc f95a 	bl	800a0f0 <BSP_SD_Init>
 800de3c:	4603      	mov	r3, r0
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d107      	bne.n	800de52 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800de42:	4b07      	ldr	r3, [pc, #28]	; (800de60 <SD_initialize+0x38>)
 800de44:	781b      	ldrb	r3, [r3, #0]
 800de46:	b2db      	uxtb	r3, r3
 800de48:	f023 0301 	bic.w	r3, r3, #1
 800de4c:	b2da      	uxtb	r2, r3
 800de4e:	4b04      	ldr	r3, [pc, #16]	; (800de60 <SD_initialize+0x38>)
 800de50:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800de52:	4b03      	ldr	r3, [pc, #12]	; (800de60 <SD_initialize+0x38>)
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	b2db      	uxtb	r3, r3
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3708      	adds	r7, #8
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}
 800de60:	20000147 	.word	0x20000147

0800de64 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	4603      	mov	r3, r0
 800de6c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800de6e:	4b0b      	ldr	r3, [pc, #44]	; (800de9c <SD_status+0x38>)
 800de70:	2201      	movs	r2, #1
 800de72:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800de74:	f7fc f99e 	bl	800a1b4 <BSP_SD_GetCardState>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d107      	bne.n	800de8e <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800de7e:	4b07      	ldr	r3, [pc, #28]	; (800de9c <SD_status+0x38>)
 800de80:	781b      	ldrb	r3, [r3, #0]
 800de82:	b2db      	uxtb	r3, r3
 800de84:	f023 0301 	bic.w	r3, r3, #1
 800de88:	b2da      	uxtb	r2, r3
 800de8a:	4b04      	ldr	r3, [pc, #16]	; (800de9c <SD_status+0x38>)
 800de8c:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800de8e:	4b03      	ldr	r3, [pc, #12]	; (800de9c <SD_status+0x38>)
 800de90:	781b      	ldrb	r3, [r3, #0]
 800de92:	b2db      	uxtb	r3, r3
}
 800de94:	4618      	mov	r0, r3
 800de96:	3708      	adds	r7, #8
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}
 800de9c:	20000147 	.word	0x20000147

0800dea0 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b086      	sub	sp, #24
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	60b9      	str	r1, [r7, #8]
 800dea8:	607a      	str	r2, [r7, #4]
 800deaa:	603b      	str	r3, [r7, #0]
 800deac:	4603      	mov	r3, r0
 800deae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800deb0:	2301      	movs	r3, #1
 800deb2:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800deb4:	4b0f      	ldr	r3, [pc, #60]	; (800def4 <SD_read+0x54>)
 800deb6:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 800deb8:	4b0f      	ldr	r3, [pc, #60]	; (800def8 <SD_read+0x58>)
 800deba:	683a      	ldr	r2, [r7, #0]
 800debc:	6879      	ldr	r1, [r7, #4]
 800debe:	68b8      	ldr	r0, [r7, #8]
 800dec0:	f7fc f93c 	bl	800a13c <BSP_SD_ReadBlocks>
 800dec4:	4603      	mov	r3, r0
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d10e      	bne.n	800dee8 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800deca:	e006      	b.n	800deda <SD_read+0x3a>
    {
      if (timeout-- == 0)
 800decc:	693b      	ldr	r3, [r7, #16]
 800dece:	1e5a      	subs	r2, r3, #1
 800ded0:	613a      	str	r2, [r7, #16]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d101      	bne.n	800deda <SD_read+0x3a>
      {
        return RES_ERROR;
 800ded6:	2301      	movs	r3, #1
 800ded8:	e007      	b.n	800deea <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800deda:	f7fc f96b 	bl	800a1b4 <BSP_SD_GetCardState>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d1f3      	bne.n	800decc <SD_read+0x2c>
      }
    }
    res = RES_OK;
 800dee4:	2300      	movs	r3, #0
 800dee6:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800dee8:	7dfb      	ldrb	r3, [r7, #23]
}
 800deea:	4618      	mov	r0, r3
 800deec:	3718      	adds	r7, #24
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}
 800def2:	bf00      	nop
 800def4:	000186a0 	.word	0x000186a0
 800def8:	05f5e100 	.word	0x05f5e100

0800defc <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b086      	sub	sp, #24
 800df00:	af00      	add	r7, sp, #0
 800df02:	60b9      	str	r1, [r7, #8]
 800df04:	607a      	str	r2, [r7, #4]
 800df06:	603b      	str	r3, [r7, #0]
 800df08:	4603      	mov	r3, r0
 800df0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800df0c:	2301      	movs	r3, #1
 800df0e:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800df10:	4b0f      	ldr	r3, [pc, #60]	; (800df50 <SD_write+0x54>)
 800df12:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 800df14:	4b0f      	ldr	r3, [pc, #60]	; (800df54 <SD_write+0x58>)
 800df16:	683a      	ldr	r2, [r7, #0]
 800df18:	6879      	ldr	r1, [r7, #4]
 800df1a:	68b8      	ldr	r0, [r7, #8]
 800df1c:	f7fc f92c 	bl	800a178 <BSP_SD_WriteBlocks>
 800df20:	4603      	mov	r3, r0
 800df22:	2b00      	cmp	r3, #0
 800df24:	d10e      	bne.n	800df44 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800df26:	e006      	b.n	800df36 <SD_write+0x3a>
    {
      if (timeout-- == 0)
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	1e5a      	subs	r2, r3, #1
 800df2c:	613a      	str	r2, [r7, #16]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d101      	bne.n	800df36 <SD_write+0x3a>
      {
        return RES_ERROR;
 800df32:	2301      	movs	r3, #1
 800df34:	e007      	b.n	800df46 <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800df36:	f7fc f93d 	bl	800a1b4 <BSP_SD_GetCardState>
 800df3a:	4603      	mov	r3, r0
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d1f3      	bne.n	800df28 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 800df40:	2300      	movs	r3, #0
 800df42:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800df44:	7dfb      	ldrb	r3, [r7, #23]
}
 800df46:	4618      	mov	r0, r3
 800df48:	3718      	adds	r7, #24
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	000186a0 	.word	0x000186a0
 800df54:	05f5e100 	.word	0x05f5e100

0800df58 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b08c      	sub	sp, #48	; 0x30
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	4603      	mov	r3, r0
 800df60:	603a      	str	r2, [r7, #0]
 800df62:	71fb      	strb	r3, [r7, #7]
 800df64:	460b      	mov	r3, r1
 800df66:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800df68:	2301      	movs	r3, #1
 800df6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800df6e:	4b24      	ldr	r3, [pc, #144]	; (800e000 <SD_ioctl+0xa8>)
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	b2db      	uxtb	r3, r3
 800df74:	f003 0301 	and.w	r3, r3, #1
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d001      	beq.n	800df80 <SD_ioctl+0x28>
 800df7c:	2303      	movs	r3, #3
 800df7e:	e03b      	b.n	800dff8 <SD_ioctl+0xa0>
  
  switch (cmd)
 800df80:	79bb      	ldrb	r3, [r7, #6]
 800df82:	2b03      	cmp	r3, #3
 800df84:	d833      	bhi.n	800dfee <SD_ioctl+0x96>
 800df86:	a201      	add	r2, pc, #4	; (adr r2, 800df8c <SD_ioctl+0x34>)
 800df88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df8c:	0800df9d 	.word	0x0800df9d
 800df90:	0800dfa5 	.word	0x0800dfa5
 800df94:	0800dfbd 	.word	0x0800dfbd
 800df98:	0800dfd7 	.word	0x0800dfd7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800df9c:	2300      	movs	r3, #0
 800df9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dfa2:	e027      	b.n	800dff4 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800dfa4:	f107 030c 	add.w	r3, r7, #12
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7fc f913 	bl	800a1d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800dfae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dfba:	e01b      	b.n	800dff4 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dfbc:	f107 030c 	add.w	r3, r7, #12
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f7fc f907 	bl	800a1d4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800dfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc8:	b29a      	uxth	r2, r3
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dfd4:	e00e      	b.n	800dff4 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dfd6:	f107 030c 	add.w	r3, r7, #12
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f7fc f8fa 	bl	800a1d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800dfe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dfec:	e002      	b.n	800dff4 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 800dfee:	2304      	movs	r3, #4
 800dff0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 800dff4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3730      	adds	r7, #48	; 0x30
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}
 800e000:	20000147 	.word	0x20000147

0800e004 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800e004:	b480      	push	{r7}
 800e006:	b089      	sub	sp, #36	; 0x24
 800e008:	af00      	add	r7, sp, #0
 800e00a:	4603      	mov	r3, r0
 800e00c:	6039      	str	r1, [r7, #0]
 800e00e:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 800e010:	88fb      	ldrh	r3, [r7, #6]
 800e012:	2b7f      	cmp	r3, #127	; 0x7f
 800e014:	d802      	bhi.n	800e01c <ff_convert+0x18>
		c = chr;
 800e016:	88fb      	ldrh	r3, [r7, #6]
 800e018:	837b      	strh	r3, [r7, #26]
 800e01a:	e045      	b.n	800e0a8 <ff_convert+0xa4>
	} else {
		if (dir) {		/* OEMCP to unicode */
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d005      	beq.n	800e02e <ff_convert+0x2a>
			p = oem2uni;
 800e022:	4b24      	ldr	r3, [pc, #144]	; (800e0b4 <ff_convert+0xb0>)
 800e024:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 800e026:	f245 5320 	movw	r3, #21792	; 0x5520
 800e02a:	60bb      	str	r3, [r7, #8]
 800e02c:	e004      	b.n	800e038 <ff_convert+0x34>
		} else {		/* Unicode to OEMCP */
			p = uni2oem;
 800e02e:	4b22      	ldr	r3, [pc, #136]	; (800e0b8 <ff_convert+0xb4>)
 800e030:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 800e032:	f245 5320 	movw	r3, #21792	; 0x5520
 800e036:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 800e038:	2300      	movs	r3, #0
 800e03a:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 800e03c:	2310      	movs	r3, #16
 800e03e:	613b      	str	r3, [r7, #16]
 800e040:	e021      	b.n	800e086 <ff_convert+0x82>
			i = li + (hi - li) / 2;
 800e042:	68ba      	ldr	r2, [r7, #8]
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	1ad3      	subs	r3, r2, r3
 800e048:	0fda      	lsrs	r2, r3, #31
 800e04a:	4413      	add	r3, r2
 800e04c:	105b      	asrs	r3, r3, #1
 800e04e:	461a      	mov	r2, r3
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	4413      	add	r3, r2
 800e054:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	009b      	lsls	r3, r3, #2
 800e05a:	69fa      	ldr	r2, [r7, #28]
 800e05c:	4413      	add	r3, r2
 800e05e:	881b      	ldrh	r3, [r3, #0]
 800e060:	88fa      	ldrh	r2, [r7, #6]
 800e062:	429a      	cmp	r2, r3
 800e064:	d013      	beq.n	800e08e <ff_convert+0x8a>
			if (chr > p[i * 2])
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	69fa      	ldr	r2, [r7, #28]
 800e06c:	4413      	add	r3, r2
 800e06e:	881b      	ldrh	r3, [r3, #0]
 800e070:	88fa      	ldrh	r2, [r7, #6]
 800e072:	429a      	cmp	r2, r3
 800e074:	d902      	bls.n	800e07c <ff_convert+0x78>
				li = i;
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	60fb      	str	r3, [r7, #12]
 800e07a:	e001      	b.n	800e080 <ff_convert+0x7c>
			else
				hi = i;
 800e07c:	697b      	ldr	r3, [r7, #20]
 800e07e:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	3b01      	subs	r3, #1
 800e084:	613b      	str	r3, [r7, #16]
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d1da      	bne.n	800e042 <ff_convert+0x3e>
 800e08c:	e000      	b.n	800e090 <ff_convert+0x8c>
			if (chr == p[i * 2]) break;
 800e08e:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 800e090:	693b      	ldr	r3, [r7, #16]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d006      	beq.n	800e0a4 <ff_convert+0xa0>
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	009b      	lsls	r3, r3, #2
 800e09a:	3302      	adds	r3, #2
 800e09c:	69fa      	ldr	r2, [r7, #28]
 800e09e:	4413      	add	r3, r2
 800e0a0:	881b      	ldrh	r3, [r3, #0]
 800e0a2:	e000      	b.n	800e0a6 <ff_convert+0xa2>
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	837b      	strh	r3, [r7, #26]
	}

	return c;
 800e0a8:	8b7b      	ldrh	r3, [r7, #26]
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3724      	adds	r7, #36	; 0x24
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bc80      	pop	{r7}
 800e0b2:	4770      	bx	lr
 800e0b4:	0802b178 	.word	0x0802b178
 800e0b8:	08015cf4 	.word	0x08015cf4

0800e0bc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b085      	sub	sp, #20
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	60fb      	str	r3, [r7, #12]
 800e0ca:	e002      	b.n	800e0d2 <ff_wtoupper+0x16>
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	60fb      	str	r3, [r7, #12]
 800e0d2:	4a0f      	ldr	r2, [pc, #60]	; (800e110 <ff_wtoupper+0x54>)
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d006      	beq.n	800e0ec <ff_wtoupper+0x30>
 800e0de:	4a0c      	ldr	r2, [pc, #48]	; (800e110 <ff_wtoupper+0x54>)
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0e6:	88fa      	ldrh	r2, [r7, #6]
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d1ef      	bne.n	800e0cc <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800e0ec:	4a08      	ldr	r2, [pc, #32]	; (800e110 <ff_wtoupper+0x54>)
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d004      	beq.n	800e102 <ff_wtoupper+0x46>
 800e0f8:	4a06      	ldr	r2, [pc, #24]	; (800e114 <ff_wtoupper+0x58>)
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e100:	e000      	b.n	800e104 <ff_wtoupper+0x48>
 800e102:	88fb      	ldrh	r3, [r7, #6]
}
 800e104:	4618      	mov	r0, r3
 800e106:	3714      	adds	r7, #20
 800e108:	46bd      	mov	sp, r7
 800e10a:	bc80      	pop	{r7}
 800e10c:	4770      	bx	lr
 800e10e:	bf00      	nop
 800e110:	080405fc 	.word	0x080405fc
 800e114:	080407dc 	.word	0x080407dc

0800e118 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b084      	sub	sp, #16
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800e120:	2300      	movs	r3, #0
 800e122:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800e124:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f000 f953 	bl	800e3d4 <osSemaphoreAcquire>
 800e12e:	4603      	mov	r3, r0
 800e130:	2b00      	cmp	r3, #0
 800e132:	d101      	bne.n	800e138 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800e134:	2301      	movs	r3, #1
 800e136:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800e138:	68fb      	ldr	r3, [r7, #12]
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	3710      	adds	r7, #16
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}

0800e142 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800e142:	b580      	push	{r7, lr}
 800e144:	b082      	sub	sp, #8
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f000 f9a8 	bl	800e4a0 <osSemaphoreRelease>
#endif
}
 800e150:	bf00      	nop
 800e152:	3708      	adds	r7, #8
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}

0800e158 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e158:	b480      	push	{r7}
 800e15a:	b085      	sub	sp, #20
 800e15c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e15e:	f3ef 8305 	mrs	r3, IPSR
 800e162:	60bb      	str	r3, [r7, #8]
  return(result);
 800e164:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e166:	2b00      	cmp	r3, #0
 800e168:	d10f      	bne.n	800e18a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e16a:	f3ef 8310 	mrs	r3, PRIMASK
 800e16e:	607b      	str	r3, [r7, #4]
  return(result);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d109      	bne.n	800e18a <osKernelInitialize+0x32>
 800e176:	4b10      	ldr	r3, [pc, #64]	; (800e1b8 <osKernelInitialize+0x60>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	2b02      	cmp	r3, #2
 800e17c:	d109      	bne.n	800e192 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e17e:	f3ef 8311 	mrs	r3, BASEPRI
 800e182:	603b      	str	r3, [r7, #0]
  return(result);
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d003      	beq.n	800e192 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800e18a:	f06f 0305 	mvn.w	r3, #5
 800e18e:	60fb      	str	r3, [r7, #12]
 800e190:	e00c      	b.n	800e1ac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e192:	4b09      	ldr	r3, [pc, #36]	; (800e1b8 <osKernelInitialize+0x60>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d105      	bne.n	800e1a6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800e19a:	4b07      	ldr	r3, [pc, #28]	; (800e1b8 <osKernelInitialize+0x60>)
 800e19c:	2201      	movs	r2, #1
 800e19e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	60fb      	str	r3, [r7, #12]
 800e1a4:	e002      	b.n	800e1ac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800e1a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e1aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e1ac:	68fb      	ldr	r3, [r7, #12]
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3714      	adds	r7, #20
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bc80      	pop	{r7}
 800e1b6:	4770      	bx	lr
 800e1b8:	2000020c 	.word	0x2000020c

0800e1bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b084      	sub	sp, #16
 800e1c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1c2:	f3ef 8305 	mrs	r3, IPSR
 800e1c6:	60bb      	str	r3, [r7, #8]
  return(result);
 800e1c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d10f      	bne.n	800e1ee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1ce:	f3ef 8310 	mrs	r3, PRIMASK
 800e1d2:	607b      	str	r3, [r7, #4]
  return(result);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d109      	bne.n	800e1ee <osKernelStart+0x32>
 800e1da:	4b11      	ldr	r3, [pc, #68]	; (800e220 <osKernelStart+0x64>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	2b02      	cmp	r3, #2
 800e1e0:	d109      	bne.n	800e1f6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e1e2:	f3ef 8311 	mrs	r3, BASEPRI
 800e1e6:	603b      	str	r3, [r7, #0]
  return(result);
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d003      	beq.n	800e1f6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800e1ee:	f06f 0305 	mvn.w	r3, #5
 800e1f2:	60fb      	str	r3, [r7, #12]
 800e1f4:	e00e      	b.n	800e214 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800e1f6:	4b0a      	ldr	r3, [pc, #40]	; (800e220 <osKernelStart+0x64>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d107      	bne.n	800e20e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800e1fe:	4b08      	ldr	r3, [pc, #32]	; (800e220 <osKernelStart+0x64>)
 800e200:	2202      	movs	r2, #2
 800e202:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800e204:	f001 fb80 	bl	800f908 <vTaskStartScheduler>
      stat = osOK;
 800e208:	2300      	movs	r3, #0
 800e20a:	60fb      	str	r3, [r7, #12]
 800e20c:	e002      	b.n	800e214 <osKernelStart+0x58>
    } else {
      stat = osError;
 800e20e:	f04f 33ff 	mov.w	r3, #4294967295
 800e212:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e214:	68fb      	ldr	r3, [r7, #12]
}
 800e216:	4618      	mov	r0, r3
 800e218:	3710      	adds	r7, #16
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	2000020c 	.word	0x2000020c

0800e224 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e224:	b580      	push	{r7, lr}
 800e226:	b092      	sub	sp, #72	; 0x48
 800e228:	af04      	add	r7, sp, #16
 800e22a:	60f8      	str	r0, [r7, #12]
 800e22c:	60b9      	str	r1, [r7, #8]
 800e22e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e230:	2300      	movs	r3, #0
 800e232:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e234:	f3ef 8305 	mrs	r3, IPSR
 800e238:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800e23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	f040 8094 	bne.w	800e36a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e242:	f3ef 8310 	mrs	r3, PRIMASK
 800e246:	623b      	str	r3, [r7, #32]
  return(result);
 800e248:	6a3b      	ldr	r3, [r7, #32]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	f040 808d 	bne.w	800e36a <osThreadNew+0x146>
 800e250:	4b48      	ldr	r3, [pc, #288]	; (800e374 <osThreadNew+0x150>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	2b02      	cmp	r3, #2
 800e256:	d106      	bne.n	800e266 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e258:	f3ef 8311 	mrs	r3, BASEPRI
 800e25c:	61fb      	str	r3, [r7, #28]
  return(result);
 800e25e:	69fb      	ldr	r3, [r7, #28]
 800e260:	2b00      	cmp	r3, #0
 800e262:	f040 8082 	bne.w	800e36a <osThreadNew+0x146>
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d07e      	beq.n	800e36a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800e26c:	2380      	movs	r3, #128	; 0x80
 800e26e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800e270:	2318      	movs	r3, #24
 800e272:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800e274:	2300      	movs	r3, #0
 800e276:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800e278:	f107 031b 	add.w	r3, r7, #27
 800e27c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800e27e:	f04f 33ff 	mov.w	r3, #4294967295
 800e282:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d045      	beq.n	800e316 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d002      	beq.n	800e298 <osThreadNew+0x74>
        name = attr->name;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	699b      	ldr	r3, [r3, #24]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d002      	beq.n	800e2a6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	699b      	ldr	r3, [r3, #24]
 800e2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d008      	beq.n	800e2be <osThreadNew+0x9a>
 800e2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ae:	2b38      	cmp	r3, #56	; 0x38
 800e2b0:	d805      	bhi.n	800e2be <osThreadNew+0x9a>
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	685b      	ldr	r3, [r3, #4]
 800e2b6:	f003 0301 	and.w	r3, r3, #1
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d001      	beq.n	800e2c2 <osThreadNew+0x9e>
        return (NULL);
 800e2be:	2300      	movs	r3, #0
 800e2c0:	e054      	b.n	800e36c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	695b      	ldr	r3, [r3, #20]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d003      	beq.n	800e2d2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	695b      	ldr	r3, [r3, #20]
 800e2ce:	089b      	lsrs	r3, r3, #2
 800e2d0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	689b      	ldr	r3, [r3, #8]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d00e      	beq.n	800e2f8 <osThreadNew+0xd4>
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	68db      	ldr	r3, [r3, #12]
 800e2de:	2bbb      	cmp	r3, #187	; 0xbb
 800e2e0:	d90a      	bls.n	800e2f8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d006      	beq.n	800e2f8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	695b      	ldr	r3, [r3, #20]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d002      	beq.n	800e2f8 <osThreadNew+0xd4>
        mem = 1;
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e2f6:	e010      	b.n	800e31a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	689b      	ldr	r3, [r3, #8]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d10c      	bne.n	800e31a <osThreadNew+0xf6>
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	68db      	ldr	r3, [r3, #12]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d108      	bne.n	800e31a <osThreadNew+0xf6>
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	691b      	ldr	r3, [r3, #16]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d104      	bne.n	800e31a <osThreadNew+0xf6>
          mem = 0;
 800e310:	2300      	movs	r3, #0
 800e312:	62bb      	str	r3, [r7, #40]	; 0x28
 800e314:	e001      	b.n	800e31a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800e316:	2300      	movs	r3, #0
 800e318:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800e31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	d110      	bne.n	800e342 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800e324:	687a      	ldr	r2, [r7, #4]
 800e326:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e328:	9202      	str	r2, [sp, #8]
 800e32a:	9301      	str	r3, [sp, #4]
 800e32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e32e:	9300      	str	r3, [sp, #0]
 800e330:	68bb      	ldr	r3, [r7, #8]
 800e332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e334:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e336:	68f8      	ldr	r0, [r7, #12]
 800e338:	f001 f902 	bl	800f540 <xTaskCreateStatic>
 800e33c:	4603      	mov	r3, r0
 800e33e:	617b      	str	r3, [r7, #20]
 800e340:	e013      	b.n	800e36a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800e342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e344:	2b00      	cmp	r3, #0
 800e346:	d110      	bne.n	800e36a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e34a:	b29a      	uxth	r2, r3
 800e34c:	f107 0314 	add.w	r3, r7, #20
 800e350:	9301      	str	r3, [sp, #4]
 800e352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e354:	9300      	str	r3, [sp, #0]
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e35a:	68f8      	ldr	r0, [r7, #12]
 800e35c:	f001 f94c 	bl	800f5f8 <xTaskCreate>
 800e360:	4603      	mov	r3, r0
 800e362:	2b01      	cmp	r3, #1
 800e364:	d001      	beq.n	800e36a <osThreadNew+0x146>
          hTask = NULL;
 800e366:	2300      	movs	r3, #0
 800e368:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e36a:	697b      	ldr	r3, [r7, #20]
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3738      	adds	r7, #56	; 0x38
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}
 800e374:	2000020c 	.word	0x2000020c

0800e378 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800e378:	b580      	push	{r7, lr}
 800e37a:	b086      	sub	sp, #24
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e380:	f3ef 8305 	mrs	r3, IPSR
 800e384:	613b      	str	r3, [r7, #16]
  return(result);
 800e386:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d10f      	bne.n	800e3ac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e38c:	f3ef 8310 	mrs	r3, PRIMASK
 800e390:	60fb      	str	r3, [r7, #12]
  return(result);
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d109      	bne.n	800e3ac <osDelay+0x34>
 800e398:	4b0d      	ldr	r3, [pc, #52]	; (800e3d0 <osDelay+0x58>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	2b02      	cmp	r3, #2
 800e39e:	d109      	bne.n	800e3b4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e3a0:	f3ef 8311 	mrs	r3, BASEPRI
 800e3a4:	60bb      	str	r3, [r7, #8]
  return(result);
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d003      	beq.n	800e3b4 <osDelay+0x3c>
    stat = osErrorISR;
 800e3ac:	f06f 0305 	mvn.w	r3, #5
 800e3b0:	617b      	str	r3, [r7, #20]
 800e3b2:	e007      	b.n	800e3c4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d002      	beq.n	800e3c4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f001 fa6e 	bl	800f8a0 <vTaskDelay>
    }
  }

  return (stat);
 800e3c4:	697b      	ldr	r3, [r7, #20]
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3718      	adds	r7, #24
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
 800e3ce:	bf00      	nop
 800e3d0:	2000020c 	.word	0x2000020c

0800e3d4 <osSemaphoreAcquire>:
  }

  return ((osSemaphoreId_t)hSemaphore);
}

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b088      	sub	sp, #32
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800e3e6:	69bb      	ldr	r3, [r7, #24]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d103      	bne.n	800e3f4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e3ec:	f06f 0303 	mvn.w	r3, #3
 800e3f0:	61fb      	str	r3, [r7, #28]
 800e3f2:	e04b      	b.n	800e48c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e3f4:	f3ef 8305 	mrs	r3, IPSR
 800e3f8:	617b      	str	r3, [r7, #20]
  return(result);
 800e3fa:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d10f      	bne.n	800e420 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e400:	f3ef 8310 	mrs	r3, PRIMASK
 800e404:	613b      	str	r3, [r7, #16]
  return(result);
 800e406:	693b      	ldr	r3, [r7, #16]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d109      	bne.n	800e420 <osSemaphoreAcquire+0x4c>
 800e40c:	4b22      	ldr	r3, [pc, #136]	; (800e498 <osSemaphoreAcquire+0xc4>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	2b02      	cmp	r3, #2
 800e412:	d128      	bne.n	800e466 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e414:	f3ef 8311 	mrs	r3, BASEPRI
 800e418:	60fb      	str	r3, [r7, #12]
  return(result);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d022      	beq.n	800e466 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d003      	beq.n	800e42e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800e426:	f06f 0303 	mvn.w	r3, #3
 800e42a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800e42c:	e02d      	b.n	800e48a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800e42e:	2300      	movs	r3, #0
 800e430:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e432:	f107 0308 	add.w	r3, r7, #8
 800e436:	461a      	mov	r2, r3
 800e438:	2100      	movs	r1, #0
 800e43a:	69b8      	ldr	r0, [r7, #24]
 800e43c:	f000 fe7c 	bl	800f138 <xQueueReceiveFromISR>
 800e440:	4603      	mov	r3, r0
 800e442:	2b01      	cmp	r3, #1
 800e444:	d003      	beq.n	800e44e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800e446:	f06f 0302 	mvn.w	r3, #2
 800e44a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800e44c:	e01d      	b.n	800e48a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d01a      	beq.n	800e48a <osSemaphoreAcquire+0xb6>
 800e454:	4b11      	ldr	r3, [pc, #68]	; (800e49c <osSemaphoreAcquire+0xc8>)
 800e456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e45a:	601a      	str	r2, [r3, #0]
 800e45c:	f3bf 8f4f 	dsb	sy
 800e460:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800e464:	e011      	b.n	800e48a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e466:	6839      	ldr	r1, [r7, #0]
 800e468:	69b8      	ldr	r0, [r7, #24]
 800e46a:	f000 fd59 	bl	800ef20 <xQueueSemaphoreTake>
 800e46e:	4603      	mov	r3, r0
 800e470:	2b01      	cmp	r3, #1
 800e472:	d00b      	beq.n	800e48c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d003      	beq.n	800e482 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800e47a:	f06f 0301 	mvn.w	r3, #1
 800e47e:	61fb      	str	r3, [r7, #28]
 800e480:	e004      	b.n	800e48c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800e482:	f06f 0302 	mvn.w	r3, #2
 800e486:	61fb      	str	r3, [r7, #28]
 800e488:	e000      	b.n	800e48c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800e48a:	bf00      	nop
      }
    }
  }

  return (stat);
 800e48c:	69fb      	ldr	r3, [r7, #28]
}
 800e48e:	4618      	mov	r0, r3
 800e490:	3720      	adds	r7, #32
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}
 800e496:	bf00      	nop
 800e498:	2000020c 	.word	0x2000020c
 800e49c:	e000ed04 	.word	0xe000ed04

0800e4a0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b088      	sub	sp, #32
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800e4b0:	69bb      	ldr	r3, [r7, #24]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d103      	bne.n	800e4be <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e4b6:	f06f 0303 	mvn.w	r3, #3
 800e4ba:	61fb      	str	r3, [r7, #28]
 800e4bc:	e03e      	b.n	800e53c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e4be:	f3ef 8305 	mrs	r3, IPSR
 800e4c2:	617b      	str	r3, [r7, #20]
  return(result);
 800e4c4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d10f      	bne.n	800e4ea <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e4ca:	f3ef 8310 	mrs	r3, PRIMASK
 800e4ce:	613b      	str	r3, [r7, #16]
  return(result);
 800e4d0:	693b      	ldr	r3, [r7, #16]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d109      	bne.n	800e4ea <osSemaphoreRelease+0x4a>
 800e4d6:	4b1c      	ldr	r3, [pc, #112]	; (800e548 <osSemaphoreRelease+0xa8>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	2b02      	cmp	r3, #2
 800e4dc:	d120      	bne.n	800e520 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e4de:	f3ef 8311 	mrs	r3, BASEPRI
 800e4e2:	60fb      	str	r3, [r7, #12]
  return(result);
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d01a      	beq.n	800e520 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e4ee:	f107 0308 	add.w	r3, r7, #8
 800e4f2:	4619      	mov	r1, r3
 800e4f4:	69b8      	ldr	r0, [r7, #24]
 800e4f6:	f000 fba5 	bl	800ec44 <xQueueGiveFromISR>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	d003      	beq.n	800e508 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800e500:	f06f 0302 	mvn.w	r3, #2
 800e504:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e506:	e018      	b.n	800e53a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d015      	beq.n	800e53a <osSemaphoreRelease+0x9a>
 800e50e:	4b0f      	ldr	r3, [pc, #60]	; (800e54c <osSemaphoreRelease+0xac>)
 800e510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e514:	601a      	str	r2, [r3, #0]
 800e516:	f3bf 8f4f 	dsb	sy
 800e51a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e51e:	e00c      	b.n	800e53a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e520:	2300      	movs	r3, #0
 800e522:	2200      	movs	r2, #0
 800e524:	2100      	movs	r1, #0
 800e526:	69b8      	ldr	r0, [r7, #24]
 800e528:	f000 f9f6 	bl	800e918 <xQueueGenericSend>
 800e52c:	4603      	mov	r3, r0
 800e52e:	2b01      	cmp	r3, #1
 800e530:	d004      	beq.n	800e53c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800e532:	f06f 0302 	mvn.w	r3, #2
 800e536:	61fb      	str	r3, [r7, #28]
 800e538:	e000      	b.n	800e53c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e53a:	bf00      	nop
    }
  }

  return (stat);
 800e53c:	69fb      	ldr	r3, [r7, #28]
}
 800e53e:	4618      	mov	r0, r3
 800e540:	3720      	adds	r7, #32
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
 800e546:	bf00      	nop
 800e548:	2000020c 	.word	0x2000020c
 800e54c:	e000ed04 	.word	0xe000ed04

0800e550 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e550:	b480      	push	{r7}
 800e552:	b085      	sub	sp, #20
 800e554:	af00      	add	r7, sp, #0
 800e556:	60f8      	str	r0, [r7, #12]
 800e558:	60b9      	str	r1, [r7, #8]
 800e55a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	4a06      	ldr	r2, [pc, #24]	; (800e578 <vApplicationGetIdleTaskMemory+0x28>)
 800e560:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	4a05      	ldr	r2, [pc, #20]	; (800e57c <vApplicationGetIdleTaskMemory+0x2c>)
 800e566:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2280      	movs	r2, #128	; 0x80
 800e56c:	601a      	str	r2, [r3, #0]
}
 800e56e:	bf00      	nop
 800e570:	3714      	adds	r7, #20
 800e572:	46bd      	mov	sp, r7
 800e574:	bc80      	pop	{r7}
 800e576:	4770      	bx	lr
 800e578:	20000210 	.word	0x20000210
 800e57c:	200002cc 	.word	0x200002cc

0800e580 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e580:	b480      	push	{r7}
 800e582:	b085      	sub	sp, #20
 800e584:	af00      	add	r7, sp, #0
 800e586:	60f8      	str	r0, [r7, #12]
 800e588:	60b9      	str	r1, [r7, #8]
 800e58a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	4a07      	ldr	r2, [pc, #28]	; (800e5ac <vApplicationGetTimerTaskMemory+0x2c>)
 800e590:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	4a06      	ldr	r2, [pc, #24]	; (800e5b0 <vApplicationGetTimerTaskMemory+0x30>)
 800e596:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e59e:	601a      	str	r2, [r3, #0]
}
 800e5a0:	bf00      	nop
 800e5a2:	3714      	adds	r7, #20
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bc80      	pop	{r7}
 800e5a8:	4770      	bx	lr
 800e5aa:	bf00      	nop
 800e5ac:	200004cc 	.word	0x200004cc
 800e5b0:	20000588 	.word	0x20000588

0800e5b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b083      	sub	sp, #12
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f103 0208 	add.w	r2, r3, #8
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f04f 32ff 	mov.w	r2, #4294967295
 800e5cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f103 0208 	add.w	r2, r3, #8
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f103 0208 	add.w	r2, r3, #8
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e5e8:	bf00      	nop
 800e5ea:	370c      	adds	r7, #12
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bc80      	pop	{r7}
 800e5f0:	4770      	bx	lr

0800e5f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e5f2:	b480      	push	{r7}
 800e5f4:	b083      	sub	sp, #12
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e600:	bf00      	nop
 800e602:	370c      	adds	r7, #12
 800e604:	46bd      	mov	sp, r7
 800e606:	bc80      	pop	{r7}
 800e608:	4770      	bx	lr

0800e60a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e60a:	b480      	push	{r7}
 800e60c:	b085      	sub	sp, #20
 800e60e:	af00      	add	r7, sp, #0
 800e610:	6078      	str	r0, [r7, #4]
 800e612:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	685b      	ldr	r3, [r3, #4]
 800e618:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	68fa      	ldr	r2, [r7, #12]
 800e61e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	689a      	ldr	r2, [r3, #8]
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	689b      	ldr	r3, [r3, #8]
 800e62c:	683a      	ldr	r2, [r7, #0]
 800e62e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	683a      	ldr	r2, [r7, #0]
 800e634:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	687a      	ldr	r2, [r7, #4]
 800e63a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	1c5a      	adds	r2, r3, #1
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	601a      	str	r2, [r3, #0]
}
 800e646:	bf00      	nop
 800e648:	3714      	adds	r7, #20
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bc80      	pop	{r7}
 800e64e:	4770      	bx	lr

0800e650 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e650:	b480      	push	{r7}
 800e652:	b085      	sub	sp, #20
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e666:	d103      	bne.n	800e670 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	691b      	ldr	r3, [r3, #16]
 800e66c:	60fb      	str	r3, [r7, #12]
 800e66e:	e00c      	b.n	800e68a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	3308      	adds	r3, #8
 800e674:	60fb      	str	r3, [r7, #12]
 800e676:	e002      	b.n	800e67e <vListInsert+0x2e>
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	685b      	ldr	r3, [r3, #4]
 800e67c:	60fb      	str	r3, [r7, #12]
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	685b      	ldr	r3, [r3, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	68ba      	ldr	r2, [r7, #8]
 800e686:	429a      	cmp	r2, r3
 800e688:	d2f6      	bcs.n	800e678 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	685a      	ldr	r2, [r3, #4]
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	685b      	ldr	r3, [r3, #4]
 800e696:	683a      	ldr	r2, [r7, #0]
 800e698:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	68fa      	ldr	r2, [r7, #12]
 800e69e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	683a      	ldr	r2, [r7, #0]
 800e6a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	687a      	ldr	r2, [r7, #4]
 800e6aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	1c5a      	adds	r2, r3, #1
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	601a      	str	r2, [r3, #0]
}
 800e6b6:	bf00      	nop
 800e6b8:	3714      	adds	r7, #20
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bc80      	pop	{r7}
 800e6be:	4770      	bx	lr

0800e6c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	b085      	sub	sp, #20
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	691b      	ldr	r3, [r3, #16]
 800e6cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	685b      	ldr	r3, [r3, #4]
 800e6d2:	687a      	ldr	r2, [r7, #4]
 800e6d4:	6892      	ldr	r2, [r2, #8]
 800e6d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	689b      	ldr	r3, [r3, #8]
 800e6dc:	687a      	ldr	r2, [r7, #4]
 800e6de:	6852      	ldr	r2, [r2, #4]
 800e6e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	685b      	ldr	r3, [r3, #4]
 800e6e6:	687a      	ldr	r2, [r7, #4]
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d103      	bne.n	800e6f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	689a      	ldr	r2, [r3, #8]
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	1e5a      	subs	r2, r3, #1
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	681b      	ldr	r3, [r3, #0]
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3714      	adds	r7, #20
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bc80      	pop	{r7}
 800e710:	4770      	bx	lr
	...

0800e714 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b084      	sub	sp, #16
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d10a      	bne.n	800e73e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e72c:	f383 8811 	msr	BASEPRI, r3
 800e730:	f3bf 8f6f 	isb	sy
 800e734:	f3bf 8f4f 	dsb	sy
 800e738:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e73a:	bf00      	nop
 800e73c:	e7fe      	b.n	800e73c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e73e:	f002 fb2d 	bl	8010d9c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	681a      	ldr	r2, [r3, #0]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e74a:	68f9      	ldr	r1, [r7, #12]
 800e74c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e74e:	fb01 f303 	mul.w	r3, r1, r3
 800e752:	441a      	add	r2, r3
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	2200      	movs	r2, #0
 800e75c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681a      	ldr	r2, [r3, #0]
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	681a      	ldr	r2, [r3, #0]
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e76e:	3b01      	subs	r3, #1
 800e770:	68f9      	ldr	r1, [r7, #12]
 800e772:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e774:	fb01 f303 	mul.w	r3, r1, r3
 800e778:	441a      	add	r2, r3
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	22ff      	movs	r2, #255	; 0xff
 800e782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	22ff      	movs	r2, #255	; 0xff
 800e78a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d114      	bne.n	800e7be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	691b      	ldr	r3, [r3, #16]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d01a      	beq.n	800e7d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	3310      	adds	r3, #16
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f001 fb4d 	bl	800fe40 <xTaskRemoveFromEventList>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d012      	beq.n	800e7d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e7ac:	4b0c      	ldr	r3, [pc, #48]	; (800e7e0 <xQueueGenericReset+0xcc>)
 800e7ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7b2:	601a      	str	r2, [r3, #0]
 800e7b4:	f3bf 8f4f 	dsb	sy
 800e7b8:	f3bf 8f6f 	isb	sy
 800e7bc:	e009      	b.n	800e7d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	3310      	adds	r3, #16
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7ff fef6 	bl	800e5b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	3324      	adds	r3, #36	; 0x24
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f7ff fef1 	bl	800e5b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e7d2:	f002 fb13 	bl	8010dfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e7d6:	2301      	movs	r3, #1
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3710      	adds	r7, #16
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}
 800e7e0:	e000ed04 	.word	0xe000ed04

0800e7e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b08e      	sub	sp, #56	; 0x38
 800e7e8:	af02      	add	r7, sp, #8
 800e7ea:	60f8      	str	r0, [r7, #12]
 800e7ec:	60b9      	str	r1, [r7, #8]
 800e7ee:	607a      	str	r2, [r7, #4]
 800e7f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d10a      	bne.n	800e80e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7fc:	f383 8811 	msr	BASEPRI, r3
 800e800:	f3bf 8f6f 	isb	sy
 800e804:	f3bf 8f4f 	dsb	sy
 800e808:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e80a:	bf00      	nop
 800e80c:	e7fe      	b.n	800e80c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d10a      	bne.n	800e82a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e818:	f383 8811 	msr	BASEPRI, r3
 800e81c:	f3bf 8f6f 	isb	sy
 800e820:	f3bf 8f4f 	dsb	sy
 800e824:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e826:	bf00      	nop
 800e828:	e7fe      	b.n	800e828 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d002      	beq.n	800e836 <xQueueGenericCreateStatic+0x52>
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d001      	beq.n	800e83a <xQueueGenericCreateStatic+0x56>
 800e836:	2301      	movs	r3, #1
 800e838:	e000      	b.n	800e83c <xQueueGenericCreateStatic+0x58>
 800e83a:	2300      	movs	r3, #0
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d10a      	bne.n	800e856 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e844:	f383 8811 	msr	BASEPRI, r3
 800e848:	f3bf 8f6f 	isb	sy
 800e84c:	f3bf 8f4f 	dsb	sy
 800e850:	623b      	str	r3, [r7, #32]
}
 800e852:	bf00      	nop
 800e854:	e7fe      	b.n	800e854 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d102      	bne.n	800e862 <xQueueGenericCreateStatic+0x7e>
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d101      	bne.n	800e866 <xQueueGenericCreateStatic+0x82>
 800e862:	2301      	movs	r3, #1
 800e864:	e000      	b.n	800e868 <xQueueGenericCreateStatic+0x84>
 800e866:	2300      	movs	r3, #0
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d10a      	bne.n	800e882 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e870:	f383 8811 	msr	BASEPRI, r3
 800e874:	f3bf 8f6f 	isb	sy
 800e878:	f3bf 8f4f 	dsb	sy
 800e87c:	61fb      	str	r3, [r7, #28]
}
 800e87e:	bf00      	nop
 800e880:	e7fe      	b.n	800e880 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e882:	2350      	movs	r3, #80	; 0x50
 800e884:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	2b50      	cmp	r3, #80	; 0x50
 800e88a:	d00a      	beq.n	800e8a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e890:	f383 8811 	msr	BASEPRI, r3
 800e894:	f3bf 8f6f 	isb	sy
 800e898:	f3bf 8f4f 	dsb	sy
 800e89c:	61bb      	str	r3, [r7, #24]
}
 800e89e:	bf00      	nop
 800e8a0:	e7fe      	b.n	800e8a0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d00d      	beq.n	800e8c8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ae:	2201      	movs	r2, #1
 800e8b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e8b4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ba:	9300      	str	r3, [sp, #0]
 800e8bc:	4613      	mov	r3, r2
 800e8be:	687a      	ldr	r2, [r7, #4]
 800e8c0:	68b9      	ldr	r1, [r7, #8]
 800e8c2:	68f8      	ldr	r0, [r7, #12]
 800e8c4:	f000 f805 	bl	800e8d2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800e8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3730      	adds	r7, #48	; 0x30
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}

0800e8d2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e8d2:	b580      	push	{r7, lr}
 800e8d4:	b084      	sub	sp, #16
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	60f8      	str	r0, [r7, #12]
 800e8da:	60b9      	str	r1, [r7, #8]
 800e8dc:	607a      	str	r2, [r7, #4]
 800e8de:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d103      	bne.n	800e8ee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e8e6:	69bb      	ldr	r3, [r7, #24]
 800e8e8:	69ba      	ldr	r2, [r7, #24]
 800e8ea:	601a      	str	r2, [r3, #0]
 800e8ec:	e002      	b.n	800e8f4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e8ee:	69bb      	ldr	r3, [r7, #24]
 800e8f0:	687a      	ldr	r2, [r7, #4]
 800e8f2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e8f4:	69bb      	ldr	r3, [r7, #24]
 800e8f6:	68fa      	ldr	r2, [r7, #12]
 800e8f8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e8fa:	69bb      	ldr	r3, [r7, #24]
 800e8fc:	68ba      	ldr	r2, [r7, #8]
 800e8fe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e900:	2101      	movs	r1, #1
 800e902:	69b8      	ldr	r0, [r7, #24]
 800e904:	f7ff ff06 	bl	800e714 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e908:	69bb      	ldr	r3, [r7, #24]
 800e90a:	78fa      	ldrb	r2, [r7, #3]
 800e90c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e910:	bf00      	nop
 800e912:	3710      	adds	r7, #16
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}

0800e918 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b08e      	sub	sp, #56	; 0x38
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	60b9      	str	r1, [r7, #8]
 800e922:	607a      	str	r2, [r7, #4]
 800e924:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e926:	2300      	movs	r3, #0
 800e928:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e930:	2b00      	cmp	r3, #0
 800e932:	d10a      	bne.n	800e94a <xQueueGenericSend+0x32>
	__asm volatile
 800e934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e938:	f383 8811 	msr	BASEPRI, r3
 800e93c:	f3bf 8f6f 	isb	sy
 800e940:	f3bf 8f4f 	dsb	sy
 800e944:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e946:	bf00      	nop
 800e948:	e7fe      	b.n	800e948 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d103      	bne.n	800e958 <xQueueGenericSend+0x40>
 800e950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e954:	2b00      	cmp	r3, #0
 800e956:	d101      	bne.n	800e95c <xQueueGenericSend+0x44>
 800e958:	2301      	movs	r3, #1
 800e95a:	e000      	b.n	800e95e <xQueueGenericSend+0x46>
 800e95c:	2300      	movs	r3, #0
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d10a      	bne.n	800e978 <xQueueGenericSend+0x60>
	__asm volatile
 800e962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e966:	f383 8811 	msr	BASEPRI, r3
 800e96a:	f3bf 8f6f 	isb	sy
 800e96e:	f3bf 8f4f 	dsb	sy
 800e972:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e974:	bf00      	nop
 800e976:	e7fe      	b.n	800e976 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	2b02      	cmp	r3, #2
 800e97c:	d103      	bne.n	800e986 <xQueueGenericSend+0x6e>
 800e97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e982:	2b01      	cmp	r3, #1
 800e984:	d101      	bne.n	800e98a <xQueueGenericSend+0x72>
 800e986:	2301      	movs	r3, #1
 800e988:	e000      	b.n	800e98c <xQueueGenericSend+0x74>
 800e98a:	2300      	movs	r3, #0
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d10a      	bne.n	800e9a6 <xQueueGenericSend+0x8e>
	__asm volatile
 800e990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e994:	f383 8811 	msr	BASEPRI, r3
 800e998:	f3bf 8f6f 	isb	sy
 800e99c:	f3bf 8f4f 	dsb	sy
 800e9a0:	623b      	str	r3, [r7, #32]
}
 800e9a2:	bf00      	nop
 800e9a4:	e7fe      	b.n	800e9a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e9a6:	f001 fc11 	bl	80101cc <xTaskGetSchedulerState>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d102      	bne.n	800e9b6 <xQueueGenericSend+0x9e>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d101      	bne.n	800e9ba <xQueueGenericSend+0xa2>
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	e000      	b.n	800e9bc <xQueueGenericSend+0xa4>
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d10a      	bne.n	800e9d6 <xQueueGenericSend+0xbe>
	__asm volatile
 800e9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c4:	f383 8811 	msr	BASEPRI, r3
 800e9c8:	f3bf 8f6f 	isb	sy
 800e9cc:	f3bf 8f4f 	dsb	sy
 800e9d0:	61fb      	str	r3, [r7, #28]
}
 800e9d2:	bf00      	nop
 800e9d4:	e7fe      	b.n	800e9d4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e9d6:	f002 f9e1 	bl	8010d9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d302      	bcc.n	800e9ec <xQueueGenericSend+0xd4>
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	2b02      	cmp	r3, #2
 800e9ea:	d129      	bne.n	800ea40 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e9ec:	683a      	ldr	r2, [r7, #0]
 800e9ee:	68b9      	ldr	r1, [r7, #8]
 800e9f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e9f2:	f000 fc38 	bl	800f266 <prvCopyDataToQueue>
 800e9f6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d010      	beq.n	800ea22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea02:	3324      	adds	r3, #36	; 0x24
 800ea04:	4618      	mov	r0, r3
 800ea06:	f001 fa1b 	bl	800fe40 <xTaskRemoveFromEventList>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d013      	beq.n	800ea38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ea10:	4b3f      	ldr	r3, [pc, #252]	; (800eb10 <xQueueGenericSend+0x1f8>)
 800ea12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea16:	601a      	str	r2, [r3, #0]
 800ea18:	f3bf 8f4f 	dsb	sy
 800ea1c:	f3bf 8f6f 	isb	sy
 800ea20:	e00a      	b.n	800ea38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ea22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d007      	beq.n	800ea38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ea28:	4b39      	ldr	r3, [pc, #228]	; (800eb10 <xQueueGenericSend+0x1f8>)
 800ea2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea2e:	601a      	str	r2, [r3, #0]
 800ea30:	f3bf 8f4f 	dsb	sy
 800ea34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ea38:	f002 f9e0 	bl	8010dfc <vPortExitCritical>
				return pdPASS;
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	e063      	b.n	800eb08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d103      	bne.n	800ea4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ea46:	f002 f9d9 	bl	8010dfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	e05c      	b.n	800eb08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ea4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d106      	bne.n	800ea62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ea54:	f107 0314 	add.w	r3, r7, #20
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f001 fa55 	bl	800ff08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ea5e:	2301      	movs	r3, #1
 800ea60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ea62:	f002 f9cb 	bl	8010dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ea66:	f000 ffbf 	bl	800f9e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ea6a:	f002 f997 	bl	8010d9c <vPortEnterCritical>
 800ea6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea74:	b25b      	sxtb	r3, r3
 800ea76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea7a:	d103      	bne.n	800ea84 <xQueueGenericSend+0x16c>
 800ea7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea7e:	2200      	movs	r2, #0
 800ea80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea8a:	b25b      	sxtb	r3, r3
 800ea8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea90:	d103      	bne.n	800ea9a <xQueueGenericSend+0x182>
 800ea92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea94:	2200      	movs	r2, #0
 800ea96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea9a:	f002 f9af 	bl	8010dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ea9e:	1d3a      	adds	r2, r7, #4
 800eaa0:	f107 0314 	add.w	r3, r7, #20
 800eaa4:	4611      	mov	r1, r2
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f001 fa44 	bl	800ff34 <xTaskCheckForTimeOut>
 800eaac:	4603      	mov	r3, r0
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d124      	bne.n	800eafc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800eab2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eab4:	f000 fccf 	bl	800f456 <prvIsQueueFull>
 800eab8:	4603      	mov	r3, r0
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d018      	beq.n	800eaf0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800eabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac0:	3310      	adds	r3, #16
 800eac2:	687a      	ldr	r2, [r7, #4]
 800eac4:	4611      	mov	r1, r2
 800eac6:	4618      	mov	r0, r3
 800eac8:	f001 f96a 	bl	800fda0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800eacc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eace:	f000 fc5a 	bl	800f386 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ead2:	f000 ff97 	bl	800fa04 <xTaskResumeAll>
 800ead6:	4603      	mov	r3, r0
 800ead8:	2b00      	cmp	r3, #0
 800eada:	f47f af7c 	bne.w	800e9d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800eade:	4b0c      	ldr	r3, [pc, #48]	; (800eb10 <xQueueGenericSend+0x1f8>)
 800eae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eae4:	601a      	str	r2, [r3, #0]
 800eae6:	f3bf 8f4f 	dsb	sy
 800eaea:	f3bf 8f6f 	isb	sy
 800eaee:	e772      	b.n	800e9d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800eaf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eaf2:	f000 fc48 	bl	800f386 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eaf6:	f000 ff85 	bl	800fa04 <xTaskResumeAll>
 800eafa:	e76c      	b.n	800e9d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800eafc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eafe:	f000 fc42 	bl	800f386 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eb02:	f000 ff7f 	bl	800fa04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800eb06:	2300      	movs	r3, #0
		}
	}
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3738      	adds	r7, #56	; 0x38
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	e000ed04 	.word	0xe000ed04

0800eb14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b08e      	sub	sp, #56	; 0x38
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	60f8      	str	r0, [r7, #12]
 800eb1c:	60b9      	str	r1, [r7, #8]
 800eb1e:	607a      	str	r2, [r7, #4]
 800eb20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d10a      	bne.n	800eb42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800eb2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb30:	f383 8811 	msr	BASEPRI, r3
 800eb34:	f3bf 8f6f 	isb	sy
 800eb38:	f3bf 8f4f 	dsb	sy
 800eb3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800eb3e:	bf00      	nop
 800eb40:	e7fe      	b.n	800eb40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d103      	bne.n	800eb50 <xQueueGenericSendFromISR+0x3c>
 800eb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d101      	bne.n	800eb54 <xQueueGenericSendFromISR+0x40>
 800eb50:	2301      	movs	r3, #1
 800eb52:	e000      	b.n	800eb56 <xQueueGenericSendFromISR+0x42>
 800eb54:	2300      	movs	r3, #0
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d10a      	bne.n	800eb70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800eb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb5e:	f383 8811 	msr	BASEPRI, r3
 800eb62:	f3bf 8f6f 	isb	sy
 800eb66:	f3bf 8f4f 	dsb	sy
 800eb6a:	623b      	str	r3, [r7, #32]
}
 800eb6c:	bf00      	nop
 800eb6e:	e7fe      	b.n	800eb6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	2b02      	cmp	r3, #2
 800eb74:	d103      	bne.n	800eb7e <xQueueGenericSendFromISR+0x6a>
 800eb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb7a:	2b01      	cmp	r3, #1
 800eb7c:	d101      	bne.n	800eb82 <xQueueGenericSendFromISR+0x6e>
 800eb7e:	2301      	movs	r3, #1
 800eb80:	e000      	b.n	800eb84 <xQueueGenericSendFromISR+0x70>
 800eb82:	2300      	movs	r3, #0
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d10a      	bne.n	800eb9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800eb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb8c:	f383 8811 	msr	BASEPRI, r3
 800eb90:	f3bf 8f6f 	isb	sy
 800eb94:	f3bf 8f4f 	dsb	sy
 800eb98:	61fb      	str	r3, [r7, #28]
}
 800eb9a:	bf00      	nop
 800eb9c:	e7fe      	b.n	800eb9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eb9e:	f002 f9bf 	bl	8010f20 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800eba2:	f3ef 8211 	mrs	r2, BASEPRI
 800eba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebaa:	f383 8811 	msr	BASEPRI, r3
 800ebae:	f3bf 8f6f 	isb	sy
 800ebb2:	f3bf 8f4f 	dsb	sy
 800ebb6:	61ba      	str	r2, [r7, #24]
 800ebb8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ebba:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ebbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ebbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d302      	bcc.n	800ebd0 <xQueueGenericSendFromISR+0xbc>
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	2b02      	cmp	r3, #2
 800ebce:	d12c      	bne.n	800ec2a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ebd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ebd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ebda:	683a      	ldr	r2, [r7, #0]
 800ebdc:	68b9      	ldr	r1, [r7, #8]
 800ebde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebe0:	f000 fb41 	bl	800f266 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ebe4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ebe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebec:	d112      	bne.n	800ec14 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ebee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d016      	beq.n	800ec24 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ebf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf8:	3324      	adds	r3, #36	; 0x24
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f001 f920 	bl	800fe40 <xTaskRemoveFromEventList>
 800ec00:	4603      	mov	r3, r0
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d00e      	beq.n	800ec24 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d00b      	beq.n	800ec24 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2201      	movs	r2, #1
 800ec10:	601a      	str	r2, [r3, #0]
 800ec12:	e007      	b.n	800ec24 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ec14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ec18:	3301      	adds	r3, #1
 800ec1a:	b2db      	uxtb	r3, r3
 800ec1c:	b25a      	sxtb	r2, r3
 800ec1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ec24:	2301      	movs	r3, #1
 800ec26:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ec28:	e001      	b.n	800ec2e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	637b      	str	r3, [r7, #52]	; 0x34
 800ec2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec30:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ec38:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ec3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	3738      	adds	r7, #56	; 0x38
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}

0800ec44 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b08e      	sub	sp, #56	; 0x38
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ec52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d10a      	bne.n	800ec6e <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ec58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec5c:	f383 8811 	msr	BASEPRI, r3
 800ec60:	f3bf 8f6f 	isb	sy
 800ec64:	f3bf 8f4f 	dsb	sy
 800ec68:	623b      	str	r3, [r7, #32]
}
 800ec6a:	bf00      	nop
 800ec6c:	e7fe      	b.n	800ec6c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ec6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d00a      	beq.n	800ec8c <xQueueGiveFromISR+0x48>
	__asm volatile
 800ec76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec7a:	f383 8811 	msr	BASEPRI, r3
 800ec7e:	f3bf 8f6f 	isb	sy
 800ec82:	f3bf 8f4f 	dsb	sy
 800ec86:	61fb      	str	r3, [r7, #28]
}
 800ec88:	bf00      	nop
 800ec8a:	e7fe      	b.n	800ec8a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800ec8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d103      	bne.n	800ec9c <xQueueGiveFromISR+0x58>
 800ec94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec96:	685b      	ldr	r3, [r3, #4]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d101      	bne.n	800eca0 <xQueueGiveFromISR+0x5c>
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	e000      	b.n	800eca2 <xQueueGiveFromISR+0x5e>
 800eca0:	2300      	movs	r3, #0
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d10a      	bne.n	800ecbc <xQueueGiveFromISR+0x78>
	__asm volatile
 800eca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecaa:	f383 8811 	msr	BASEPRI, r3
 800ecae:	f3bf 8f6f 	isb	sy
 800ecb2:	f3bf 8f4f 	dsb	sy
 800ecb6:	61bb      	str	r3, [r7, #24]
}
 800ecb8:	bf00      	nop
 800ecba:	e7fe      	b.n	800ecba <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ecbc:	f002 f930 	bl	8010f20 <vPortValidateInterruptPriority>
	__asm volatile
 800ecc0:	f3ef 8211 	mrs	r2, BASEPRI
 800ecc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecc8:	f383 8811 	msr	BASEPRI, r3
 800eccc:	f3bf 8f6f 	isb	sy
 800ecd0:	f3bf 8f4f 	dsb	sy
 800ecd4:	617a      	str	r2, [r7, #20]
 800ecd6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ecd8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ecda:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ecdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ece0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ece2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ece6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ece8:	429a      	cmp	r2, r3
 800ecea:	d22b      	bcs.n	800ed44 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ecec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ecf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ecf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf8:	1c5a      	adds	r2, r3, #1
 800ecfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecfc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ecfe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ed02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed06:	d112      	bne.n	800ed2e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d016      	beq.n	800ed3e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed12:	3324      	adds	r3, #36	; 0x24
 800ed14:	4618      	mov	r0, r3
 800ed16:	f001 f893 	bl	800fe40 <xTaskRemoveFromEventList>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d00e      	beq.n	800ed3e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d00b      	beq.n	800ed3e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	2201      	movs	r2, #1
 800ed2a:	601a      	str	r2, [r3, #0]
 800ed2c:	e007      	b.n	800ed3e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ed2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed32:	3301      	adds	r3, #1
 800ed34:	b2db      	uxtb	r3, r3
 800ed36:	b25a      	sxtb	r2, r3
 800ed38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ed3e:	2301      	movs	r3, #1
 800ed40:	637b      	str	r3, [r7, #52]	; 0x34
 800ed42:	e001      	b.n	800ed48 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ed44:	2300      	movs	r3, #0
 800ed46:	637b      	str	r3, [r7, #52]	; 0x34
 800ed48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed4a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	f383 8811 	msr	BASEPRI, r3
}
 800ed52:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ed54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3738      	adds	r7, #56	; 0x38
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}
	...

0800ed60 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b08c      	sub	sp, #48	; 0x30
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	60f8      	str	r0, [r7, #12]
 800ed68:	60b9      	str	r1, [r7, #8]
 800ed6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ed74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d10a      	bne.n	800ed90 <xQueueReceive+0x30>
	__asm volatile
 800ed7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed7e:	f383 8811 	msr	BASEPRI, r3
 800ed82:	f3bf 8f6f 	isb	sy
 800ed86:	f3bf 8f4f 	dsb	sy
 800ed8a:	623b      	str	r3, [r7, #32]
}
 800ed8c:	bf00      	nop
 800ed8e:	e7fe      	b.n	800ed8e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d103      	bne.n	800ed9e <xQueueReceive+0x3e>
 800ed96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d101      	bne.n	800eda2 <xQueueReceive+0x42>
 800ed9e:	2301      	movs	r3, #1
 800eda0:	e000      	b.n	800eda4 <xQueueReceive+0x44>
 800eda2:	2300      	movs	r3, #0
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d10a      	bne.n	800edbe <xQueueReceive+0x5e>
	__asm volatile
 800eda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edac:	f383 8811 	msr	BASEPRI, r3
 800edb0:	f3bf 8f6f 	isb	sy
 800edb4:	f3bf 8f4f 	dsb	sy
 800edb8:	61fb      	str	r3, [r7, #28]
}
 800edba:	bf00      	nop
 800edbc:	e7fe      	b.n	800edbc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800edbe:	f001 fa05 	bl	80101cc <xTaskGetSchedulerState>
 800edc2:	4603      	mov	r3, r0
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d102      	bne.n	800edce <xQueueReceive+0x6e>
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d101      	bne.n	800edd2 <xQueueReceive+0x72>
 800edce:	2301      	movs	r3, #1
 800edd0:	e000      	b.n	800edd4 <xQueueReceive+0x74>
 800edd2:	2300      	movs	r3, #0
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d10a      	bne.n	800edee <xQueueReceive+0x8e>
	__asm volatile
 800edd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eddc:	f383 8811 	msr	BASEPRI, r3
 800ede0:	f3bf 8f6f 	isb	sy
 800ede4:	f3bf 8f4f 	dsb	sy
 800ede8:	61bb      	str	r3, [r7, #24]
}
 800edea:	bf00      	nop
 800edec:	e7fe      	b.n	800edec <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800edee:	f001 ffd5 	bl	8010d9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800edf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edf6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800edf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d01f      	beq.n	800ee3e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800edfe:	68b9      	ldr	r1, [r7, #8]
 800ee00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee02:	f000 fa9a 	bl	800f33a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ee06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee08:	1e5a      	subs	r2, r3, #1
 800ee0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee10:	691b      	ldr	r3, [r3, #16]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d00f      	beq.n	800ee36 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee18:	3310      	adds	r3, #16
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f001 f810 	bl	800fe40 <xTaskRemoveFromEventList>
 800ee20:	4603      	mov	r3, r0
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d007      	beq.n	800ee36 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ee26:	4b3d      	ldr	r3, [pc, #244]	; (800ef1c <xQueueReceive+0x1bc>)
 800ee28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee2c:	601a      	str	r2, [r3, #0]
 800ee2e:	f3bf 8f4f 	dsb	sy
 800ee32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ee36:	f001 ffe1 	bl	8010dfc <vPortExitCritical>
				return pdPASS;
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	e069      	b.n	800ef12 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d103      	bne.n	800ee4c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ee44:	f001 ffda 	bl	8010dfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	e062      	b.n	800ef12 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ee4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d106      	bne.n	800ee60 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ee52:	f107 0310 	add.w	r3, r7, #16
 800ee56:	4618      	mov	r0, r3
 800ee58:	f001 f856 	bl	800ff08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ee60:	f001 ffcc 	bl	8010dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ee64:	f000 fdc0 	bl	800f9e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ee68:	f001 ff98 	bl	8010d9c <vPortEnterCritical>
 800ee6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ee72:	b25b      	sxtb	r3, r3
 800ee74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee78:	d103      	bne.n	800ee82 <xQueueReceive+0x122>
 800ee7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee88:	b25b      	sxtb	r3, r3
 800ee8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee8e:	d103      	bne.n	800ee98 <xQueueReceive+0x138>
 800ee90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee92:	2200      	movs	r2, #0
 800ee94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee98:	f001 ffb0 	bl	8010dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ee9c:	1d3a      	adds	r2, r7, #4
 800ee9e:	f107 0310 	add.w	r3, r7, #16
 800eea2:	4611      	mov	r1, r2
 800eea4:	4618      	mov	r0, r3
 800eea6:	f001 f845 	bl	800ff34 <xTaskCheckForTimeOut>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d123      	bne.n	800eef8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eeb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eeb2:	f000 faba 	bl	800f42a <prvIsQueueEmpty>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d017      	beq.n	800eeec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eebe:	3324      	adds	r3, #36	; 0x24
 800eec0:	687a      	ldr	r2, [r7, #4]
 800eec2:	4611      	mov	r1, r2
 800eec4:	4618      	mov	r0, r3
 800eec6:	f000 ff6b 	bl	800fda0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800eeca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eecc:	f000 fa5b 	bl	800f386 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eed0:	f000 fd98 	bl	800fa04 <xTaskResumeAll>
 800eed4:	4603      	mov	r3, r0
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d189      	bne.n	800edee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800eeda:	4b10      	ldr	r3, [pc, #64]	; (800ef1c <xQueueReceive+0x1bc>)
 800eedc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eee0:	601a      	str	r2, [r3, #0]
 800eee2:	f3bf 8f4f 	dsb	sy
 800eee6:	f3bf 8f6f 	isb	sy
 800eeea:	e780      	b.n	800edee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800eeec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eeee:	f000 fa4a 	bl	800f386 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eef2:	f000 fd87 	bl	800fa04 <xTaskResumeAll>
 800eef6:	e77a      	b.n	800edee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800eef8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eefa:	f000 fa44 	bl	800f386 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eefe:	f000 fd81 	bl	800fa04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef04:	f000 fa91 	bl	800f42a <prvIsQueueEmpty>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	f43f af6f 	beq.w	800edee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ef10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ef12:	4618      	mov	r0, r3
 800ef14:	3730      	adds	r7, #48	; 0x30
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd80      	pop	{r7, pc}
 800ef1a:	bf00      	nop
 800ef1c:	e000ed04 	.word	0xe000ed04

0800ef20 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b08e      	sub	sp, #56	; 0x38
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ef32:	2300      	movs	r3, #0
 800ef34:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ef36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d10a      	bne.n	800ef52 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ef3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef40:	f383 8811 	msr	BASEPRI, r3
 800ef44:	f3bf 8f6f 	isb	sy
 800ef48:	f3bf 8f4f 	dsb	sy
 800ef4c:	623b      	str	r3, [r7, #32]
}
 800ef4e:	bf00      	nop
 800ef50:	e7fe      	b.n	800ef50 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ef52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d00a      	beq.n	800ef70 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ef5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef5e:	f383 8811 	msr	BASEPRI, r3
 800ef62:	f3bf 8f6f 	isb	sy
 800ef66:	f3bf 8f4f 	dsb	sy
 800ef6a:	61fb      	str	r3, [r7, #28]
}
 800ef6c:	bf00      	nop
 800ef6e:	e7fe      	b.n	800ef6e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef70:	f001 f92c 	bl	80101cc <xTaskGetSchedulerState>
 800ef74:	4603      	mov	r3, r0
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d102      	bne.n	800ef80 <xQueueSemaphoreTake+0x60>
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d101      	bne.n	800ef84 <xQueueSemaphoreTake+0x64>
 800ef80:	2301      	movs	r3, #1
 800ef82:	e000      	b.n	800ef86 <xQueueSemaphoreTake+0x66>
 800ef84:	2300      	movs	r3, #0
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d10a      	bne.n	800efa0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ef8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef8e:	f383 8811 	msr	BASEPRI, r3
 800ef92:	f3bf 8f6f 	isb	sy
 800ef96:	f3bf 8f4f 	dsb	sy
 800ef9a:	61bb      	str	r3, [r7, #24]
}
 800ef9c:	bf00      	nop
 800ef9e:	e7fe      	b.n	800ef9e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800efa0:	f001 fefc 	bl	8010d9c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800efa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efa8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800efaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efac:	2b00      	cmp	r3, #0
 800efae:	d024      	beq.n	800effa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800efb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efb2:	1e5a      	subs	r2, r3, #1
 800efb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800efb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d104      	bne.n	800efca <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800efc0:	f001 fa84 	bl	80104cc <pvTaskIncrementMutexHeldCount>
 800efc4:	4602      	mov	r2, r0
 800efc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800efca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efcc:	691b      	ldr	r3, [r3, #16]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d00f      	beq.n	800eff2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800efd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd4:	3310      	adds	r3, #16
 800efd6:	4618      	mov	r0, r3
 800efd8:	f000 ff32 	bl	800fe40 <xTaskRemoveFromEventList>
 800efdc:	4603      	mov	r3, r0
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d007      	beq.n	800eff2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800efe2:	4b54      	ldr	r3, [pc, #336]	; (800f134 <xQueueSemaphoreTake+0x214>)
 800efe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efe8:	601a      	str	r2, [r3, #0]
 800efea:	f3bf 8f4f 	dsb	sy
 800efee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eff2:	f001 ff03 	bl	8010dfc <vPortExitCritical>
				return pdPASS;
 800eff6:	2301      	movs	r3, #1
 800eff8:	e097      	b.n	800f12a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d111      	bne.n	800f024 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f002:	2b00      	cmp	r3, #0
 800f004:	d00a      	beq.n	800f01c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f00a:	f383 8811 	msr	BASEPRI, r3
 800f00e:	f3bf 8f6f 	isb	sy
 800f012:	f3bf 8f4f 	dsb	sy
 800f016:	617b      	str	r3, [r7, #20]
}
 800f018:	bf00      	nop
 800f01a:	e7fe      	b.n	800f01a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f01c:	f001 feee 	bl	8010dfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f020:	2300      	movs	r3, #0
 800f022:	e082      	b.n	800f12a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f026:	2b00      	cmp	r3, #0
 800f028:	d106      	bne.n	800f038 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f02a:	f107 030c 	add.w	r3, r7, #12
 800f02e:	4618      	mov	r0, r3
 800f030:	f000 ff6a 	bl	800ff08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f034:	2301      	movs	r3, #1
 800f036:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f038:	f001 fee0 	bl	8010dfc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f03c:	f000 fcd4 	bl	800f9e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f040:	f001 feac 	bl	8010d9c <vPortEnterCritical>
 800f044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f046:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f04a:	b25b      	sxtb	r3, r3
 800f04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f050:	d103      	bne.n	800f05a <xQueueSemaphoreTake+0x13a>
 800f052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f054:	2200      	movs	r2, #0
 800f056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f060:	b25b      	sxtb	r3, r3
 800f062:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f066:	d103      	bne.n	800f070 <xQueueSemaphoreTake+0x150>
 800f068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f06a:	2200      	movs	r2, #0
 800f06c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f070:	f001 fec4 	bl	8010dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f074:	463a      	mov	r2, r7
 800f076:	f107 030c 	add.w	r3, r7, #12
 800f07a:	4611      	mov	r1, r2
 800f07c:	4618      	mov	r0, r3
 800f07e:	f000 ff59 	bl	800ff34 <xTaskCheckForTimeOut>
 800f082:	4603      	mov	r3, r0
 800f084:	2b00      	cmp	r3, #0
 800f086:	d132      	bne.n	800f0ee <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f088:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f08a:	f000 f9ce 	bl	800f42a <prvIsQueueEmpty>
 800f08e:	4603      	mov	r3, r0
 800f090:	2b00      	cmp	r3, #0
 800f092:	d026      	beq.n	800f0e2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d109      	bne.n	800f0b0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f09c:	f001 fe7e 	bl	8010d9c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800f0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a2:	685b      	ldr	r3, [r3, #4]
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f001 f8af 	bl	8010208 <xTaskPriorityInherit>
 800f0aa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f0ac:	f001 fea6 	bl	8010dfc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b2:	3324      	adds	r3, #36	; 0x24
 800f0b4:	683a      	ldr	r2, [r7, #0]
 800f0b6:	4611      	mov	r1, r2
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f000 fe71 	bl	800fda0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f0be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0c0:	f000 f961 	bl	800f386 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f0c4:	f000 fc9e 	bl	800fa04 <xTaskResumeAll>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	f47f af68 	bne.w	800efa0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f0d0:	4b18      	ldr	r3, [pc, #96]	; (800f134 <xQueueSemaphoreTake+0x214>)
 800f0d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0d6:	601a      	str	r2, [r3, #0]
 800f0d8:	f3bf 8f4f 	dsb	sy
 800f0dc:	f3bf 8f6f 	isb	sy
 800f0e0:	e75e      	b.n	800efa0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f0e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0e4:	f000 f94f 	bl	800f386 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f0e8:	f000 fc8c 	bl	800fa04 <xTaskResumeAll>
 800f0ec:	e758      	b.n	800efa0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f0ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0f0:	f000 f949 	bl	800f386 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f0f4:	f000 fc86 	bl	800fa04 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f0f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0fa:	f000 f996 	bl	800f42a <prvIsQueueEmpty>
 800f0fe:	4603      	mov	r3, r0
 800f100:	2b00      	cmp	r3, #0
 800f102:	f43f af4d 	beq.w	800efa0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d00d      	beq.n	800f128 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f10c:	f001 fe46 	bl	8010d9c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f110:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f112:	f000 f891 	bl	800f238 <prvGetDisinheritPriorityAfterTimeout>
 800f116:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800f118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f11a:	685b      	ldr	r3, [r3, #4]
 800f11c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f11e:	4618      	mov	r0, r3
 800f120:	f001 f94e 	bl	80103c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f124:	f001 fe6a 	bl	8010dfc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f128:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3738      	adds	r7, #56	; 0x38
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}
 800f132:	bf00      	nop
 800f134:	e000ed04 	.word	0xe000ed04

0800f138 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b08e      	sub	sp, #56	; 0x38
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	60f8      	str	r0, [r7, #12]
 800f140:	60b9      	str	r1, [r7, #8]
 800f142:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d10a      	bne.n	800f164 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f152:	f383 8811 	msr	BASEPRI, r3
 800f156:	f3bf 8f6f 	isb	sy
 800f15a:	f3bf 8f4f 	dsb	sy
 800f15e:	623b      	str	r3, [r7, #32]
}
 800f160:	bf00      	nop
 800f162:	e7fe      	b.n	800f162 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d103      	bne.n	800f172 <xQueueReceiveFromISR+0x3a>
 800f16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d101      	bne.n	800f176 <xQueueReceiveFromISR+0x3e>
 800f172:	2301      	movs	r3, #1
 800f174:	e000      	b.n	800f178 <xQueueReceiveFromISR+0x40>
 800f176:	2300      	movs	r3, #0
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d10a      	bne.n	800f192 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f180:	f383 8811 	msr	BASEPRI, r3
 800f184:	f3bf 8f6f 	isb	sy
 800f188:	f3bf 8f4f 	dsb	sy
 800f18c:	61fb      	str	r3, [r7, #28]
}
 800f18e:	bf00      	nop
 800f190:	e7fe      	b.n	800f190 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f192:	f001 fec5 	bl	8010f20 <vPortValidateInterruptPriority>
	__asm volatile
 800f196:	f3ef 8211 	mrs	r2, BASEPRI
 800f19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f19e:	f383 8811 	msr	BASEPRI, r3
 800f1a2:	f3bf 8f6f 	isb	sy
 800f1a6:	f3bf 8f4f 	dsb	sy
 800f1aa:	61ba      	str	r2, [r7, #24]
 800f1ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f1ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f1b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d02f      	beq.n	800f21e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f1c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f1c8:	68b9      	ldr	r1, [r7, #8]
 800f1ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1cc:	f000 f8b5 	bl	800f33a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d2:	1e5a      	subs	r2, r3, #1
 800f1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f1d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f1dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1e0:	d112      	bne.n	800f208 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e4:	691b      	ldr	r3, [r3, #16]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d016      	beq.n	800f218 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ec:	3310      	adds	r3, #16
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f000 fe26 	bl	800fe40 <xTaskRemoveFromEventList>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d00e      	beq.n	800f218 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d00b      	beq.n	800f218 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2201      	movs	r2, #1
 800f204:	601a      	str	r2, [r3, #0]
 800f206:	e007      	b.n	800f218 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f20c:	3301      	adds	r3, #1
 800f20e:	b2db      	uxtb	r3, r3
 800f210:	b25a      	sxtb	r2, r3
 800f212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f218:	2301      	movs	r3, #1
 800f21a:	637b      	str	r3, [r7, #52]	; 0x34
 800f21c:	e001      	b.n	800f222 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f21e:	2300      	movs	r3, #0
 800f220:	637b      	str	r3, [r7, #52]	; 0x34
 800f222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f224:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f226:	693b      	ldr	r3, [r7, #16]
 800f228:	f383 8811 	msr	BASEPRI, r3
}
 800f22c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f230:	4618      	mov	r0, r3
 800f232:	3738      	adds	r7, #56	; 0x38
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}

0800f238 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f238:	b480      	push	{r7}
 800f23a:	b085      	sub	sp, #20
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f244:	2b00      	cmp	r3, #0
 800f246:	d006      	beq.n	800f256 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f252:	60fb      	str	r3, [r7, #12]
 800f254:	e001      	b.n	800f25a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f256:	2300      	movs	r3, #0
 800f258:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f25a:	68fb      	ldr	r3, [r7, #12]
	}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3714      	adds	r7, #20
 800f260:	46bd      	mov	sp, r7
 800f262:	bc80      	pop	{r7}
 800f264:	4770      	bx	lr

0800f266 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f266:	b580      	push	{r7, lr}
 800f268:	b086      	sub	sp, #24
 800f26a:	af00      	add	r7, sp, #0
 800f26c:	60f8      	str	r0, [r7, #12]
 800f26e:	60b9      	str	r1, [r7, #8]
 800f270:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f272:	2300      	movs	r3, #0
 800f274:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f27a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f280:	2b00      	cmp	r3, #0
 800f282:	d10d      	bne.n	800f2a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d14d      	bne.n	800f328 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	685b      	ldr	r3, [r3, #4]
 800f290:	4618      	mov	r0, r3
 800f292:	f001 f827 	bl	80102e4 <xTaskPriorityDisinherit>
 800f296:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	2200      	movs	r2, #0
 800f29c:	605a      	str	r2, [r3, #4]
 800f29e:	e043      	b.n	800f328 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d119      	bne.n	800f2da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	6898      	ldr	r0, [r3, #8]
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2ae:	461a      	mov	r2, r3
 800f2b0:	68b9      	ldr	r1, [r7, #8]
 800f2b2:	f002 f97f 	bl	80115b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	689a      	ldr	r2, [r3, #8]
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2be:	441a      	add	r2, r3
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	689a      	ldr	r2, [r3, #8]
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	d32b      	bcc.n	800f328 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	681a      	ldr	r2, [r3, #0]
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	609a      	str	r2, [r3, #8]
 800f2d8:	e026      	b.n	800f328 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	68d8      	ldr	r0, [r3, #12]
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2e2:	461a      	mov	r2, r3
 800f2e4:	68b9      	ldr	r1, [r7, #8]
 800f2e6:	f002 f965 	bl	80115b4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	68da      	ldr	r2, [r3, #12]
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2f2:	425b      	negs	r3, r3
 800f2f4:	441a      	add	r2, r3
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	68da      	ldr	r2, [r3, #12]
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	429a      	cmp	r2, r3
 800f304:	d207      	bcs.n	800f316 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	685a      	ldr	r2, [r3, #4]
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f30e:	425b      	negs	r3, r3
 800f310:	441a      	add	r2, r3
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2b02      	cmp	r3, #2
 800f31a:	d105      	bne.n	800f328 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f31c:	693b      	ldr	r3, [r7, #16]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d002      	beq.n	800f328 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f322:	693b      	ldr	r3, [r7, #16]
 800f324:	3b01      	subs	r3, #1
 800f326:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	1c5a      	adds	r2, r3, #1
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f330:	697b      	ldr	r3, [r7, #20]
}
 800f332:	4618      	mov	r0, r3
 800f334:	3718      	adds	r7, #24
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}

0800f33a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f33a:	b580      	push	{r7, lr}
 800f33c:	b082      	sub	sp, #8
 800f33e:	af00      	add	r7, sp, #0
 800f340:	6078      	str	r0, [r7, #4]
 800f342:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d018      	beq.n	800f37e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	68da      	ldr	r2, [r3, #12]
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f354:	441a      	add	r2, r3
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	68da      	ldr	r2, [r3, #12]
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	685b      	ldr	r3, [r3, #4]
 800f362:	429a      	cmp	r2, r3
 800f364:	d303      	bcc.n	800f36e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681a      	ldr	r2, [r3, #0]
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	68d9      	ldr	r1, [r3, #12]
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f376:	461a      	mov	r2, r3
 800f378:	6838      	ldr	r0, [r7, #0]
 800f37a:	f002 f91b 	bl	80115b4 <memcpy>
	}
}
 800f37e:	bf00      	nop
 800f380:	3708      	adds	r7, #8
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}

0800f386 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f386:	b580      	push	{r7, lr}
 800f388:	b084      	sub	sp, #16
 800f38a:	af00      	add	r7, sp, #0
 800f38c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f38e:	f001 fd05 	bl	8010d9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f398:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f39a:	e011      	b.n	800f3c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d012      	beq.n	800f3ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	3324      	adds	r3, #36	; 0x24
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f000 fd49 	bl	800fe40 <xTaskRemoveFromEventList>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d001      	beq.n	800f3b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f3b4:	f000 fe20 	bl	800fff8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f3b8:	7bfb      	ldrb	r3, [r7, #15]
 800f3ba:	3b01      	subs	r3, #1
 800f3bc:	b2db      	uxtb	r3, r3
 800f3be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f3c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	dce9      	bgt.n	800f39c <prvUnlockQueue+0x16>
 800f3c8:	e000      	b.n	800f3cc <prvUnlockQueue+0x46>
					break;
 800f3ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	22ff      	movs	r2, #255	; 0xff
 800f3d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f3d4:	f001 fd12 	bl	8010dfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f3d8:	f001 fce0 	bl	8010d9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f3e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f3e4:	e011      	b.n	800f40a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	691b      	ldr	r3, [r3, #16]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d012      	beq.n	800f414 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	3310      	adds	r3, #16
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f000 fd24 	bl	800fe40 <xTaskRemoveFromEventList>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d001      	beq.n	800f402 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f3fe:	f000 fdfb 	bl	800fff8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f402:	7bbb      	ldrb	r3, [r7, #14]
 800f404:	3b01      	subs	r3, #1
 800f406:	b2db      	uxtb	r3, r3
 800f408:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f40a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	dce9      	bgt.n	800f3e6 <prvUnlockQueue+0x60>
 800f412:	e000      	b.n	800f416 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f414:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	22ff      	movs	r2, #255	; 0xff
 800f41a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f41e:	f001 fced 	bl	8010dfc <vPortExitCritical>
}
 800f422:	bf00      	nop
 800f424:	3710      	adds	r7, #16
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}

0800f42a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f42a:	b580      	push	{r7, lr}
 800f42c:	b084      	sub	sp, #16
 800f42e:	af00      	add	r7, sp, #0
 800f430:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f432:	f001 fcb3 	bl	8010d9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d102      	bne.n	800f444 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f43e:	2301      	movs	r3, #1
 800f440:	60fb      	str	r3, [r7, #12]
 800f442:	e001      	b.n	800f448 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f444:	2300      	movs	r3, #0
 800f446:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f448:	f001 fcd8 	bl	8010dfc <vPortExitCritical>

	return xReturn;
 800f44c:	68fb      	ldr	r3, [r7, #12]
}
 800f44e:	4618      	mov	r0, r3
 800f450:	3710      	adds	r7, #16
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}

0800f456 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f456:	b580      	push	{r7, lr}
 800f458:	b084      	sub	sp, #16
 800f45a:	af00      	add	r7, sp, #0
 800f45c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f45e:	f001 fc9d 	bl	8010d9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f46a:	429a      	cmp	r2, r3
 800f46c:	d102      	bne.n	800f474 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f46e:	2301      	movs	r3, #1
 800f470:	60fb      	str	r3, [r7, #12]
 800f472:	e001      	b.n	800f478 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f474:	2300      	movs	r3, #0
 800f476:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f478:	f001 fcc0 	bl	8010dfc <vPortExitCritical>

	return xReturn;
 800f47c:	68fb      	ldr	r3, [r7, #12]
}
 800f47e:	4618      	mov	r0, r3
 800f480:	3710      	adds	r7, #16
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}
	...

0800f488 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f488:	b480      	push	{r7}
 800f48a:	b085      	sub	sp, #20
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
 800f490:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f492:	2300      	movs	r3, #0
 800f494:	60fb      	str	r3, [r7, #12]
 800f496:	e014      	b.n	800f4c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f498:	4a0e      	ldr	r2, [pc, #56]	; (800f4d4 <vQueueAddToRegistry+0x4c>)
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d10b      	bne.n	800f4bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f4a4:	490b      	ldr	r1, [pc, #44]	; (800f4d4 <vQueueAddToRegistry+0x4c>)
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	683a      	ldr	r2, [r7, #0]
 800f4aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f4ae:	4a09      	ldr	r2, [pc, #36]	; (800f4d4 <vQueueAddToRegistry+0x4c>)
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	00db      	lsls	r3, r3, #3
 800f4b4:	4413      	add	r3, r2
 800f4b6:	687a      	ldr	r2, [r7, #4]
 800f4b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f4ba:	e006      	b.n	800f4ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	3301      	adds	r3, #1
 800f4c0:	60fb      	str	r3, [r7, #12]
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	2b07      	cmp	r3, #7
 800f4c6:	d9e7      	bls.n	800f498 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f4c8:	bf00      	nop
 800f4ca:	bf00      	nop
 800f4cc:	3714      	adds	r7, #20
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bc80      	pop	{r7}
 800f4d2:	4770      	bx	lr
 800f4d4:	200024a8 	.word	0x200024a8

0800f4d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b086      	sub	sp, #24
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	60f8      	str	r0, [r7, #12]
 800f4e0:	60b9      	str	r1, [r7, #8]
 800f4e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f4e8:	f001 fc58 	bl	8010d9c <vPortEnterCritical>
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f4f2:	b25b      	sxtb	r3, r3
 800f4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4f8:	d103      	bne.n	800f502 <vQueueWaitForMessageRestricted+0x2a>
 800f4fa:	697b      	ldr	r3, [r7, #20]
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f508:	b25b      	sxtb	r3, r3
 800f50a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f50e:	d103      	bne.n	800f518 <vQueueWaitForMessageRestricted+0x40>
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	2200      	movs	r2, #0
 800f514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f518:	f001 fc70 	bl	8010dfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f520:	2b00      	cmp	r3, #0
 800f522:	d106      	bne.n	800f532 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f524:	697b      	ldr	r3, [r7, #20]
 800f526:	3324      	adds	r3, #36	; 0x24
 800f528:	687a      	ldr	r2, [r7, #4]
 800f52a:	68b9      	ldr	r1, [r7, #8]
 800f52c:	4618      	mov	r0, r3
 800f52e:	f000 fc5b 	bl	800fde8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f532:	6978      	ldr	r0, [r7, #20]
 800f534:	f7ff ff27 	bl	800f386 <prvUnlockQueue>
	}
 800f538:	bf00      	nop
 800f53a:	3718      	adds	r7, #24
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd80      	pop	{r7, pc}

0800f540 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f540:	b580      	push	{r7, lr}
 800f542:	b08e      	sub	sp, #56	; 0x38
 800f544:	af04      	add	r7, sp, #16
 800f546:	60f8      	str	r0, [r7, #12]
 800f548:	60b9      	str	r1, [r7, #8]
 800f54a:	607a      	str	r2, [r7, #4]
 800f54c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f54e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f550:	2b00      	cmp	r3, #0
 800f552:	d10a      	bne.n	800f56a <xTaskCreateStatic+0x2a>
	__asm volatile
 800f554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f558:	f383 8811 	msr	BASEPRI, r3
 800f55c:	f3bf 8f6f 	isb	sy
 800f560:	f3bf 8f4f 	dsb	sy
 800f564:	623b      	str	r3, [r7, #32]
}
 800f566:	bf00      	nop
 800f568:	e7fe      	b.n	800f568 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d10a      	bne.n	800f586 <xTaskCreateStatic+0x46>
	__asm volatile
 800f570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f574:	f383 8811 	msr	BASEPRI, r3
 800f578:	f3bf 8f6f 	isb	sy
 800f57c:	f3bf 8f4f 	dsb	sy
 800f580:	61fb      	str	r3, [r7, #28]
}
 800f582:	bf00      	nop
 800f584:	e7fe      	b.n	800f584 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f586:	23bc      	movs	r3, #188	; 0xbc
 800f588:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f58a:	693b      	ldr	r3, [r7, #16]
 800f58c:	2bbc      	cmp	r3, #188	; 0xbc
 800f58e:	d00a      	beq.n	800f5a6 <xTaskCreateStatic+0x66>
	__asm volatile
 800f590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f594:	f383 8811 	msr	BASEPRI, r3
 800f598:	f3bf 8f6f 	isb	sy
 800f59c:	f3bf 8f4f 	dsb	sy
 800f5a0:	61bb      	str	r3, [r7, #24]
}
 800f5a2:	bf00      	nop
 800f5a4:	e7fe      	b.n	800f5a4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d01e      	beq.n	800f5ea <xTaskCreateStatic+0xaa>
 800f5ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d01b      	beq.n	800f5ea <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f5ba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5be:	2202      	movs	r2, #2
 800f5c0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	9303      	str	r3, [sp, #12]
 800f5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ca:	9302      	str	r3, [sp, #8]
 800f5cc:	f107 0314 	add.w	r3, r7, #20
 800f5d0:	9301      	str	r3, [sp, #4]
 800f5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d4:	9300      	str	r3, [sp, #0]
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	687a      	ldr	r2, [r7, #4]
 800f5da:	68b9      	ldr	r1, [r7, #8]
 800f5dc:	68f8      	ldr	r0, [r7, #12]
 800f5de:	f000 f851 	bl	800f684 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f5e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f5e4:	f000 f8ec 	bl	800f7c0 <prvAddNewTaskToReadyList>
 800f5e8:	e001      	b.n	800f5ee <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f5ee:	697b      	ldr	r3, [r7, #20]
	}
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	3728      	adds	r7, #40	; 0x28
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}

0800f5f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b08c      	sub	sp, #48	; 0x30
 800f5fc:	af04      	add	r7, sp, #16
 800f5fe:	60f8      	str	r0, [r7, #12]
 800f600:	60b9      	str	r1, [r7, #8]
 800f602:	603b      	str	r3, [r7, #0]
 800f604:	4613      	mov	r3, r2
 800f606:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f608:	88fb      	ldrh	r3, [r7, #6]
 800f60a:	009b      	lsls	r3, r3, #2
 800f60c:	4618      	mov	r0, r3
 800f60e:	f001 fcc5 	bl	8010f9c <pvPortMalloc>
 800f612:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f614:	697b      	ldr	r3, [r7, #20]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d00e      	beq.n	800f638 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800f61a:	20bc      	movs	r0, #188	; 0xbc
 800f61c:	f001 fcbe 	bl	8010f9c <pvPortMalloc>
 800f620:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f622:	69fb      	ldr	r3, [r7, #28]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d003      	beq.n	800f630 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f628:	69fb      	ldr	r3, [r7, #28]
 800f62a:	697a      	ldr	r2, [r7, #20]
 800f62c:	631a      	str	r2, [r3, #48]	; 0x30
 800f62e:	e005      	b.n	800f63c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f630:	6978      	ldr	r0, [r7, #20]
 800f632:	f001 fd77 	bl	8011124 <vPortFree>
 800f636:	e001      	b.n	800f63c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f638:	2300      	movs	r3, #0
 800f63a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f63c:	69fb      	ldr	r3, [r7, #28]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d017      	beq.n	800f672 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f642:	69fb      	ldr	r3, [r7, #28]
 800f644:	2200      	movs	r2, #0
 800f646:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f64a:	88fa      	ldrh	r2, [r7, #6]
 800f64c:	2300      	movs	r3, #0
 800f64e:	9303      	str	r3, [sp, #12]
 800f650:	69fb      	ldr	r3, [r7, #28]
 800f652:	9302      	str	r3, [sp, #8]
 800f654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f656:	9301      	str	r3, [sp, #4]
 800f658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f65a:	9300      	str	r3, [sp, #0]
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	68b9      	ldr	r1, [r7, #8]
 800f660:	68f8      	ldr	r0, [r7, #12]
 800f662:	f000 f80f 	bl	800f684 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f666:	69f8      	ldr	r0, [r7, #28]
 800f668:	f000 f8aa 	bl	800f7c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f66c:	2301      	movs	r3, #1
 800f66e:	61bb      	str	r3, [r7, #24]
 800f670:	e002      	b.n	800f678 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f672:	f04f 33ff 	mov.w	r3, #4294967295
 800f676:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f678:	69bb      	ldr	r3, [r7, #24]
	}
 800f67a:	4618      	mov	r0, r3
 800f67c:	3720      	adds	r7, #32
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}
	...

0800f684 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b088      	sub	sp, #32
 800f688:	af00      	add	r7, sp, #0
 800f68a:	60f8      	str	r0, [r7, #12]
 800f68c:	60b9      	str	r1, [r7, #8]
 800f68e:	607a      	str	r2, [r7, #4]
 800f690:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f694:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	009b      	lsls	r3, r3, #2
 800f69a:	461a      	mov	r2, r3
 800f69c:	21a5      	movs	r1, #165	; 0xa5
 800f69e:	f001 ff97 	bl	80115d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800f6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f6ac:	3b01      	subs	r3, #1
 800f6ae:	009b      	lsls	r3, r3, #2
 800f6b0:	4413      	add	r3, r2
 800f6b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800f6b4:	69bb      	ldr	r3, [r7, #24]
 800f6b6:	f023 0307 	bic.w	r3, r3, #7
 800f6ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f6bc:	69bb      	ldr	r3, [r7, #24]
 800f6be:	f003 0307 	and.w	r3, r3, #7
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d00a      	beq.n	800f6dc <prvInitialiseNewTask+0x58>
	__asm volatile
 800f6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ca:	f383 8811 	msr	BASEPRI, r3
 800f6ce:	f3bf 8f6f 	isb	sy
 800f6d2:	f3bf 8f4f 	dsb	sy
 800f6d6:	617b      	str	r3, [r7, #20]
}
 800f6d8:	bf00      	nop
 800f6da:	e7fe      	b.n	800f6da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f6dc:	2300      	movs	r3, #0
 800f6de:	61fb      	str	r3, [r7, #28]
 800f6e0:	e012      	b.n	800f708 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f6e2:	68ba      	ldr	r2, [r7, #8]
 800f6e4:	69fb      	ldr	r3, [r7, #28]
 800f6e6:	4413      	add	r3, r2
 800f6e8:	7819      	ldrb	r1, [r3, #0]
 800f6ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6ec:	69fb      	ldr	r3, [r7, #28]
 800f6ee:	4413      	add	r3, r2
 800f6f0:	3334      	adds	r3, #52	; 0x34
 800f6f2:	460a      	mov	r2, r1
 800f6f4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800f6f6:	68ba      	ldr	r2, [r7, #8]
 800f6f8:	69fb      	ldr	r3, [r7, #28]
 800f6fa:	4413      	add	r3, r2
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d006      	beq.n	800f710 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f702:	69fb      	ldr	r3, [r7, #28]
 800f704:	3301      	adds	r3, #1
 800f706:	61fb      	str	r3, [r7, #28]
 800f708:	69fb      	ldr	r3, [r7, #28]
 800f70a:	2b0f      	cmp	r3, #15
 800f70c:	d9e9      	bls.n	800f6e2 <prvInitialiseNewTask+0x5e>
 800f70e:	e000      	b.n	800f712 <prvInitialiseNewTask+0x8e>
		{
			break;
 800f710:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f714:	2200      	movs	r2, #0
 800f716:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f71c:	2b37      	cmp	r3, #55	; 0x37
 800f71e:	d901      	bls.n	800f724 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f720:	2337      	movs	r3, #55	; 0x37
 800f722:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f728:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f72c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f72e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f732:	2200      	movs	r2, #0
 800f734:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f738:	3304      	adds	r3, #4
 800f73a:	4618      	mov	r0, r3
 800f73c:	f7fe ff59 	bl	800e5f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f742:	3318      	adds	r3, #24
 800f744:	4618      	mov	r0, r3
 800f746:	f7fe ff54 	bl	800e5f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f74c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f74e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f752:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f758:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f75c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f75e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f762:	2200      	movs	r2, #0
 800f764:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f76a:	2200      	movs	r2, #0
 800f76c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f772:	3354      	adds	r3, #84	; 0x54
 800f774:	2260      	movs	r2, #96	; 0x60
 800f776:	2100      	movs	r1, #0
 800f778:	4618      	mov	r0, r3
 800f77a:	f001 ff29 	bl	80115d0 <memset>
 800f77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f780:	4a0c      	ldr	r2, [pc, #48]	; (800f7b4 <prvInitialiseNewTask+0x130>)
 800f782:	659a      	str	r2, [r3, #88]	; 0x58
 800f784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f786:	4a0c      	ldr	r2, [pc, #48]	; (800f7b8 <prvInitialiseNewTask+0x134>)
 800f788:	65da      	str	r2, [r3, #92]	; 0x5c
 800f78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f78c:	4a0b      	ldr	r2, [pc, #44]	; (800f7bc <prvInitialiseNewTask+0x138>)
 800f78e:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f790:	683a      	ldr	r2, [r7, #0]
 800f792:	68f9      	ldr	r1, [r7, #12]
 800f794:	69b8      	ldr	r0, [r7, #24]
 800f796:	f001 fa13 	bl	8010bc0 <pxPortInitialiseStack>
 800f79a:	4602      	mov	r2, r0
 800f79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800f7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d002      	beq.n	800f7ac <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f7ac:	bf00      	nop
 800f7ae:	3720      	adds	r7, #32
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}
 800f7b4:	080409dc 	.word	0x080409dc
 800f7b8:	080409fc 	.word	0x080409fc
 800f7bc:	080409bc 	.word	0x080409bc

0800f7c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b082      	sub	sp, #8
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f7c8:	f001 fae8 	bl	8010d9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f7cc:	4b2d      	ldr	r3, [pc, #180]	; (800f884 <prvAddNewTaskToReadyList+0xc4>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	4a2c      	ldr	r2, [pc, #176]	; (800f884 <prvAddNewTaskToReadyList+0xc4>)
 800f7d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f7d6:	4b2c      	ldr	r3, [pc, #176]	; (800f888 <prvAddNewTaskToReadyList+0xc8>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d109      	bne.n	800f7f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f7de:	4a2a      	ldr	r2, [pc, #168]	; (800f888 <prvAddNewTaskToReadyList+0xc8>)
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f7e4:	4b27      	ldr	r3, [pc, #156]	; (800f884 <prvAddNewTaskToReadyList+0xc4>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	2b01      	cmp	r3, #1
 800f7ea:	d110      	bne.n	800f80e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f7ec:	f000 fc28 	bl	8010040 <prvInitialiseTaskLists>
 800f7f0:	e00d      	b.n	800f80e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f7f2:	4b26      	ldr	r3, [pc, #152]	; (800f88c <prvAddNewTaskToReadyList+0xcc>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d109      	bne.n	800f80e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f7fa:	4b23      	ldr	r3, [pc, #140]	; (800f888 <prvAddNewTaskToReadyList+0xc8>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f804:	429a      	cmp	r2, r3
 800f806:	d802      	bhi.n	800f80e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f808:	4a1f      	ldr	r2, [pc, #124]	; (800f888 <prvAddNewTaskToReadyList+0xc8>)
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f80e:	4b20      	ldr	r3, [pc, #128]	; (800f890 <prvAddNewTaskToReadyList+0xd0>)
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	3301      	adds	r3, #1
 800f814:	4a1e      	ldr	r2, [pc, #120]	; (800f890 <prvAddNewTaskToReadyList+0xd0>)
 800f816:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f818:	4b1d      	ldr	r3, [pc, #116]	; (800f890 <prvAddNewTaskToReadyList+0xd0>)
 800f81a:	681a      	ldr	r2, [r3, #0]
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f824:	4b1b      	ldr	r3, [pc, #108]	; (800f894 <prvAddNewTaskToReadyList+0xd4>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	429a      	cmp	r2, r3
 800f82a:	d903      	bls.n	800f834 <prvAddNewTaskToReadyList+0x74>
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f830:	4a18      	ldr	r2, [pc, #96]	; (800f894 <prvAddNewTaskToReadyList+0xd4>)
 800f832:	6013      	str	r3, [r2, #0]
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f838:	4613      	mov	r3, r2
 800f83a:	009b      	lsls	r3, r3, #2
 800f83c:	4413      	add	r3, r2
 800f83e:	009b      	lsls	r3, r3, #2
 800f840:	4a15      	ldr	r2, [pc, #84]	; (800f898 <prvAddNewTaskToReadyList+0xd8>)
 800f842:	441a      	add	r2, r3
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	3304      	adds	r3, #4
 800f848:	4619      	mov	r1, r3
 800f84a:	4610      	mov	r0, r2
 800f84c:	f7fe fedd 	bl	800e60a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f850:	f001 fad4 	bl	8010dfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f854:	4b0d      	ldr	r3, [pc, #52]	; (800f88c <prvAddNewTaskToReadyList+0xcc>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d00e      	beq.n	800f87a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f85c:	4b0a      	ldr	r3, [pc, #40]	; (800f888 <prvAddNewTaskToReadyList+0xc8>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f866:	429a      	cmp	r2, r3
 800f868:	d207      	bcs.n	800f87a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f86a:	4b0c      	ldr	r3, [pc, #48]	; (800f89c <prvAddNewTaskToReadyList+0xdc>)
 800f86c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f870:	601a      	str	r2, [r3, #0]
 800f872:	f3bf 8f4f 	dsb	sy
 800f876:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f87a:	bf00      	nop
 800f87c:	3708      	adds	r7, #8
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	20000e5c 	.word	0x20000e5c
 800f888:	20000988 	.word	0x20000988
 800f88c:	20000e68 	.word	0x20000e68
 800f890:	20000e78 	.word	0x20000e78
 800f894:	20000e64 	.word	0x20000e64
 800f898:	2000098c 	.word	0x2000098c
 800f89c:	e000ed04 	.word	0xe000ed04

0800f8a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b084      	sub	sp, #16
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d017      	beq.n	800f8e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f8b2:	4b13      	ldr	r3, [pc, #76]	; (800f900 <vTaskDelay+0x60>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d00a      	beq.n	800f8d0 <vTaskDelay+0x30>
	__asm volatile
 800f8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8be:	f383 8811 	msr	BASEPRI, r3
 800f8c2:	f3bf 8f6f 	isb	sy
 800f8c6:	f3bf 8f4f 	dsb	sy
 800f8ca:	60bb      	str	r3, [r7, #8]
}
 800f8cc:	bf00      	nop
 800f8ce:	e7fe      	b.n	800f8ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f8d0:	f000 f88a 	bl	800f9e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f8d4:	2100      	movs	r1, #0
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	f000 fe0c 	bl	80104f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f8dc:	f000 f892 	bl	800fa04 <xTaskResumeAll>
 800f8e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d107      	bne.n	800f8f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f8e8:	4b06      	ldr	r3, [pc, #24]	; (800f904 <vTaskDelay+0x64>)
 800f8ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8ee:	601a      	str	r2, [r3, #0]
 800f8f0:	f3bf 8f4f 	dsb	sy
 800f8f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f8f8:	bf00      	nop
 800f8fa:	3710      	adds	r7, #16
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}
 800f900:	20000e84 	.word	0x20000e84
 800f904:	e000ed04 	.word	0xe000ed04

0800f908 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b08a      	sub	sp, #40	; 0x28
 800f90c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f90e:	2300      	movs	r3, #0
 800f910:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f912:	2300      	movs	r3, #0
 800f914:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f916:	463a      	mov	r2, r7
 800f918:	1d39      	adds	r1, r7, #4
 800f91a:	f107 0308 	add.w	r3, r7, #8
 800f91e:	4618      	mov	r0, r3
 800f920:	f7fe fe16 	bl	800e550 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f924:	6839      	ldr	r1, [r7, #0]
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	68ba      	ldr	r2, [r7, #8]
 800f92a:	9202      	str	r2, [sp, #8]
 800f92c:	9301      	str	r3, [sp, #4]
 800f92e:	2300      	movs	r3, #0
 800f930:	9300      	str	r3, [sp, #0]
 800f932:	2300      	movs	r3, #0
 800f934:	460a      	mov	r2, r1
 800f936:	4924      	ldr	r1, [pc, #144]	; (800f9c8 <vTaskStartScheduler+0xc0>)
 800f938:	4824      	ldr	r0, [pc, #144]	; (800f9cc <vTaskStartScheduler+0xc4>)
 800f93a:	f7ff fe01 	bl	800f540 <xTaskCreateStatic>
 800f93e:	4603      	mov	r3, r0
 800f940:	4a23      	ldr	r2, [pc, #140]	; (800f9d0 <vTaskStartScheduler+0xc8>)
 800f942:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f944:	4b22      	ldr	r3, [pc, #136]	; (800f9d0 <vTaskStartScheduler+0xc8>)
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d002      	beq.n	800f952 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f94c:	2301      	movs	r3, #1
 800f94e:	617b      	str	r3, [r7, #20]
 800f950:	e001      	b.n	800f956 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f952:	2300      	movs	r3, #0
 800f954:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f956:	697b      	ldr	r3, [r7, #20]
 800f958:	2b01      	cmp	r3, #1
 800f95a:	d102      	bne.n	800f962 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f95c:	f000 fe1e 	bl	801059c <xTimerCreateTimerTask>
 800f960:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f962:	697b      	ldr	r3, [r7, #20]
 800f964:	2b01      	cmp	r3, #1
 800f966:	d11b      	bne.n	800f9a0 <vTaskStartScheduler+0x98>
	__asm volatile
 800f968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f96c:	f383 8811 	msr	BASEPRI, r3
 800f970:	f3bf 8f6f 	isb	sy
 800f974:	f3bf 8f4f 	dsb	sy
 800f978:	613b      	str	r3, [r7, #16]
}
 800f97a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f97c:	4b15      	ldr	r3, [pc, #84]	; (800f9d4 <vTaskStartScheduler+0xcc>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	3354      	adds	r3, #84	; 0x54
 800f982:	4a15      	ldr	r2, [pc, #84]	; (800f9d8 <vTaskStartScheduler+0xd0>)
 800f984:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f986:	4b15      	ldr	r3, [pc, #84]	; (800f9dc <vTaskStartScheduler+0xd4>)
 800f988:	f04f 32ff 	mov.w	r2, #4294967295
 800f98c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f98e:	4b14      	ldr	r3, [pc, #80]	; (800f9e0 <vTaskStartScheduler+0xd8>)
 800f990:	2201      	movs	r2, #1
 800f992:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800f994:	4b13      	ldr	r3, [pc, #76]	; (800f9e4 <vTaskStartScheduler+0xdc>)
 800f996:	2200      	movs	r2, #0
 800f998:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f99a:	f001 f98d 	bl	8010cb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f99e:	e00e      	b.n	800f9be <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9a6:	d10a      	bne.n	800f9be <vTaskStartScheduler+0xb6>
	__asm volatile
 800f9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ac:	f383 8811 	msr	BASEPRI, r3
 800f9b0:	f3bf 8f6f 	isb	sy
 800f9b4:	f3bf 8f4f 	dsb	sy
 800f9b8:	60fb      	str	r3, [r7, #12]
}
 800f9ba:	bf00      	nop
 800f9bc:	e7fe      	b.n	800f9bc <vTaskStartScheduler+0xb4>
}
 800f9be:	bf00      	nop
 800f9c0:	3718      	adds	r7, #24
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}
 800f9c6:	bf00      	nop
 800f9c8:	080127c4 	.word	0x080127c4
 800f9cc:	08010011 	.word	0x08010011
 800f9d0:	20000e80 	.word	0x20000e80
 800f9d4:	20000988 	.word	0x20000988
 800f9d8:	2000014c 	.word	0x2000014c
 800f9dc:	20000e7c 	.word	0x20000e7c
 800f9e0:	20000e68 	.word	0x20000e68
 800f9e4:	20000e60 	.word	0x20000e60

0800f9e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f9e8:	b480      	push	{r7}
 800f9ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f9ec:	4b04      	ldr	r3, [pc, #16]	; (800fa00 <vTaskSuspendAll+0x18>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	3301      	adds	r3, #1
 800f9f2:	4a03      	ldr	r2, [pc, #12]	; (800fa00 <vTaskSuspendAll+0x18>)
 800f9f4:	6013      	str	r3, [r2, #0]
}
 800f9f6:	bf00      	nop
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bc80      	pop	{r7}
 800f9fc:	4770      	bx	lr
 800f9fe:	bf00      	nop
 800fa00:	20000e84 	.word	0x20000e84

0800fa04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b084      	sub	sp, #16
 800fa08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fa12:	4b42      	ldr	r3, [pc, #264]	; (800fb1c <xTaskResumeAll+0x118>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d10a      	bne.n	800fa30 <xTaskResumeAll+0x2c>
	__asm volatile
 800fa1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa1e:	f383 8811 	msr	BASEPRI, r3
 800fa22:	f3bf 8f6f 	isb	sy
 800fa26:	f3bf 8f4f 	dsb	sy
 800fa2a:	603b      	str	r3, [r7, #0]
}
 800fa2c:	bf00      	nop
 800fa2e:	e7fe      	b.n	800fa2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fa30:	f001 f9b4 	bl	8010d9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fa34:	4b39      	ldr	r3, [pc, #228]	; (800fb1c <xTaskResumeAll+0x118>)
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	3b01      	subs	r3, #1
 800fa3a:	4a38      	ldr	r2, [pc, #224]	; (800fb1c <xTaskResumeAll+0x118>)
 800fa3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa3e:	4b37      	ldr	r3, [pc, #220]	; (800fb1c <xTaskResumeAll+0x118>)
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d162      	bne.n	800fb0c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fa46:	4b36      	ldr	r3, [pc, #216]	; (800fb20 <xTaskResumeAll+0x11c>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d05e      	beq.n	800fb0c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fa4e:	e02f      	b.n	800fab0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800fa50:	4b34      	ldr	r3, [pc, #208]	; (800fb24 <xTaskResumeAll+0x120>)
 800fa52:	68db      	ldr	r3, [r3, #12]
 800fa54:	68db      	ldr	r3, [r3, #12]
 800fa56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	3318      	adds	r3, #24
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f7fe fe2f 	bl	800e6c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	3304      	adds	r3, #4
 800fa66:	4618      	mov	r0, r3
 800fa68:	f7fe fe2a 	bl	800e6c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa70:	4b2d      	ldr	r3, [pc, #180]	; (800fb28 <xTaskResumeAll+0x124>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	429a      	cmp	r2, r3
 800fa76:	d903      	bls.n	800fa80 <xTaskResumeAll+0x7c>
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa7c:	4a2a      	ldr	r2, [pc, #168]	; (800fb28 <xTaskResumeAll+0x124>)
 800fa7e:	6013      	str	r3, [r2, #0]
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa84:	4613      	mov	r3, r2
 800fa86:	009b      	lsls	r3, r3, #2
 800fa88:	4413      	add	r3, r2
 800fa8a:	009b      	lsls	r3, r3, #2
 800fa8c:	4a27      	ldr	r2, [pc, #156]	; (800fb2c <xTaskResumeAll+0x128>)
 800fa8e:	441a      	add	r2, r3
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	3304      	adds	r3, #4
 800fa94:	4619      	mov	r1, r3
 800fa96:	4610      	mov	r0, r2
 800fa98:	f7fe fdb7 	bl	800e60a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faa0:	4b23      	ldr	r3, [pc, #140]	; (800fb30 <xTaskResumeAll+0x12c>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faa6:	429a      	cmp	r2, r3
 800faa8:	d302      	bcc.n	800fab0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800faaa:	4b22      	ldr	r3, [pc, #136]	; (800fb34 <xTaskResumeAll+0x130>)
 800faac:	2201      	movs	r2, #1
 800faae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fab0:	4b1c      	ldr	r3, [pc, #112]	; (800fb24 <xTaskResumeAll+0x120>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d1cb      	bne.n	800fa50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d001      	beq.n	800fac2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fabe:	f000 fb61 	bl	8010184 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800fac2:	4b1d      	ldr	r3, [pc, #116]	; (800fb38 <xTaskResumeAll+0x134>)
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d010      	beq.n	800faf0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800face:	f000 f845 	bl	800fb5c <xTaskIncrementTick>
 800fad2:	4603      	mov	r3, r0
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d002      	beq.n	800fade <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800fad8:	4b16      	ldr	r3, [pc, #88]	; (800fb34 <xTaskResumeAll+0x130>)
 800fada:	2201      	movs	r2, #1
 800fadc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	3b01      	subs	r3, #1
 800fae2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d1f1      	bne.n	800face <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800faea:	4b13      	ldr	r3, [pc, #76]	; (800fb38 <xTaskResumeAll+0x134>)
 800faec:	2200      	movs	r2, #0
 800faee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800faf0:	4b10      	ldr	r3, [pc, #64]	; (800fb34 <xTaskResumeAll+0x130>)
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d009      	beq.n	800fb0c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800faf8:	2301      	movs	r3, #1
 800fafa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fafc:	4b0f      	ldr	r3, [pc, #60]	; (800fb3c <xTaskResumeAll+0x138>)
 800fafe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb02:	601a      	str	r2, [r3, #0]
 800fb04:	f3bf 8f4f 	dsb	sy
 800fb08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fb0c:	f001 f976 	bl	8010dfc <vPortExitCritical>

	return xAlreadyYielded;
 800fb10:	68bb      	ldr	r3, [r7, #8]
}
 800fb12:	4618      	mov	r0, r3
 800fb14:	3710      	adds	r7, #16
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}
 800fb1a:	bf00      	nop
 800fb1c:	20000e84 	.word	0x20000e84
 800fb20:	20000e5c 	.word	0x20000e5c
 800fb24:	20000e1c 	.word	0x20000e1c
 800fb28:	20000e64 	.word	0x20000e64
 800fb2c:	2000098c 	.word	0x2000098c
 800fb30:	20000988 	.word	0x20000988
 800fb34:	20000e70 	.word	0x20000e70
 800fb38:	20000e6c 	.word	0x20000e6c
 800fb3c:	e000ed04 	.word	0xe000ed04

0800fb40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fb40:	b480      	push	{r7}
 800fb42:	b083      	sub	sp, #12
 800fb44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fb46:	4b04      	ldr	r3, [pc, #16]	; (800fb58 <xTaskGetTickCount+0x18>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fb4c:	687b      	ldr	r3, [r7, #4]
}
 800fb4e:	4618      	mov	r0, r3
 800fb50:	370c      	adds	r7, #12
 800fb52:	46bd      	mov	sp, r7
 800fb54:	bc80      	pop	{r7}
 800fb56:	4770      	bx	lr
 800fb58:	20000e60 	.word	0x20000e60

0800fb5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b086      	sub	sp, #24
 800fb60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fb62:	2300      	movs	r3, #0
 800fb64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb66:	4b51      	ldr	r3, [pc, #324]	; (800fcac <xTaskIncrementTick+0x150>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	f040 808e 	bne.w	800fc8c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fb70:	4b4f      	ldr	r3, [pc, #316]	; (800fcb0 <xTaskIncrementTick+0x154>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	3301      	adds	r3, #1
 800fb76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fb78:	4a4d      	ldr	r2, [pc, #308]	; (800fcb0 <xTaskIncrementTick+0x154>)
 800fb7a:	693b      	ldr	r3, [r7, #16]
 800fb7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fb7e:	693b      	ldr	r3, [r7, #16]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d120      	bne.n	800fbc6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fb84:	4b4b      	ldr	r3, [pc, #300]	; (800fcb4 <xTaskIncrementTick+0x158>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d00a      	beq.n	800fba4 <xTaskIncrementTick+0x48>
	__asm volatile
 800fb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb92:	f383 8811 	msr	BASEPRI, r3
 800fb96:	f3bf 8f6f 	isb	sy
 800fb9a:	f3bf 8f4f 	dsb	sy
 800fb9e:	603b      	str	r3, [r7, #0]
}
 800fba0:	bf00      	nop
 800fba2:	e7fe      	b.n	800fba2 <xTaskIncrementTick+0x46>
 800fba4:	4b43      	ldr	r3, [pc, #268]	; (800fcb4 <xTaskIncrementTick+0x158>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	60fb      	str	r3, [r7, #12]
 800fbaa:	4b43      	ldr	r3, [pc, #268]	; (800fcb8 <xTaskIncrementTick+0x15c>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	4a41      	ldr	r2, [pc, #260]	; (800fcb4 <xTaskIncrementTick+0x158>)
 800fbb0:	6013      	str	r3, [r2, #0]
 800fbb2:	4a41      	ldr	r2, [pc, #260]	; (800fcb8 <xTaskIncrementTick+0x15c>)
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	6013      	str	r3, [r2, #0]
 800fbb8:	4b40      	ldr	r3, [pc, #256]	; (800fcbc <xTaskIncrementTick+0x160>)
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	3301      	adds	r3, #1
 800fbbe:	4a3f      	ldr	r2, [pc, #252]	; (800fcbc <xTaskIncrementTick+0x160>)
 800fbc0:	6013      	str	r3, [r2, #0]
 800fbc2:	f000 fadf 	bl	8010184 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fbc6:	4b3e      	ldr	r3, [pc, #248]	; (800fcc0 <xTaskIncrementTick+0x164>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	693a      	ldr	r2, [r7, #16]
 800fbcc:	429a      	cmp	r2, r3
 800fbce:	d34e      	bcc.n	800fc6e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fbd0:	4b38      	ldr	r3, [pc, #224]	; (800fcb4 <xTaskIncrementTick+0x158>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d101      	bne.n	800fbde <xTaskIncrementTick+0x82>
 800fbda:	2301      	movs	r3, #1
 800fbdc:	e000      	b.n	800fbe0 <xTaskIncrementTick+0x84>
 800fbde:	2300      	movs	r3, #0
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d004      	beq.n	800fbee <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fbe4:	4b36      	ldr	r3, [pc, #216]	; (800fcc0 <xTaskIncrementTick+0x164>)
 800fbe6:	f04f 32ff 	mov.w	r2, #4294967295
 800fbea:	601a      	str	r2, [r3, #0]
					break;
 800fbec:	e03f      	b.n	800fc6e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800fbee:	4b31      	ldr	r3, [pc, #196]	; (800fcb4 <xTaskIncrementTick+0x158>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	68db      	ldr	r3, [r3, #12]
 800fbf4:	68db      	ldr	r3, [r3, #12]
 800fbf6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	685b      	ldr	r3, [r3, #4]
 800fbfc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fbfe:	693a      	ldr	r2, [r7, #16]
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d203      	bcs.n	800fc0e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fc06:	4a2e      	ldr	r2, [pc, #184]	; (800fcc0 <xTaskIncrementTick+0x164>)
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6013      	str	r3, [r2, #0]
						break;
 800fc0c:	e02f      	b.n	800fc6e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc0e:	68bb      	ldr	r3, [r7, #8]
 800fc10:	3304      	adds	r3, #4
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7fe fd54 	bl	800e6c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d004      	beq.n	800fc2a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	3318      	adds	r3, #24
 800fc24:	4618      	mov	r0, r3
 800fc26:	f7fe fd4b 	bl	800e6c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fc2a:	68bb      	ldr	r3, [r7, #8]
 800fc2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc2e:	4b25      	ldr	r3, [pc, #148]	; (800fcc4 <xTaskIncrementTick+0x168>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d903      	bls.n	800fc3e <xTaskIncrementTick+0xe2>
 800fc36:	68bb      	ldr	r3, [r7, #8]
 800fc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc3a:	4a22      	ldr	r2, [pc, #136]	; (800fcc4 <xTaskIncrementTick+0x168>)
 800fc3c:	6013      	str	r3, [r2, #0]
 800fc3e:	68bb      	ldr	r3, [r7, #8]
 800fc40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc42:	4613      	mov	r3, r2
 800fc44:	009b      	lsls	r3, r3, #2
 800fc46:	4413      	add	r3, r2
 800fc48:	009b      	lsls	r3, r3, #2
 800fc4a:	4a1f      	ldr	r2, [pc, #124]	; (800fcc8 <xTaskIncrementTick+0x16c>)
 800fc4c:	441a      	add	r2, r3
 800fc4e:	68bb      	ldr	r3, [r7, #8]
 800fc50:	3304      	adds	r3, #4
 800fc52:	4619      	mov	r1, r3
 800fc54:	4610      	mov	r0, r2
 800fc56:	f7fe fcd8 	bl	800e60a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fc5a:	68bb      	ldr	r3, [r7, #8]
 800fc5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc5e:	4b1b      	ldr	r3, [pc, #108]	; (800fccc <xTaskIncrementTick+0x170>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc64:	429a      	cmp	r2, r3
 800fc66:	d3b3      	bcc.n	800fbd0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fc68:	2301      	movs	r3, #1
 800fc6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc6c:	e7b0      	b.n	800fbd0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fc6e:	4b17      	ldr	r3, [pc, #92]	; (800fccc <xTaskIncrementTick+0x170>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc74:	4914      	ldr	r1, [pc, #80]	; (800fcc8 <xTaskIncrementTick+0x16c>)
 800fc76:	4613      	mov	r3, r2
 800fc78:	009b      	lsls	r3, r3, #2
 800fc7a:	4413      	add	r3, r2
 800fc7c:	009b      	lsls	r3, r3, #2
 800fc7e:	440b      	add	r3, r1
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	2b01      	cmp	r3, #1
 800fc84:	d907      	bls.n	800fc96 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800fc86:	2301      	movs	r3, #1
 800fc88:	617b      	str	r3, [r7, #20]
 800fc8a:	e004      	b.n	800fc96 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800fc8c:	4b10      	ldr	r3, [pc, #64]	; (800fcd0 <xTaskIncrementTick+0x174>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	3301      	adds	r3, #1
 800fc92:	4a0f      	ldr	r2, [pc, #60]	; (800fcd0 <xTaskIncrementTick+0x174>)
 800fc94:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800fc96:	4b0f      	ldr	r3, [pc, #60]	; (800fcd4 <xTaskIncrementTick+0x178>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d001      	beq.n	800fca2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800fc9e:	2301      	movs	r3, #1
 800fca0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fca2:	697b      	ldr	r3, [r7, #20]
}
 800fca4:	4618      	mov	r0, r3
 800fca6:	3718      	adds	r7, #24
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}
 800fcac:	20000e84 	.word	0x20000e84
 800fcb0:	20000e60 	.word	0x20000e60
 800fcb4:	20000e14 	.word	0x20000e14
 800fcb8:	20000e18 	.word	0x20000e18
 800fcbc:	20000e74 	.word	0x20000e74
 800fcc0:	20000e7c 	.word	0x20000e7c
 800fcc4:	20000e64 	.word	0x20000e64
 800fcc8:	2000098c 	.word	0x2000098c
 800fccc:	20000988 	.word	0x20000988
 800fcd0:	20000e6c 	.word	0x20000e6c
 800fcd4:	20000e70 	.word	0x20000e70

0800fcd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fcd8:	b480      	push	{r7}
 800fcda:	b085      	sub	sp, #20
 800fcdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fcde:	4b2a      	ldr	r3, [pc, #168]	; (800fd88 <vTaskSwitchContext+0xb0>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d003      	beq.n	800fcee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fce6:	4b29      	ldr	r3, [pc, #164]	; (800fd8c <vTaskSwitchContext+0xb4>)
 800fce8:	2201      	movs	r2, #1
 800fcea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fcec:	e046      	b.n	800fd7c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800fcee:	4b27      	ldr	r3, [pc, #156]	; (800fd8c <vTaskSwitchContext+0xb4>)
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800fcf4:	4b26      	ldr	r3, [pc, #152]	; (800fd90 <vTaskSwitchContext+0xb8>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	60fb      	str	r3, [r7, #12]
 800fcfa:	e010      	b.n	800fd1e <vTaskSwitchContext+0x46>
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d10a      	bne.n	800fd18 <vTaskSwitchContext+0x40>
	__asm volatile
 800fd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd06:	f383 8811 	msr	BASEPRI, r3
 800fd0a:	f3bf 8f6f 	isb	sy
 800fd0e:	f3bf 8f4f 	dsb	sy
 800fd12:	607b      	str	r3, [r7, #4]
}
 800fd14:	bf00      	nop
 800fd16:	e7fe      	b.n	800fd16 <vTaskSwitchContext+0x3e>
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	3b01      	subs	r3, #1
 800fd1c:	60fb      	str	r3, [r7, #12]
 800fd1e:	491d      	ldr	r1, [pc, #116]	; (800fd94 <vTaskSwitchContext+0xbc>)
 800fd20:	68fa      	ldr	r2, [r7, #12]
 800fd22:	4613      	mov	r3, r2
 800fd24:	009b      	lsls	r3, r3, #2
 800fd26:	4413      	add	r3, r2
 800fd28:	009b      	lsls	r3, r3, #2
 800fd2a:	440b      	add	r3, r1
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d0e4      	beq.n	800fcfc <vTaskSwitchContext+0x24>
 800fd32:	68fa      	ldr	r2, [r7, #12]
 800fd34:	4613      	mov	r3, r2
 800fd36:	009b      	lsls	r3, r3, #2
 800fd38:	4413      	add	r3, r2
 800fd3a:	009b      	lsls	r3, r3, #2
 800fd3c:	4a15      	ldr	r2, [pc, #84]	; (800fd94 <vTaskSwitchContext+0xbc>)
 800fd3e:	4413      	add	r3, r2
 800fd40:	60bb      	str	r3, [r7, #8]
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	685b      	ldr	r3, [r3, #4]
 800fd46:	685a      	ldr	r2, [r3, #4]
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	605a      	str	r2, [r3, #4]
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	685a      	ldr	r2, [r3, #4]
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	3308      	adds	r3, #8
 800fd54:	429a      	cmp	r2, r3
 800fd56:	d104      	bne.n	800fd62 <vTaskSwitchContext+0x8a>
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	685b      	ldr	r3, [r3, #4]
 800fd5c:	685a      	ldr	r2, [r3, #4]
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	605a      	str	r2, [r3, #4]
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	685b      	ldr	r3, [r3, #4]
 800fd66:	68db      	ldr	r3, [r3, #12]
 800fd68:	4a0b      	ldr	r2, [pc, #44]	; (800fd98 <vTaskSwitchContext+0xc0>)
 800fd6a:	6013      	str	r3, [r2, #0]
 800fd6c:	4a08      	ldr	r2, [pc, #32]	; (800fd90 <vTaskSwitchContext+0xb8>)
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fd72:	4b09      	ldr	r3, [pc, #36]	; (800fd98 <vTaskSwitchContext+0xc0>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	3354      	adds	r3, #84	; 0x54
 800fd78:	4a08      	ldr	r2, [pc, #32]	; (800fd9c <vTaskSwitchContext+0xc4>)
 800fd7a:	6013      	str	r3, [r2, #0]
}
 800fd7c:	bf00      	nop
 800fd7e:	3714      	adds	r7, #20
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bc80      	pop	{r7}
 800fd84:	4770      	bx	lr
 800fd86:	bf00      	nop
 800fd88:	20000e84 	.word	0x20000e84
 800fd8c:	20000e70 	.word	0x20000e70
 800fd90:	20000e64 	.word	0x20000e64
 800fd94:	2000098c 	.word	0x2000098c
 800fd98:	20000988 	.word	0x20000988
 800fd9c:	2000014c 	.word	0x2000014c

0800fda0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b084      	sub	sp, #16
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d10a      	bne.n	800fdc6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdb4:	f383 8811 	msr	BASEPRI, r3
 800fdb8:	f3bf 8f6f 	isb	sy
 800fdbc:	f3bf 8f4f 	dsb	sy
 800fdc0:	60fb      	str	r3, [r7, #12]
}
 800fdc2:	bf00      	nop
 800fdc4:	e7fe      	b.n	800fdc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fdc6:	4b07      	ldr	r3, [pc, #28]	; (800fde4 <vTaskPlaceOnEventList+0x44>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	3318      	adds	r3, #24
 800fdcc:	4619      	mov	r1, r3
 800fdce:	6878      	ldr	r0, [r7, #4]
 800fdd0:	f7fe fc3e 	bl	800e650 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fdd4:	2101      	movs	r1, #1
 800fdd6:	6838      	ldr	r0, [r7, #0]
 800fdd8:	f000 fb8c 	bl	80104f4 <prvAddCurrentTaskToDelayedList>
}
 800fddc:	bf00      	nop
 800fdde:	3710      	adds	r7, #16
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}
 800fde4:	20000988 	.word	0x20000988

0800fde8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b086      	sub	sp, #24
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	60f8      	str	r0, [r7, #12]
 800fdf0:	60b9      	str	r1, [r7, #8]
 800fdf2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d10a      	bne.n	800fe10 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800fdfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdfe:	f383 8811 	msr	BASEPRI, r3
 800fe02:	f3bf 8f6f 	isb	sy
 800fe06:	f3bf 8f4f 	dsb	sy
 800fe0a:	617b      	str	r3, [r7, #20]
}
 800fe0c:	bf00      	nop
 800fe0e:	e7fe      	b.n	800fe0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fe10:	4b0a      	ldr	r3, [pc, #40]	; (800fe3c <vTaskPlaceOnEventListRestricted+0x54>)
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	3318      	adds	r3, #24
 800fe16:	4619      	mov	r1, r3
 800fe18:	68f8      	ldr	r0, [r7, #12]
 800fe1a:	f7fe fbf6 	bl	800e60a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d002      	beq.n	800fe2a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800fe24:	f04f 33ff 	mov.w	r3, #4294967295
 800fe28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fe2a:	6879      	ldr	r1, [r7, #4]
 800fe2c:	68b8      	ldr	r0, [r7, #8]
 800fe2e:	f000 fb61 	bl	80104f4 <prvAddCurrentTaskToDelayedList>
	}
 800fe32:	bf00      	nop
 800fe34:	3718      	adds	r7, #24
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}
 800fe3a:	bf00      	nop
 800fe3c:	20000988 	.word	0x20000988

0800fe40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b086      	sub	sp, #24
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	68db      	ldr	r3, [r3, #12]
 800fe4c:	68db      	ldr	r3, [r3, #12]
 800fe4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d10a      	bne.n	800fe6c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fe56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe5a:	f383 8811 	msr	BASEPRI, r3
 800fe5e:	f3bf 8f6f 	isb	sy
 800fe62:	f3bf 8f4f 	dsb	sy
 800fe66:	60fb      	str	r3, [r7, #12]
}
 800fe68:	bf00      	nop
 800fe6a:	e7fe      	b.n	800fe6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	3318      	adds	r3, #24
 800fe70:	4618      	mov	r0, r3
 800fe72:	f7fe fc25 	bl	800e6c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe76:	4b1e      	ldr	r3, [pc, #120]	; (800fef0 <xTaskRemoveFromEventList+0xb0>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d11d      	bne.n	800feba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fe7e:	693b      	ldr	r3, [r7, #16]
 800fe80:	3304      	adds	r3, #4
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7fe fc1c 	bl	800e6c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fe88:	693b      	ldr	r3, [r7, #16]
 800fe8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe8c:	4b19      	ldr	r3, [pc, #100]	; (800fef4 <xTaskRemoveFromEventList+0xb4>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d903      	bls.n	800fe9c <xTaskRemoveFromEventList+0x5c>
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe98:	4a16      	ldr	r2, [pc, #88]	; (800fef4 <xTaskRemoveFromEventList+0xb4>)
 800fe9a:	6013      	str	r3, [r2, #0]
 800fe9c:	693b      	ldr	r3, [r7, #16]
 800fe9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fea0:	4613      	mov	r3, r2
 800fea2:	009b      	lsls	r3, r3, #2
 800fea4:	4413      	add	r3, r2
 800fea6:	009b      	lsls	r3, r3, #2
 800fea8:	4a13      	ldr	r2, [pc, #76]	; (800fef8 <xTaskRemoveFromEventList+0xb8>)
 800feaa:	441a      	add	r2, r3
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	3304      	adds	r3, #4
 800feb0:	4619      	mov	r1, r3
 800feb2:	4610      	mov	r0, r2
 800feb4:	f7fe fba9 	bl	800e60a <vListInsertEnd>
 800feb8:	e005      	b.n	800fec6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800feba:	693b      	ldr	r3, [r7, #16]
 800febc:	3318      	adds	r3, #24
 800febe:	4619      	mov	r1, r3
 800fec0:	480e      	ldr	r0, [pc, #56]	; (800fefc <xTaskRemoveFromEventList+0xbc>)
 800fec2:	f7fe fba2 	bl	800e60a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feca:	4b0d      	ldr	r3, [pc, #52]	; (800ff00 <xTaskRemoveFromEventList+0xc0>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fed0:	429a      	cmp	r2, r3
 800fed2:	d905      	bls.n	800fee0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fed4:	2301      	movs	r3, #1
 800fed6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fed8:	4b0a      	ldr	r3, [pc, #40]	; (800ff04 <xTaskRemoveFromEventList+0xc4>)
 800feda:	2201      	movs	r2, #1
 800fedc:	601a      	str	r2, [r3, #0]
 800fede:	e001      	b.n	800fee4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800fee0:	2300      	movs	r3, #0
 800fee2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800fee4:	697b      	ldr	r3, [r7, #20]
}
 800fee6:	4618      	mov	r0, r3
 800fee8:	3718      	adds	r7, #24
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}
 800feee:	bf00      	nop
 800fef0:	20000e84 	.word	0x20000e84
 800fef4:	20000e64 	.word	0x20000e64
 800fef8:	2000098c 	.word	0x2000098c
 800fefc:	20000e1c 	.word	0x20000e1c
 800ff00:	20000988 	.word	0x20000988
 800ff04:	20000e70 	.word	0x20000e70

0800ff08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ff08:	b480      	push	{r7}
 800ff0a:	b083      	sub	sp, #12
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ff10:	4b06      	ldr	r3, [pc, #24]	; (800ff2c <vTaskInternalSetTimeOutState+0x24>)
 800ff12:	681a      	ldr	r2, [r3, #0]
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ff18:	4b05      	ldr	r3, [pc, #20]	; (800ff30 <vTaskInternalSetTimeOutState+0x28>)
 800ff1a:	681a      	ldr	r2, [r3, #0]
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	605a      	str	r2, [r3, #4]
}
 800ff20:	bf00      	nop
 800ff22:	370c      	adds	r7, #12
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bc80      	pop	{r7}
 800ff28:	4770      	bx	lr
 800ff2a:	bf00      	nop
 800ff2c:	20000e74 	.word	0x20000e74
 800ff30:	20000e60 	.word	0x20000e60

0800ff34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b088      	sub	sp, #32
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
 800ff3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d10a      	bne.n	800ff5a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ff44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff48:	f383 8811 	msr	BASEPRI, r3
 800ff4c:	f3bf 8f6f 	isb	sy
 800ff50:	f3bf 8f4f 	dsb	sy
 800ff54:	613b      	str	r3, [r7, #16]
}
 800ff56:	bf00      	nop
 800ff58:	e7fe      	b.n	800ff58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d10a      	bne.n	800ff76 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ff60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff64:	f383 8811 	msr	BASEPRI, r3
 800ff68:	f3bf 8f6f 	isb	sy
 800ff6c:	f3bf 8f4f 	dsb	sy
 800ff70:	60fb      	str	r3, [r7, #12]
}
 800ff72:	bf00      	nop
 800ff74:	e7fe      	b.n	800ff74 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ff76:	f000 ff11 	bl	8010d9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ff7a:	4b1d      	ldr	r3, [pc, #116]	; (800fff0 <xTaskCheckForTimeOut+0xbc>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	685b      	ldr	r3, [r3, #4]
 800ff84:	69ba      	ldr	r2, [r7, #24]
 800ff86:	1ad3      	subs	r3, r2, r3
 800ff88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff92:	d102      	bne.n	800ff9a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ff94:	2300      	movs	r3, #0
 800ff96:	61fb      	str	r3, [r7, #28]
 800ff98:	e023      	b.n	800ffe2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681a      	ldr	r2, [r3, #0]
 800ff9e:	4b15      	ldr	r3, [pc, #84]	; (800fff4 <xTaskCheckForTimeOut+0xc0>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d007      	beq.n	800ffb6 <xTaskCheckForTimeOut+0x82>
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	685b      	ldr	r3, [r3, #4]
 800ffaa:	69ba      	ldr	r2, [r7, #24]
 800ffac:	429a      	cmp	r2, r3
 800ffae:	d302      	bcc.n	800ffb6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	61fb      	str	r3, [r7, #28]
 800ffb4:	e015      	b.n	800ffe2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	697a      	ldr	r2, [r7, #20]
 800ffbc:	429a      	cmp	r2, r3
 800ffbe:	d20b      	bcs.n	800ffd8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ffc0:	683b      	ldr	r3, [r7, #0]
 800ffc2:	681a      	ldr	r2, [r3, #0]
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	1ad2      	subs	r2, r2, r3
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ffcc:	6878      	ldr	r0, [r7, #4]
 800ffce:	f7ff ff9b 	bl	800ff08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	61fb      	str	r3, [r7, #28]
 800ffd6:	e004      	b.n	800ffe2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	2200      	movs	r2, #0
 800ffdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ffde:	2301      	movs	r3, #1
 800ffe0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ffe2:	f000 ff0b 	bl	8010dfc <vPortExitCritical>

	return xReturn;
 800ffe6:	69fb      	ldr	r3, [r7, #28]
}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	3720      	adds	r7, #32
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}
 800fff0:	20000e60 	.word	0x20000e60
 800fff4:	20000e74 	.word	0x20000e74

0800fff8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fff8:	b480      	push	{r7}
 800fffa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fffc:	4b03      	ldr	r3, [pc, #12]	; (801000c <vTaskMissedYield+0x14>)
 800fffe:	2201      	movs	r2, #1
 8010000:	601a      	str	r2, [r3, #0]
}
 8010002:	bf00      	nop
 8010004:	46bd      	mov	sp, r7
 8010006:	bc80      	pop	{r7}
 8010008:	4770      	bx	lr
 801000a:	bf00      	nop
 801000c:	20000e70 	.word	0x20000e70

08010010 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b082      	sub	sp, #8
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010018:	f000 f852 	bl	80100c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801001c:	4b06      	ldr	r3, [pc, #24]	; (8010038 <prvIdleTask+0x28>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2b01      	cmp	r3, #1
 8010022:	d9f9      	bls.n	8010018 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010024:	4b05      	ldr	r3, [pc, #20]	; (801003c <prvIdleTask+0x2c>)
 8010026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801002a:	601a      	str	r2, [r3, #0]
 801002c:	f3bf 8f4f 	dsb	sy
 8010030:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010034:	e7f0      	b.n	8010018 <prvIdleTask+0x8>
 8010036:	bf00      	nop
 8010038:	2000098c 	.word	0x2000098c
 801003c:	e000ed04 	.word	0xe000ed04

08010040 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b082      	sub	sp, #8
 8010044:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010046:	2300      	movs	r3, #0
 8010048:	607b      	str	r3, [r7, #4]
 801004a:	e00c      	b.n	8010066 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801004c:	687a      	ldr	r2, [r7, #4]
 801004e:	4613      	mov	r3, r2
 8010050:	009b      	lsls	r3, r3, #2
 8010052:	4413      	add	r3, r2
 8010054:	009b      	lsls	r3, r3, #2
 8010056:	4a12      	ldr	r2, [pc, #72]	; (80100a0 <prvInitialiseTaskLists+0x60>)
 8010058:	4413      	add	r3, r2
 801005a:	4618      	mov	r0, r3
 801005c:	f7fe faaa 	bl	800e5b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	3301      	adds	r3, #1
 8010064:	607b      	str	r3, [r7, #4]
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2b37      	cmp	r3, #55	; 0x37
 801006a:	d9ef      	bls.n	801004c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801006c:	480d      	ldr	r0, [pc, #52]	; (80100a4 <prvInitialiseTaskLists+0x64>)
 801006e:	f7fe faa1 	bl	800e5b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010072:	480d      	ldr	r0, [pc, #52]	; (80100a8 <prvInitialiseTaskLists+0x68>)
 8010074:	f7fe fa9e 	bl	800e5b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010078:	480c      	ldr	r0, [pc, #48]	; (80100ac <prvInitialiseTaskLists+0x6c>)
 801007a:	f7fe fa9b 	bl	800e5b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801007e:	480c      	ldr	r0, [pc, #48]	; (80100b0 <prvInitialiseTaskLists+0x70>)
 8010080:	f7fe fa98 	bl	800e5b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010084:	480b      	ldr	r0, [pc, #44]	; (80100b4 <prvInitialiseTaskLists+0x74>)
 8010086:	f7fe fa95 	bl	800e5b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801008a:	4b0b      	ldr	r3, [pc, #44]	; (80100b8 <prvInitialiseTaskLists+0x78>)
 801008c:	4a05      	ldr	r2, [pc, #20]	; (80100a4 <prvInitialiseTaskLists+0x64>)
 801008e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010090:	4b0a      	ldr	r3, [pc, #40]	; (80100bc <prvInitialiseTaskLists+0x7c>)
 8010092:	4a05      	ldr	r2, [pc, #20]	; (80100a8 <prvInitialiseTaskLists+0x68>)
 8010094:	601a      	str	r2, [r3, #0]
}
 8010096:	bf00      	nop
 8010098:	3708      	adds	r7, #8
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}
 801009e:	bf00      	nop
 80100a0:	2000098c 	.word	0x2000098c
 80100a4:	20000dec 	.word	0x20000dec
 80100a8:	20000e00 	.word	0x20000e00
 80100ac:	20000e1c 	.word	0x20000e1c
 80100b0:	20000e30 	.word	0x20000e30
 80100b4:	20000e48 	.word	0x20000e48
 80100b8:	20000e14 	.word	0x20000e14
 80100bc:	20000e18 	.word	0x20000e18

080100c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b082      	sub	sp, #8
 80100c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80100c6:	e019      	b.n	80100fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80100c8:	f000 fe68 	bl	8010d9c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80100cc:	4b10      	ldr	r3, [pc, #64]	; (8010110 <prvCheckTasksWaitingTermination+0x50>)
 80100ce:	68db      	ldr	r3, [r3, #12]
 80100d0:	68db      	ldr	r3, [r3, #12]
 80100d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	3304      	adds	r3, #4
 80100d8:	4618      	mov	r0, r3
 80100da:	f7fe faf1 	bl	800e6c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80100de:	4b0d      	ldr	r3, [pc, #52]	; (8010114 <prvCheckTasksWaitingTermination+0x54>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	3b01      	subs	r3, #1
 80100e4:	4a0b      	ldr	r2, [pc, #44]	; (8010114 <prvCheckTasksWaitingTermination+0x54>)
 80100e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80100e8:	4b0b      	ldr	r3, [pc, #44]	; (8010118 <prvCheckTasksWaitingTermination+0x58>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	3b01      	subs	r3, #1
 80100ee:	4a0a      	ldr	r2, [pc, #40]	; (8010118 <prvCheckTasksWaitingTermination+0x58>)
 80100f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80100f2:	f000 fe83 	bl	8010dfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f000 f810 	bl	801011c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80100fc:	4b06      	ldr	r3, [pc, #24]	; (8010118 <prvCheckTasksWaitingTermination+0x58>)
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d1e1      	bne.n	80100c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010104:	bf00      	nop
 8010106:	bf00      	nop
 8010108:	3708      	adds	r7, #8
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}
 801010e:	bf00      	nop
 8010110:	20000e30 	.word	0x20000e30
 8010114:	20000e5c 	.word	0x20000e5c
 8010118:	20000e44 	.word	0x20000e44

0801011c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801011c:	b580      	push	{r7, lr}
 801011e:	b084      	sub	sp, #16
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	3354      	adds	r3, #84	; 0x54
 8010128:	4618      	mov	r0, r3
 801012a:	f001 fb7b 	bl	8011824 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010134:	2b00      	cmp	r3, #0
 8010136:	d108      	bne.n	801014a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801013c:	4618      	mov	r0, r3
 801013e:	f000 fff1 	bl	8011124 <vPortFree>
				vPortFree( pxTCB );
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	f000 ffee 	bl	8011124 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010148:	e018      	b.n	801017c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010150:	2b01      	cmp	r3, #1
 8010152:	d103      	bne.n	801015c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f000 ffe5 	bl	8011124 <vPortFree>
	}
 801015a:	e00f      	b.n	801017c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010162:	2b02      	cmp	r3, #2
 8010164:	d00a      	beq.n	801017c <prvDeleteTCB+0x60>
	__asm volatile
 8010166:	f04f 0350 	mov.w	r3, #80	; 0x50
 801016a:	f383 8811 	msr	BASEPRI, r3
 801016e:	f3bf 8f6f 	isb	sy
 8010172:	f3bf 8f4f 	dsb	sy
 8010176:	60fb      	str	r3, [r7, #12]
}
 8010178:	bf00      	nop
 801017a:	e7fe      	b.n	801017a <prvDeleteTCB+0x5e>
	}
 801017c:	bf00      	nop
 801017e:	3710      	adds	r7, #16
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}

08010184 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010184:	b480      	push	{r7}
 8010186:	b083      	sub	sp, #12
 8010188:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801018a:	4b0e      	ldr	r3, [pc, #56]	; (80101c4 <prvResetNextTaskUnblockTime+0x40>)
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d101      	bne.n	8010198 <prvResetNextTaskUnblockTime+0x14>
 8010194:	2301      	movs	r3, #1
 8010196:	e000      	b.n	801019a <prvResetNextTaskUnblockTime+0x16>
 8010198:	2300      	movs	r3, #0
 801019a:	2b00      	cmp	r3, #0
 801019c:	d004      	beq.n	80101a8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801019e:	4b0a      	ldr	r3, [pc, #40]	; (80101c8 <prvResetNextTaskUnblockTime+0x44>)
 80101a0:	f04f 32ff 	mov.w	r2, #4294967295
 80101a4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80101a6:	e008      	b.n	80101ba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80101a8:	4b06      	ldr	r3, [pc, #24]	; (80101c4 <prvResetNextTaskUnblockTime+0x40>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	68db      	ldr	r3, [r3, #12]
 80101ae:	68db      	ldr	r3, [r3, #12]
 80101b0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	685b      	ldr	r3, [r3, #4]
 80101b6:	4a04      	ldr	r2, [pc, #16]	; (80101c8 <prvResetNextTaskUnblockTime+0x44>)
 80101b8:	6013      	str	r3, [r2, #0]
}
 80101ba:	bf00      	nop
 80101bc:	370c      	adds	r7, #12
 80101be:	46bd      	mov	sp, r7
 80101c0:	bc80      	pop	{r7}
 80101c2:	4770      	bx	lr
 80101c4:	20000e14 	.word	0x20000e14
 80101c8:	20000e7c 	.word	0x20000e7c

080101cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80101cc:	b480      	push	{r7}
 80101ce:	b083      	sub	sp, #12
 80101d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80101d2:	4b0b      	ldr	r3, [pc, #44]	; (8010200 <xTaskGetSchedulerState+0x34>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d102      	bne.n	80101e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80101da:	2301      	movs	r3, #1
 80101dc:	607b      	str	r3, [r7, #4]
 80101de:	e008      	b.n	80101f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80101e0:	4b08      	ldr	r3, [pc, #32]	; (8010204 <xTaskGetSchedulerState+0x38>)
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d102      	bne.n	80101ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80101e8:	2302      	movs	r3, #2
 80101ea:	607b      	str	r3, [r7, #4]
 80101ec:	e001      	b.n	80101f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80101ee:	2300      	movs	r3, #0
 80101f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80101f2:	687b      	ldr	r3, [r7, #4]
	}
 80101f4:	4618      	mov	r0, r3
 80101f6:	370c      	adds	r7, #12
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bc80      	pop	{r7}
 80101fc:	4770      	bx	lr
 80101fe:	bf00      	nop
 8010200:	20000e68 	.word	0x20000e68
 8010204:	20000e84 	.word	0x20000e84

08010208 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010208:	b580      	push	{r7, lr}
 801020a:	b084      	sub	sp, #16
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010214:	2300      	movs	r3, #0
 8010216:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d056      	beq.n	80102cc <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010222:	4b2d      	ldr	r3, [pc, #180]	; (80102d8 <xTaskPriorityInherit+0xd0>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010228:	429a      	cmp	r2, r3
 801022a:	d246      	bcs.n	80102ba <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	699b      	ldr	r3, [r3, #24]
 8010230:	2b00      	cmp	r3, #0
 8010232:	db06      	blt.n	8010242 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010234:	4b28      	ldr	r3, [pc, #160]	; (80102d8 <xTaskPriorityInherit+0xd0>)
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801023a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	6959      	ldr	r1, [r3, #20]
 8010246:	68bb      	ldr	r3, [r7, #8]
 8010248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801024a:	4613      	mov	r3, r2
 801024c:	009b      	lsls	r3, r3, #2
 801024e:	4413      	add	r3, r2
 8010250:	009b      	lsls	r3, r3, #2
 8010252:	4a22      	ldr	r2, [pc, #136]	; (80102dc <xTaskPriorityInherit+0xd4>)
 8010254:	4413      	add	r3, r2
 8010256:	4299      	cmp	r1, r3
 8010258:	d101      	bne.n	801025e <xTaskPriorityInherit+0x56>
 801025a:	2301      	movs	r3, #1
 801025c:	e000      	b.n	8010260 <xTaskPriorityInherit+0x58>
 801025e:	2300      	movs	r3, #0
 8010260:	2b00      	cmp	r3, #0
 8010262:	d022      	beq.n	80102aa <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	3304      	adds	r3, #4
 8010268:	4618      	mov	r0, r3
 801026a:	f7fe fa29 	bl	800e6c0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801026e:	4b1a      	ldr	r3, [pc, #104]	; (80102d8 <xTaskPriorityInherit+0xd0>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010278:	68bb      	ldr	r3, [r7, #8]
 801027a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801027c:	4b18      	ldr	r3, [pc, #96]	; (80102e0 <xTaskPriorityInherit+0xd8>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	429a      	cmp	r2, r3
 8010282:	d903      	bls.n	801028c <xTaskPriorityInherit+0x84>
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010288:	4a15      	ldr	r2, [pc, #84]	; (80102e0 <xTaskPriorityInherit+0xd8>)
 801028a:	6013      	str	r3, [r2, #0]
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010290:	4613      	mov	r3, r2
 8010292:	009b      	lsls	r3, r3, #2
 8010294:	4413      	add	r3, r2
 8010296:	009b      	lsls	r3, r3, #2
 8010298:	4a10      	ldr	r2, [pc, #64]	; (80102dc <xTaskPriorityInherit+0xd4>)
 801029a:	441a      	add	r2, r3
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	3304      	adds	r3, #4
 80102a0:	4619      	mov	r1, r3
 80102a2:	4610      	mov	r0, r2
 80102a4:	f7fe f9b1 	bl	800e60a <vListInsertEnd>
 80102a8:	e004      	b.n	80102b4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80102aa:	4b0b      	ldr	r3, [pc, #44]	; (80102d8 <xTaskPriorityInherit+0xd0>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80102b4:	2301      	movs	r3, #1
 80102b6:	60fb      	str	r3, [r7, #12]
 80102b8:	e008      	b.n	80102cc <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80102be:	4b06      	ldr	r3, [pc, #24]	; (80102d8 <xTaskPriorityInherit+0xd0>)
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d201      	bcs.n	80102cc <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80102c8:	2301      	movs	r3, #1
 80102ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80102cc:	68fb      	ldr	r3, [r7, #12]
	}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3710      	adds	r7, #16
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}
 80102d6:	bf00      	nop
 80102d8:	20000988 	.word	0x20000988
 80102dc:	2000098c 	.word	0x2000098c
 80102e0:	20000e64 	.word	0x20000e64

080102e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b086      	sub	sp, #24
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80102f0:	2300      	movs	r3, #0
 80102f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d056      	beq.n	80103a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80102fa:	4b2e      	ldr	r3, [pc, #184]	; (80103b4 <xTaskPriorityDisinherit+0xd0>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	693a      	ldr	r2, [r7, #16]
 8010300:	429a      	cmp	r2, r3
 8010302:	d00a      	beq.n	801031a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010308:	f383 8811 	msr	BASEPRI, r3
 801030c:	f3bf 8f6f 	isb	sy
 8010310:	f3bf 8f4f 	dsb	sy
 8010314:	60fb      	str	r3, [r7, #12]
}
 8010316:	bf00      	nop
 8010318:	e7fe      	b.n	8010318 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801031a:	693b      	ldr	r3, [r7, #16]
 801031c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801031e:	2b00      	cmp	r3, #0
 8010320:	d10a      	bne.n	8010338 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010326:	f383 8811 	msr	BASEPRI, r3
 801032a:	f3bf 8f6f 	isb	sy
 801032e:	f3bf 8f4f 	dsb	sy
 8010332:	60bb      	str	r3, [r7, #8]
}
 8010334:	bf00      	nop
 8010336:	e7fe      	b.n	8010336 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801033c:	1e5a      	subs	r2, r3, #1
 801033e:	693b      	ldr	r3, [r7, #16]
 8010340:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010346:	693b      	ldr	r3, [r7, #16]
 8010348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801034a:	429a      	cmp	r2, r3
 801034c:	d02c      	beq.n	80103a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010352:	2b00      	cmp	r3, #0
 8010354:	d128      	bne.n	80103a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010356:	693b      	ldr	r3, [r7, #16]
 8010358:	3304      	adds	r3, #4
 801035a:	4618      	mov	r0, r3
 801035c:	f7fe f9b0 	bl	800e6c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010360:	693b      	ldr	r3, [r7, #16]
 8010362:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010364:	693b      	ldr	r3, [r7, #16]
 8010366:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010368:	693b      	ldr	r3, [r7, #16]
 801036a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801036c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010370:	693b      	ldr	r3, [r7, #16]
 8010372:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010374:	693b      	ldr	r3, [r7, #16]
 8010376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010378:	4b0f      	ldr	r3, [pc, #60]	; (80103b8 <xTaskPriorityDisinherit+0xd4>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	429a      	cmp	r2, r3
 801037e:	d903      	bls.n	8010388 <xTaskPriorityDisinherit+0xa4>
 8010380:	693b      	ldr	r3, [r7, #16]
 8010382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010384:	4a0c      	ldr	r2, [pc, #48]	; (80103b8 <xTaskPriorityDisinherit+0xd4>)
 8010386:	6013      	str	r3, [r2, #0]
 8010388:	693b      	ldr	r3, [r7, #16]
 801038a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801038c:	4613      	mov	r3, r2
 801038e:	009b      	lsls	r3, r3, #2
 8010390:	4413      	add	r3, r2
 8010392:	009b      	lsls	r3, r3, #2
 8010394:	4a09      	ldr	r2, [pc, #36]	; (80103bc <xTaskPriorityDisinherit+0xd8>)
 8010396:	441a      	add	r2, r3
 8010398:	693b      	ldr	r3, [r7, #16]
 801039a:	3304      	adds	r3, #4
 801039c:	4619      	mov	r1, r3
 801039e:	4610      	mov	r0, r2
 80103a0:	f7fe f933 	bl	800e60a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80103a4:	2301      	movs	r3, #1
 80103a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80103a8:	697b      	ldr	r3, [r7, #20]
	}
 80103aa:	4618      	mov	r0, r3
 80103ac:	3718      	adds	r7, #24
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}
 80103b2:	bf00      	nop
 80103b4:	20000988 	.word	0x20000988
 80103b8:	20000e64 	.word	0x20000e64
 80103bc:	2000098c 	.word	0x2000098c

080103c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b088      	sub	sp, #32
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
 80103c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80103ce:	2301      	movs	r3, #1
 80103d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d06f      	beq.n	80104b8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80103d8:	69bb      	ldr	r3, [r7, #24]
 80103da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d10a      	bne.n	80103f6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80103e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103e4:	f383 8811 	msr	BASEPRI, r3
 80103e8:	f3bf 8f6f 	isb	sy
 80103ec:	f3bf 8f4f 	dsb	sy
 80103f0:	60fb      	str	r3, [r7, #12]
}
 80103f2:	bf00      	nop
 80103f4:	e7fe      	b.n	80103f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80103f6:	69bb      	ldr	r3, [r7, #24]
 80103f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80103fa:	683a      	ldr	r2, [r7, #0]
 80103fc:	429a      	cmp	r2, r3
 80103fe:	d902      	bls.n	8010406 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	61fb      	str	r3, [r7, #28]
 8010404:	e002      	b.n	801040c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010406:	69bb      	ldr	r3, [r7, #24]
 8010408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801040a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801040c:	69bb      	ldr	r3, [r7, #24]
 801040e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010410:	69fa      	ldr	r2, [r7, #28]
 8010412:	429a      	cmp	r2, r3
 8010414:	d050      	beq.n	80104b8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010416:	69bb      	ldr	r3, [r7, #24]
 8010418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801041a:	697a      	ldr	r2, [r7, #20]
 801041c:	429a      	cmp	r2, r3
 801041e:	d14b      	bne.n	80104b8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010420:	4b27      	ldr	r3, [pc, #156]	; (80104c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	69ba      	ldr	r2, [r7, #24]
 8010426:	429a      	cmp	r2, r3
 8010428:	d10a      	bne.n	8010440 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801042a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801042e:	f383 8811 	msr	BASEPRI, r3
 8010432:	f3bf 8f6f 	isb	sy
 8010436:	f3bf 8f4f 	dsb	sy
 801043a:	60bb      	str	r3, [r7, #8]
}
 801043c:	bf00      	nop
 801043e:	e7fe      	b.n	801043e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010440:	69bb      	ldr	r3, [r7, #24]
 8010442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010444:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010446:	69bb      	ldr	r3, [r7, #24]
 8010448:	69fa      	ldr	r2, [r7, #28]
 801044a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801044c:	69bb      	ldr	r3, [r7, #24]
 801044e:	699b      	ldr	r3, [r3, #24]
 8010450:	2b00      	cmp	r3, #0
 8010452:	db04      	blt.n	801045e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010454:	69fb      	ldr	r3, [r7, #28]
 8010456:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801045a:	69bb      	ldr	r3, [r7, #24]
 801045c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801045e:	69bb      	ldr	r3, [r7, #24]
 8010460:	6959      	ldr	r1, [r3, #20]
 8010462:	693a      	ldr	r2, [r7, #16]
 8010464:	4613      	mov	r3, r2
 8010466:	009b      	lsls	r3, r3, #2
 8010468:	4413      	add	r3, r2
 801046a:	009b      	lsls	r3, r3, #2
 801046c:	4a15      	ldr	r2, [pc, #84]	; (80104c4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801046e:	4413      	add	r3, r2
 8010470:	4299      	cmp	r1, r3
 8010472:	d101      	bne.n	8010478 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8010474:	2301      	movs	r3, #1
 8010476:	e000      	b.n	801047a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8010478:	2300      	movs	r3, #0
 801047a:	2b00      	cmp	r3, #0
 801047c:	d01c      	beq.n	80104b8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801047e:	69bb      	ldr	r3, [r7, #24]
 8010480:	3304      	adds	r3, #4
 8010482:	4618      	mov	r0, r3
 8010484:	f7fe f91c 	bl	800e6c0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010488:	69bb      	ldr	r3, [r7, #24]
 801048a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801048c:	4b0e      	ldr	r3, [pc, #56]	; (80104c8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	429a      	cmp	r2, r3
 8010492:	d903      	bls.n	801049c <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8010494:	69bb      	ldr	r3, [r7, #24]
 8010496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010498:	4a0b      	ldr	r2, [pc, #44]	; (80104c8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 801049a:	6013      	str	r3, [r2, #0]
 801049c:	69bb      	ldr	r3, [r7, #24]
 801049e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104a0:	4613      	mov	r3, r2
 80104a2:	009b      	lsls	r3, r3, #2
 80104a4:	4413      	add	r3, r2
 80104a6:	009b      	lsls	r3, r3, #2
 80104a8:	4a06      	ldr	r2, [pc, #24]	; (80104c4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80104aa:	441a      	add	r2, r3
 80104ac:	69bb      	ldr	r3, [r7, #24]
 80104ae:	3304      	adds	r3, #4
 80104b0:	4619      	mov	r1, r3
 80104b2:	4610      	mov	r0, r2
 80104b4:	f7fe f8a9 	bl	800e60a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80104b8:	bf00      	nop
 80104ba:	3720      	adds	r7, #32
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}
 80104c0:	20000988 	.word	0x20000988
 80104c4:	2000098c 	.word	0x2000098c
 80104c8:	20000e64 	.word	0x20000e64

080104cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80104cc:	b480      	push	{r7}
 80104ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80104d0:	4b07      	ldr	r3, [pc, #28]	; (80104f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d004      	beq.n	80104e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80104d8:	4b05      	ldr	r3, [pc, #20]	; (80104f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80104de:	3201      	adds	r2, #1
 80104e0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80104e2:	4b03      	ldr	r3, [pc, #12]	; (80104f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80104e4:	681b      	ldr	r3, [r3, #0]
	}
 80104e6:	4618      	mov	r0, r3
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bc80      	pop	{r7}
 80104ec:	4770      	bx	lr
 80104ee:	bf00      	nop
 80104f0:	20000988 	.word	0x20000988

080104f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b084      	sub	sp, #16
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
 80104fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80104fe:	4b21      	ldr	r3, [pc, #132]	; (8010584 <prvAddCurrentTaskToDelayedList+0x90>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010504:	4b20      	ldr	r3, [pc, #128]	; (8010588 <prvAddCurrentTaskToDelayedList+0x94>)
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	3304      	adds	r3, #4
 801050a:	4618      	mov	r0, r3
 801050c:	f7fe f8d8 	bl	800e6c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010516:	d10a      	bne.n	801052e <prvAddCurrentTaskToDelayedList+0x3a>
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d007      	beq.n	801052e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801051e:	4b1a      	ldr	r3, [pc, #104]	; (8010588 <prvAddCurrentTaskToDelayedList+0x94>)
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	3304      	adds	r3, #4
 8010524:	4619      	mov	r1, r3
 8010526:	4819      	ldr	r0, [pc, #100]	; (801058c <prvAddCurrentTaskToDelayedList+0x98>)
 8010528:	f7fe f86f 	bl	800e60a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801052c:	e026      	b.n	801057c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801052e:	68fa      	ldr	r2, [r7, #12]
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	4413      	add	r3, r2
 8010534:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010536:	4b14      	ldr	r3, [pc, #80]	; (8010588 <prvAddCurrentTaskToDelayedList+0x94>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	68ba      	ldr	r2, [r7, #8]
 801053c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801053e:	68ba      	ldr	r2, [r7, #8]
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	429a      	cmp	r2, r3
 8010544:	d209      	bcs.n	801055a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010546:	4b12      	ldr	r3, [pc, #72]	; (8010590 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010548:	681a      	ldr	r2, [r3, #0]
 801054a:	4b0f      	ldr	r3, [pc, #60]	; (8010588 <prvAddCurrentTaskToDelayedList+0x94>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	3304      	adds	r3, #4
 8010550:	4619      	mov	r1, r3
 8010552:	4610      	mov	r0, r2
 8010554:	f7fe f87c 	bl	800e650 <vListInsert>
}
 8010558:	e010      	b.n	801057c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801055a:	4b0e      	ldr	r3, [pc, #56]	; (8010594 <prvAddCurrentTaskToDelayedList+0xa0>)
 801055c:	681a      	ldr	r2, [r3, #0]
 801055e:	4b0a      	ldr	r3, [pc, #40]	; (8010588 <prvAddCurrentTaskToDelayedList+0x94>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	3304      	adds	r3, #4
 8010564:	4619      	mov	r1, r3
 8010566:	4610      	mov	r0, r2
 8010568:	f7fe f872 	bl	800e650 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801056c:	4b0a      	ldr	r3, [pc, #40]	; (8010598 <prvAddCurrentTaskToDelayedList+0xa4>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	68ba      	ldr	r2, [r7, #8]
 8010572:	429a      	cmp	r2, r3
 8010574:	d202      	bcs.n	801057c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010576:	4a08      	ldr	r2, [pc, #32]	; (8010598 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	6013      	str	r3, [r2, #0]
}
 801057c:	bf00      	nop
 801057e:	3710      	adds	r7, #16
 8010580:	46bd      	mov	sp, r7
 8010582:	bd80      	pop	{r7, pc}
 8010584:	20000e60 	.word	0x20000e60
 8010588:	20000988 	.word	0x20000988
 801058c:	20000e48 	.word	0x20000e48
 8010590:	20000e18 	.word	0x20000e18
 8010594:	20000e14 	.word	0x20000e14
 8010598:	20000e7c 	.word	0x20000e7c

0801059c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b08a      	sub	sp, #40	; 0x28
 80105a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80105a2:	2300      	movs	r3, #0
 80105a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80105a6:	f000 facb 	bl	8010b40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80105aa:	4b1c      	ldr	r3, [pc, #112]	; (801061c <xTimerCreateTimerTask+0x80>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d021      	beq.n	80105f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80105b2:	2300      	movs	r3, #0
 80105b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80105b6:	2300      	movs	r3, #0
 80105b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80105ba:	1d3a      	adds	r2, r7, #4
 80105bc:	f107 0108 	add.w	r1, r7, #8
 80105c0:	f107 030c 	add.w	r3, r7, #12
 80105c4:	4618      	mov	r0, r3
 80105c6:	f7fd ffdb 	bl	800e580 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80105ca:	6879      	ldr	r1, [r7, #4]
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	68fa      	ldr	r2, [r7, #12]
 80105d0:	9202      	str	r2, [sp, #8]
 80105d2:	9301      	str	r3, [sp, #4]
 80105d4:	2302      	movs	r3, #2
 80105d6:	9300      	str	r3, [sp, #0]
 80105d8:	2300      	movs	r3, #0
 80105da:	460a      	mov	r2, r1
 80105dc:	4910      	ldr	r1, [pc, #64]	; (8010620 <xTimerCreateTimerTask+0x84>)
 80105de:	4811      	ldr	r0, [pc, #68]	; (8010624 <xTimerCreateTimerTask+0x88>)
 80105e0:	f7fe ffae 	bl	800f540 <xTaskCreateStatic>
 80105e4:	4603      	mov	r3, r0
 80105e6:	4a10      	ldr	r2, [pc, #64]	; (8010628 <xTimerCreateTimerTask+0x8c>)
 80105e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80105ea:	4b0f      	ldr	r3, [pc, #60]	; (8010628 <xTimerCreateTimerTask+0x8c>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d001      	beq.n	80105f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80105f2:	2301      	movs	r3, #1
 80105f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80105f6:	697b      	ldr	r3, [r7, #20]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d10a      	bne.n	8010612 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80105fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010600:	f383 8811 	msr	BASEPRI, r3
 8010604:	f3bf 8f6f 	isb	sy
 8010608:	f3bf 8f4f 	dsb	sy
 801060c:	613b      	str	r3, [r7, #16]
}
 801060e:	bf00      	nop
 8010610:	e7fe      	b.n	8010610 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010612:	697b      	ldr	r3, [r7, #20]
}
 8010614:	4618      	mov	r0, r3
 8010616:	3718      	adds	r7, #24
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}
 801061c:	20000eb8 	.word	0x20000eb8
 8010620:	080127cc 	.word	0x080127cc
 8010624:	08010749 	.word	0x08010749
 8010628:	20000ebc 	.word	0x20000ebc

0801062c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b08a      	sub	sp, #40	; 0x28
 8010630:	af00      	add	r7, sp, #0
 8010632:	60f8      	str	r0, [r7, #12]
 8010634:	60b9      	str	r1, [r7, #8]
 8010636:	607a      	str	r2, [r7, #4]
 8010638:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801063a:	2300      	movs	r3, #0
 801063c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d10a      	bne.n	801065a <xTimerGenericCommand+0x2e>
	__asm volatile
 8010644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010648:	f383 8811 	msr	BASEPRI, r3
 801064c:	f3bf 8f6f 	isb	sy
 8010650:	f3bf 8f4f 	dsb	sy
 8010654:	623b      	str	r3, [r7, #32]
}
 8010656:	bf00      	nop
 8010658:	e7fe      	b.n	8010658 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801065a:	4b1a      	ldr	r3, [pc, #104]	; (80106c4 <xTimerGenericCommand+0x98>)
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d02a      	beq.n	80106b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801066e:	68bb      	ldr	r3, [r7, #8]
 8010670:	2b05      	cmp	r3, #5
 8010672:	dc18      	bgt.n	80106a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010674:	f7ff fdaa 	bl	80101cc <xTaskGetSchedulerState>
 8010678:	4603      	mov	r3, r0
 801067a:	2b02      	cmp	r3, #2
 801067c:	d109      	bne.n	8010692 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801067e:	4b11      	ldr	r3, [pc, #68]	; (80106c4 <xTimerGenericCommand+0x98>)
 8010680:	6818      	ldr	r0, [r3, #0]
 8010682:	f107 0110 	add.w	r1, r7, #16
 8010686:	2300      	movs	r3, #0
 8010688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801068a:	f7fe f945 	bl	800e918 <xQueueGenericSend>
 801068e:	6278      	str	r0, [r7, #36]	; 0x24
 8010690:	e012      	b.n	80106b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010692:	4b0c      	ldr	r3, [pc, #48]	; (80106c4 <xTimerGenericCommand+0x98>)
 8010694:	6818      	ldr	r0, [r3, #0]
 8010696:	f107 0110 	add.w	r1, r7, #16
 801069a:	2300      	movs	r3, #0
 801069c:	2200      	movs	r2, #0
 801069e:	f7fe f93b 	bl	800e918 <xQueueGenericSend>
 80106a2:	6278      	str	r0, [r7, #36]	; 0x24
 80106a4:	e008      	b.n	80106b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80106a6:	4b07      	ldr	r3, [pc, #28]	; (80106c4 <xTimerGenericCommand+0x98>)
 80106a8:	6818      	ldr	r0, [r3, #0]
 80106aa:	f107 0110 	add.w	r1, r7, #16
 80106ae:	2300      	movs	r3, #0
 80106b0:	683a      	ldr	r2, [r7, #0]
 80106b2:	f7fe fa2f 	bl	800eb14 <xQueueGenericSendFromISR>
 80106b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80106b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80106ba:	4618      	mov	r0, r3
 80106bc:	3728      	adds	r7, #40	; 0x28
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}
 80106c2:	bf00      	nop
 80106c4:	20000eb8 	.word	0x20000eb8

080106c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b088      	sub	sp, #32
 80106cc:	af02      	add	r7, sp, #8
 80106ce:	6078      	str	r0, [r7, #4]
 80106d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80106d2:	4b1c      	ldr	r3, [pc, #112]	; (8010744 <prvProcessExpiredTimer+0x7c>)
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	68db      	ldr	r3, [r3, #12]
 80106d8:	68db      	ldr	r3, [r3, #12]
 80106da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80106dc:	697b      	ldr	r3, [r7, #20]
 80106de:	3304      	adds	r3, #4
 80106e0:	4618      	mov	r0, r3
 80106e2:	f7fd ffed 	bl	800e6c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	69db      	ldr	r3, [r3, #28]
 80106ea:	2b01      	cmp	r3, #1
 80106ec:	d122      	bne.n	8010734 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	699a      	ldr	r2, [r3, #24]
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	18d1      	adds	r1, r2, r3
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	683a      	ldr	r2, [r7, #0]
 80106fa:	6978      	ldr	r0, [r7, #20]
 80106fc:	f000 f8c8 	bl	8010890 <prvInsertTimerInActiveList>
 8010700:	4603      	mov	r3, r0
 8010702:	2b00      	cmp	r3, #0
 8010704:	d016      	beq.n	8010734 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010706:	2300      	movs	r3, #0
 8010708:	9300      	str	r3, [sp, #0]
 801070a:	2300      	movs	r3, #0
 801070c:	687a      	ldr	r2, [r7, #4]
 801070e:	2100      	movs	r1, #0
 8010710:	6978      	ldr	r0, [r7, #20]
 8010712:	f7ff ff8b 	bl	801062c <xTimerGenericCommand>
 8010716:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010718:	693b      	ldr	r3, [r7, #16]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d10a      	bne.n	8010734 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 801071e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010722:	f383 8811 	msr	BASEPRI, r3
 8010726:	f3bf 8f6f 	isb	sy
 801072a:	f3bf 8f4f 	dsb	sy
 801072e:	60fb      	str	r3, [r7, #12]
}
 8010730:	bf00      	nop
 8010732:	e7fe      	b.n	8010732 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010738:	6978      	ldr	r0, [r7, #20]
 801073a:	4798      	blx	r3
}
 801073c:	bf00      	nop
 801073e:	3718      	adds	r7, #24
 8010740:	46bd      	mov	sp, r7
 8010742:	bd80      	pop	{r7, pc}
 8010744:	20000eb0 	.word	0x20000eb0

08010748 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b084      	sub	sp, #16
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010750:	f107 0308 	add.w	r3, r7, #8
 8010754:	4618      	mov	r0, r3
 8010756:	f000 f857 	bl	8010808 <prvGetNextExpireTime>
 801075a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	4619      	mov	r1, r3
 8010760:	68f8      	ldr	r0, [r7, #12]
 8010762:	f000 f803 	bl	801076c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010766:	f000 f8d5 	bl	8010914 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801076a:	e7f1      	b.n	8010750 <prvTimerTask+0x8>

0801076c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b084      	sub	sp, #16
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
 8010774:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010776:	f7ff f937 	bl	800f9e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801077a:	f107 0308 	add.w	r3, r7, #8
 801077e:	4618      	mov	r0, r3
 8010780:	f000 f866 	bl	8010850 <prvSampleTimeNow>
 8010784:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d130      	bne.n	80107ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d10a      	bne.n	80107a8 <prvProcessTimerOrBlockTask+0x3c>
 8010792:	687a      	ldr	r2, [r7, #4]
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	429a      	cmp	r2, r3
 8010798:	d806      	bhi.n	80107a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801079a:	f7ff f933 	bl	800fa04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801079e:	68f9      	ldr	r1, [r7, #12]
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	f7ff ff91 	bl	80106c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80107a6:	e024      	b.n	80107f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d008      	beq.n	80107c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80107ae:	4b13      	ldr	r3, [pc, #76]	; (80107fc <prvProcessTimerOrBlockTask+0x90>)
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	bf0c      	ite	eq
 80107b8:	2301      	moveq	r3, #1
 80107ba:	2300      	movne	r3, #0
 80107bc:	b2db      	uxtb	r3, r3
 80107be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80107c0:	4b0f      	ldr	r3, [pc, #60]	; (8010800 <prvProcessTimerOrBlockTask+0x94>)
 80107c2:	6818      	ldr	r0, [r3, #0]
 80107c4:	687a      	ldr	r2, [r7, #4]
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	1ad3      	subs	r3, r2, r3
 80107ca:	683a      	ldr	r2, [r7, #0]
 80107cc:	4619      	mov	r1, r3
 80107ce:	f7fe fe83 	bl	800f4d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80107d2:	f7ff f917 	bl	800fa04 <xTaskResumeAll>
 80107d6:	4603      	mov	r3, r0
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d10a      	bne.n	80107f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80107dc:	4b09      	ldr	r3, [pc, #36]	; (8010804 <prvProcessTimerOrBlockTask+0x98>)
 80107de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107e2:	601a      	str	r2, [r3, #0]
 80107e4:	f3bf 8f4f 	dsb	sy
 80107e8:	f3bf 8f6f 	isb	sy
}
 80107ec:	e001      	b.n	80107f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80107ee:	f7ff f909 	bl	800fa04 <xTaskResumeAll>
}
 80107f2:	bf00      	nop
 80107f4:	3710      	adds	r7, #16
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd80      	pop	{r7, pc}
 80107fa:	bf00      	nop
 80107fc:	20000eb4 	.word	0x20000eb4
 8010800:	20000eb8 	.word	0x20000eb8
 8010804:	e000ed04 	.word	0xe000ed04

08010808 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010808:	b480      	push	{r7}
 801080a:	b085      	sub	sp, #20
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010810:	4b0e      	ldr	r3, [pc, #56]	; (801084c <prvGetNextExpireTime+0x44>)
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	2b00      	cmp	r3, #0
 8010818:	bf0c      	ite	eq
 801081a:	2301      	moveq	r3, #1
 801081c:	2300      	movne	r3, #0
 801081e:	b2db      	uxtb	r3, r3
 8010820:	461a      	mov	r2, r3
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d105      	bne.n	801083a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801082e:	4b07      	ldr	r3, [pc, #28]	; (801084c <prvGetNextExpireTime+0x44>)
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	68db      	ldr	r3, [r3, #12]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	60fb      	str	r3, [r7, #12]
 8010838:	e001      	b.n	801083e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801083a:	2300      	movs	r3, #0
 801083c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801083e:	68fb      	ldr	r3, [r7, #12]
}
 8010840:	4618      	mov	r0, r3
 8010842:	3714      	adds	r7, #20
 8010844:	46bd      	mov	sp, r7
 8010846:	bc80      	pop	{r7}
 8010848:	4770      	bx	lr
 801084a:	bf00      	nop
 801084c:	20000eb0 	.word	0x20000eb0

08010850 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b084      	sub	sp, #16
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010858:	f7ff f972 	bl	800fb40 <xTaskGetTickCount>
 801085c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801085e:	4b0b      	ldr	r3, [pc, #44]	; (801088c <prvSampleTimeNow+0x3c>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	68fa      	ldr	r2, [r7, #12]
 8010864:	429a      	cmp	r2, r3
 8010866:	d205      	bcs.n	8010874 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010868:	f000 f908 	bl	8010a7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	2201      	movs	r2, #1
 8010870:	601a      	str	r2, [r3, #0]
 8010872:	e002      	b.n	801087a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2200      	movs	r2, #0
 8010878:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801087a:	4a04      	ldr	r2, [pc, #16]	; (801088c <prvSampleTimeNow+0x3c>)
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010880:	68fb      	ldr	r3, [r7, #12]
}
 8010882:	4618      	mov	r0, r3
 8010884:	3710      	adds	r7, #16
 8010886:	46bd      	mov	sp, r7
 8010888:	bd80      	pop	{r7, pc}
 801088a:	bf00      	nop
 801088c:	20000ec0 	.word	0x20000ec0

08010890 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b086      	sub	sp, #24
 8010894:	af00      	add	r7, sp, #0
 8010896:	60f8      	str	r0, [r7, #12]
 8010898:	60b9      	str	r1, [r7, #8]
 801089a:	607a      	str	r2, [r7, #4]
 801089c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801089e:	2300      	movs	r3, #0
 80108a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	68ba      	ldr	r2, [r7, #8]
 80108a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	68fa      	ldr	r2, [r7, #12]
 80108ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80108ae:	68ba      	ldr	r2, [r7, #8]
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	429a      	cmp	r2, r3
 80108b4:	d812      	bhi.n	80108dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108b6:	687a      	ldr	r2, [r7, #4]
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	1ad2      	subs	r2, r2, r3
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	699b      	ldr	r3, [r3, #24]
 80108c0:	429a      	cmp	r2, r3
 80108c2:	d302      	bcc.n	80108ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80108c4:	2301      	movs	r3, #1
 80108c6:	617b      	str	r3, [r7, #20]
 80108c8:	e01b      	b.n	8010902 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80108ca:	4b10      	ldr	r3, [pc, #64]	; (801090c <prvInsertTimerInActiveList+0x7c>)
 80108cc:	681a      	ldr	r2, [r3, #0]
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	3304      	adds	r3, #4
 80108d2:	4619      	mov	r1, r3
 80108d4:	4610      	mov	r0, r2
 80108d6:	f7fd febb 	bl	800e650 <vListInsert>
 80108da:	e012      	b.n	8010902 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80108dc:	687a      	ldr	r2, [r7, #4]
 80108de:	683b      	ldr	r3, [r7, #0]
 80108e0:	429a      	cmp	r2, r3
 80108e2:	d206      	bcs.n	80108f2 <prvInsertTimerInActiveList+0x62>
 80108e4:	68ba      	ldr	r2, [r7, #8]
 80108e6:	683b      	ldr	r3, [r7, #0]
 80108e8:	429a      	cmp	r2, r3
 80108ea:	d302      	bcc.n	80108f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80108ec:	2301      	movs	r3, #1
 80108ee:	617b      	str	r3, [r7, #20]
 80108f0:	e007      	b.n	8010902 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80108f2:	4b07      	ldr	r3, [pc, #28]	; (8010910 <prvInsertTimerInActiveList+0x80>)
 80108f4:	681a      	ldr	r2, [r3, #0]
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	3304      	adds	r3, #4
 80108fa:	4619      	mov	r1, r3
 80108fc:	4610      	mov	r0, r2
 80108fe:	f7fd fea7 	bl	800e650 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010902:	697b      	ldr	r3, [r7, #20]
}
 8010904:	4618      	mov	r0, r3
 8010906:	3718      	adds	r7, #24
 8010908:	46bd      	mov	sp, r7
 801090a:	bd80      	pop	{r7, pc}
 801090c:	20000eb4 	.word	0x20000eb4
 8010910:	20000eb0 	.word	0x20000eb0

08010914 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b08e      	sub	sp, #56	; 0x38
 8010918:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801091a:	e09d      	b.n	8010a58 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2b00      	cmp	r3, #0
 8010920:	da18      	bge.n	8010954 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010922:	1d3b      	adds	r3, r7, #4
 8010924:	3304      	adds	r3, #4
 8010926:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801092a:	2b00      	cmp	r3, #0
 801092c:	d10a      	bne.n	8010944 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801092e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010932:	f383 8811 	msr	BASEPRI, r3
 8010936:	f3bf 8f6f 	isb	sy
 801093a:	f3bf 8f4f 	dsb	sy
 801093e:	61fb      	str	r3, [r7, #28]
}
 8010940:	bf00      	nop
 8010942:	e7fe      	b.n	8010942 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801094a:	6850      	ldr	r0, [r2, #4]
 801094c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801094e:	6892      	ldr	r2, [r2, #8]
 8010950:	4611      	mov	r1, r2
 8010952:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	2b00      	cmp	r3, #0
 8010958:	db7d      	blt.n	8010a56 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801095e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010960:	695b      	ldr	r3, [r3, #20]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d004      	beq.n	8010970 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010968:	3304      	adds	r3, #4
 801096a:	4618      	mov	r0, r3
 801096c:	f7fd fea8 	bl	800e6c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010970:	463b      	mov	r3, r7
 8010972:	4618      	mov	r0, r3
 8010974:	f7ff ff6c 	bl	8010850 <prvSampleTimeNow>
 8010978:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	2b09      	cmp	r3, #9
 801097e:	d86b      	bhi.n	8010a58 <prvProcessReceivedCommands+0x144>
 8010980:	a201      	add	r2, pc, #4	; (adr r2, 8010988 <prvProcessReceivedCommands+0x74>)
 8010982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010986:	bf00      	nop
 8010988:	080109b1 	.word	0x080109b1
 801098c:	080109b1 	.word	0x080109b1
 8010990:	080109b1 	.word	0x080109b1
 8010994:	08010a59 	.word	0x08010a59
 8010998:	08010a0d 	.word	0x08010a0d
 801099c:	08010a45 	.word	0x08010a45
 80109a0:	080109b1 	.word	0x080109b1
 80109a4:	080109b1 	.word	0x080109b1
 80109a8:	08010a59 	.word	0x08010a59
 80109ac:	08010a0d 	.word	0x08010a0d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80109b0:	68ba      	ldr	r2, [r7, #8]
 80109b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109b4:	699b      	ldr	r3, [r3, #24]
 80109b6:	18d1      	adds	r1, r2, r3
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109be:	f7ff ff67 	bl	8010890 <prvInsertTimerInActiveList>
 80109c2:	4603      	mov	r3, r0
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d047      	beq.n	8010a58 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80109c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109ce:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80109d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109d2:	69db      	ldr	r3, [r3, #28]
 80109d4:	2b01      	cmp	r3, #1
 80109d6:	d13f      	bne.n	8010a58 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80109d8:	68ba      	ldr	r2, [r7, #8]
 80109da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109dc:	699b      	ldr	r3, [r3, #24]
 80109de:	441a      	add	r2, r3
 80109e0:	2300      	movs	r3, #0
 80109e2:	9300      	str	r3, [sp, #0]
 80109e4:	2300      	movs	r3, #0
 80109e6:	2100      	movs	r1, #0
 80109e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109ea:	f7ff fe1f 	bl	801062c <xTimerGenericCommand>
 80109ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80109f0:	6a3b      	ldr	r3, [r7, #32]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d130      	bne.n	8010a58 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80109f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109fa:	f383 8811 	msr	BASEPRI, r3
 80109fe:	f3bf 8f6f 	isb	sy
 8010a02:	f3bf 8f4f 	dsb	sy
 8010a06:	61bb      	str	r3, [r7, #24]
}
 8010a08:	bf00      	nop
 8010a0a:	e7fe      	b.n	8010a0a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010a0c:	68ba      	ldr	r2, [r7, #8]
 8010a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a10:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a14:	699b      	ldr	r3, [r3, #24]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d10a      	bne.n	8010a30 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8010a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a1e:	f383 8811 	msr	BASEPRI, r3
 8010a22:	f3bf 8f6f 	isb	sy
 8010a26:	f3bf 8f4f 	dsb	sy
 8010a2a:	617b      	str	r3, [r7, #20]
}
 8010a2c:	bf00      	nop
 8010a2e:	e7fe      	b.n	8010a2e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a32:	699a      	ldr	r2, [r3, #24]
 8010a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a36:	18d1      	adds	r1, r2, r3
 8010a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a3e:	f7ff ff27 	bl	8010890 <prvInsertTimerInActiveList>
					break;
 8010a42:	e009      	b.n	8010a58 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d104      	bne.n	8010a58 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8010a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a50:	f000 fb68 	bl	8011124 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010a54:	e000      	b.n	8010a58 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010a56:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010a58:	4b07      	ldr	r3, [pc, #28]	; (8010a78 <prvProcessReceivedCommands+0x164>)
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	1d39      	adds	r1, r7, #4
 8010a5e:	2200      	movs	r2, #0
 8010a60:	4618      	mov	r0, r3
 8010a62:	f7fe f97d 	bl	800ed60 <xQueueReceive>
 8010a66:	4603      	mov	r3, r0
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	f47f af57 	bne.w	801091c <prvProcessReceivedCommands+0x8>
	}
}
 8010a6e:	bf00      	nop
 8010a70:	bf00      	nop
 8010a72:	3730      	adds	r7, #48	; 0x30
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}
 8010a78:	20000eb8 	.word	0x20000eb8

08010a7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b088      	sub	sp, #32
 8010a80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010a82:	e045      	b.n	8010b10 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010a84:	4b2c      	ldr	r3, [pc, #176]	; (8010b38 <prvSwitchTimerLists+0xbc>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	68db      	ldr	r3, [r3, #12]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010a8e:	4b2a      	ldr	r3, [pc, #168]	; (8010b38 <prvSwitchTimerLists+0xbc>)
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	68db      	ldr	r3, [r3, #12]
 8010a94:	68db      	ldr	r3, [r3, #12]
 8010a96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	3304      	adds	r3, #4
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f7fd fe0f 	bl	800e6c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010aa6:	68f8      	ldr	r0, [r7, #12]
 8010aa8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	69db      	ldr	r3, [r3, #28]
 8010aae:	2b01      	cmp	r3, #1
 8010ab0:	d12e      	bne.n	8010b10 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	699b      	ldr	r3, [r3, #24]
 8010ab6:	693a      	ldr	r2, [r7, #16]
 8010ab8:	4413      	add	r3, r2
 8010aba:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010abc:	68ba      	ldr	r2, [r7, #8]
 8010abe:	693b      	ldr	r3, [r7, #16]
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d90e      	bls.n	8010ae2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	68ba      	ldr	r2, [r7, #8]
 8010ac8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	68fa      	ldr	r2, [r7, #12]
 8010ace:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010ad0:	4b19      	ldr	r3, [pc, #100]	; (8010b38 <prvSwitchTimerLists+0xbc>)
 8010ad2:	681a      	ldr	r2, [r3, #0]
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	3304      	adds	r3, #4
 8010ad8:	4619      	mov	r1, r3
 8010ada:	4610      	mov	r0, r2
 8010adc:	f7fd fdb8 	bl	800e650 <vListInsert>
 8010ae0:	e016      	b.n	8010b10 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	9300      	str	r3, [sp, #0]
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	693a      	ldr	r2, [r7, #16]
 8010aea:	2100      	movs	r1, #0
 8010aec:	68f8      	ldr	r0, [r7, #12]
 8010aee:	f7ff fd9d 	bl	801062c <xTimerGenericCommand>
 8010af2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d10a      	bne.n	8010b10 <prvSwitchTimerLists+0x94>
	__asm volatile
 8010afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010afe:	f383 8811 	msr	BASEPRI, r3
 8010b02:	f3bf 8f6f 	isb	sy
 8010b06:	f3bf 8f4f 	dsb	sy
 8010b0a:	603b      	str	r3, [r7, #0]
}
 8010b0c:	bf00      	nop
 8010b0e:	e7fe      	b.n	8010b0e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010b10:	4b09      	ldr	r3, [pc, #36]	; (8010b38 <prvSwitchTimerLists+0xbc>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d1b4      	bne.n	8010a84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010b1a:	4b07      	ldr	r3, [pc, #28]	; (8010b38 <prvSwitchTimerLists+0xbc>)
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010b20:	4b06      	ldr	r3, [pc, #24]	; (8010b3c <prvSwitchTimerLists+0xc0>)
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	4a04      	ldr	r2, [pc, #16]	; (8010b38 <prvSwitchTimerLists+0xbc>)
 8010b26:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010b28:	4a04      	ldr	r2, [pc, #16]	; (8010b3c <prvSwitchTimerLists+0xc0>)
 8010b2a:	697b      	ldr	r3, [r7, #20]
 8010b2c:	6013      	str	r3, [r2, #0]
}
 8010b2e:	bf00      	nop
 8010b30:	3718      	adds	r7, #24
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}
 8010b36:	bf00      	nop
 8010b38:	20000eb0 	.word	0x20000eb0
 8010b3c:	20000eb4 	.word	0x20000eb4

08010b40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b082      	sub	sp, #8
 8010b44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010b46:	f000 f929 	bl	8010d9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010b4a:	4b15      	ldr	r3, [pc, #84]	; (8010ba0 <prvCheckForValidListAndQueue+0x60>)
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d120      	bne.n	8010b94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010b52:	4814      	ldr	r0, [pc, #80]	; (8010ba4 <prvCheckForValidListAndQueue+0x64>)
 8010b54:	f7fd fd2e 	bl	800e5b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010b58:	4813      	ldr	r0, [pc, #76]	; (8010ba8 <prvCheckForValidListAndQueue+0x68>)
 8010b5a:	f7fd fd2b 	bl	800e5b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010b5e:	4b13      	ldr	r3, [pc, #76]	; (8010bac <prvCheckForValidListAndQueue+0x6c>)
 8010b60:	4a10      	ldr	r2, [pc, #64]	; (8010ba4 <prvCheckForValidListAndQueue+0x64>)
 8010b62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010b64:	4b12      	ldr	r3, [pc, #72]	; (8010bb0 <prvCheckForValidListAndQueue+0x70>)
 8010b66:	4a10      	ldr	r2, [pc, #64]	; (8010ba8 <prvCheckForValidListAndQueue+0x68>)
 8010b68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	9300      	str	r3, [sp, #0]
 8010b6e:	4b11      	ldr	r3, [pc, #68]	; (8010bb4 <prvCheckForValidListAndQueue+0x74>)
 8010b70:	4a11      	ldr	r2, [pc, #68]	; (8010bb8 <prvCheckForValidListAndQueue+0x78>)
 8010b72:	2110      	movs	r1, #16
 8010b74:	200a      	movs	r0, #10
 8010b76:	f7fd fe35 	bl	800e7e4 <xQueueGenericCreateStatic>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	4a08      	ldr	r2, [pc, #32]	; (8010ba0 <prvCheckForValidListAndQueue+0x60>)
 8010b7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010b80:	4b07      	ldr	r3, [pc, #28]	; (8010ba0 <prvCheckForValidListAndQueue+0x60>)
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d005      	beq.n	8010b94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010b88:	4b05      	ldr	r3, [pc, #20]	; (8010ba0 <prvCheckForValidListAndQueue+0x60>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	490b      	ldr	r1, [pc, #44]	; (8010bbc <prvCheckForValidListAndQueue+0x7c>)
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f7fe fc7a 	bl	800f488 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010b94:	f000 f932 	bl	8010dfc <vPortExitCritical>
}
 8010b98:	bf00      	nop
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}
 8010b9e:	bf00      	nop
 8010ba0:	20000eb8 	.word	0x20000eb8
 8010ba4:	20000e88 	.word	0x20000e88
 8010ba8:	20000e9c 	.word	0x20000e9c
 8010bac:	20000eb0 	.word	0x20000eb0
 8010bb0:	20000eb4 	.word	0x20000eb4
 8010bb4:	20000f64 	.word	0x20000f64
 8010bb8:	20000ec4 	.word	0x20000ec4
 8010bbc:	080127d4 	.word	0x080127d4

08010bc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010bc0:	b480      	push	{r7}
 8010bc2:	b085      	sub	sp, #20
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	60f8      	str	r0, [r7, #12]
 8010bc8:	60b9      	str	r1, [r7, #8]
 8010bca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	3b04      	subs	r3, #4
 8010bd0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010bd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	3b04      	subs	r3, #4
 8010bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	f023 0201 	bic.w	r2, r3, #1
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	3b04      	subs	r3, #4
 8010bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010bf0:	4a08      	ldr	r2, [pc, #32]	; (8010c14 <pxPortInitialiseStack+0x54>)
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	3b14      	subs	r3, #20
 8010bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010bfc:	687a      	ldr	r2, [r7, #4]
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	3b20      	subs	r3, #32
 8010c06:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010c08:	68fb      	ldr	r3, [r7, #12]
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	3714      	adds	r7, #20
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bc80      	pop	{r7}
 8010c12:	4770      	bx	lr
 8010c14:	08010c19 	.word	0x08010c19

08010c18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010c18:	b480      	push	{r7}
 8010c1a:	b085      	sub	sp, #20
 8010c1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010c22:	4b12      	ldr	r3, [pc, #72]	; (8010c6c <prvTaskExitError+0x54>)
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c2a:	d00a      	beq.n	8010c42 <prvTaskExitError+0x2a>
	__asm volatile
 8010c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c30:	f383 8811 	msr	BASEPRI, r3
 8010c34:	f3bf 8f6f 	isb	sy
 8010c38:	f3bf 8f4f 	dsb	sy
 8010c3c:	60fb      	str	r3, [r7, #12]
}
 8010c3e:	bf00      	nop
 8010c40:	e7fe      	b.n	8010c40 <prvTaskExitError+0x28>
	__asm volatile
 8010c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c46:	f383 8811 	msr	BASEPRI, r3
 8010c4a:	f3bf 8f6f 	isb	sy
 8010c4e:	f3bf 8f4f 	dsb	sy
 8010c52:	60bb      	str	r3, [r7, #8]
}
 8010c54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010c56:	bf00      	nop
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d0fc      	beq.n	8010c58 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010c5e:	bf00      	nop
 8010c60:	bf00      	nop
 8010c62:	3714      	adds	r7, #20
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bc80      	pop	{r7}
 8010c68:	4770      	bx	lr
 8010c6a:	bf00      	nop
 8010c6c:	20000148 	.word	0x20000148

08010c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010c70:	4b07      	ldr	r3, [pc, #28]	; (8010c90 <pxCurrentTCBConst2>)
 8010c72:	6819      	ldr	r1, [r3, #0]
 8010c74:	6808      	ldr	r0, [r1, #0]
 8010c76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010c7a:	f380 8809 	msr	PSP, r0
 8010c7e:	f3bf 8f6f 	isb	sy
 8010c82:	f04f 0000 	mov.w	r0, #0
 8010c86:	f380 8811 	msr	BASEPRI, r0
 8010c8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8010c8e:	4770      	bx	lr

08010c90 <pxCurrentTCBConst2>:
 8010c90:	20000988 	.word	0x20000988
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010c94:	bf00      	nop
 8010c96:	bf00      	nop

08010c98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8010c98:	4806      	ldr	r0, [pc, #24]	; (8010cb4 <prvPortStartFirstTask+0x1c>)
 8010c9a:	6800      	ldr	r0, [r0, #0]
 8010c9c:	6800      	ldr	r0, [r0, #0]
 8010c9e:	f380 8808 	msr	MSP, r0
 8010ca2:	b662      	cpsie	i
 8010ca4:	b661      	cpsie	f
 8010ca6:	f3bf 8f4f 	dsb	sy
 8010caa:	f3bf 8f6f 	isb	sy
 8010cae:	df00      	svc	0
 8010cb0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010cb2:	bf00      	nop
 8010cb4:	e000ed08 	.word	0xe000ed08

08010cb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b084      	sub	sp, #16
 8010cbc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010cbe:	4b32      	ldr	r3, [pc, #200]	; (8010d88 <xPortStartScheduler+0xd0>)
 8010cc0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	781b      	ldrb	r3, [r3, #0]
 8010cc6:	b2db      	uxtb	r3, r3
 8010cc8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	22ff      	movs	r2, #255	; 0xff
 8010cce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	781b      	ldrb	r3, [r3, #0]
 8010cd4:	b2db      	uxtb	r3, r3
 8010cd6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010cd8:	78fb      	ldrb	r3, [r7, #3]
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010ce0:	b2da      	uxtb	r2, r3
 8010ce2:	4b2a      	ldr	r3, [pc, #168]	; (8010d8c <xPortStartScheduler+0xd4>)
 8010ce4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010ce6:	4b2a      	ldr	r3, [pc, #168]	; (8010d90 <xPortStartScheduler+0xd8>)
 8010ce8:	2207      	movs	r2, #7
 8010cea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010cec:	e009      	b.n	8010d02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010cee:	4b28      	ldr	r3, [pc, #160]	; (8010d90 <xPortStartScheduler+0xd8>)
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	3b01      	subs	r3, #1
 8010cf4:	4a26      	ldr	r2, [pc, #152]	; (8010d90 <xPortStartScheduler+0xd8>)
 8010cf6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010cf8:	78fb      	ldrb	r3, [r7, #3]
 8010cfa:	b2db      	uxtb	r3, r3
 8010cfc:	005b      	lsls	r3, r3, #1
 8010cfe:	b2db      	uxtb	r3, r3
 8010d00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010d02:	78fb      	ldrb	r3, [r7, #3]
 8010d04:	b2db      	uxtb	r3, r3
 8010d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d0a:	2b80      	cmp	r3, #128	; 0x80
 8010d0c:	d0ef      	beq.n	8010cee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010d0e:	4b20      	ldr	r3, [pc, #128]	; (8010d90 <xPortStartScheduler+0xd8>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	f1c3 0307 	rsb	r3, r3, #7
 8010d16:	2b04      	cmp	r3, #4
 8010d18:	d00a      	beq.n	8010d30 <xPortStartScheduler+0x78>
	__asm volatile
 8010d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d1e:	f383 8811 	msr	BASEPRI, r3
 8010d22:	f3bf 8f6f 	isb	sy
 8010d26:	f3bf 8f4f 	dsb	sy
 8010d2a:	60bb      	str	r3, [r7, #8]
}
 8010d2c:	bf00      	nop
 8010d2e:	e7fe      	b.n	8010d2e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010d30:	4b17      	ldr	r3, [pc, #92]	; (8010d90 <xPortStartScheduler+0xd8>)
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	021b      	lsls	r3, r3, #8
 8010d36:	4a16      	ldr	r2, [pc, #88]	; (8010d90 <xPortStartScheduler+0xd8>)
 8010d38:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010d3a:	4b15      	ldr	r3, [pc, #84]	; (8010d90 <xPortStartScheduler+0xd8>)
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010d42:	4a13      	ldr	r2, [pc, #76]	; (8010d90 <xPortStartScheduler+0xd8>)
 8010d44:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	b2da      	uxtb	r2, r3
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010d4e:	4b11      	ldr	r3, [pc, #68]	; (8010d94 <xPortStartScheduler+0xdc>)
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	4a10      	ldr	r2, [pc, #64]	; (8010d94 <xPortStartScheduler+0xdc>)
 8010d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010d58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010d5a:	4b0e      	ldr	r3, [pc, #56]	; (8010d94 <xPortStartScheduler+0xdc>)
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	4a0d      	ldr	r2, [pc, #52]	; (8010d94 <xPortStartScheduler+0xdc>)
 8010d60:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010d64:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010d66:	f000 f8b9 	bl	8010edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010d6a:	4b0b      	ldr	r3, [pc, #44]	; (8010d98 <xPortStartScheduler+0xe0>)
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010d70:	f7ff ff92 	bl	8010c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010d74:	f7fe ffb0 	bl	800fcd8 <vTaskSwitchContext>
	prvTaskExitError();
 8010d78:	f7ff ff4e 	bl	8010c18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010d7c:	2300      	movs	r3, #0
}
 8010d7e:	4618      	mov	r0, r3
 8010d80:	3710      	adds	r7, #16
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd80      	pop	{r7, pc}
 8010d86:	bf00      	nop
 8010d88:	e000e400 	.word	0xe000e400
 8010d8c:	20000fb4 	.word	0x20000fb4
 8010d90:	20000fb8 	.word	0x20000fb8
 8010d94:	e000ed20 	.word	0xe000ed20
 8010d98:	20000148 	.word	0x20000148

08010d9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010d9c:	b480      	push	{r7}
 8010d9e:	b083      	sub	sp, #12
 8010da0:	af00      	add	r7, sp, #0
	__asm volatile
 8010da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010da6:	f383 8811 	msr	BASEPRI, r3
 8010daa:	f3bf 8f6f 	isb	sy
 8010dae:	f3bf 8f4f 	dsb	sy
 8010db2:	607b      	str	r3, [r7, #4]
}
 8010db4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010db6:	4b0f      	ldr	r3, [pc, #60]	; (8010df4 <vPortEnterCritical+0x58>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	3301      	adds	r3, #1
 8010dbc:	4a0d      	ldr	r2, [pc, #52]	; (8010df4 <vPortEnterCritical+0x58>)
 8010dbe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010dc0:	4b0c      	ldr	r3, [pc, #48]	; (8010df4 <vPortEnterCritical+0x58>)
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	2b01      	cmp	r3, #1
 8010dc6:	d10f      	bne.n	8010de8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010dc8:	4b0b      	ldr	r3, [pc, #44]	; (8010df8 <vPortEnterCritical+0x5c>)
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	b2db      	uxtb	r3, r3
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d00a      	beq.n	8010de8 <vPortEnterCritical+0x4c>
	__asm volatile
 8010dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd6:	f383 8811 	msr	BASEPRI, r3
 8010dda:	f3bf 8f6f 	isb	sy
 8010dde:	f3bf 8f4f 	dsb	sy
 8010de2:	603b      	str	r3, [r7, #0]
}
 8010de4:	bf00      	nop
 8010de6:	e7fe      	b.n	8010de6 <vPortEnterCritical+0x4a>
	}
}
 8010de8:	bf00      	nop
 8010dea:	370c      	adds	r7, #12
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bc80      	pop	{r7}
 8010df0:	4770      	bx	lr
 8010df2:	bf00      	nop
 8010df4:	20000148 	.word	0x20000148
 8010df8:	e000ed04 	.word	0xe000ed04

08010dfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010dfc:	b480      	push	{r7}
 8010dfe:	b083      	sub	sp, #12
 8010e00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010e02:	4b11      	ldr	r3, [pc, #68]	; (8010e48 <vPortExitCritical+0x4c>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d10a      	bne.n	8010e20 <vPortExitCritical+0x24>
	__asm volatile
 8010e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e0e:	f383 8811 	msr	BASEPRI, r3
 8010e12:	f3bf 8f6f 	isb	sy
 8010e16:	f3bf 8f4f 	dsb	sy
 8010e1a:	607b      	str	r3, [r7, #4]
}
 8010e1c:	bf00      	nop
 8010e1e:	e7fe      	b.n	8010e1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010e20:	4b09      	ldr	r3, [pc, #36]	; (8010e48 <vPortExitCritical+0x4c>)
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	3b01      	subs	r3, #1
 8010e26:	4a08      	ldr	r2, [pc, #32]	; (8010e48 <vPortExitCritical+0x4c>)
 8010e28:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010e2a:	4b07      	ldr	r3, [pc, #28]	; (8010e48 <vPortExitCritical+0x4c>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d105      	bne.n	8010e3e <vPortExitCritical+0x42>
 8010e32:	2300      	movs	r3, #0
 8010e34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010e36:	683b      	ldr	r3, [r7, #0]
 8010e38:	f383 8811 	msr	BASEPRI, r3
}
 8010e3c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010e3e:	bf00      	nop
 8010e40:	370c      	adds	r7, #12
 8010e42:	46bd      	mov	sp, r7
 8010e44:	bc80      	pop	{r7}
 8010e46:	4770      	bx	lr
 8010e48:	20000148 	.word	0x20000148
 8010e4c:	00000000 	.word	0x00000000

08010e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010e50:	f3ef 8009 	mrs	r0, PSP
 8010e54:	f3bf 8f6f 	isb	sy
 8010e58:	4b0d      	ldr	r3, [pc, #52]	; (8010e90 <pxCurrentTCBConst>)
 8010e5a:	681a      	ldr	r2, [r3, #0]
 8010e5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010e60:	6010      	str	r0, [r2, #0]
 8010e62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8010e66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010e6a:	f380 8811 	msr	BASEPRI, r0
 8010e6e:	f7fe ff33 	bl	800fcd8 <vTaskSwitchContext>
 8010e72:	f04f 0000 	mov.w	r0, #0
 8010e76:	f380 8811 	msr	BASEPRI, r0
 8010e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010e7e:	6819      	ldr	r1, [r3, #0]
 8010e80:	6808      	ldr	r0, [r1, #0]
 8010e82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010e86:	f380 8809 	msr	PSP, r0
 8010e8a:	f3bf 8f6f 	isb	sy
 8010e8e:	4770      	bx	lr

08010e90 <pxCurrentTCBConst>:
 8010e90:	20000988 	.word	0x20000988
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010e94:	bf00      	nop
 8010e96:	bf00      	nop

08010e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b082      	sub	sp, #8
 8010e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8010e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ea2:	f383 8811 	msr	BASEPRI, r3
 8010ea6:	f3bf 8f6f 	isb	sy
 8010eaa:	f3bf 8f4f 	dsb	sy
 8010eae:	607b      	str	r3, [r7, #4]
}
 8010eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010eb2:	f7fe fe53 	bl	800fb5c <xTaskIncrementTick>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d003      	beq.n	8010ec4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010ebc:	4b06      	ldr	r3, [pc, #24]	; (8010ed8 <SysTick_Handler+0x40>)
 8010ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ec2:	601a      	str	r2, [r3, #0]
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010ec8:	683b      	ldr	r3, [r7, #0]
 8010eca:	f383 8811 	msr	BASEPRI, r3
}
 8010ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010ed0:	bf00      	nop
 8010ed2:	3708      	adds	r7, #8
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bd80      	pop	{r7, pc}
 8010ed8:	e000ed04 	.word	0xe000ed04

08010edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010edc:	b480      	push	{r7}
 8010ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010ee0:	4b0a      	ldr	r3, [pc, #40]	; (8010f0c <vPortSetupTimerInterrupt+0x30>)
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010ee6:	4b0a      	ldr	r3, [pc, #40]	; (8010f10 <vPortSetupTimerInterrupt+0x34>)
 8010ee8:	2200      	movs	r2, #0
 8010eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010eec:	4b09      	ldr	r3, [pc, #36]	; (8010f14 <vPortSetupTimerInterrupt+0x38>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	4a09      	ldr	r2, [pc, #36]	; (8010f18 <vPortSetupTimerInterrupt+0x3c>)
 8010ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8010ef6:	099b      	lsrs	r3, r3, #6
 8010ef8:	4a08      	ldr	r2, [pc, #32]	; (8010f1c <vPortSetupTimerInterrupt+0x40>)
 8010efa:	3b01      	subs	r3, #1
 8010efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010efe:	4b03      	ldr	r3, [pc, #12]	; (8010f0c <vPortSetupTimerInterrupt+0x30>)
 8010f00:	2207      	movs	r2, #7
 8010f02:	601a      	str	r2, [r3, #0]
}
 8010f04:	bf00      	nop
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bc80      	pop	{r7}
 8010f0a:	4770      	bx	lr
 8010f0c:	e000e010 	.word	0xe000e010
 8010f10:	e000e018 	.word	0xe000e018
 8010f14:	20000138 	.word	0x20000138
 8010f18:	10624dd3 	.word	0x10624dd3
 8010f1c:	e000e014 	.word	0xe000e014

08010f20 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010f20:	b480      	push	{r7}
 8010f22:	b085      	sub	sp, #20
 8010f24:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010f26:	f3ef 8305 	mrs	r3, IPSR
 8010f2a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	2b0f      	cmp	r3, #15
 8010f30:	d914      	bls.n	8010f5c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010f32:	4a16      	ldr	r2, [pc, #88]	; (8010f8c <vPortValidateInterruptPriority+0x6c>)
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	4413      	add	r3, r2
 8010f38:	781b      	ldrb	r3, [r3, #0]
 8010f3a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010f3c:	4b14      	ldr	r3, [pc, #80]	; (8010f90 <vPortValidateInterruptPriority+0x70>)
 8010f3e:	781b      	ldrb	r3, [r3, #0]
 8010f40:	7afa      	ldrb	r2, [r7, #11]
 8010f42:	429a      	cmp	r2, r3
 8010f44:	d20a      	bcs.n	8010f5c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f4a:	f383 8811 	msr	BASEPRI, r3
 8010f4e:	f3bf 8f6f 	isb	sy
 8010f52:	f3bf 8f4f 	dsb	sy
 8010f56:	607b      	str	r3, [r7, #4]
}
 8010f58:	bf00      	nop
 8010f5a:	e7fe      	b.n	8010f5a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010f5c:	4b0d      	ldr	r3, [pc, #52]	; (8010f94 <vPortValidateInterruptPriority+0x74>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010f64:	4b0c      	ldr	r3, [pc, #48]	; (8010f98 <vPortValidateInterruptPriority+0x78>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	429a      	cmp	r2, r3
 8010f6a:	d90a      	bls.n	8010f82 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f70:	f383 8811 	msr	BASEPRI, r3
 8010f74:	f3bf 8f6f 	isb	sy
 8010f78:	f3bf 8f4f 	dsb	sy
 8010f7c:	603b      	str	r3, [r7, #0]
}
 8010f7e:	bf00      	nop
 8010f80:	e7fe      	b.n	8010f80 <vPortValidateInterruptPriority+0x60>
	}
 8010f82:	bf00      	nop
 8010f84:	3714      	adds	r7, #20
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bc80      	pop	{r7}
 8010f8a:	4770      	bx	lr
 8010f8c:	e000e3f0 	.word	0xe000e3f0
 8010f90:	20000fb4 	.word	0x20000fb4
 8010f94:	e000ed0c 	.word	0xe000ed0c
 8010f98:	20000fb8 	.word	0x20000fb8

08010f9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b08a      	sub	sp, #40	; 0x28
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010fa8:	f7fe fd1e 	bl	800f9e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010fac:	4b58      	ldr	r3, [pc, #352]	; (8011110 <pvPortMalloc+0x174>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d101      	bne.n	8010fb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010fb4:	f000 f910 	bl	80111d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010fb8:	4b56      	ldr	r3, [pc, #344]	; (8011114 <pvPortMalloc+0x178>)
 8010fba:	681a      	ldr	r2, [r3, #0]
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	4013      	ands	r3, r2
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	f040 808e 	bne.w	80110e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d01d      	beq.n	8011008 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010fcc:	2208      	movs	r2, #8
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	4413      	add	r3, r2
 8010fd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	f003 0307 	and.w	r3, r3, #7
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d014      	beq.n	8011008 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	f023 0307 	bic.w	r3, r3, #7
 8010fe4:	3308      	adds	r3, #8
 8010fe6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f003 0307 	and.w	r3, r3, #7
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d00a      	beq.n	8011008 <pvPortMalloc+0x6c>
	__asm volatile
 8010ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ff6:	f383 8811 	msr	BASEPRI, r3
 8010ffa:	f3bf 8f6f 	isb	sy
 8010ffe:	f3bf 8f4f 	dsb	sy
 8011002:	617b      	str	r3, [r7, #20]
}
 8011004:	bf00      	nop
 8011006:	e7fe      	b.n	8011006 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d069      	beq.n	80110e2 <pvPortMalloc+0x146>
 801100e:	4b42      	ldr	r3, [pc, #264]	; (8011118 <pvPortMalloc+0x17c>)
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	687a      	ldr	r2, [r7, #4]
 8011014:	429a      	cmp	r2, r3
 8011016:	d864      	bhi.n	80110e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011018:	4b40      	ldr	r3, [pc, #256]	; (801111c <pvPortMalloc+0x180>)
 801101a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801101c:	4b3f      	ldr	r3, [pc, #252]	; (801111c <pvPortMalloc+0x180>)
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011022:	e004      	b.n	801102e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011026:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011030:	685b      	ldr	r3, [r3, #4]
 8011032:	687a      	ldr	r2, [r7, #4]
 8011034:	429a      	cmp	r2, r3
 8011036:	d903      	bls.n	8011040 <pvPortMalloc+0xa4>
 8011038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d1f1      	bne.n	8011024 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011040:	4b33      	ldr	r3, [pc, #204]	; (8011110 <pvPortMalloc+0x174>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011046:	429a      	cmp	r2, r3
 8011048:	d04b      	beq.n	80110e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801104a:	6a3b      	ldr	r3, [r7, #32]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	2208      	movs	r2, #8
 8011050:	4413      	add	r3, r2
 8011052:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011056:	681a      	ldr	r2, [r3, #0]
 8011058:	6a3b      	ldr	r3, [r7, #32]
 801105a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801105e:	685a      	ldr	r2, [r3, #4]
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	1ad2      	subs	r2, r2, r3
 8011064:	2308      	movs	r3, #8
 8011066:	005b      	lsls	r3, r3, #1
 8011068:	429a      	cmp	r2, r3
 801106a:	d91f      	bls.n	80110ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801106c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	4413      	add	r3, r2
 8011072:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011074:	69bb      	ldr	r3, [r7, #24]
 8011076:	f003 0307 	and.w	r3, r3, #7
 801107a:	2b00      	cmp	r3, #0
 801107c:	d00a      	beq.n	8011094 <pvPortMalloc+0xf8>
	__asm volatile
 801107e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011082:	f383 8811 	msr	BASEPRI, r3
 8011086:	f3bf 8f6f 	isb	sy
 801108a:	f3bf 8f4f 	dsb	sy
 801108e:	613b      	str	r3, [r7, #16]
}
 8011090:	bf00      	nop
 8011092:	e7fe      	b.n	8011092 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011096:	685a      	ldr	r2, [r3, #4]
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	1ad2      	subs	r2, r2, r3
 801109c:	69bb      	ldr	r3, [r7, #24]
 801109e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80110a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a2:	687a      	ldr	r2, [r7, #4]
 80110a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80110a6:	69b8      	ldr	r0, [r7, #24]
 80110a8:	f000 f8f8 	bl	801129c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80110ac:	4b1a      	ldr	r3, [pc, #104]	; (8011118 <pvPortMalloc+0x17c>)
 80110ae:	681a      	ldr	r2, [r3, #0]
 80110b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	1ad3      	subs	r3, r2, r3
 80110b6:	4a18      	ldr	r2, [pc, #96]	; (8011118 <pvPortMalloc+0x17c>)
 80110b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80110ba:	4b17      	ldr	r3, [pc, #92]	; (8011118 <pvPortMalloc+0x17c>)
 80110bc:	681a      	ldr	r2, [r3, #0]
 80110be:	4b18      	ldr	r3, [pc, #96]	; (8011120 <pvPortMalloc+0x184>)
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	429a      	cmp	r2, r3
 80110c4:	d203      	bcs.n	80110ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80110c6:	4b14      	ldr	r3, [pc, #80]	; (8011118 <pvPortMalloc+0x17c>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	4a15      	ldr	r2, [pc, #84]	; (8011120 <pvPortMalloc+0x184>)
 80110cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80110ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d0:	685a      	ldr	r2, [r3, #4]
 80110d2:	4b10      	ldr	r3, [pc, #64]	; (8011114 <pvPortMalloc+0x178>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	431a      	orrs	r2, r3
 80110d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80110dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110de:	2200      	movs	r2, #0
 80110e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80110e2:	f7fe fc8f 	bl	800fa04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80110e6:	69fb      	ldr	r3, [r7, #28]
 80110e8:	f003 0307 	and.w	r3, r3, #7
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d00a      	beq.n	8011106 <pvPortMalloc+0x16a>
	__asm volatile
 80110f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110f4:	f383 8811 	msr	BASEPRI, r3
 80110f8:	f3bf 8f6f 	isb	sy
 80110fc:	f3bf 8f4f 	dsb	sy
 8011100:	60fb      	str	r3, [r7, #12]
}
 8011102:	bf00      	nop
 8011104:	e7fe      	b.n	8011104 <pvPortMalloc+0x168>
	return pvReturn;
 8011106:	69fb      	ldr	r3, [r7, #28]
}
 8011108:	4618      	mov	r0, r3
 801110a:	3728      	adds	r7, #40	; 0x28
 801110c:	46bd      	mov	sp, r7
 801110e:	bd80      	pop	{r7, pc}
 8011110:	20001bc4 	.word	0x20001bc4
 8011114:	20001bd0 	.word	0x20001bd0
 8011118:	20001bc8 	.word	0x20001bc8
 801111c:	20001bbc 	.word	0x20001bbc
 8011120:	20001bcc 	.word	0x20001bcc

08011124 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b086      	sub	sp, #24
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d048      	beq.n	80111c8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011136:	2308      	movs	r3, #8
 8011138:	425b      	negs	r3, r3
 801113a:	697a      	ldr	r2, [r7, #20]
 801113c:	4413      	add	r3, r2
 801113e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011140:	697b      	ldr	r3, [r7, #20]
 8011142:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011144:	693b      	ldr	r3, [r7, #16]
 8011146:	685a      	ldr	r2, [r3, #4]
 8011148:	4b21      	ldr	r3, [pc, #132]	; (80111d0 <vPortFree+0xac>)
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	4013      	ands	r3, r2
 801114e:	2b00      	cmp	r3, #0
 8011150:	d10a      	bne.n	8011168 <vPortFree+0x44>
	__asm volatile
 8011152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011156:	f383 8811 	msr	BASEPRI, r3
 801115a:	f3bf 8f6f 	isb	sy
 801115e:	f3bf 8f4f 	dsb	sy
 8011162:	60fb      	str	r3, [r7, #12]
}
 8011164:	bf00      	nop
 8011166:	e7fe      	b.n	8011166 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011168:	693b      	ldr	r3, [r7, #16]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d00a      	beq.n	8011186 <vPortFree+0x62>
	__asm volatile
 8011170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011174:	f383 8811 	msr	BASEPRI, r3
 8011178:	f3bf 8f6f 	isb	sy
 801117c:	f3bf 8f4f 	dsb	sy
 8011180:	60bb      	str	r3, [r7, #8]
}
 8011182:	bf00      	nop
 8011184:	e7fe      	b.n	8011184 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011186:	693b      	ldr	r3, [r7, #16]
 8011188:	685a      	ldr	r2, [r3, #4]
 801118a:	4b11      	ldr	r3, [pc, #68]	; (80111d0 <vPortFree+0xac>)
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	4013      	ands	r3, r2
 8011190:	2b00      	cmp	r3, #0
 8011192:	d019      	beq.n	80111c8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011194:	693b      	ldr	r3, [r7, #16]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d115      	bne.n	80111c8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801119c:	693b      	ldr	r3, [r7, #16]
 801119e:	685a      	ldr	r2, [r3, #4]
 80111a0:	4b0b      	ldr	r3, [pc, #44]	; (80111d0 <vPortFree+0xac>)
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	43db      	mvns	r3, r3
 80111a6:	401a      	ands	r2, r3
 80111a8:	693b      	ldr	r3, [r7, #16]
 80111aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80111ac:	f7fe fc1c 	bl	800f9e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80111b0:	693b      	ldr	r3, [r7, #16]
 80111b2:	685a      	ldr	r2, [r3, #4]
 80111b4:	4b07      	ldr	r3, [pc, #28]	; (80111d4 <vPortFree+0xb0>)
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	4413      	add	r3, r2
 80111ba:	4a06      	ldr	r2, [pc, #24]	; (80111d4 <vPortFree+0xb0>)
 80111bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80111be:	6938      	ldr	r0, [r7, #16]
 80111c0:	f000 f86c 	bl	801129c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80111c4:	f7fe fc1e 	bl	800fa04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80111c8:	bf00      	nop
 80111ca:	3718      	adds	r7, #24
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bd80      	pop	{r7, pc}
 80111d0:	20001bd0 	.word	0x20001bd0
 80111d4:	20001bc8 	.word	0x20001bc8

080111d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80111d8:	b480      	push	{r7}
 80111da:	b085      	sub	sp, #20
 80111dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80111de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80111e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80111e4:	4b27      	ldr	r3, [pc, #156]	; (8011284 <prvHeapInit+0xac>)
 80111e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	f003 0307 	and.w	r3, r3, #7
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d00c      	beq.n	801120c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	3307      	adds	r3, #7
 80111f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	f023 0307 	bic.w	r3, r3, #7
 80111fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011200:	68ba      	ldr	r2, [r7, #8]
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	1ad3      	subs	r3, r2, r3
 8011206:	4a1f      	ldr	r2, [pc, #124]	; (8011284 <prvHeapInit+0xac>)
 8011208:	4413      	add	r3, r2
 801120a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011210:	4a1d      	ldr	r2, [pc, #116]	; (8011288 <prvHeapInit+0xb0>)
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011216:	4b1c      	ldr	r3, [pc, #112]	; (8011288 <prvHeapInit+0xb0>)
 8011218:	2200      	movs	r2, #0
 801121a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	68ba      	ldr	r2, [r7, #8]
 8011220:	4413      	add	r3, r2
 8011222:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011224:	2208      	movs	r2, #8
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	1a9b      	subs	r3, r3, r2
 801122a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	f023 0307 	bic.w	r3, r3, #7
 8011232:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	4a15      	ldr	r2, [pc, #84]	; (801128c <prvHeapInit+0xb4>)
 8011238:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801123a:	4b14      	ldr	r3, [pc, #80]	; (801128c <prvHeapInit+0xb4>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	2200      	movs	r2, #0
 8011240:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011242:	4b12      	ldr	r3, [pc, #72]	; (801128c <prvHeapInit+0xb4>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	2200      	movs	r2, #0
 8011248:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801124e:	683b      	ldr	r3, [r7, #0]
 8011250:	68fa      	ldr	r2, [r7, #12]
 8011252:	1ad2      	subs	r2, r2, r3
 8011254:	683b      	ldr	r3, [r7, #0]
 8011256:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011258:	4b0c      	ldr	r3, [pc, #48]	; (801128c <prvHeapInit+0xb4>)
 801125a:	681a      	ldr	r2, [r3, #0]
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	685b      	ldr	r3, [r3, #4]
 8011264:	4a0a      	ldr	r2, [pc, #40]	; (8011290 <prvHeapInit+0xb8>)
 8011266:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	685b      	ldr	r3, [r3, #4]
 801126c:	4a09      	ldr	r2, [pc, #36]	; (8011294 <prvHeapInit+0xbc>)
 801126e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011270:	4b09      	ldr	r3, [pc, #36]	; (8011298 <prvHeapInit+0xc0>)
 8011272:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011276:	601a      	str	r2, [r3, #0]
}
 8011278:	bf00      	nop
 801127a:	3714      	adds	r7, #20
 801127c:	46bd      	mov	sp, r7
 801127e:	bc80      	pop	{r7}
 8011280:	4770      	bx	lr
 8011282:	bf00      	nop
 8011284:	20000fbc 	.word	0x20000fbc
 8011288:	20001bbc 	.word	0x20001bbc
 801128c:	20001bc4 	.word	0x20001bc4
 8011290:	20001bcc 	.word	0x20001bcc
 8011294:	20001bc8 	.word	0x20001bc8
 8011298:	20001bd0 	.word	0x20001bd0

0801129c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801129c:	b480      	push	{r7}
 801129e:	b085      	sub	sp, #20
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80112a4:	4b27      	ldr	r3, [pc, #156]	; (8011344 <prvInsertBlockIntoFreeList+0xa8>)
 80112a6:	60fb      	str	r3, [r7, #12]
 80112a8:	e002      	b.n	80112b0 <prvInsertBlockIntoFreeList+0x14>
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	60fb      	str	r3, [r7, #12]
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	687a      	ldr	r2, [r7, #4]
 80112b6:	429a      	cmp	r2, r3
 80112b8:	d8f7      	bhi.n	80112aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	685b      	ldr	r3, [r3, #4]
 80112c2:	68ba      	ldr	r2, [r7, #8]
 80112c4:	4413      	add	r3, r2
 80112c6:	687a      	ldr	r2, [r7, #4]
 80112c8:	429a      	cmp	r2, r3
 80112ca:	d108      	bne.n	80112de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	685a      	ldr	r2, [r3, #4]
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	685b      	ldr	r3, [r3, #4]
 80112d4:	441a      	add	r2, r3
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	685b      	ldr	r3, [r3, #4]
 80112e6:	68ba      	ldr	r2, [r7, #8]
 80112e8:	441a      	add	r2, r3
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	429a      	cmp	r2, r3
 80112f0:	d118      	bne.n	8011324 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	681a      	ldr	r2, [r3, #0]
 80112f6:	4b14      	ldr	r3, [pc, #80]	; (8011348 <prvInsertBlockIntoFreeList+0xac>)
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	429a      	cmp	r2, r3
 80112fc:	d00d      	beq.n	801131a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	685a      	ldr	r2, [r3, #4]
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	685b      	ldr	r3, [r3, #4]
 8011308:	441a      	add	r2, r3
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	681a      	ldr	r2, [r3, #0]
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	601a      	str	r2, [r3, #0]
 8011318:	e008      	b.n	801132c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801131a:	4b0b      	ldr	r3, [pc, #44]	; (8011348 <prvInsertBlockIntoFreeList+0xac>)
 801131c:	681a      	ldr	r2, [r3, #0]
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	601a      	str	r2, [r3, #0]
 8011322:	e003      	b.n	801132c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	681a      	ldr	r2, [r3, #0]
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801132c:	68fa      	ldr	r2, [r7, #12]
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	429a      	cmp	r2, r3
 8011332:	d002      	beq.n	801133a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	687a      	ldr	r2, [r7, #4]
 8011338:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801133a:	bf00      	nop
 801133c:	3714      	adds	r7, #20
 801133e:	46bd      	mov	sp, r7
 8011340:	bc80      	pop	{r7}
 8011342:	4770      	bx	lr
 8011344:	20001bbc 	.word	0x20001bbc
 8011348:	20001bc4 	.word	0x20001bc4

0801134c <__errno>:
 801134c:	4b01      	ldr	r3, [pc, #4]	; (8011354 <__errno+0x8>)
 801134e:	6818      	ldr	r0, [r3, #0]
 8011350:	4770      	bx	lr
 8011352:	bf00      	nop
 8011354:	2000014c 	.word	0x2000014c

08011358 <std>:
 8011358:	2300      	movs	r3, #0
 801135a:	b510      	push	{r4, lr}
 801135c:	4604      	mov	r4, r0
 801135e:	e9c0 3300 	strd	r3, r3, [r0]
 8011362:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011366:	6083      	str	r3, [r0, #8]
 8011368:	8181      	strh	r1, [r0, #12]
 801136a:	6643      	str	r3, [r0, #100]	; 0x64
 801136c:	81c2      	strh	r2, [r0, #14]
 801136e:	6183      	str	r3, [r0, #24]
 8011370:	4619      	mov	r1, r3
 8011372:	2208      	movs	r2, #8
 8011374:	305c      	adds	r0, #92	; 0x5c
 8011376:	f000 f92b 	bl	80115d0 <memset>
 801137a:	4b05      	ldr	r3, [pc, #20]	; (8011390 <std+0x38>)
 801137c:	6224      	str	r4, [r4, #32]
 801137e:	6263      	str	r3, [r4, #36]	; 0x24
 8011380:	4b04      	ldr	r3, [pc, #16]	; (8011394 <std+0x3c>)
 8011382:	62a3      	str	r3, [r4, #40]	; 0x28
 8011384:	4b04      	ldr	r3, [pc, #16]	; (8011398 <std+0x40>)
 8011386:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011388:	4b04      	ldr	r3, [pc, #16]	; (801139c <std+0x44>)
 801138a:	6323      	str	r3, [r4, #48]	; 0x30
 801138c:	bd10      	pop	{r4, pc}
 801138e:	bf00      	nop
 8011390:	080118fd 	.word	0x080118fd
 8011394:	0801191f 	.word	0x0801191f
 8011398:	08011957 	.word	0x08011957
 801139c:	0801197b 	.word	0x0801197b

080113a0 <_cleanup_r>:
 80113a0:	4901      	ldr	r1, [pc, #4]	; (80113a8 <_cleanup_r+0x8>)
 80113a2:	f000 b8af 	b.w	8011504 <_fwalk_reent>
 80113a6:	bf00      	nop
 80113a8:	08011b3d 	.word	0x08011b3d

080113ac <__sfmoreglue>:
 80113ac:	b570      	push	{r4, r5, r6, lr}
 80113ae:	2568      	movs	r5, #104	; 0x68
 80113b0:	1e4a      	subs	r2, r1, #1
 80113b2:	4355      	muls	r5, r2
 80113b4:	460e      	mov	r6, r1
 80113b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80113ba:	f000 f95d 	bl	8011678 <_malloc_r>
 80113be:	4604      	mov	r4, r0
 80113c0:	b140      	cbz	r0, 80113d4 <__sfmoreglue+0x28>
 80113c2:	2100      	movs	r1, #0
 80113c4:	e9c0 1600 	strd	r1, r6, [r0]
 80113c8:	300c      	adds	r0, #12
 80113ca:	60a0      	str	r0, [r4, #8]
 80113cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80113d0:	f000 f8fe 	bl	80115d0 <memset>
 80113d4:	4620      	mov	r0, r4
 80113d6:	bd70      	pop	{r4, r5, r6, pc}

080113d8 <__sfp_lock_acquire>:
 80113d8:	4801      	ldr	r0, [pc, #4]	; (80113e0 <__sfp_lock_acquire+0x8>)
 80113da:	f000 b8d8 	b.w	801158e <__retarget_lock_acquire_recursive>
 80113de:	bf00      	nop
 80113e0:	200024f0 	.word	0x200024f0

080113e4 <__sfp_lock_release>:
 80113e4:	4801      	ldr	r0, [pc, #4]	; (80113ec <__sfp_lock_release+0x8>)
 80113e6:	f000 b8d3 	b.w	8011590 <__retarget_lock_release_recursive>
 80113ea:	bf00      	nop
 80113ec:	200024f0 	.word	0x200024f0

080113f0 <__sinit_lock_acquire>:
 80113f0:	4801      	ldr	r0, [pc, #4]	; (80113f8 <__sinit_lock_acquire+0x8>)
 80113f2:	f000 b8cc 	b.w	801158e <__retarget_lock_acquire_recursive>
 80113f6:	bf00      	nop
 80113f8:	200024eb 	.word	0x200024eb

080113fc <__sinit_lock_release>:
 80113fc:	4801      	ldr	r0, [pc, #4]	; (8011404 <__sinit_lock_release+0x8>)
 80113fe:	f000 b8c7 	b.w	8011590 <__retarget_lock_release_recursive>
 8011402:	bf00      	nop
 8011404:	200024eb 	.word	0x200024eb

08011408 <__sinit>:
 8011408:	b510      	push	{r4, lr}
 801140a:	4604      	mov	r4, r0
 801140c:	f7ff fff0 	bl	80113f0 <__sinit_lock_acquire>
 8011410:	69a3      	ldr	r3, [r4, #24]
 8011412:	b11b      	cbz	r3, 801141c <__sinit+0x14>
 8011414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011418:	f7ff bff0 	b.w	80113fc <__sinit_lock_release>
 801141c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011420:	6523      	str	r3, [r4, #80]	; 0x50
 8011422:	4b13      	ldr	r3, [pc, #76]	; (8011470 <__sinit+0x68>)
 8011424:	4a13      	ldr	r2, [pc, #76]	; (8011474 <__sinit+0x6c>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	62a2      	str	r2, [r4, #40]	; 0x28
 801142a:	42a3      	cmp	r3, r4
 801142c:	bf08      	it	eq
 801142e:	2301      	moveq	r3, #1
 8011430:	4620      	mov	r0, r4
 8011432:	bf08      	it	eq
 8011434:	61a3      	streq	r3, [r4, #24]
 8011436:	f000 f81f 	bl	8011478 <__sfp>
 801143a:	6060      	str	r0, [r4, #4]
 801143c:	4620      	mov	r0, r4
 801143e:	f000 f81b 	bl	8011478 <__sfp>
 8011442:	60a0      	str	r0, [r4, #8]
 8011444:	4620      	mov	r0, r4
 8011446:	f000 f817 	bl	8011478 <__sfp>
 801144a:	2200      	movs	r2, #0
 801144c:	2104      	movs	r1, #4
 801144e:	60e0      	str	r0, [r4, #12]
 8011450:	6860      	ldr	r0, [r4, #4]
 8011452:	f7ff ff81 	bl	8011358 <std>
 8011456:	2201      	movs	r2, #1
 8011458:	2109      	movs	r1, #9
 801145a:	68a0      	ldr	r0, [r4, #8]
 801145c:	f7ff ff7c 	bl	8011358 <std>
 8011460:	2202      	movs	r2, #2
 8011462:	2112      	movs	r1, #18
 8011464:	68e0      	ldr	r0, [r4, #12]
 8011466:	f7ff ff77 	bl	8011358 <std>
 801146a:	2301      	movs	r3, #1
 801146c:	61a3      	str	r3, [r4, #24]
 801146e:	e7d1      	b.n	8011414 <__sinit+0xc>
 8011470:	08040a1c 	.word	0x08040a1c
 8011474:	080113a1 	.word	0x080113a1

08011478 <__sfp>:
 8011478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801147a:	4607      	mov	r7, r0
 801147c:	f7ff ffac 	bl	80113d8 <__sfp_lock_acquire>
 8011480:	4b1e      	ldr	r3, [pc, #120]	; (80114fc <__sfp+0x84>)
 8011482:	681e      	ldr	r6, [r3, #0]
 8011484:	69b3      	ldr	r3, [r6, #24]
 8011486:	b913      	cbnz	r3, 801148e <__sfp+0x16>
 8011488:	4630      	mov	r0, r6
 801148a:	f7ff ffbd 	bl	8011408 <__sinit>
 801148e:	3648      	adds	r6, #72	; 0x48
 8011490:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011494:	3b01      	subs	r3, #1
 8011496:	d503      	bpl.n	80114a0 <__sfp+0x28>
 8011498:	6833      	ldr	r3, [r6, #0]
 801149a:	b30b      	cbz	r3, 80114e0 <__sfp+0x68>
 801149c:	6836      	ldr	r6, [r6, #0]
 801149e:	e7f7      	b.n	8011490 <__sfp+0x18>
 80114a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80114a4:	b9d5      	cbnz	r5, 80114dc <__sfp+0x64>
 80114a6:	4b16      	ldr	r3, [pc, #88]	; (8011500 <__sfp+0x88>)
 80114a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80114ac:	60e3      	str	r3, [r4, #12]
 80114ae:	6665      	str	r5, [r4, #100]	; 0x64
 80114b0:	f000 f86c 	bl	801158c <__retarget_lock_init_recursive>
 80114b4:	f7ff ff96 	bl	80113e4 <__sfp_lock_release>
 80114b8:	2208      	movs	r2, #8
 80114ba:	4629      	mov	r1, r5
 80114bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80114c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80114c4:	6025      	str	r5, [r4, #0]
 80114c6:	61a5      	str	r5, [r4, #24]
 80114c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80114cc:	f000 f880 	bl	80115d0 <memset>
 80114d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80114d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80114d8:	4620      	mov	r0, r4
 80114da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114dc:	3468      	adds	r4, #104	; 0x68
 80114de:	e7d9      	b.n	8011494 <__sfp+0x1c>
 80114e0:	2104      	movs	r1, #4
 80114e2:	4638      	mov	r0, r7
 80114e4:	f7ff ff62 	bl	80113ac <__sfmoreglue>
 80114e8:	4604      	mov	r4, r0
 80114ea:	6030      	str	r0, [r6, #0]
 80114ec:	2800      	cmp	r0, #0
 80114ee:	d1d5      	bne.n	801149c <__sfp+0x24>
 80114f0:	f7ff ff78 	bl	80113e4 <__sfp_lock_release>
 80114f4:	230c      	movs	r3, #12
 80114f6:	603b      	str	r3, [r7, #0]
 80114f8:	e7ee      	b.n	80114d8 <__sfp+0x60>
 80114fa:	bf00      	nop
 80114fc:	08040a1c 	.word	0x08040a1c
 8011500:	ffff0001 	.word	0xffff0001

08011504 <_fwalk_reent>:
 8011504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011508:	4606      	mov	r6, r0
 801150a:	4688      	mov	r8, r1
 801150c:	2700      	movs	r7, #0
 801150e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011512:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011516:	f1b9 0901 	subs.w	r9, r9, #1
 801151a:	d505      	bpl.n	8011528 <_fwalk_reent+0x24>
 801151c:	6824      	ldr	r4, [r4, #0]
 801151e:	2c00      	cmp	r4, #0
 8011520:	d1f7      	bne.n	8011512 <_fwalk_reent+0xe>
 8011522:	4638      	mov	r0, r7
 8011524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011528:	89ab      	ldrh	r3, [r5, #12]
 801152a:	2b01      	cmp	r3, #1
 801152c:	d907      	bls.n	801153e <_fwalk_reent+0x3a>
 801152e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011532:	3301      	adds	r3, #1
 8011534:	d003      	beq.n	801153e <_fwalk_reent+0x3a>
 8011536:	4629      	mov	r1, r5
 8011538:	4630      	mov	r0, r6
 801153a:	47c0      	blx	r8
 801153c:	4307      	orrs	r7, r0
 801153e:	3568      	adds	r5, #104	; 0x68
 8011540:	e7e9      	b.n	8011516 <_fwalk_reent+0x12>
	...

08011544 <__libc_init_array>:
 8011544:	b570      	push	{r4, r5, r6, lr}
 8011546:	2600      	movs	r6, #0
 8011548:	4d0c      	ldr	r5, [pc, #48]	; (801157c <__libc_init_array+0x38>)
 801154a:	4c0d      	ldr	r4, [pc, #52]	; (8011580 <__libc_init_array+0x3c>)
 801154c:	1b64      	subs	r4, r4, r5
 801154e:	10a4      	asrs	r4, r4, #2
 8011550:	42a6      	cmp	r6, r4
 8011552:	d109      	bne.n	8011568 <__libc_init_array+0x24>
 8011554:	f000 fffe 	bl	8012554 <_init>
 8011558:	2600      	movs	r6, #0
 801155a:	4d0a      	ldr	r5, [pc, #40]	; (8011584 <__libc_init_array+0x40>)
 801155c:	4c0a      	ldr	r4, [pc, #40]	; (8011588 <__libc_init_array+0x44>)
 801155e:	1b64      	subs	r4, r4, r5
 8011560:	10a4      	asrs	r4, r4, #2
 8011562:	42a6      	cmp	r6, r4
 8011564:	d105      	bne.n	8011572 <__libc_init_array+0x2e>
 8011566:	bd70      	pop	{r4, r5, r6, pc}
 8011568:	f855 3b04 	ldr.w	r3, [r5], #4
 801156c:	4798      	blx	r3
 801156e:	3601      	adds	r6, #1
 8011570:	e7ee      	b.n	8011550 <__libc_init_array+0xc>
 8011572:	f855 3b04 	ldr.w	r3, [r5], #4
 8011576:	4798      	blx	r3
 8011578:	3601      	adds	r6, #1
 801157a:	e7f2      	b.n	8011562 <__libc_init_array+0x1e>
 801157c:	08040b08 	.word	0x08040b08
 8011580:	08040b08 	.word	0x08040b08
 8011584:	08040b08 	.word	0x08040b08
 8011588:	08040b0c 	.word	0x08040b0c

0801158c <__retarget_lock_init_recursive>:
 801158c:	4770      	bx	lr

0801158e <__retarget_lock_acquire_recursive>:
 801158e:	4770      	bx	lr

08011590 <__retarget_lock_release_recursive>:
 8011590:	4770      	bx	lr
	...

08011594 <malloc>:
 8011594:	4b02      	ldr	r3, [pc, #8]	; (80115a0 <malloc+0xc>)
 8011596:	4601      	mov	r1, r0
 8011598:	6818      	ldr	r0, [r3, #0]
 801159a:	f000 b86d 	b.w	8011678 <_malloc_r>
 801159e:	bf00      	nop
 80115a0:	2000014c 	.word	0x2000014c

080115a4 <free>:
 80115a4:	4b02      	ldr	r3, [pc, #8]	; (80115b0 <free+0xc>)
 80115a6:	4601      	mov	r1, r0
 80115a8:	6818      	ldr	r0, [r3, #0]
 80115aa:	f000 b819 	b.w	80115e0 <_free_r>
 80115ae:	bf00      	nop
 80115b0:	2000014c 	.word	0x2000014c

080115b4 <memcpy>:
 80115b4:	440a      	add	r2, r1
 80115b6:	4291      	cmp	r1, r2
 80115b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80115bc:	d100      	bne.n	80115c0 <memcpy+0xc>
 80115be:	4770      	bx	lr
 80115c0:	b510      	push	{r4, lr}
 80115c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80115c6:	4291      	cmp	r1, r2
 80115c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80115cc:	d1f9      	bne.n	80115c2 <memcpy+0xe>
 80115ce:	bd10      	pop	{r4, pc}

080115d0 <memset>:
 80115d0:	4603      	mov	r3, r0
 80115d2:	4402      	add	r2, r0
 80115d4:	4293      	cmp	r3, r2
 80115d6:	d100      	bne.n	80115da <memset+0xa>
 80115d8:	4770      	bx	lr
 80115da:	f803 1b01 	strb.w	r1, [r3], #1
 80115de:	e7f9      	b.n	80115d4 <memset+0x4>

080115e0 <_free_r>:
 80115e0:	b538      	push	{r3, r4, r5, lr}
 80115e2:	4605      	mov	r5, r0
 80115e4:	2900      	cmp	r1, #0
 80115e6:	d043      	beq.n	8011670 <_free_r+0x90>
 80115e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115ec:	1f0c      	subs	r4, r1, #4
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	bfb8      	it	lt
 80115f2:	18e4      	addlt	r4, r4, r3
 80115f4:	f000 fb02 	bl	8011bfc <__malloc_lock>
 80115f8:	4a1e      	ldr	r2, [pc, #120]	; (8011674 <_free_r+0x94>)
 80115fa:	6813      	ldr	r3, [r2, #0]
 80115fc:	4610      	mov	r0, r2
 80115fe:	b933      	cbnz	r3, 801160e <_free_r+0x2e>
 8011600:	6063      	str	r3, [r4, #4]
 8011602:	6014      	str	r4, [r2, #0]
 8011604:	4628      	mov	r0, r5
 8011606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801160a:	f000 bafd 	b.w	8011c08 <__malloc_unlock>
 801160e:	42a3      	cmp	r3, r4
 8011610:	d90a      	bls.n	8011628 <_free_r+0x48>
 8011612:	6821      	ldr	r1, [r4, #0]
 8011614:	1862      	adds	r2, r4, r1
 8011616:	4293      	cmp	r3, r2
 8011618:	bf01      	itttt	eq
 801161a:	681a      	ldreq	r2, [r3, #0]
 801161c:	685b      	ldreq	r3, [r3, #4]
 801161e:	1852      	addeq	r2, r2, r1
 8011620:	6022      	streq	r2, [r4, #0]
 8011622:	6063      	str	r3, [r4, #4]
 8011624:	6004      	str	r4, [r0, #0]
 8011626:	e7ed      	b.n	8011604 <_free_r+0x24>
 8011628:	461a      	mov	r2, r3
 801162a:	685b      	ldr	r3, [r3, #4]
 801162c:	b10b      	cbz	r3, 8011632 <_free_r+0x52>
 801162e:	42a3      	cmp	r3, r4
 8011630:	d9fa      	bls.n	8011628 <_free_r+0x48>
 8011632:	6811      	ldr	r1, [r2, #0]
 8011634:	1850      	adds	r0, r2, r1
 8011636:	42a0      	cmp	r0, r4
 8011638:	d10b      	bne.n	8011652 <_free_r+0x72>
 801163a:	6820      	ldr	r0, [r4, #0]
 801163c:	4401      	add	r1, r0
 801163e:	1850      	adds	r0, r2, r1
 8011640:	4283      	cmp	r3, r0
 8011642:	6011      	str	r1, [r2, #0]
 8011644:	d1de      	bne.n	8011604 <_free_r+0x24>
 8011646:	6818      	ldr	r0, [r3, #0]
 8011648:	685b      	ldr	r3, [r3, #4]
 801164a:	4401      	add	r1, r0
 801164c:	6011      	str	r1, [r2, #0]
 801164e:	6053      	str	r3, [r2, #4]
 8011650:	e7d8      	b.n	8011604 <_free_r+0x24>
 8011652:	d902      	bls.n	801165a <_free_r+0x7a>
 8011654:	230c      	movs	r3, #12
 8011656:	602b      	str	r3, [r5, #0]
 8011658:	e7d4      	b.n	8011604 <_free_r+0x24>
 801165a:	6820      	ldr	r0, [r4, #0]
 801165c:	1821      	adds	r1, r4, r0
 801165e:	428b      	cmp	r3, r1
 8011660:	bf01      	itttt	eq
 8011662:	6819      	ldreq	r1, [r3, #0]
 8011664:	685b      	ldreq	r3, [r3, #4]
 8011666:	1809      	addeq	r1, r1, r0
 8011668:	6021      	streq	r1, [r4, #0]
 801166a:	6063      	str	r3, [r4, #4]
 801166c:	6054      	str	r4, [r2, #4]
 801166e:	e7c9      	b.n	8011604 <_free_r+0x24>
 8011670:	bd38      	pop	{r3, r4, r5, pc}
 8011672:	bf00      	nop
 8011674:	20001bd4 	.word	0x20001bd4

08011678 <_malloc_r>:
 8011678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801167a:	1ccd      	adds	r5, r1, #3
 801167c:	f025 0503 	bic.w	r5, r5, #3
 8011680:	3508      	adds	r5, #8
 8011682:	2d0c      	cmp	r5, #12
 8011684:	bf38      	it	cc
 8011686:	250c      	movcc	r5, #12
 8011688:	2d00      	cmp	r5, #0
 801168a:	4606      	mov	r6, r0
 801168c:	db01      	blt.n	8011692 <_malloc_r+0x1a>
 801168e:	42a9      	cmp	r1, r5
 8011690:	d903      	bls.n	801169a <_malloc_r+0x22>
 8011692:	230c      	movs	r3, #12
 8011694:	6033      	str	r3, [r6, #0]
 8011696:	2000      	movs	r0, #0
 8011698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801169a:	f000 faaf 	bl	8011bfc <__malloc_lock>
 801169e:	4921      	ldr	r1, [pc, #132]	; (8011724 <_malloc_r+0xac>)
 80116a0:	680a      	ldr	r2, [r1, #0]
 80116a2:	4614      	mov	r4, r2
 80116a4:	b99c      	cbnz	r4, 80116ce <_malloc_r+0x56>
 80116a6:	4f20      	ldr	r7, [pc, #128]	; (8011728 <_malloc_r+0xb0>)
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	b923      	cbnz	r3, 80116b6 <_malloc_r+0x3e>
 80116ac:	4621      	mov	r1, r4
 80116ae:	4630      	mov	r0, r6
 80116b0:	f000 f914 	bl	80118dc <_sbrk_r>
 80116b4:	6038      	str	r0, [r7, #0]
 80116b6:	4629      	mov	r1, r5
 80116b8:	4630      	mov	r0, r6
 80116ba:	f000 f90f 	bl	80118dc <_sbrk_r>
 80116be:	1c43      	adds	r3, r0, #1
 80116c0:	d123      	bne.n	801170a <_malloc_r+0x92>
 80116c2:	230c      	movs	r3, #12
 80116c4:	4630      	mov	r0, r6
 80116c6:	6033      	str	r3, [r6, #0]
 80116c8:	f000 fa9e 	bl	8011c08 <__malloc_unlock>
 80116cc:	e7e3      	b.n	8011696 <_malloc_r+0x1e>
 80116ce:	6823      	ldr	r3, [r4, #0]
 80116d0:	1b5b      	subs	r3, r3, r5
 80116d2:	d417      	bmi.n	8011704 <_malloc_r+0x8c>
 80116d4:	2b0b      	cmp	r3, #11
 80116d6:	d903      	bls.n	80116e0 <_malloc_r+0x68>
 80116d8:	6023      	str	r3, [r4, #0]
 80116da:	441c      	add	r4, r3
 80116dc:	6025      	str	r5, [r4, #0]
 80116de:	e004      	b.n	80116ea <_malloc_r+0x72>
 80116e0:	6863      	ldr	r3, [r4, #4]
 80116e2:	42a2      	cmp	r2, r4
 80116e4:	bf0c      	ite	eq
 80116e6:	600b      	streq	r3, [r1, #0]
 80116e8:	6053      	strne	r3, [r2, #4]
 80116ea:	4630      	mov	r0, r6
 80116ec:	f000 fa8c 	bl	8011c08 <__malloc_unlock>
 80116f0:	f104 000b 	add.w	r0, r4, #11
 80116f4:	1d23      	adds	r3, r4, #4
 80116f6:	f020 0007 	bic.w	r0, r0, #7
 80116fa:	1ac2      	subs	r2, r0, r3
 80116fc:	d0cc      	beq.n	8011698 <_malloc_r+0x20>
 80116fe:	1a1b      	subs	r3, r3, r0
 8011700:	50a3      	str	r3, [r4, r2]
 8011702:	e7c9      	b.n	8011698 <_malloc_r+0x20>
 8011704:	4622      	mov	r2, r4
 8011706:	6864      	ldr	r4, [r4, #4]
 8011708:	e7cc      	b.n	80116a4 <_malloc_r+0x2c>
 801170a:	1cc4      	adds	r4, r0, #3
 801170c:	f024 0403 	bic.w	r4, r4, #3
 8011710:	42a0      	cmp	r0, r4
 8011712:	d0e3      	beq.n	80116dc <_malloc_r+0x64>
 8011714:	1a21      	subs	r1, r4, r0
 8011716:	4630      	mov	r0, r6
 8011718:	f000 f8e0 	bl	80118dc <_sbrk_r>
 801171c:	3001      	adds	r0, #1
 801171e:	d1dd      	bne.n	80116dc <_malloc_r+0x64>
 8011720:	e7cf      	b.n	80116c2 <_malloc_r+0x4a>
 8011722:	bf00      	nop
 8011724:	20001bd4 	.word	0x20001bd4
 8011728:	20001bd8 	.word	0x20001bd8

0801172c <srand>:
 801172c:	b538      	push	{r3, r4, r5, lr}
 801172e:	4b10      	ldr	r3, [pc, #64]	; (8011770 <srand+0x44>)
 8011730:	4604      	mov	r4, r0
 8011732:	681d      	ldr	r5, [r3, #0]
 8011734:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8011736:	b9b3      	cbnz	r3, 8011766 <srand+0x3a>
 8011738:	2018      	movs	r0, #24
 801173a:	f7ff ff2b 	bl	8011594 <malloc>
 801173e:	4602      	mov	r2, r0
 8011740:	63a8      	str	r0, [r5, #56]	; 0x38
 8011742:	b920      	cbnz	r0, 801174e <srand+0x22>
 8011744:	2142      	movs	r1, #66	; 0x42
 8011746:	4b0b      	ldr	r3, [pc, #44]	; (8011774 <srand+0x48>)
 8011748:	480b      	ldr	r0, [pc, #44]	; (8011778 <srand+0x4c>)
 801174a:	f000 f943 	bl	80119d4 <__assert_func>
 801174e:	490b      	ldr	r1, [pc, #44]	; (801177c <srand+0x50>)
 8011750:	4b0b      	ldr	r3, [pc, #44]	; (8011780 <srand+0x54>)
 8011752:	e9c0 1300 	strd	r1, r3, [r0]
 8011756:	4b0b      	ldr	r3, [pc, #44]	; (8011784 <srand+0x58>)
 8011758:	2100      	movs	r1, #0
 801175a:	6083      	str	r3, [r0, #8]
 801175c:	230b      	movs	r3, #11
 801175e:	8183      	strh	r3, [r0, #12]
 8011760:	2001      	movs	r0, #1
 8011762:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011766:	2200      	movs	r2, #0
 8011768:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801176a:	611c      	str	r4, [r3, #16]
 801176c:	615a      	str	r2, [r3, #20]
 801176e:	bd38      	pop	{r3, r4, r5, pc}
 8011770:	2000014c 	.word	0x2000014c
 8011774:	08040a20 	.word	0x08040a20
 8011778:	08040a37 	.word	0x08040a37
 801177c:	abcd330e 	.word	0xabcd330e
 8011780:	e66d1234 	.word	0xe66d1234
 8011784:	0005deec 	.word	0x0005deec

08011788 <rand>:
 8011788:	4b17      	ldr	r3, [pc, #92]	; (80117e8 <rand+0x60>)
 801178a:	b510      	push	{r4, lr}
 801178c:	681c      	ldr	r4, [r3, #0]
 801178e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011790:	b9b3      	cbnz	r3, 80117c0 <rand+0x38>
 8011792:	2018      	movs	r0, #24
 8011794:	f7ff fefe 	bl	8011594 <malloc>
 8011798:	4602      	mov	r2, r0
 801179a:	63a0      	str	r0, [r4, #56]	; 0x38
 801179c:	b920      	cbnz	r0, 80117a8 <rand+0x20>
 801179e:	214e      	movs	r1, #78	; 0x4e
 80117a0:	4b12      	ldr	r3, [pc, #72]	; (80117ec <rand+0x64>)
 80117a2:	4813      	ldr	r0, [pc, #76]	; (80117f0 <rand+0x68>)
 80117a4:	f000 f916 	bl	80119d4 <__assert_func>
 80117a8:	4912      	ldr	r1, [pc, #72]	; (80117f4 <rand+0x6c>)
 80117aa:	4b13      	ldr	r3, [pc, #76]	; (80117f8 <rand+0x70>)
 80117ac:	e9c0 1300 	strd	r1, r3, [r0]
 80117b0:	4b12      	ldr	r3, [pc, #72]	; (80117fc <rand+0x74>)
 80117b2:	2100      	movs	r1, #0
 80117b4:	6083      	str	r3, [r0, #8]
 80117b6:	230b      	movs	r3, #11
 80117b8:	8183      	strh	r3, [r0, #12]
 80117ba:	2001      	movs	r0, #1
 80117bc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80117c0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80117c2:	480f      	ldr	r0, [pc, #60]	; (8011800 <rand+0x78>)
 80117c4:	690a      	ldr	r2, [r1, #16]
 80117c6:	694b      	ldr	r3, [r1, #20]
 80117c8:	4350      	muls	r0, r2
 80117ca:	4c0e      	ldr	r4, [pc, #56]	; (8011804 <rand+0x7c>)
 80117cc:	fb04 0003 	mla	r0, r4, r3, r0
 80117d0:	fba2 3404 	umull	r3, r4, r2, r4
 80117d4:	1c5a      	adds	r2, r3, #1
 80117d6:	4404      	add	r4, r0
 80117d8:	f144 0000 	adc.w	r0, r4, #0
 80117dc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80117e0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80117e4:	bd10      	pop	{r4, pc}
 80117e6:	bf00      	nop
 80117e8:	2000014c 	.word	0x2000014c
 80117ec:	08040a20 	.word	0x08040a20
 80117f0:	08040a37 	.word	0x08040a37
 80117f4:	abcd330e 	.word	0xabcd330e
 80117f8:	e66d1234 	.word	0xe66d1234
 80117fc:	0005deec 	.word	0x0005deec
 8011800:	5851f42d 	.word	0x5851f42d
 8011804:	4c957f2d 	.word	0x4c957f2d

08011808 <cleanup_glue>:
 8011808:	b538      	push	{r3, r4, r5, lr}
 801180a:	460c      	mov	r4, r1
 801180c:	6809      	ldr	r1, [r1, #0]
 801180e:	4605      	mov	r5, r0
 8011810:	b109      	cbz	r1, 8011816 <cleanup_glue+0xe>
 8011812:	f7ff fff9 	bl	8011808 <cleanup_glue>
 8011816:	4621      	mov	r1, r4
 8011818:	4628      	mov	r0, r5
 801181a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801181e:	f7ff bedf 	b.w	80115e0 <_free_r>
	...

08011824 <_reclaim_reent>:
 8011824:	4b2c      	ldr	r3, [pc, #176]	; (80118d8 <_reclaim_reent+0xb4>)
 8011826:	b570      	push	{r4, r5, r6, lr}
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	4604      	mov	r4, r0
 801182c:	4283      	cmp	r3, r0
 801182e:	d051      	beq.n	80118d4 <_reclaim_reent+0xb0>
 8011830:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011832:	b143      	cbz	r3, 8011846 <_reclaim_reent+0x22>
 8011834:	68db      	ldr	r3, [r3, #12]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d14a      	bne.n	80118d0 <_reclaim_reent+0xac>
 801183a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801183c:	6819      	ldr	r1, [r3, #0]
 801183e:	b111      	cbz	r1, 8011846 <_reclaim_reent+0x22>
 8011840:	4620      	mov	r0, r4
 8011842:	f7ff fecd 	bl	80115e0 <_free_r>
 8011846:	6961      	ldr	r1, [r4, #20]
 8011848:	b111      	cbz	r1, 8011850 <_reclaim_reent+0x2c>
 801184a:	4620      	mov	r0, r4
 801184c:	f7ff fec8 	bl	80115e0 <_free_r>
 8011850:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011852:	b111      	cbz	r1, 801185a <_reclaim_reent+0x36>
 8011854:	4620      	mov	r0, r4
 8011856:	f7ff fec3 	bl	80115e0 <_free_r>
 801185a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801185c:	b111      	cbz	r1, 8011864 <_reclaim_reent+0x40>
 801185e:	4620      	mov	r0, r4
 8011860:	f7ff febe 	bl	80115e0 <_free_r>
 8011864:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011866:	b111      	cbz	r1, 801186e <_reclaim_reent+0x4a>
 8011868:	4620      	mov	r0, r4
 801186a:	f7ff feb9 	bl	80115e0 <_free_r>
 801186e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011870:	b111      	cbz	r1, 8011878 <_reclaim_reent+0x54>
 8011872:	4620      	mov	r0, r4
 8011874:	f7ff feb4 	bl	80115e0 <_free_r>
 8011878:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801187a:	b111      	cbz	r1, 8011882 <_reclaim_reent+0x5e>
 801187c:	4620      	mov	r0, r4
 801187e:	f7ff feaf 	bl	80115e0 <_free_r>
 8011882:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011884:	b111      	cbz	r1, 801188c <_reclaim_reent+0x68>
 8011886:	4620      	mov	r0, r4
 8011888:	f7ff feaa 	bl	80115e0 <_free_r>
 801188c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801188e:	b111      	cbz	r1, 8011896 <_reclaim_reent+0x72>
 8011890:	4620      	mov	r0, r4
 8011892:	f7ff fea5 	bl	80115e0 <_free_r>
 8011896:	69a3      	ldr	r3, [r4, #24]
 8011898:	b1e3      	cbz	r3, 80118d4 <_reclaim_reent+0xb0>
 801189a:	4620      	mov	r0, r4
 801189c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801189e:	4798      	blx	r3
 80118a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80118a2:	b1b9      	cbz	r1, 80118d4 <_reclaim_reent+0xb0>
 80118a4:	4620      	mov	r0, r4
 80118a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80118aa:	f7ff bfad 	b.w	8011808 <cleanup_glue>
 80118ae:	5949      	ldr	r1, [r1, r5]
 80118b0:	b941      	cbnz	r1, 80118c4 <_reclaim_reent+0xa0>
 80118b2:	3504      	adds	r5, #4
 80118b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80118b6:	2d80      	cmp	r5, #128	; 0x80
 80118b8:	68d9      	ldr	r1, [r3, #12]
 80118ba:	d1f8      	bne.n	80118ae <_reclaim_reent+0x8a>
 80118bc:	4620      	mov	r0, r4
 80118be:	f7ff fe8f 	bl	80115e0 <_free_r>
 80118c2:	e7ba      	b.n	801183a <_reclaim_reent+0x16>
 80118c4:	680e      	ldr	r6, [r1, #0]
 80118c6:	4620      	mov	r0, r4
 80118c8:	f7ff fe8a 	bl	80115e0 <_free_r>
 80118cc:	4631      	mov	r1, r6
 80118ce:	e7ef      	b.n	80118b0 <_reclaim_reent+0x8c>
 80118d0:	2500      	movs	r5, #0
 80118d2:	e7ef      	b.n	80118b4 <_reclaim_reent+0x90>
 80118d4:	bd70      	pop	{r4, r5, r6, pc}
 80118d6:	bf00      	nop
 80118d8:	2000014c 	.word	0x2000014c

080118dc <_sbrk_r>:
 80118dc:	b538      	push	{r3, r4, r5, lr}
 80118de:	2300      	movs	r3, #0
 80118e0:	4d05      	ldr	r5, [pc, #20]	; (80118f8 <_sbrk_r+0x1c>)
 80118e2:	4604      	mov	r4, r0
 80118e4:	4608      	mov	r0, r1
 80118e6:	602b      	str	r3, [r5, #0]
 80118e8:	f7f0 ffee 	bl	80028c8 <_sbrk>
 80118ec:	1c43      	adds	r3, r0, #1
 80118ee:	d102      	bne.n	80118f6 <_sbrk_r+0x1a>
 80118f0:	682b      	ldr	r3, [r5, #0]
 80118f2:	b103      	cbz	r3, 80118f6 <_sbrk_r+0x1a>
 80118f4:	6023      	str	r3, [r4, #0]
 80118f6:	bd38      	pop	{r3, r4, r5, pc}
 80118f8:	200024f4 	.word	0x200024f4

080118fc <__sread>:
 80118fc:	b510      	push	{r4, lr}
 80118fe:	460c      	mov	r4, r1
 8011900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011904:	f000 fc74 	bl	80121f0 <_read_r>
 8011908:	2800      	cmp	r0, #0
 801190a:	bfab      	itete	ge
 801190c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801190e:	89a3      	ldrhlt	r3, [r4, #12]
 8011910:	181b      	addge	r3, r3, r0
 8011912:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011916:	bfac      	ite	ge
 8011918:	6563      	strge	r3, [r4, #84]	; 0x54
 801191a:	81a3      	strhlt	r3, [r4, #12]
 801191c:	bd10      	pop	{r4, pc}

0801191e <__swrite>:
 801191e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011922:	461f      	mov	r7, r3
 8011924:	898b      	ldrh	r3, [r1, #12]
 8011926:	4605      	mov	r5, r0
 8011928:	05db      	lsls	r3, r3, #23
 801192a:	460c      	mov	r4, r1
 801192c:	4616      	mov	r6, r2
 801192e:	d505      	bpl.n	801193c <__swrite+0x1e>
 8011930:	2302      	movs	r3, #2
 8011932:	2200      	movs	r2, #0
 8011934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011938:	f000 f94e 	bl	8011bd8 <_lseek_r>
 801193c:	89a3      	ldrh	r3, [r4, #12]
 801193e:	4632      	mov	r2, r6
 8011940:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011944:	81a3      	strh	r3, [r4, #12]
 8011946:	4628      	mov	r0, r5
 8011948:	463b      	mov	r3, r7
 801194a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801194e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011952:	f000 b82d 	b.w	80119b0 <_write_r>

08011956 <__sseek>:
 8011956:	b510      	push	{r4, lr}
 8011958:	460c      	mov	r4, r1
 801195a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801195e:	f000 f93b 	bl	8011bd8 <_lseek_r>
 8011962:	1c43      	adds	r3, r0, #1
 8011964:	89a3      	ldrh	r3, [r4, #12]
 8011966:	bf15      	itete	ne
 8011968:	6560      	strne	r0, [r4, #84]	; 0x54
 801196a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801196e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011972:	81a3      	strheq	r3, [r4, #12]
 8011974:	bf18      	it	ne
 8011976:	81a3      	strhne	r3, [r4, #12]
 8011978:	bd10      	pop	{r4, pc}

0801197a <__sclose>:
 801197a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801197e:	f000 b847 	b.w	8011a10 <_close_r>

08011982 <strcat>:
 8011982:	4602      	mov	r2, r0
 8011984:	b510      	push	{r4, lr}
 8011986:	7814      	ldrb	r4, [r2, #0]
 8011988:	4613      	mov	r3, r2
 801198a:	3201      	adds	r2, #1
 801198c:	2c00      	cmp	r4, #0
 801198e:	d1fa      	bne.n	8011986 <strcat+0x4>
 8011990:	3b01      	subs	r3, #1
 8011992:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011996:	f803 2f01 	strb.w	r2, [r3, #1]!
 801199a:	2a00      	cmp	r2, #0
 801199c:	d1f9      	bne.n	8011992 <strcat+0x10>
 801199e:	bd10      	pop	{r4, pc}

080119a0 <strcpy>:
 80119a0:	4603      	mov	r3, r0
 80119a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80119a6:	f803 2b01 	strb.w	r2, [r3], #1
 80119aa:	2a00      	cmp	r2, #0
 80119ac:	d1f9      	bne.n	80119a2 <strcpy+0x2>
 80119ae:	4770      	bx	lr

080119b0 <_write_r>:
 80119b0:	b538      	push	{r3, r4, r5, lr}
 80119b2:	4604      	mov	r4, r0
 80119b4:	4608      	mov	r0, r1
 80119b6:	4611      	mov	r1, r2
 80119b8:	2200      	movs	r2, #0
 80119ba:	4d05      	ldr	r5, [pc, #20]	; (80119d0 <_write_r+0x20>)
 80119bc:	602a      	str	r2, [r5, #0]
 80119be:	461a      	mov	r2, r3
 80119c0:	f7f0 ff36 	bl	8002830 <_write>
 80119c4:	1c43      	adds	r3, r0, #1
 80119c6:	d102      	bne.n	80119ce <_write_r+0x1e>
 80119c8:	682b      	ldr	r3, [r5, #0]
 80119ca:	b103      	cbz	r3, 80119ce <_write_r+0x1e>
 80119cc:	6023      	str	r3, [r4, #0]
 80119ce:	bd38      	pop	{r3, r4, r5, pc}
 80119d0:	200024f4 	.word	0x200024f4

080119d4 <__assert_func>:
 80119d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80119d6:	4614      	mov	r4, r2
 80119d8:	461a      	mov	r2, r3
 80119da:	4b09      	ldr	r3, [pc, #36]	; (8011a00 <__assert_func+0x2c>)
 80119dc:	4605      	mov	r5, r0
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	68d8      	ldr	r0, [r3, #12]
 80119e2:	b14c      	cbz	r4, 80119f8 <__assert_func+0x24>
 80119e4:	4b07      	ldr	r3, [pc, #28]	; (8011a04 <__assert_func+0x30>)
 80119e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80119ea:	9100      	str	r1, [sp, #0]
 80119ec:	462b      	mov	r3, r5
 80119ee:	4906      	ldr	r1, [pc, #24]	; (8011a08 <__assert_func+0x34>)
 80119f0:	f000 f8e0 	bl	8011bb4 <fiprintf>
 80119f4:	f000 fcce 	bl	8012394 <abort>
 80119f8:	4b04      	ldr	r3, [pc, #16]	; (8011a0c <__assert_func+0x38>)
 80119fa:	461c      	mov	r4, r3
 80119fc:	e7f3      	b.n	80119e6 <__assert_func+0x12>
 80119fe:	bf00      	nop
 8011a00:	2000014c 	.word	0x2000014c
 8011a04:	08040a96 	.word	0x08040a96
 8011a08:	08040aa3 	.word	0x08040aa3
 8011a0c:	08040ad1 	.word	0x08040ad1

08011a10 <_close_r>:
 8011a10:	b538      	push	{r3, r4, r5, lr}
 8011a12:	2300      	movs	r3, #0
 8011a14:	4d05      	ldr	r5, [pc, #20]	; (8011a2c <_close_r+0x1c>)
 8011a16:	4604      	mov	r4, r0
 8011a18:	4608      	mov	r0, r1
 8011a1a:	602b      	str	r3, [r5, #0]
 8011a1c:	f7f0 ff24 	bl	8002868 <_close>
 8011a20:	1c43      	adds	r3, r0, #1
 8011a22:	d102      	bne.n	8011a2a <_close_r+0x1a>
 8011a24:	682b      	ldr	r3, [r5, #0]
 8011a26:	b103      	cbz	r3, 8011a2a <_close_r+0x1a>
 8011a28:	6023      	str	r3, [r4, #0]
 8011a2a:	bd38      	pop	{r3, r4, r5, pc}
 8011a2c:	200024f4 	.word	0x200024f4

08011a30 <__sflush_r>:
 8011a30:	898a      	ldrh	r2, [r1, #12]
 8011a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a36:	4605      	mov	r5, r0
 8011a38:	0710      	lsls	r0, r2, #28
 8011a3a:	460c      	mov	r4, r1
 8011a3c:	d458      	bmi.n	8011af0 <__sflush_r+0xc0>
 8011a3e:	684b      	ldr	r3, [r1, #4]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	dc05      	bgt.n	8011a50 <__sflush_r+0x20>
 8011a44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	dc02      	bgt.n	8011a50 <__sflush_r+0x20>
 8011a4a:	2000      	movs	r0, #0
 8011a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a52:	2e00      	cmp	r6, #0
 8011a54:	d0f9      	beq.n	8011a4a <__sflush_r+0x1a>
 8011a56:	2300      	movs	r3, #0
 8011a58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011a5c:	682f      	ldr	r7, [r5, #0]
 8011a5e:	602b      	str	r3, [r5, #0]
 8011a60:	d032      	beq.n	8011ac8 <__sflush_r+0x98>
 8011a62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011a64:	89a3      	ldrh	r3, [r4, #12]
 8011a66:	075a      	lsls	r2, r3, #29
 8011a68:	d505      	bpl.n	8011a76 <__sflush_r+0x46>
 8011a6a:	6863      	ldr	r3, [r4, #4]
 8011a6c:	1ac0      	subs	r0, r0, r3
 8011a6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011a70:	b10b      	cbz	r3, 8011a76 <__sflush_r+0x46>
 8011a72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011a74:	1ac0      	subs	r0, r0, r3
 8011a76:	2300      	movs	r3, #0
 8011a78:	4602      	mov	r2, r0
 8011a7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a7c:	4628      	mov	r0, r5
 8011a7e:	6a21      	ldr	r1, [r4, #32]
 8011a80:	47b0      	blx	r6
 8011a82:	1c43      	adds	r3, r0, #1
 8011a84:	89a3      	ldrh	r3, [r4, #12]
 8011a86:	d106      	bne.n	8011a96 <__sflush_r+0x66>
 8011a88:	6829      	ldr	r1, [r5, #0]
 8011a8a:	291d      	cmp	r1, #29
 8011a8c:	d82c      	bhi.n	8011ae8 <__sflush_r+0xb8>
 8011a8e:	4a2a      	ldr	r2, [pc, #168]	; (8011b38 <__sflush_r+0x108>)
 8011a90:	40ca      	lsrs	r2, r1
 8011a92:	07d6      	lsls	r6, r2, #31
 8011a94:	d528      	bpl.n	8011ae8 <__sflush_r+0xb8>
 8011a96:	2200      	movs	r2, #0
 8011a98:	6062      	str	r2, [r4, #4]
 8011a9a:	6922      	ldr	r2, [r4, #16]
 8011a9c:	04d9      	lsls	r1, r3, #19
 8011a9e:	6022      	str	r2, [r4, #0]
 8011aa0:	d504      	bpl.n	8011aac <__sflush_r+0x7c>
 8011aa2:	1c42      	adds	r2, r0, #1
 8011aa4:	d101      	bne.n	8011aaa <__sflush_r+0x7a>
 8011aa6:	682b      	ldr	r3, [r5, #0]
 8011aa8:	b903      	cbnz	r3, 8011aac <__sflush_r+0x7c>
 8011aaa:	6560      	str	r0, [r4, #84]	; 0x54
 8011aac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011aae:	602f      	str	r7, [r5, #0]
 8011ab0:	2900      	cmp	r1, #0
 8011ab2:	d0ca      	beq.n	8011a4a <__sflush_r+0x1a>
 8011ab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011ab8:	4299      	cmp	r1, r3
 8011aba:	d002      	beq.n	8011ac2 <__sflush_r+0x92>
 8011abc:	4628      	mov	r0, r5
 8011abe:	f7ff fd8f 	bl	80115e0 <_free_r>
 8011ac2:	2000      	movs	r0, #0
 8011ac4:	6360      	str	r0, [r4, #52]	; 0x34
 8011ac6:	e7c1      	b.n	8011a4c <__sflush_r+0x1c>
 8011ac8:	6a21      	ldr	r1, [r4, #32]
 8011aca:	2301      	movs	r3, #1
 8011acc:	4628      	mov	r0, r5
 8011ace:	47b0      	blx	r6
 8011ad0:	1c41      	adds	r1, r0, #1
 8011ad2:	d1c7      	bne.n	8011a64 <__sflush_r+0x34>
 8011ad4:	682b      	ldr	r3, [r5, #0]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d0c4      	beq.n	8011a64 <__sflush_r+0x34>
 8011ada:	2b1d      	cmp	r3, #29
 8011adc:	d001      	beq.n	8011ae2 <__sflush_r+0xb2>
 8011ade:	2b16      	cmp	r3, #22
 8011ae0:	d101      	bne.n	8011ae6 <__sflush_r+0xb6>
 8011ae2:	602f      	str	r7, [r5, #0]
 8011ae4:	e7b1      	b.n	8011a4a <__sflush_r+0x1a>
 8011ae6:	89a3      	ldrh	r3, [r4, #12]
 8011ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011aec:	81a3      	strh	r3, [r4, #12]
 8011aee:	e7ad      	b.n	8011a4c <__sflush_r+0x1c>
 8011af0:	690f      	ldr	r7, [r1, #16]
 8011af2:	2f00      	cmp	r7, #0
 8011af4:	d0a9      	beq.n	8011a4a <__sflush_r+0x1a>
 8011af6:	0793      	lsls	r3, r2, #30
 8011af8:	bf18      	it	ne
 8011afa:	2300      	movne	r3, #0
 8011afc:	680e      	ldr	r6, [r1, #0]
 8011afe:	bf08      	it	eq
 8011b00:	694b      	ldreq	r3, [r1, #20]
 8011b02:	eba6 0807 	sub.w	r8, r6, r7
 8011b06:	600f      	str	r7, [r1, #0]
 8011b08:	608b      	str	r3, [r1, #8]
 8011b0a:	f1b8 0f00 	cmp.w	r8, #0
 8011b0e:	dd9c      	ble.n	8011a4a <__sflush_r+0x1a>
 8011b10:	4643      	mov	r3, r8
 8011b12:	463a      	mov	r2, r7
 8011b14:	4628      	mov	r0, r5
 8011b16:	6a21      	ldr	r1, [r4, #32]
 8011b18:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011b1a:	47b0      	blx	r6
 8011b1c:	2800      	cmp	r0, #0
 8011b1e:	dc06      	bgt.n	8011b2e <__sflush_r+0xfe>
 8011b20:	89a3      	ldrh	r3, [r4, #12]
 8011b22:	f04f 30ff 	mov.w	r0, #4294967295
 8011b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b2a:	81a3      	strh	r3, [r4, #12]
 8011b2c:	e78e      	b.n	8011a4c <__sflush_r+0x1c>
 8011b2e:	4407      	add	r7, r0
 8011b30:	eba8 0800 	sub.w	r8, r8, r0
 8011b34:	e7e9      	b.n	8011b0a <__sflush_r+0xda>
 8011b36:	bf00      	nop
 8011b38:	20400001 	.word	0x20400001

08011b3c <_fflush_r>:
 8011b3c:	b538      	push	{r3, r4, r5, lr}
 8011b3e:	690b      	ldr	r3, [r1, #16]
 8011b40:	4605      	mov	r5, r0
 8011b42:	460c      	mov	r4, r1
 8011b44:	b913      	cbnz	r3, 8011b4c <_fflush_r+0x10>
 8011b46:	2500      	movs	r5, #0
 8011b48:	4628      	mov	r0, r5
 8011b4a:	bd38      	pop	{r3, r4, r5, pc}
 8011b4c:	b118      	cbz	r0, 8011b56 <_fflush_r+0x1a>
 8011b4e:	6983      	ldr	r3, [r0, #24]
 8011b50:	b90b      	cbnz	r3, 8011b56 <_fflush_r+0x1a>
 8011b52:	f7ff fc59 	bl	8011408 <__sinit>
 8011b56:	4b14      	ldr	r3, [pc, #80]	; (8011ba8 <_fflush_r+0x6c>)
 8011b58:	429c      	cmp	r4, r3
 8011b5a:	d11b      	bne.n	8011b94 <_fflush_r+0x58>
 8011b5c:	686c      	ldr	r4, [r5, #4]
 8011b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d0ef      	beq.n	8011b46 <_fflush_r+0xa>
 8011b66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011b68:	07d0      	lsls	r0, r2, #31
 8011b6a:	d404      	bmi.n	8011b76 <_fflush_r+0x3a>
 8011b6c:	0599      	lsls	r1, r3, #22
 8011b6e:	d402      	bmi.n	8011b76 <_fflush_r+0x3a>
 8011b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b72:	f7ff fd0c 	bl	801158e <__retarget_lock_acquire_recursive>
 8011b76:	4628      	mov	r0, r5
 8011b78:	4621      	mov	r1, r4
 8011b7a:	f7ff ff59 	bl	8011a30 <__sflush_r>
 8011b7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b80:	4605      	mov	r5, r0
 8011b82:	07da      	lsls	r2, r3, #31
 8011b84:	d4e0      	bmi.n	8011b48 <_fflush_r+0xc>
 8011b86:	89a3      	ldrh	r3, [r4, #12]
 8011b88:	059b      	lsls	r3, r3, #22
 8011b8a:	d4dd      	bmi.n	8011b48 <_fflush_r+0xc>
 8011b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b8e:	f7ff fcff 	bl	8011590 <__retarget_lock_release_recursive>
 8011b92:	e7d9      	b.n	8011b48 <_fflush_r+0xc>
 8011b94:	4b05      	ldr	r3, [pc, #20]	; (8011bac <_fflush_r+0x70>)
 8011b96:	429c      	cmp	r4, r3
 8011b98:	d101      	bne.n	8011b9e <_fflush_r+0x62>
 8011b9a:	68ac      	ldr	r4, [r5, #8]
 8011b9c:	e7df      	b.n	8011b5e <_fflush_r+0x22>
 8011b9e:	4b04      	ldr	r3, [pc, #16]	; (8011bb0 <_fflush_r+0x74>)
 8011ba0:	429c      	cmp	r4, r3
 8011ba2:	bf08      	it	eq
 8011ba4:	68ec      	ldreq	r4, [r5, #12]
 8011ba6:	e7da      	b.n	8011b5e <_fflush_r+0x22>
 8011ba8:	080409dc 	.word	0x080409dc
 8011bac:	080409fc 	.word	0x080409fc
 8011bb0:	080409bc 	.word	0x080409bc

08011bb4 <fiprintf>:
 8011bb4:	b40e      	push	{r1, r2, r3}
 8011bb6:	b503      	push	{r0, r1, lr}
 8011bb8:	4601      	mov	r1, r0
 8011bba:	ab03      	add	r3, sp, #12
 8011bbc:	4805      	ldr	r0, [pc, #20]	; (8011bd4 <fiprintf+0x20>)
 8011bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bc2:	6800      	ldr	r0, [r0, #0]
 8011bc4:	9301      	str	r3, [sp, #4]
 8011bc6:	f000 f84d 	bl	8011c64 <_vfiprintf_r>
 8011bca:	b002      	add	sp, #8
 8011bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011bd0:	b003      	add	sp, #12
 8011bd2:	4770      	bx	lr
 8011bd4:	2000014c 	.word	0x2000014c

08011bd8 <_lseek_r>:
 8011bd8:	b538      	push	{r3, r4, r5, lr}
 8011bda:	4604      	mov	r4, r0
 8011bdc:	4608      	mov	r0, r1
 8011bde:	4611      	mov	r1, r2
 8011be0:	2200      	movs	r2, #0
 8011be2:	4d05      	ldr	r5, [pc, #20]	; (8011bf8 <_lseek_r+0x20>)
 8011be4:	602a      	str	r2, [r5, #0]
 8011be6:	461a      	mov	r2, r3
 8011be8:	f7f0 fe62 	bl	80028b0 <_lseek>
 8011bec:	1c43      	adds	r3, r0, #1
 8011bee:	d102      	bne.n	8011bf6 <_lseek_r+0x1e>
 8011bf0:	682b      	ldr	r3, [r5, #0]
 8011bf2:	b103      	cbz	r3, 8011bf6 <_lseek_r+0x1e>
 8011bf4:	6023      	str	r3, [r4, #0]
 8011bf6:	bd38      	pop	{r3, r4, r5, pc}
 8011bf8:	200024f4 	.word	0x200024f4

08011bfc <__malloc_lock>:
 8011bfc:	4801      	ldr	r0, [pc, #4]	; (8011c04 <__malloc_lock+0x8>)
 8011bfe:	f7ff bcc6 	b.w	801158e <__retarget_lock_acquire_recursive>
 8011c02:	bf00      	nop
 8011c04:	200024ec 	.word	0x200024ec

08011c08 <__malloc_unlock>:
 8011c08:	4801      	ldr	r0, [pc, #4]	; (8011c10 <__malloc_unlock+0x8>)
 8011c0a:	f7ff bcc1 	b.w	8011590 <__retarget_lock_release_recursive>
 8011c0e:	bf00      	nop
 8011c10:	200024ec 	.word	0x200024ec

08011c14 <__sfputc_r>:
 8011c14:	6893      	ldr	r3, [r2, #8]
 8011c16:	b410      	push	{r4}
 8011c18:	3b01      	subs	r3, #1
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	6093      	str	r3, [r2, #8]
 8011c1e:	da07      	bge.n	8011c30 <__sfputc_r+0x1c>
 8011c20:	6994      	ldr	r4, [r2, #24]
 8011c22:	42a3      	cmp	r3, r4
 8011c24:	db01      	blt.n	8011c2a <__sfputc_r+0x16>
 8011c26:	290a      	cmp	r1, #10
 8011c28:	d102      	bne.n	8011c30 <__sfputc_r+0x1c>
 8011c2a:	bc10      	pop	{r4}
 8011c2c:	f000 baf2 	b.w	8012214 <__swbuf_r>
 8011c30:	6813      	ldr	r3, [r2, #0]
 8011c32:	1c58      	adds	r0, r3, #1
 8011c34:	6010      	str	r0, [r2, #0]
 8011c36:	7019      	strb	r1, [r3, #0]
 8011c38:	4608      	mov	r0, r1
 8011c3a:	bc10      	pop	{r4}
 8011c3c:	4770      	bx	lr

08011c3e <__sfputs_r>:
 8011c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c40:	4606      	mov	r6, r0
 8011c42:	460f      	mov	r7, r1
 8011c44:	4614      	mov	r4, r2
 8011c46:	18d5      	adds	r5, r2, r3
 8011c48:	42ac      	cmp	r4, r5
 8011c4a:	d101      	bne.n	8011c50 <__sfputs_r+0x12>
 8011c4c:	2000      	movs	r0, #0
 8011c4e:	e007      	b.n	8011c60 <__sfputs_r+0x22>
 8011c50:	463a      	mov	r2, r7
 8011c52:	4630      	mov	r0, r6
 8011c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c58:	f7ff ffdc 	bl	8011c14 <__sfputc_r>
 8011c5c:	1c43      	adds	r3, r0, #1
 8011c5e:	d1f3      	bne.n	8011c48 <__sfputs_r+0xa>
 8011c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011c64 <_vfiprintf_r>:
 8011c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c68:	460d      	mov	r5, r1
 8011c6a:	4614      	mov	r4, r2
 8011c6c:	4698      	mov	r8, r3
 8011c6e:	4606      	mov	r6, r0
 8011c70:	b09d      	sub	sp, #116	; 0x74
 8011c72:	b118      	cbz	r0, 8011c7c <_vfiprintf_r+0x18>
 8011c74:	6983      	ldr	r3, [r0, #24]
 8011c76:	b90b      	cbnz	r3, 8011c7c <_vfiprintf_r+0x18>
 8011c78:	f7ff fbc6 	bl	8011408 <__sinit>
 8011c7c:	4b89      	ldr	r3, [pc, #548]	; (8011ea4 <_vfiprintf_r+0x240>)
 8011c7e:	429d      	cmp	r5, r3
 8011c80:	d11b      	bne.n	8011cba <_vfiprintf_r+0x56>
 8011c82:	6875      	ldr	r5, [r6, #4]
 8011c84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c86:	07d9      	lsls	r1, r3, #31
 8011c88:	d405      	bmi.n	8011c96 <_vfiprintf_r+0x32>
 8011c8a:	89ab      	ldrh	r3, [r5, #12]
 8011c8c:	059a      	lsls	r2, r3, #22
 8011c8e:	d402      	bmi.n	8011c96 <_vfiprintf_r+0x32>
 8011c90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c92:	f7ff fc7c 	bl	801158e <__retarget_lock_acquire_recursive>
 8011c96:	89ab      	ldrh	r3, [r5, #12]
 8011c98:	071b      	lsls	r3, r3, #28
 8011c9a:	d501      	bpl.n	8011ca0 <_vfiprintf_r+0x3c>
 8011c9c:	692b      	ldr	r3, [r5, #16]
 8011c9e:	b9eb      	cbnz	r3, 8011cdc <_vfiprintf_r+0x78>
 8011ca0:	4629      	mov	r1, r5
 8011ca2:	4630      	mov	r0, r6
 8011ca4:	f000 fb08 	bl	80122b8 <__swsetup_r>
 8011ca8:	b1c0      	cbz	r0, 8011cdc <_vfiprintf_r+0x78>
 8011caa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011cac:	07dc      	lsls	r4, r3, #31
 8011cae:	d50e      	bpl.n	8011cce <_vfiprintf_r+0x6a>
 8011cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8011cb4:	b01d      	add	sp, #116	; 0x74
 8011cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cba:	4b7b      	ldr	r3, [pc, #492]	; (8011ea8 <_vfiprintf_r+0x244>)
 8011cbc:	429d      	cmp	r5, r3
 8011cbe:	d101      	bne.n	8011cc4 <_vfiprintf_r+0x60>
 8011cc0:	68b5      	ldr	r5, [r6, #8]
 8011cc2:	e7df      	b.n	8011c84 <_vfiprintf_r+0x20>
 8011cc4:	4b79      	ldr	r3, [pc, #484]	; (8011eac <_vfiprintf_r+0x248>)
 8011cc6:	429d      	cmp	r5, r3
 8011cc8:	bf08      	it	eq
 8011cca:	68f5      	ldreq	r5, [r6, #12]
 8011ccc:	e7da      	b.n	8011c84 <_vfiprintf_r+0x20>
 8011cce:	89ab      	ldrh	r3, [r5, #12]
 8011cd0:	0598      	lsls	r0, r3, #22
 8011cd2:	d4ed      	bmi.n	8011cb0 <_vfiprintf_r+0x4c>
 8011cd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011cd6:	f7ff fc5b 	bl	8011590 <__retarget_lock_release_recursive>
 8011cda:	e7e9      	b.n	8011cb0 <_vfiprintf_r+0x4c>
 8011cdc:	2300      	movs	r3, #0
 8011cde:	9309      	str	r3, [sp, #36]	; 0x24
 8011ce0:	2320      	movs	r3, #32
 8011ce2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011ce6:	2330      	movs	r3, #48	; 0x30
 8011ce8:	f04f 0901 	mov.w	r9, #1
 8011cec:	f8cd 800c 	str.w	r8, [sp, #12]
 8011cf0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8011eb0 <_vfiprintf_r+0x24c>
 8011cf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011cf8:	4623      	mov	r3, r4
 8011cfa:	469a      	mov	sl, r3
 8011cfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d00:	b10a      	cbz	r2, 8011d06 <_vfiprintf_r+0xa2>
 8011d02:	2a25      	cmp	r2, #37	; 0x25
 8011d04:	d1f9      	bne.n	8011cfa <_vfiprintf_r+0x96>
 8011d06:	ebba 0b04 	subs.w	fp, sl, r4
 8011d0a:	d00b      	beq.n	8011d24 <_vfiprintf_r+0xc0>
 8011d0c:	465b      	mov	r3, fp
 8011d0e:	4622      	mov	r2, r4
 8011d10:	4629      	mov	r1, r5
 8011d12:	4630      	mov	r0, r6
 8011d14:	f7ff ff93 	bl	8011c3e <__sfputs_r>
 8011d18:	3001      	adds	r0, #1
 8011d1a:	f000 80aa 	beq.w	8011e72 <_vfiprintf_r+0x20e>
 8011d1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d20:	445a      	add	r2, fp
 8011d22:	9209      	str	r2, [sp, #36]	; 0x24
 8011d24:	f89a 3000 	ldrb.w	r3, [sl]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	f000 80a2 	beq.w	8011e72 <_vfiprintf_r+0x20e>
 8011d2e:	2300      	movs	r3, #0
 8011d30:	f04f 32ff 	mov.w	r2, #4294967295
 8011d34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d38:	f10a 0a01 	add.w	sl, sl, #1
 8011d3c:	9304      	str	r3, [sp, #16]
 8011d3e:	9307      	str	r3, [sp, #28]
 8011d40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011d44:	931a      	str	r3, [sp, #104]	; 0x68
 8011d46:	4654      	mov	r4, sl
 8011d48:	2205      	movs	r2, #5
 8011d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d4e:	4858      	ldr	r0, [pc, #352]	; (8011eb0 <_vfiprintf_r+0x24c>)
 8011d50:	f000 fb8c 	bl	801246c <memchr>
 8011d54:	9a04      	ldr	r2, [sp, #16]
 8011d56:	b9d8      	cbnz	r0, 8011d90 <_vfiprintf_r+0x12c>
 8011d58:	06d1      	lsls	r1, r2, #27
 8011d5a:	bf44      	itt	mi
 8011d5c:	2320      	movmi	r3, #32
 8011d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d62:	0713      	lsls	r3, r2, #28
 8011d64:	bf44      	itt	mi
 8011d66:	232b      	movmi	r3, #43	; 0x2b
 8011d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8011d70:	2b2a      	cmp	r3, #42	; 0x2a
 8011d72:	d015      	beq.n	8011da0 <_vfiprintf_r+0x13c>
 8011d74:	4654      	mov	r4, sl
 8011d76:	2000      	movs	r0, #0
 8011d78:	f04f 0c0a 	mov.w	ip, #10
 8011d7c:	9a07      	ldr	r2, [sp, #28]
 8011d7e:	4621      	mov	r1, r4
 8011d80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d84:	3b30      	subs	r3, #48	; 0x30
 8011d86:	2b09      	cmp	r3, #9
 8011d88:	d94e      	bls.n	8011e28 <_vfiprintf_r+0x1c4>
 8011d8a:	b1b0      	cbz	r0, 8011dba <_vfiprintf_r+0x156>
 8011d8c:	9207      	str	r2, [sp, #28]
 8011d8e:	e014      	b.n	8011dba <_vfiprintf_r+0x156>
 8011d90:	eba0 0308 	sub.w	r3, r0, r8
 8011d94:	fa09 f303 	lsl.w	r3, r9, r3
 8011d98:	4313      	orrs	r3, r2
 8011d9a:	46a2      	mov	sl, r4
 8011d9c:	9304      	str	r3, [sp, #16]
 8011d9e:	e7d2      	b.n	8011d46 <_vfiprintf_r+0xe2>
 8011da0:	9b03      	ldr	r3, [sp, #12]
 8011da2:	1d19      	adds	r1, r3, #4
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	9103      	str	r1, [sp, #12]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	bfbb      	ittet	lt
 8011dac:	425b      	neglt	r3, r3
 8011dae:	f042 0202 	orrlt.w	r2, r2, #2
 8011db2:	9307      	strge	r3, [sp, #28]
 8011db4:	9307      	strlt	r3, [sp, #28]
 8011db6:	bfb8      	it	lt
 8011db8:	9204      	strlt	r2, [sp, #16]
 8011dba:	7823      	ldrb	r3, [r4, #0]
 8011dbc:	2b2e      	cmp	r3, #46	; 0x2e
 8011dbe:	d10c      	bne.n	8011dda <_vfiprintf_r+0x176>
 8011dc0:	7863      	ldrb	r3, [r4, #1]
 8011dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8011dc4:	d135      	bne.n	8011e32 <_vfiprintf_r+0x1ce>
 8011dc6:	9b03      	ldr	r3, [sp, #12]
 8011dc8:	3402      	adds	r4, #2
 8011dca:	1d1a      	adds	r2, r3, #4
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	9203      	str	r2, [sp, #12]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	bfb8      	it	lt
 8011dd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8011dd8:	9305      	str	r3, [sp, #20]
 8011dda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011ec0 <_vfiprintf_r+0x25c>
 8011dde:	2203      	movs	r2, #3
 8011de0:	4650      	mov	r0, sl
 8011de2:	7821      	ldrb	r1, [r4, #0]
 8011de4:	f000 fb42 	bl	801246c <memchr>
 8011de8:	b140      	cbz	r0, 8011dfc <_vfiprintf_r+0x198>
 8011dea:	2340      	movs	r3, #64	; 0x40
 8011dec:	eba0 000a 	sub.w	r0, r0, sl
 8011df0:	fa03 f000 	lsl.w	r0, r3, r0
 8011df4:	9b04      	ldr	r3, [sp, #16]
 8011df6:	3401      	adds	r4, #1
 8011df8:	4303      	orrs	r3, r0
 8011dfa:	9304      	str	r3, [sp, #16]
 8011dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e00:	2206      	movs	r2, #6
 8011e02:	482c      	ldr	r0, [pc, #176]	; (8011eb4 <_vfiprintf_r+0x250>)
 8011e04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011e08:	f000 fb30 	bl	801246c <memchr>
 8011e0c:	2800      	cmp	r0, #0
 8011e0e:	d03f      	beq.n	8011e90 <_vfiprintf_r+0x22c>
 8011e10:	4b29      	ldr	r3, [pc, #164]	; (8011eb8 <_vfiprintf_r+0x254>)
 8011e12:	bb1b      	cbnz	r3, 8011e5c <_vfiprintf_r+0x1f8>
 8011e14:	9b03      	ldr	r3, [sp, #12]
 8011e16:	3307      	adds	r3, #7
 8011e18:	f023 0307 	bic.w	r3, r3, #7
 8011e1c:	3308      	adds	r3, #8
 8011e1e:	9303      	str	r3, [sp, #12]
 8011e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e22:	443b      	add	r3, r7
 8011e24:	9309      	str	r3, [sp, #36]	; 0x24
 8011e26:	e767      	b.n	8011cf8 <_vfiprintf_r+0x94>
 8011e28:	460c      	mov	r4, r1
 8011e2a:	2001      	movs	r0, #1
 8011e2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e30:	e7a5      	b.n	8011d7e <_vfiprintf_r+0x11a>
 8011e32:	2300      	movs	r3, #0
 8011e34:	f04f 0c0a 	mov.w	ip, #10
 8011e38:	4619      	mov	r1, r3
 8011e3a:	3401      	adds	r4, #1
 8011e3c:	9305      	str	r3, [sp, #20]
 8011e3e:	4620      	mov	r0, r4
 8011e40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e44:	3a30      	subs	r2, #48	; 0x30
 8011e46:	2a09      	cmp	r2, #9
 8011e48:	d903      	bls.n	8011e52 <_vfiprintf_r+0x1ee>
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d0c5      	beq.n	8011dda <_vfiprintf_r+0x176>
 8011e4e:	9105      	str	r1, [sp, #20]
 8011e50:	e7c3      	b.n	8011dda <_vfiprintf_r+0x176>
 8011e52:	4604      	mov	r4, r0
 8011e54:	2301      	movs	r3, #1
 8011e56:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e5a:	e7f0      	b.n	8011e3e <_vfiprintf_r+0x1da>
 8011e5c:	ab03      	add	r3, sp, #12
 8011e5e:	9300      	str	r3, [sp, #0]
 8011e60:	462a      	mov	r2, r5
 8011e62:	4630      	mov	r0, r6
 8011e64:	4b15      	ldr	r3, [pc, #84]	; (8011ebc <_vfiprintf_r+0x258>)
 8011e66:	a904      	add	r1, sp, #16
 8011e68:	f3af 8000 	nop.w
 8011e6c:	4607      	mov	r7, r0
 8011e6e:	1c78      	adds	r0, r7, #1
 8011e70:	d1d6      	bne.n	8011e20 <_vfiprintf_r+0x1bc>
 8011e72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e74:	07d9      	lsls	r1, r3, #31
 8011e76:	d405      	bmi.n	8011e84 <_vfiprintf_r+0x220>
 8011e78:	89ab      	ldrh	r3, [r5, #12]
 8011e7a:	059a      	lsls	r2, r3, #22
 8011e7c:	d402      	bmi.n	8011e84 <_vfiprintf_r+0x220>
 8011e7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e80:	f7ff fb86 	bl	8011590 <__retarget_lock_release_recursive>
 8011e84:	89ab      	ldrh	r3, [r5, #12]
 8011e86:	065b      	lsls	r3, r3, #25
 8011e88:	f53f af12 	bmi.w	8011cb0 <_vfiprintf_r+0x4c>
 8011e8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011e8e:	e711      	b.n	8011cb4 <_vfiprintf_r+0x50>
 8011e90:	ab03      	add	r3, sp, #12
 8011e92:	9300      	str	r3, [sp, #0]
 8011e94:	462a      	mov	r2, r5
 8011e96:	4630      	mov	r0, r6
 8011e98:	4b08      	ldr	r3, [pc, #32]	; (8011ebc <_vfiprintf_r+0x258>)
 8011e9a:	a904      	add	r1, sp, #16
 8011e9c:	f000 f882 	bl	8011fa4 <_printf_i>
 8011ea0:	e7e4      	b.n	8011e6c <_vfiprintf_r+0x208>
 8011ea2:	bf00      	nop
 8011ea4:	080409dc 	.word	0x080409dc
 8011ea8:	080409fc 	.word	0x080409fc
 8011eac:	080409bc 	.word	0x080409bc
 8011eb0:	08040ad2 	.word	0x08040ad2
 8011eb4:	08040adc 	.word	0x08040adc
 8011eb8:	00000000 	.word	0x00000000
 8011ebc:	08011c3f 	.word	0x08011c3f
 8011ec0:	08040ad8 	.word	0x08040ad8

08011ec4 <_printf_common>:
 8011ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ec8:	4616      	mov	r6, r2
 8011eca:	4699      	mov	r9, r3
 8011ecc:	688a      	ldr	r2, [r1, #8]
 8011ece:	690b      	ldr	r3, [r1, #16]
 8011ed0:	4607      	mov	r7, r0
 8011ed2:	4293      	cmp	r3, r2
 8011ed4:	bfb8      	it	lt
 8011ed6:	4613      	movlt	r3, r2
 8011ed8:	6033      	str	r3, [r6, #0]
 8011eda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011ede:	460c      	mov	r4, r1
 8011ee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011ee4:	b10a      	cbz	r2, 8011eea <_printf_common+0x26>
 8011ee6:	3301      	adds	r3, #1
 8011ee8:	6033      	str	r3, [r6, #0]
 8011eea:	6823      	ldr	r3, [r4, #0]
 8011eec:	0699      	lsls	r1, r3, #26
 8011eee:	bf42      	ittt	mi
 8011ef0:	6833      	ldrmi	r3, [r6, #0]
 8011ef2:	3302      	addmi	r3, #2
 8011ef4:	6033      	strmi	r3, [r6, #0]
 8011ef6:	6825      	ldr	r5, [r4, #0]
 8011ef8:	f015 0506 	ands.w	r5, r5, #6
 8011efc:	d106      	bne.n	8011f0c <_printf_common+0x48>
 8011efe:	f104 0a19 	add.w	sl, r4, #25
 8011f02:	68e3      	ldr	r3, [r4, #12]
 8011f04:	6832      	ldr	r2, [r6, #0]
 8011f06:	1a9b      	subs	r3, r3, r2
 8011f08:	42ab      	cmp	r3, r5
 8011f0a:	dc28      	bgt.n	8011f5e <_printf_common+0x9a>
 8011f0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011f10:	1e13      	subs	r3, r2, #0
 8011f12:	6822      	ldr	r2, [r4, #0]
 8011f14:	bf18      	it	ne
 8011f16:	2301      	movne	r3, #1
 8011f18:	0692      	lsls	r2, r2, #26
 8011f1a:	d42d      	bmi.n	8011f78 <_printf_common+0xb4>
 8011f1c:	4649      	mov	r1, r9
 8011f1e:	4638      	mov	r0, r7
 8011f20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011f24:	47c0      	blx	r8
 8011f26:	3001      	adds	r0, #1
 8011f28:	d020      	beq.n	8011f6c <_printf_common+0xa8>
 8011f2a:	6823      	ldr	r3, [r4, #0]
 8011f2c:	68e5      	ldr	r5, [r4, #12]
 8011f2e:	f003 0306 	and.w	r3, r3, #6
 8011f32:	2b04      	cmp	r3, #4
 8011f34:	bf18      	it	ne
 8011f36:	2500      	movne	r5, #0
 8011f38:	6832      	ldr	r2, [r6, #0]
 8011f3a:	f04f 0600 	mov.w	r6, #0
 8011f3e:	68a3      	ldr	r3, [r4, #8]
 8011f40:	bf08      	it	eq
 8011f42:	1aad      	subeq	r5, r5, r2
 8011f44:	6922      	ldr	r2, [r4, #16]
 8011f46:	bf08      	it	eq
 8011f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011f4c:	4293      	cmp	r3, r2
 8011f4e:	bfc4      	itt	gt
 8011f50:	1a9b      	subgt	r3, r3, r2
 8011f52:	18ed      	addgt	r5, r5, r3
 8011f54:	341a      	adds	r4, #26
 8011f56:	42b5      	cmp	r5, r6
 8011f58:	d11a      	bne.n	8011f90 <_printf_common+0xcc>
 8011f5a:	2000      	movs	r0, #0
 8011f5c:	e008      	b.n	8011f70 <_printf_common+0xac>
 8011f5e:	2301      	movs	r3, #1
 8011f60:	4652      	mov	r2, sl
 8011f62:	4649      	mov	r1, r9
 8011f64:	4638      	mov	r0, r7
 8011f66:	47c0      	blx	r8
 8011f68:	3001      	adds	r0, #1
 8011f6a:	d103      	bne.n	8011f74 <_printf_common+0xb0>
 8011f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f74:	3501      	adds	r5, #1
 8011f76:	e7c4      	b.n	8011f02 <_printf_common+0x3e>
 8011f78:	2030      	movs	r0, #48	; 0x30
 8011f7a:	18e1      	adds	r1, r4, r3
 8011f7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011f80:	1c5a      	adds	r2, r3, #1
 8011f82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011f86:	4422      	add	r2, r4
 8011f88:	3302      	adds	r3, #2
 8011f8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011f8e:	e7c5      	b.n	8011f1c <_printf_common+0x58>
 8011f90:	2301      	movs	r3, #1
 8011f92:	4622      	mov	r2, r4
 8011f94:	4649      	mov	r1, r9
 8011f96:	4638      	mov	r0, r7
 8011f98:	47c0      	blx	r8
 8011f9a:	3001      	adds	r0, #1
 8011f9c:	d0e6      	beq.n	8011f6c <_printf_common+0xa8>
 8011f9e:	3601      	adds	r6, #1
 8011fa0:	e7d9      	b.n	8011f56 <_printf_common+0x92>
	...

08011fa4 <_printf_i>:
 8011fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011fa8:	460c      	mov	r4, r1
 8011faa:	7e27      	ldrb	r7, [r4, #24]
 8011fac:	4691      	mov	r9, r2
 8011fae:	2f78      	cmp	r7, #120	; 0x78
 8011fb0:	4680      	mov	r8, r0
 8011fb2:	469a      	mov	sl, r3
 8011fb4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011fb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011fba:	d807      	bhi.n	8011fcc <_printf_i+0x28>
 8011fbc:	2f62      	cmp	r7, #98	; 0x62
 8011fbe:	d80a      	bhi.n	8011fd6 <_printf_i+0x32>
 8011fc0:	2f00      	cmp	r7, #0
 8011fc2:	f000 80d9 	beq.w	8012178 <_printf_i+0x1d4>
 8011fc6:	2f58      	cmp	r7, #88	; 0x58
 8011fc8:	f000 80a4 	beq.w	8012114 <_printf_i+0x170>
 8011fcc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011fd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011fd4:	e03a      	b.n	801204c <_printf_i+0xa8>
 8011fd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011fda:	2b15      	cmp	r3, #21
 8011fdc:	d8f6      	bhi.n	8011fcc <_printf_i+0x28>
 8011fde:	a001      	add	r0, pc, #4	; (adr r0, 8011fe4 <_printf_i+0x40>)
 8011fe0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011fe4:	0801203d 	.word	0x0801203d
 8011fe8:	08012051 	.word	0x08012051
 8011fec:	08011fcd 	.word	0x08011fcd
 8011ff0:	08011fcd 	.word	0x08011fcd
 8011ff4:	08011fcd 	.word	0x08011fcd
 8011ff8:	08011fcd 	.word	0x08011fcd
 8011ffc:	08012051 	.word	0x08012051
 8012000:	08011fcd 	.word	0x08011fcd
 8012004:	08011fcd 	.word	0x08011fcd
 8012008:	08011fcd 	.word	0x08011fcd
 801200c:	08011fcd 	.word	0x08011fcd
 8012010:	0801215f 	.word	0x0801215f
 8012014:	08012081 	.word	0x08012081
 8012018:	08012141 	.word	0x08012141
 801201c:	08011fcd 	.word	0x08011fcd
 8012020:	08011fcd 	.word	0x08011fcd
 8012024:	08012181 	.word	0x08012181
 8012028:	08011fcd 	.word	0x08011fcd
 801202c:	08012081 	.word	0x08012081
 8012030:	08011fcd 	.word	0x08011fcd
 8012034:	08011fcd 	.word	0x08011fcd
 8012038:	08012149 	.word	0x08012149
 801203c:	680b      	ldr	r3, [r1, #0]
 801203e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012042:	1d1a      	adds	r2, r3, #4
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	600a      	str	r2, [r1, #0]
 8012048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801204c:	2301      	movs	r3, #1
 801204e:	e0a4      	b.n	801219a <_printf_i+0x1f6>
 8012050:	6825      	ldr	r5, [r4, #0]
 8012052:	6808      	ldr	r0, [r1, #0]
 8012054:	062e      	lsls	r6, r5, #24
 8012056:	f100 0304 	add.w	r3, r0, #4
 801205a:	d50a      	bpl.n	8012072 <_printf_i+0xce>
 801205c:	6805      	ldr	r5, [r0, #0]
 801205e:	600b      	str	r3, [r1, #0]
 8012060:	2d00      	cmp	r5, #0
 8012062:	da03      	bge.n	801206c <_printf_i+0xc8>
 8012064:	232d      	movs	r3, #45	; 0x2d
 8012066:	426d      	negs	r5, r5
 8012068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801206c:	230a      	movs	r3, #10
 801206e:	485e      	ldr	r0, [pc, #376]	; (80121e8 <_printf_i+0x244>)
 8012070:	e019      	b.n	80120a6 <_printf_i+0x102>
 8012072:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012076:	6805      	ldr	r5, [r0, #0]
 8012078:	600b      	str	r3, [r1, #0]
 801207a:	bf18      	it	ne
 801207c:	b22d      	sxthne	r5, r5
 801207e:	e7ef      	b.n	8012060 <_printf_i+0xbc>
 8012080:	680b      	ldr	r3, [r1, #0]
 8012082:	6825      	ldr	r5, [r4, #0]
 8012084:	1d18      	adds	r0, r3, #4
 8012086:	6008      	str	r0, [r1, #0]
 8012088:	0628      	lsls	r0, r5, #24
 801208a:	d501      	bpl.n	8012090 <_printf_i+0xec>
 801208c:	681d      	ldr	r5, [r3, #0]
 801208e:	e002      	b.n	8012096 <_printf_i+0xf2>
 8012090:	0669      	lsls	r1, r5, #25
 8012092:	d5fb      	bpl.n	801208c <_printf_i+0xe8>
 8012094:	881d      	ldrh	r5, [r3, #0]
 8012096:	2f6f      	cmp	r7, #111	; 0x6f
 8012098:	bf0c      	ite	eq
 801209a:	2308      	moveq	r3, #8
 801209c:	230a      	movne	r3, #10
 801209e:	4852      	ldr	r0, [pc, #328]	; (80121e8 <_printf_i+0x244>)
 80120a0:	2100      	movs	r1, #0
 80120a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80120a6:	6866      	ldr	r6, [r4, #4]
 80120a8:	2e00      	cmp	r6, #0
 80120aa:	bfa8      	it	ge
 80120ac:	6821      	ldrge	r1, [r4, #0]
 80120ae:	60a6      	str	r6, [r4, #8]
 80120b0:	bfa4      	itt	ge
 80120b2:	f021 0104 	bicge.w	r1, r1, #4
 80120b6:	6021      	strge	r1, [r4, #0]
 80120b8:	b90d      	cbnz	r5, 80120be <_printf_i+0x11a>
 80120ba:	2e00      	cmp	r6, #0
 80120bc:	d04d      	beq.n	801215a <_printf_i+0x1b6>
 80120be:	4616      	mov	r6, r2
 80120c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80120c4:	fb03 5711 	mls	r7, r3, r1, r5
 80120c8:	5dc7      	ldrb	r7, [r0, r7]
 80120ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80120ce:	462f      	mov	r7, r5
 80120d0:	42bb      	cmp	r3, r7
 80120d2:	460d      	mov	r5, r1
 80120d4:	d9f4      	bls.n	80120c0 <_printf_i+0x11c>
 80120d6:	2b08      	cmp	r3, #8
 80120d8:	d10b      	bne.n	80120f2 <_printf_i+0x14e>
 80120da:	6823      	ldr	r3, [r4, #0]
 80120dc:	07df      	lsls	r7, r3, #31
 80120de:	d508      	bpl.n	80120f2 <_printf_i+0x14e>
 80120e0:	6923      	ldr	r3, [r4, #16]
 80120e2:	6861      	ldr	r1, [r4, #4]
 80120e4:	4299      	cmp	r1, r3
 80120e6:	bfde      	ittt	le
 80120e8:	2330      	movle	r3, #48	; 0x30
 80120ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80120ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80120f2:	1b92      	subs	r2, r2, r6
 80120f4:	6122      	str	r2, [r4, #16]
 80120f6:	464b      	mov	r3, r9
 80120f8:	4621      	mov	r1, r4
 80120fa:	4640      	mov	r0, r8
 80120fc:	f8cd a000 	str.w	sl, [sp]
 8012100:	aa03      	add	r2, sp, #12
 8012102:	f7ff fedf 	bl	8011ec4 <_printf_common>
 8012106:	3001      	adds	r0, #1
 8012108:	d14c      	bne.n	80121a4 <_printf_i+0x200>
 801210a:	f04f 30ff 	mov.w	r0, #4294967295
 801210e:	b004      	add	sp, #16
 8012110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012114:	4834      	ldr	r0, [pc, #208]	; (80121e8 <_printf_i+0x244>)
 8012116:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801211a:	680e      	ldr	r6, [r1, #0]
 801211c:	6823      	ldr	r3, [r4, #0]
 801211e:	f856 5b04 	ldr.w	r5, [r6], #4
 8012122:	061f      	lsls	r7, r3, #24
 8012124:	600e      	str	r6, [r1, #0]
 8012126:	d514      	bpl.n	8012152 <_printf_i+0x1ae>
 8012128:	07d9      	lsls	r1, r3, #31
 801212a:	bf44      	itt	mi
 801212c:	f043 0320 	orrmi.w	r3, r3, #32
 8012130:	6023      	strmi	r3, [r4, #0]
 8012132:	b91d      	cbnz	r5, 801213c <_printf_i+0x198>
 8012134:	6823      	ldr	r3, [r4, #0]
 8012136:	f023 0320 	bic.w	r3, r3, #32
 801213a:	6023      	str	r3, [r4, #0]
 801213c:	2310      	movs	r3, #16
 801213e:	e7af      	b.n	80120a0 <_printf_i+0xfc>
 8012140:	6823      	ldr	r3, [r4, #0]
 8012142:	f043 0320 	orr.w	r3, r3, #32
 8012146:	6023      	str	r3, [r4, #0]
 8012148:	2378      	movs	r3, #120	; 0x78
 801214a:	4828      	ldr	r0, [pc, #160]	; (80121ec <_printf_i+0x248>)
 801214c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012150:	e7e3      	b.n	801211a <_printf_i+0x176>
 8012152:	065e      	lsls	r6, r3, #25
 8012154:	bf48      	it	mi
 8012156:	b2ad      	uxthmi	r5, r5
 8012158:	e7e6      	b.n	8012128 <_printf_i+0x184>
 801215a:	4616      	mov	r6, r2
 801215c:	e7bb      	b.n	80120d6 <_printf_i+0x132>
 801215e:	680b      	ldr	r3, [r1, #0]
 8012160:	6826      	ldr	r6, [r4, #0]
 8012162:	1d1d      	adds	r5, r3, #4
 8012164:	6960      	ldr	r0, [r4, #20]
 8012166:	600d      	str	r5, [r1, #0]
 8012168:	0635      	lsls	r5, r6, #24
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	d501      	bpl.n	8012172 <_printf_i+0x1ce>
 801216e:	6018      	str	r0, [r3, #0]
 8012170:	e002      	b.n	8012178 <_printf_i+0x1d4>
 8012172:	0671      	lsls	r1, r6, #25
 8012174:	d5fb      	bpl.n	801216e <_printf_i+0x1ca>
 8012176:	8018      	strh	r0, [r3, #0]
 8012178:	2300      	movs	r3, #0
 801217a:	4616      	mov	r6, r2
 801217c:	6123      	str	r3, [r4, #16]
 801217e:	e7ba      	b.n	80120f6 <_printf_i+0x152>
 8012180:	680b      	ldr	r3, [r1, #0]
 8012182:	1d1a      	adds	r2, r3, #4
 8012184:	600a      	str	r2, [r1, #0]
 8012186:	681e      	ldr	r6, [r3, #0]
 8012188:	2100      	movs	r1, #0
 801218a:	4630      	mov	r0, r6
 801218c:	6862      	ldr	r2, [r4, #4]
 801218e:	f000 f96d 	bl	801246c <memchr>
 8012192:	b108      	cbz	r0, 8012198 <_printf_i+0x1f4>
 8012194:	1b80      	subs	r0, r0, r6
 8012196:	6060      	str	r0, [r4, #4]
 8012198:	6863      	ldr	r3, [r4, #4]
 801219a:	6123      	str	r3, [r4, #16]
 801219c:	2300      	movs	r3, #0
 801219e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80121a2:	e7a8      	b.n	80120f6 <_printf_i+0x152>
 80121a4:	4632      	mov	r2, r6
 80121a6:	4649      	mov	r1, r9
 80121a8:	4640      	mov	r0, r8
 80121aa:	6923      	ldr	r3, [r4, #16]
 80121ac:	47d0      	blx	sl
 80121ae:	3001      	adds	r0, #1
 80121b0:	d0ab      	beq.n	801210a <_printf_i+0x166>
 80121b2:	6823      	ldr	r3, [r4, #0]
 80121b4:	079b      	lsls	r3, r3, #30
 80121b6:	d413      	bmi.n	80121e0 <_printf_i+0x23c>
 80121b8:	68e0      	ldr	r0, [r4, #12]
 80121ba:	9b03      	ldr	r3, [sp, #12]
 80121bc:	4298      	cmp	r0, r3
 80121be:	bfb8      	it	lt
 80121c0:	4618      	movlt	r0, r3
 80121c2:	e7a4      	b.n	801210e <_printf_i+0x16a>
 80121c4:	2301      	movs	r3, #1
 80121c6:	4632      	mov	r2, r6
 80121c8:	4649      	mov	r1, r9
 80121ca:	4640      	mov	r0, r8
 80121cc:	47d0      	blx	sl
 80121ce:	3001      	adds	r0, #1
 80121d0:	d09b      	beq.n	801210a <_printf_i+0x166>
 80121d2:	3501      	adds	r5, #1
 80121d4:	68e3      	ldr	r3, [r4, #12]
 80121d6:	9903      	ldr	r1, [sp, #12]
 80121d8:	1a5b      	subs	r3, r3, r1
 80121da:	42ab      	cmp	r3, r5
 80121dc:	dcf2      	bgt.n	80121c4 <_printf_i+0x220>
 80121de:	e7eb      	b.n	80121b8 <_printf_i+0x214>
 80121e0:	2500      	movs	r5, #0
 80121e2:	f104 0619 	add.w	r6, r4, #25
 80121e6:	e7f5      	b.n	80121d4 <_printf_i+0x230>
 80121e8:	08040ae3 	.word	0x08040ae3
 80121ec:	08040af4 	.word	0x08040af4

080121f0 <_read_r>:
 80121f0:	b538      	push	{r3, r4, r5, lr}
 80121f2:	4604      	mov	r4, r0
 80121f4:	4608      	mov	r0, r1
 80121f6:	4611      	mov	r1, r2
 80121f8:	2200      	movs	r2, #0
 80121fa:	4d05      	ldr	r5, [pc, #20]	; (8012210 <_read_r+0x20>)
 80121fc:	602a      	str	r2, [r5, #0]
 80121fe:	461a      	mov	r2, r3
 8012200:	f7f0 faf9 	bl	80027f6 <_read>
 8012204:	1c43      	adds	r3, r0, #1
 8012206:	d102      	bne.n	801220e <_read_r+0x1e>
 8012208:	682b      	ldr	r3, [r5, #0]
 801220a:	b103      	cbz	r3, 801220e <_read_r+0x1e>
 801220c:	6023      	str	r3, [r4, #0]
 801220e:	bd38      	pop	{r3, r4, r5, pc}
 8012210:	200024f4 	.word	0x200024f4

08012214 <__swbuf_r>:
 8012214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012216:	460e      	mov	r6, r1
 8012218:	4614      	mov	r4, r2
 801221a:	4605      	mov	r5, r0
 801221c:	b118      	cbz	r0, 8012226 <__swbuf_r+0x12>
 801221e:	6983      	ldr	r3, [r0, #24]
 8012220:	b90b      	cbnz	r3, 8012226 <__swbuf_r+0x12>
 8012222:	f7ff f8f1 	bl	8011408 <__sinit>
 8012226:	4b21      	ldr	r3, [pc, #132]	; (80122ac <__swbuf_r+0x98>)
 8012228:	429c      	cmp	r4, r3
 801222a:	d12b      	bne.n	8012284 <__swbuf_r+0x70>
 801222c:	686c      	ldr	r4, [r5, #4]
 801222e:	69a3      	ldr	r3, [r4, #24]
 8012230:	60a3      	str	r3, [r4, #8]
 8012232:	89a3      	ldrh	r3, [r4, #12]
 8012234:	071a      	lsls	r2, r3, #28
 8012236:	d52f      	bpl.n	8012298 <__swbuf_r+0x84>
 8012238:	6923      	ldr	r3, [r4, #16]
 801223a:	b36b      	cbz	r3, 8012298 <__swbuf_r+0x84>
 801223c:	6923      	ldr	r3, [r4, #16]
 801223e:	6820      	ldr	r0, [r4, #0]
 8012240:	b2f6      	uxtb	r6, r6
 8012242:	1ac0      	subs	r0, r0, r3
 8012244:	6963      	ldr	r3, [r4, #20]
 8012246:	4637      	mov	r7, r6
 8012248:	4283      	cmp	r3, r0
 801224a:	dc04      	bgt.n	8012256 <__swbuf_r+0x42>
 801224c:	4621      	mov	r1, r4
 801224e:	4628      	mov	r0, r5
 8012250:	f7ff fc74 	bl	8011b3c <_fflush_r>
 8012254:	bb30      	cbnz	r0, 80122a4 <__swbuf_r+0x90>
 8012256:	68a3      	ldr	r3, [r4, #8]
 8012258:	3001      	adds	r0, #1
 801225a:	3b01      	subs	r3, #1
 801225c:	60a3      	str	r3, [r4, #8]
 801225e:	6823      	ldr	r3, [r4, #0]
 8012260:	1c5a      	adds	r2, r3, #1
 8012262:	6022      	str	r2, [r4, #0]
 8012264:	701e      	strb	r6, [r3, #0]
 8012266:	6963      	ldr	r3, [r4, #20]
 8012268:	4283      	cmp	r3, r0
 801226a:	d004      	beq.n	8012276 <__swbuf_r+0x62>
 801226c:	89a3      	ldrh	r3, [r4, #12]
 801226e:	07db      	lsls	r3, r3, #31
 8012270:	d506      	bpl.n	8012280 <__swbuf_r+0x6c>
 8012272:	2e0a      	cmp	r6, #10
 8012274:	d104      	bne.n	8012280 <__swbuf_r+0x6c>
 8012276:	4621      	mov	r1, r4
 8012278:	4628      	mov	r0, r5
 801227a:	f7ff fc5f 	bl	8011b3c <_fflush_r>
 801227e:	b988      	cbnz	r0, 80122a4 <__swbuf_r+0x90>
 8012280:	4638      	mov	r0, r7
 8012282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012284:	4b0a      	ldr	r3, [pc, #40]	; (80122b0 <__swbuf_r+0x9c>)
 8012286:	429c      	cmp	r4, r3
 8012288:	d101      	bne.n	801228e <__swbuf_r+0x7a>
 801228a:	68ac      	ldr	r4, [r5, #8]
 801228c:	e7cf      	b.n	801222e <__swbuf_r+0x1a>
 801228e:	4b09      	ldr	r3, [pc, #36]	; (80122b4 <__swbuf_r+0xa0>)
 8012290:	429c      	cmp	r4, r3
 8012292:	bf08      	it	eq
 8012294:	68ec      	ldreq	r4, [r5, #12]
 8012296:	e7ca      	b.n	801222e <__swbuf_r+0x1a>
 8012298:	4621      	mov	r1, r4
 801229a:	4628      	mov	r0, r5
 801229c:	f000 f80c 	bl	80122b8 <__swsetup_r>
 80122a0:	2800      	cmp	r0, #0
 80122a2:	d0cb      	beq.n	801223c <__swbuf_r+0x28>
 80122a4:	f04f 37ff 	mov.w	r7, #4294967295
 80122a8:	e7ea      	b.n	8012280 <__swbuf_r+0x6c>
 80122aa:	bf00      	nop
 80122ac:	080409dc 	.word	0x080409dc
 80122b0:	080409fc 	.word	0x080409fc
 80122b4:	080409bc 	.word	0x080409bc

080122b8 <__swsetup_r>:
 80122b8:	4b32      	ldr	r3, [pc, #200]	; (8012384 <__swsetup_r+0xcc>)
 80122ba:	b570      	push	{r4, r5, r6, lr}
 80122bc:	681d      	ldr	r5, [r3, #0]
 80122be:	4606      	mov	r6, r0
 80122c0:	460c      	mov	r4, r1
 80122c2:	b125      	cbz	r5, 80122ce <__swsetup_r+0x16>
 80122c4:	69ab      	ldr	r3, [r5, #24]
 80122c6:	b913      	cbnz	r3, 80122ce <__swsetup_r+0x16>
 80122c8:	4628      	mov	r0, r5
 80122ca:	f7ff f89d 	bl	8011408 <__sinit>
 80122ce:	4b2e      	ldr	r3, [pc, #184]	; (8012388 <__swsetup_r+0xd0>)
 80122d0:	429c      	cmp	r4, r3
 80122d2:	d10f      	bne.n	80122f4 <__swsetup_r+0x3c>
 80122d4:	686c      	ldr	r4, [r5, #4]
 80122d6:	89a3      	ldrh	r3, [r4, #12]
 80122d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80122dc:	0719      	lsls	r1, r3, #28
 80122de:	d42c      	bmi.n	801233a <__swsetup_r+0x82>
 80122e0:	06dd      	lsls	r5, r3, #27
 80122e2:	d411      	bmi.n	8012308 <__swsetup_r+0x50>
 80122e4:	2309      	movs	r3, #9
 80122e6:	6033      	str	r3, [r6, #0]
 80122e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80122ec:	f04f 30ff 	mov.w	r0, #4294967295
 80122f0:	81a3      	strh	r3, [r4, #12]
 80122f2:	e03e      	b.n	8012372 <__swsetup_r+0xba>
 80122f4:	4b25      	ldr	r3, [pc, #148]	; (801238c <__swsetup_r+0xd4>)
 80122f6:	429c      	cmp	r4, r3
 80122f8:	d101      	bne.n	80122fe <__swsetup_r+0x46>
 80122fa:	68ac      	ldr	r4, [r5, #8]
 80122fc:	e7eb      	b.n	80122d6 <__swsetup_r+0x1e>
 80122fe:	4b24      	ldr	r3, [pc, #144]	; (8012390 <__swsetup_r+0xd8>)
 8012300:	429c      	cmp	r4, r3
 8012302:	bf08      	it	eq
 8012304:	68ec      	ldreq	r4, [r5, #12]
 8012306:	e7e6      	b.n	80122d6 <__swsetup_r+0x1e>
 8012308:	0758      	lsls	r0, r3, #29
 801230a:	d512      	bpl.n	8012332 <__swsetup_r+0x7a>
 801230c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801230e:	b141      	cbz	r1, 8012322 <__swsetup_r+0x6a>
 8012310:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012314:	4299      	cmp	r1, r3
 8012316:	d002      	beq.n	801231e <__swsetup_r+0x66>
 8012318:	4630      	mov	r0, r6
 801231a:	f7ff f961 	bl	80115e0 <_free_r>
 801231e:	2300      	movs	r3, #0
 8012320:	6363      	str	r3, [r4, #52]	; 0x34
 8012322:	89a3      	ldrh	r3, [r4, #12]
 8012324:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012328:	81a3      	strh	r3, [r4, #12]
 801232a:	2300      	movs	r3, #0
 801232c:	6063      	str	r3, [r4, #4]
 801232e:	6923      	ldr	r3, [r4, #16]
 8012330:	6023      	str	r3, [r4, #0]
 8012332:	89a3      	ldrh	r3, [r4, #12]
 8012334:	f043 0308 	orr.w	r3, r3, #8
 8012338:	81a3      	strh	r3, [r4, #12]
 801233a:	6923      	ldr	r3, [r4, #16]
 801233c:	b94b      	cbnz	r3, 8012352 <__swsetup_r+0x9a>
 801233e:	89a3      	ldrh	r3, [r4, #12]
 8012340:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012348:	d003      	beq.n	8012352 <__swsetup_r+0x9a>
 801234a:	4621      	mov	r1, r4
 801234c:	4630      	mov	r0, r6
 801234e:	f000 f84d 	bl	80123ec <__smakebuf_r>
 8012352:	89a0      	ldrh	r0, [r4, #12]
 8012354:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012358:	f010 0301 	ands.w	r3, r0, #1
 801235c:	d00a      	beq.n	8012374 <__swsetup_r+0xbc>
 801235e:	2300      	movs	r3, #0
 8012360:	60a3      	str	r3, [r4, #8]
 8012362:	6963      	ldr	r3, [r4, #20]
 8012364:	425b      	negs	r3, r3
 8012366:	61a3      	str	r3, [r4, #24]
 8012368:	6923      	ldr	r3, [r4, #16]
 801236a:	b943      	cbnz	r3, 801237e <__swsetup_r+0xc6>
 801236c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012370:	d1ba      	bne.n	80122e8 <__swsetup_r+0x30>
 8012372:	bd70      	pop	{r4, r5, r6, pc}
 8012374:	0781      	lsls	r1, r0, #30
 8012376:	bf58      	it	pl
 8012378:	6963      	ldrpl	r3, [r4, #20]
 801237a:	60a3      	str	r3, [r4, #8]
 801237c:	e7f4      	b.n	8012368 <__swsetup_r+0xb0>
 801237e:	2000      	movs	r0, #0
 8012380:	e7f7      	b.n	8012372 <__swsetup_r+0xba>
 8012382:	bf00      	nop
 8012384:	2000014c 	.word	0x2000014c
 8012388:	080409dc 	.word	0x080409dc
 801238c:	080409fc 	.word	0x080409fc
 8012390:	080409bc 	.word	0x080409bc

08012394 <abort>:
 8012394:	2006      	movs	r0, #6
 8012396:	b508      	push	{r3, lr}
 8012398:	f000 f89e 	bl	80124d8 <raise>
 801239c:	2001      	movs	r0, #1
 801239e:	f7f0 fa20 	bl	80027e2 <_exit>

080123a2 <__swhatbuf_r>:
 80123a2:	b570      	push	{r4, r5, r6, lr}
 80123a4:	460e      	mov	r6, r1
 80123a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123aa:	4614      	mov	r4, r2
 80123ac:	2900      	cmp	r1, #0
 80123ae:	461d      	mov	r5, r3
 80123b0:	b096      	sub	sp, #88	; 0x58
 80123b2:	da07      	bge.n	80123c4 <__swhatbuf_r+0x22>
 80123b4:	2300      	movs	r3, #0
 80123b6:	602b      	str	r3, [r5, #0]
 80123b8:	89b3      	ldrh	r3, [r6, #12]
 80123ba:	061a      	lsls	r2, r3, #24
 80123bc:	d410      	bmi.n	80123e0 <__swhatbuf_r+0x3e>
 80123be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80123c2:	e00e      	b.n	80123e2 <__swhatbuf_r+0x40>
 80123c4:	466a      	mov	r2, sp
 80123c6:	f000 f8a3 	bl	8012510 <_fstat_r>
 80123ca:	2800      	cmp	r0, #0
 80123cc:	dbf2      	blt.n	80123b4 <__swhatbuf_r+0x12>
 80123ce:	9a01      	ldr	r2, [sp, #4]
 80123d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80123d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80123d8:	425a      	negs	r2, r3
 80123da:	415a      	adcs	r2, r3
 80123dc:	602a      	str	r2, [r5, #0]
 80123de:	e7ee      	b.n	80123be <__swhatbuf_r+0x1c>
 80123e0:	2340      	movs	r3, #64	; 0x40
 80123e2:	2000      	movs	r0, #0
 80123e4:	6023      	str	r3, [r4, #0]
 80123e6:	b016      	add	sp, #88	; 0x58
 80123e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080123ec <__smakebuf_r>:
 80123ec:	898b      	ldrh	r3, [r1, #12]
 80123ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80123f0:	079d      	lsls	r5, r3, #30
 80123f2:	4606      	mov	r6, r0
 80123f4:	460c      	mov	r4, r1
 80123f6:	d507      	bpl.n	8012408 <__smakebuf_r+0x1c>
 80123f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80123fc:	6023      	str	r3, [r4, #0]
 80123fe:	6123      	str	r3, [r4, #16]
 8012400:	2301      	movs	r3, #1
 8012402:	6163      	str	r3, [r4, #20]
 8012404:	b002      	add	sp, #8
 8012406:	bd70      	pop	{r4, r5, r6, pc}
 8012408:	466a      	mov	r2, sp
 801240a:	ab01      	add	r3, sp, #4
 801240c:	f7ff ffc9 	bl	80123a2 <__swhatbuf_r>
 8012410:	9900      	ldr	r1, [sp, #0]
 8012412:	4605      	mov	r5, r0
 8012414:	4630      	mov	r0, r6
 8012416:	f7ff f92f 	bl	8011678 <_malloc_r>
 801241a:	b948      	cbnz	r0, 8012430 <__smakebuf_r+0x44>
 801241c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012420:	059a      	lsls	r2, r3, #22
 8012422:	d4ef      	bmi.n	8012404 <__smakebuf_r+0x18>
 8012424:	f023 0303 	bic.w	r3, r3, #3
 8012428:	f043 0302 	orr.w	r3, r3, #2
 801242c:	81a3      	strh	r3, [r4, #12]
 801242e:	e7e3      	b.n	80123f8 <__smakebuf_r+0xc>
 8012430:	4b0d      	ldr	r3, [pc, #52]	; (8012468 <__smakebuf_r+0x7c>)
 8012432:	62b3      	str	r3, [r6, #40]	; 0x28
 8012434:	89a3      	ldrh	r3, [r4, #12]
 8012436:	6020      	str	r0, [r4, #0]
 8012438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801243c:	81a3      	strh	r3, [r4, #12]
 801243e:	9b00      	ldr	r3, [sp, #0]
 8012440:	6120      	str	r0, [r4, #16]
 8012442:	6163      	str	r3, [r4, #20]
 8012444:	9b01      	ldr	r3, [sp, #4]
 8012446:	b15b      	cbz	r3, 8012460 <__smakebuf_r+0x74>
 8012448:	4630      	mov	r0, r6
 801244a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801244e:	f000 f871 	bl	8012534 <_isatty_r>
 8012452:	b128      	cbz	r0, 8012460 <__smakebuf_r+0x74>
 8012454:	89a3      	ldrh	r3, [r4, #12]
 8012456:	f023 0303 	bic.w	r3, r3, #3
 801245a:	f043 0301 	orr.w	r3, r3, #1
 801245e:	81a3      	strh	r3, [r4, #12]
 8012460:	89a0      	ldrh	r0, [r4, #12]
 8012462:	4305      	orrs	r5, r0
 8012464:	81a5      	strh	r5, [r4, #12]
 8012466:	e7cd      	b.n	8012404 <__smakebuf_r+0x18>
 8012468:	080113a1 	.word	0x080113a1

0801246c <memchr>:
 801246c:	4603      	mov	r3, r0
 801246e:	b510      	push	{r4, lr}
 8012470:	b2c9      	uxtb	r1, r1
 8012472:	4402      	add	r2, r0
 8012474:	4293      	cmp	r3, r2
 8012476:	4618      	mov	r0, r3
 8012478:	d101      	bne.n	801247e <memchr+0x12>
 801247a:	2000      	movs	r0, #0
 801247c:	e003      	b.n	8012486 <memchr+0x1a>
 801247e:	7804      	ldrb	r4, [r0, #0]
 8012480:	3301      	adds	r3, #1
 8012482:	428c      	cmp	r4, r1
 8012484:	d1f6      	bne.n	8012474 <memchr+0x8>
 8012486:	bd10      	pop	{r4, pc}

08012488 <_raise_r>:
 8012488:	291f      	cmp	r1, #31
 801248a:	b538      	push	{r3, r4, r5, lr}
 801248c:	4604      	mov	r4, r0
 801248e:	460d      	mov	r5, r1
 8012490:	d904      	bls.n	801249c <_raise_r+0x14>
 8012492:	2316      	movs	r3, #22
 8012494:	6003      	str	r3, [r0, #0]
 8012496:	f04f 30ff 	mov.w	r0, #4294967295
 801249a:	bd38      	pop	{r3, r4, r5, pc}
 801249c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801249e:	b112      	cbz	r2, 80124a6 <_raise_r+0x1e>
 80124a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80124a4:	b94b      	cbnz	r3, 80124ba <_raise_r+0x32>
 80124a6:	4620      	mov	r0, r4
 80124a8:	f000 f830 	bl	801250c <_getpid_r>
 80124ac:	462a      	mov	r2, r5
 80124ae:	4601      	mov	r1, r0
 80124b0:	4620      	mov	r0, r4
 80124b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124b6:	f000 b817 	b.w	80124e8 <_kill_r>
 80124ba:	2b01      	cmp	r3, #1
 80124bc:	d00a      	beq.n	80124d4 <_raise_r+0x4c>
 80124be:	1c59      	adds	r1, r3, #1
 80124c0:	d103      	bne.n	80124ca <_raise_r+0x42>
 80124c2:	2316      	movs	r3, #22
 80124c4:	6003      	str	r3, [r0, #0]
 80124c6:	2001      	movs	r0, #1
 80124c8:	e7e7      	b.n	801249a <_raise_r+0x12>
 80124ca:	2400      	movs	r4, #0
 80124cc:	4628      	mov	r0, r5
 80124ce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80124d2:	4798      	blx	r3
 80124d4:	2000      	movs	r0, #0
 80124d6:	e7e0      	b.n	801249a <_raise_r+0x12>

080124d8 <raise>:
 80124d8:	4b02      	ldr	r3, [pc, #8]	; (80124e4 <raise+0xc>)
 80124da:	4601      	mov	r1, r0
 80124dc:	6818      	ldr	r0, [r3, #0]
 80124de:	f7ff bfd3 	b.w	8012488 <_raise_r>
 80124e2:	bf00      	nop
 80124e4:	2000014c 	.word	0x2000014c

080124e8 <_kill_r>:
 80124e8:	b538      	push	{r3, r4, r5, lr}
 80124ea:	2300      	movs	r3, #0
 80124ec:	4d06      	ldr	r5, [pc, #24]	; (8012508 <_kill_r+0x20>)
 80124ee:	4604      	mov	r4, r0
 80124f0:	4608      	mov	r0, r1
 80124f2:	4611      	mov	r1, r2
 80124f4:	602b      	str	r3, [r5, #0]
 80124f6:	f7f0 f964 	bl	80027c2 <_kill>
 80124fa:	1c43      	adds	r3, r0, #1
 80124fc:	d102      	bne.n	8012504 <_kill_r+0x1c>
 80124fe:	682b      	ldr	r3, [r5, #0]
 8012500:	b103      	cbz	r3, 8012504 <_kill_r+0x1c>
 8012502:	6023      	str	r3, [r4, #0]
 8012504:	bd38      	pop	{r3, r4, r5, pc}
 8012506:	bf00      	nop
 8012508:	200024f4 	.word	0x200024f4

0801250c <_getpid_r>:
 801250c:	f7f0 b952 	b.w	80027b4 <_getpid>

08012510 <_fstat_r>:
 8012510:	b538      	push	{r3, r4, r5, lr}
 8012512:	2300      	movs	r3, #0
 8012514:	4d06      	ldr	r5, [pc, #24]	; (8012530 <_fstat_r+0x20>)
 8012516:	4604      	mov	r4, r0
 8012518:	4608      	mov	r0, r1
 801251a:	4611      	mov	r1, r2
 801251c:	602b      	str	r3, [r5, #0]
 801251e:	f7f0 f9ae 	bl	800287e <_fstat>
 8012522:	1c43      	adds	r3, r0, #1
 8012524:	d102      	bne.n	801252c <_fstat_r+0x1c>
 8012526:	682b      	ldr	r3, [r5, #0]
 8012528:	b103      	cbz	r3, 801252c <_fstat_r+0x1c>
 801252a:	6023      	str	r3, [r4, #0]
 801252c:	bd38      	pop	{r3, r4, r5, pc}
 801252e:	bf00      	nop
 8012530:	200024f4 	.word	0x200024f4

08012534 <_isatty_r>:
 8012534:	b538      	push	{r3, r4, r5, lr}
 8012536:	2300      	movs	r3, #0
 8012538:	4d05      	ldr	r5, [pc, #20]	; (8012550 <_isatty_r+0x1c>)
 801253a:	4604      	mov	r4, r0
 801253c:	4608      	mov	r0, r1
 801253e:	602b      	str	r3, [r5, #0]
 8012540:	f7f0 f9ac 	bl	800289c <_isatty>
 8012544:	1c43      	adds	r3, r0, #1
 8012546:	d102      	bne.n	801254e <_isatty_r+0x1a>
 8012548:	682b      	ldr	r3, [r5, #0]
 801254a:	b103      	cbz	r3, 801254e <_isatty_r+0x1a>
 801254c:	6023      	str	r3, [r4, #0]
 801254e:	bd38      	pop	{r3, r4, r5, pc}
 8012550:	200024f4 	.word	0x200024f4

08012554 <_init>:
 8012554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012556:	bf00      	nop
 8012558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801255a:	bc08      	pop	{r3}
 801255c:	469e      	mov	lr, r3
 801255e:	4770      	bx	lr

08012560 <_fini>:
 8012560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012562:	bf00      	nop
 8012564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012566:	bc08      	pop	{r3}
 8012568:	469e      	mov	lr, r3
 801256a:	4770      	bx	lr
